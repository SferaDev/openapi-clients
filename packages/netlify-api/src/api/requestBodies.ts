/**
 * Generated by @openapi-codegen
 *
 * @version 2.37.0
 */
export type UpdateSiteMetadataMetadata = Record<string, any>;

export type CreateHookBySiteIdHook = {
  id?: string;
  site_id?: string;
  type?: string;
  event?: string;
  data?: Record<string, any>;
  /**
   * @format dateTime
   */
  created_at?: string;
  /**
   * @format dateTime
   */
  updated_at?: string;
  disabled?: boolean;
};

export type CreateSiteSnippetSnippet = {
  /**
   * @format int32
   */
  id?: number;
  site_id?: string;
  title?: string;
  general?: string;
  general_position?: string;
  goal?: string;
  goal_position?: string;
};

/**
 * @format binary
 */
export type UploadDeployFileFileBody = Blob;

export type CreateSiteBuildHookBuildhook = {
  title?: string;
  branch?: string;
};

export type CreateSiteSite = {
  id?: string;
  state?: string;
  plan?: string;
  name?: string;
  custom_domain?: string;
  domain_aliases?: string[];
  branch_deploy_custom_domain?: string;
  deploy_preview_custom_domain?: string;
  password?: string;
  notification_email?: string;
  url?: string;
  ssl_url?: string;
  admin_url?: string;
  screenshot_url?: string;
  /**
   * @format dateTime
   */
  created_at?: string;
  /**
   * @format dateTime
   */
  updated_at?: string;
  user_id?: string;
  session_id?: string;
  ssl?: boolean;
  force_ssl?: boolean;
  managed_dns?: boolean;
  deploy_url?: string;
  published_deploy?: {
    id?: string;
    site_id?: string;
    user_id?: string;
    build_id?: string;
    state?: string;
    name?: string;
    url?: string;
    ssl_url?: string;
    admin_url?: string;
    deploy_url?: string;
    deploy_ssl_url?: string;
    screenshot_url?: string;
    review_id?: number;
    draft?: boolean;
    required?: string[];
    required_functions?: string[];
    error_message?: string;
    branch?: string;
    commit_ref?: string;
    commit_url?: string;
    skipped?: boolean;
    /**
     * @format dateTime
     */
    created_at?: string;
    /**
     * @format dateTime
     */
    updated_at?: string;
    /**
     * @format dateTime
     */
    published_at?: string;
    title?: string;
    context?: string;
    locked?: boolean;
    review_url?: string;
    framework?: string;
    function_schedules?: {
      name?: string;
      cron?: string;
    }[];
  };
  account_id?: string;
  account_name?: string;
  account_slug?: string;
  git_provider?: string;
  deploy_hook?: string;
  capabilities?: {
    [key: string]: Record<string, any>;
  };
  processing_settings?: {
    html?: {
      pretty_urls?: boolean;
    };
  };
  build_settings?: {
    id?: number;
    provider?: string;
    deploy_key_id?: string;
    repo_path?: string;
    repo_branch?: string;
    dir?: string;
    functions_dir?: string;
    cmd?: string;
    allowed_branches?: string[];
    public_repo?: boolean;
    private_logs?: boolean;
    repo_url?: string;
    env?: {
      [key: string]: string;
    };
    installation_id?: number;
    stop_builds?: boolean;
  };
  id_domain?: string;
  default_hooks_data?: {
    access_token?: string;
  };
  build_image?: string;
  prerender?: string;
  functions_region?: string;
  repo?: {
    id?: number;
    provider?: string;
    deploy_key_id?: string;
    repo_path?: string;
    repo_branch?: string;
    dir?: string;
    functions_dir?: string;
    cmd?: string;
    allowed_branches?: string[];
    public_repo?: boolean;
    private_logs?: boolean;
    repo_url?: string;
    env?: {
      [key: string]: string;
    };
    installation_id?: number;
    stop_builds?: boolean;
  };
};

export type CreateSiteDeployDeploy = {
  files?: Record<string, any>;
  draft?: boolean;
  async?: boolean;
  functions?: Record<string, any>;
  function_schedules?: {
    name?: string;
    cron?: string;
  }[];
  functions_config?: {
    [key: string]: {
      display_name?: string;
      generator?: string;
      build_data?: Record<string, any>;
      routes?: {
        pattern?: string;
        literal?: string;
        expression?: string;
        methods?: ("GET" | "POST" | "PUT" | "PATCH" | "DELETE" | "OPTIONS")[];
        prefer_static?: boolean;
      }[];
      excluded_routes?: {
        pattern?: string;
        literal?: string;
        expression?: string;
      }[];
      priority?: number;
      traffic_rules?: {
        action?: {
          type?: string;
          config?: {
            to?: string;
            rate_limit_config?: {
              algorithm?: "sliding_window";
              window_size?: number;
              window_limit?: number;
            };
            aggregate?: {
              keys?: {
                type?: "ip" | "domain";
              }[];
            };
          };
        };
      };
    };
  };
  branch?: string;
  framework?: string;
  framework_version?: string;
};

export type CreateSplitTestBranchTests = {
  branch_tests?: Record<string, any>;
};

export type CreateSiteDevServerHookDevserverhook = {
  title?: string;
  branch?: string;
  type?: "new_dev_server" | "content_refresh";
};
