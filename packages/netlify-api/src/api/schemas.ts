/**
 * Generated by @openapi-codegen
 *
 * @version 2.22.0
 */
export type SplitTestSetup = {
  branch_tests?: Record<string, any>;
};

export type SplitTests = {
  id?: string;
  site_id?: string;
  name?: string;
  path?: string;
  branches?: Record<string, any>[];
  active?: boolean;
  /**
   * @format dateTime
   */
  created_at?: string;
  /**
   * @format dateTime
   */
  updated_at?: string;
  /**
   * @format dateTime
   */
  unpublished_at?: string;
}[];

export type SplitTest = {
  id?: string;
  site_id?: string;
  name?: string;
  path?: string;
  branches?: Record<string, any>[];
  active?: boolean;
  /**
   * @format dateTime
   */
  created_at?: string;
  /**
   * @format dateTime
   */
  updated_at?: string;
  /**
   * @format dateTime
   */
  unpublished_at?: string;
};

export type ServiceInstance = {
  id?: string;
  url?: string;
  config?: Record<string, any>;
  external_attributes?: Record<string, any>;
  service_slug?: string;
  service_path?: string;
  service_name?: string;
  env?: Record<string, any>;
  snippets?: Record<string, any>[];
  auth_url?: string;
  /**
   * @format dateTime
   */
  created_at?: string;
  /**
   * @format dateTime
   */
  updated_at?: string;
};

export type Service = {
  id?: string;
  name?: string;
  slug?: string;
  service_path?: string;
  long_description?: string;
  description?: string;
  events?: Record<string, any>[];
  tags?: string[];
  icon?: string;
  manifest_url?: string;
  environments?: string[];
  /**
   * @format dateTime
   */
  created_at?: string;
  /**
   * @format dateTime
   */
  updated_at?: string;
};

export type Site = {
  id?: string;
  state?: string;
  plan?: string;
  name?: string;
  custom_domain?: string;
  domain_aliases?: string[];
  branch_deploy_custom_domain?: string;
  deploy_preview_custom_domain?: string;
  password?: string;
  notification_email?: string;
  url?: string;
  ssl_url?: string;
  admin_url?: string;
  screenshot_url?: string;
  /**
   * @format dateTime
   */
  created_at?: string;
  /**
   * @format dateTime
   */
  updated_at?: string;
  user_id?: string;
  session_id?: string;
  ssl?: boolean;
  force_ssl?: boolean;
  managed_dns?: boolean;
  deploy_url?: string;
  published_deploy?: {
    id?: string;
    site_id?: string;
    user_id?: string;
    build_id?: string;
    state?: string;
    name?: string;
    url?: string;
    ssl_url?: string;
    admin_url?: string;
    deploy_url?: string;
    deploy_ssl_url?: string;
    screenshot_url?: string;
    review_id?: number;
    draft?: boolean;
    required?: string[];
    required_functions?: string[];
    error_message?: string;
    branch?: string;
    commit_ref?: string;
    commit_url?: string;
    skipped?: boolean;
    /**
     * @format dateTime
     */
    created_at?: string;
    /**
     * @format dateTime
     */
    updated_at?: string;
    /**
     * @format dateTime
     */
    published_at?: string;
    title?: string;
    context?: string;
    locked?: boolean;
    review_url?: string;
    site_capabilities?: {
      large_media_enabled?: boolean;
    };
    framework?: string;
    function_schedules?: {
      name?: string;
      cron?: string;
    }[];
  };
  account_name?: string;
  account_slug?: string;
  git_provider?: string;
  deploy_hook?: string;
  capabilities?: {
    [key: string]: Record<string, any>;
  };
  processing_settings?: {
    skip?: boolean;
    css?: {
      bundle?: boolean;
      minify?: boolean;
    };
    js?: {
      bundle?: boolean;
      minify?: boolean;
    };
    images?: {
      optimize?: boolean;
    };
    html?: {
      pretty_urls?: boolean;
    };
  };
  build_settings?: {
    id?: number;
    provider?: string;
    deploy_key_id?: string;
    repo_path?: string;
    repo_branch?: string;
    dir?: string;
    functions_dir?: string;
    cmd?: string;
    allowed_branches?: string[];
    public_repo?: boolean;
    private_logs?: boolean;
    repo_url?: string;
    env?: {
      [key: string]: string;
    };
    installation_id?: number;
    stop_builds?: boolean;
  };
  id_domain?: string;
  default_hooks_data?: {
    access_token?: string;
  };
  build_image?: string;
  prerender?: string;
};

export type SiteSetup = {
  id?: string;
  state?: string;
  plan?: string;
  name?: string;
  custom_domain?: string;
  domain_aliases?: string[];
  branch_deploy_custom_domain?: string;
  deploy_preview_custom_domain?: string;
  password?: string;
  notification_email?: string;
  url?: string;
  ssl_url?: string;
  admin_url?: string;
  screenshot_url?: string;
  /**
   * @format dateTime
   */
  created_at?: string;
  /**
   * @format dateTime
   */
  updated_at?: string;
  user_id?: string;
  session_id?: string;
  ssl?: boolean;
  force_ssl?: boolean;
  managed_dns?: boolean;
  deploy_url?: string;
  published_deploy?: {
    id?: string;
    site_id?: string;
    user_id?: string;
    build_id?: string;
    state?: string;
    name?: string;
    url?: string;
    ssl_url?: string;
    admin_url?: string;
    deploy_url?: string;
    deploy_ssl_url?: string;
    screenshot_url?: string;
    review_id?: number;
    draft?: boolean;
    required?: string[];
    required_functions?: string[];
    error_message?: string;
    branch?: string;
    commit_ref?: string;
    commit_url?: string;
    skipped?: boolean;
    /**
     * @format dateTime
     */
    created_at?: string;
    /**
     * @format dateTime
     */
    updated_at?: string;
    /**
     * @format dateTime
     */
    published_at?: string;
    title?: string;
    context?: string;
    locked?: boolean;
    review_url?: string;
    site_capabilities?: {
      large_media_enabled?: boolean;
    };
    framework?: string;
    function_schedules?: {
      name?: string;
      cron?: string;
    }[];
  };
  account_name?: string;
  account_slug?: string;
  git_provider?: string;
  deploy_hook?: string;
  capabilities?: {
    [key: string]: Record<string, any>;
  };
  processing_settings?: {
    skip?: boolean;
    css?: {
      bundle?: boolean;
      minify?: boolean;
    };
    js?: {
      bundle?: boolean;
      minify?: boolean;
    };
    images?: {
      optimize?: boolean;
    };
    html?: {
      pretty_urls?: boolean;
    };
  };
  build_settings?: {
    id?: number;
    provider?: string;
    deploy_key_id?: string;
    repo_path?: string;
    repo_branch?: string;
    dir?: string;
    functions_dir?: string;
    cmd?: string;
    allowed_branches?: string[];
    public_repo?: boolean;
    private_logs?: boolean;
    repo_url?: string;
    env?: {
      [key: string]: string;
    };
    installation_id?: number;
    stop_builds?: boolean;
  };
  id_domain?: string;
  default_hooks_data?: {
    access_token?: string;
  };
  build_image?: string;
  prerender?: string;
  repo?: {
    id?: number;
    provider?: string;
    deploy_key_id?: string;
    repo_path?: string;
    repo_branch?: string;
    dir?: string;
    functions_dir?: string;
    cmd?: string;
    allowed_branches?: string[];
    public_repo?: boolean;
    private_logs?: boolean;
    repo_url?: string;
    env?: {
      [key: string]: string;
    };
    installation_id?: number;
    stop_builds?: boolean;
  };
};

export type RepoInfo = {
  id?: number;
  provider?: string;
  deploy_key_id?: string;
  repo_path?: string;
  repo_branch?: string;
  dir?: string;
  functions_dir?: string;
  cmd?: string;
  allowed_branches?: string[];
  public_repo?: boolean;
  private_logs?: boolean;
  repo_url?: string;
  env?: {
    [key: string]: string;
  };
  installation_id?: number;
  stop_builds?: boolean;
};

export type Submission = {
  id?: string;
  /**
   * @format int32
   */
  number?: number;
  email?: string;
  name?: string;
  first_name?: string;
  last_name?: string;
  company?: string;
  summary?: string;
  body?: string;
  data?: Record<string, any>;
  /**
   * @format dateTime
   */
  created_at?: string;
  site_url?: string;
};

/**
 * Environment variable model definition
 */
export type EnvVar = {
  /**
   * The environment variable key, like ALGOLIA_ID (case-sensitive)
   *
   * @x-faker commerce.productName
   */
  key?: string;
  /**
   * The scopes that this environment variable is set to
   */
  scopes?: ('builds' | 'functions' | 'runtime' | 'post-processing')[];
  /**
   * An array of Value objects containing values and metadata
   *
   * @x-faker internet.password
   */
  values?: {
    /**
     * The environment variable value's universally unique ID
     *
     * @x-faker datatype.uuid
     */
    id?: string;
    /**
     * The environment variable's unencrypted value
     *
     * @x-faker internet.password
     */
    value?: string;
    /**
     * The deploy context in which this value will be used. `dev` refers to local development when running `netlify dev`.
     */
    context?: 'all' | 'dev' | 'branch-deploy' | 'deploy-preview' | 'production' | 'branch';
    /**
     * An additional parameter for custom branches. Currently, this is used for specifying a branch name when `context=branch`.
     */
    context_parameter?: string;
  }[];
  /**
   * Secret values are only readable by code running on Netlifyâ€™s systems. With secrets, only the local development context values are readable from the UI, API, and CLI. By default, environment variable values are not secret. (Enterprise plans only)
   */
  is_secret?: boolean;
  /**
   * The timestamp of when the value was last updated
   *
   * @format date-time
   * @x-faker date.past
   */
  updated_at?: string;
  updated_by?: {
    /**
     * The user's unique identifier
     *
     * @x-faker datatype.number
     */
    id?: string;
    /**
     * The user's full name (first and last)
     *
     * @x-faker name.findName
     */
    full_name?: string;
    /**
     * The user's email address
     *
     * @x-faker internet.email
     */
    email?: string;
    /**
     * A URL pointing to the user's avatar
     *
     * @x-faker internet.avatar
     */
    avatar_url?: string;
  };
};

/**
 * Environment variable value model definition
 */
export type EnvVarValue = {
  /**
   * The environment variable value's universally unique ID
   *
   * @x-faker datatype.uuid
   */
  id?: string;
  /**
   * The environment variable's unencrypted value
   *
   * @x-faker internet.password
   */
  value?: string;
  /**
   * The deploy context in which this value will be used. `dev` refers to local development when running `netlify dev`.
   */
  context?: 'all' | 'dev' | 'branch-deploy' | 'deploy-preview' | 'production' | 'branch';
  /**
   * An additional parameter for custom branches. Currently, this is used for specifying a branch name when `context=branch`.
   */
  context_parameter?: string;
};

export type EnvVarUser = {
  /**
   * The user's unique identifier
   *
   * @x-faker datatype.number
   */
  id?: string;
  /**
   * The user's full name (first and last)
   *
   * @x-faker name.findName
   */
  full_name?: string;
  /**
   * The user's email address
   *
   * @x-faker internet.email
   */
  email?: string;
  /**
   * A URL pointing to the user's avatar
   *
   * @x-faker internet.avatar
   */
  avatar_url?: string;
};

export type Form = {
  id?: string;
  site_id?: string;
  name?: string;
  paths?: string[];
  /**
   * @format int32
   */
  submission_count?: number;
  fields?: Record<string, any>[];
  /**
   * @format dateTime
   */
  created_at?: string;
};

export type HookType = {
  name?: string;
  events?: string[];
  fields?: Record<string, any>[];
};

export type Hook = {
  id?: string;
  site_id?: string;
  type?: string;
  event?: string;
  data?: Record<string, any>;
  /**
   * @format dateTime
   */
  created_at?: string;
  /**
   * @format dateTime
   */
  updated_at?: string;
  disabled?: boolean;
};

export type File = {
  id?: string;
  path?: string;
  sha?: string;
  mime_type?: string;
  /**
   * @format int64
   */
  size?: number;
};

export type Function = {
  id?: string;
  name?: string;
  sha?: string;
};

export type Snippet = {
  /**
   * @format int32
   */
  id?: number;
  site_id?: string;
  title?: string;
  general?: string;
  general_position?: string;
  goal?: string;
  goal_position?: string;
};

export type Deploy = {
  id?: string;
  site_id?: string;
  user_id?: string;
  build_id?: string;
  state?: string;
  name?: string;
  url?: string;
  ssl_url?: string;
  admin_url?: string;
  deploy_url?: string;
  deploy_ssl_url?: string;
  screenshot_url?: string;
  review_id?: number;
  draft?: boolean;
  required?: string[];
  required_functions?: string[];
  error_message?: string;
  branch?: string;
  commit_ref?: string;
  commit_url?: string;
  skipped?: boolean;
  /**
   * @format dateTime
   */
  created_at?: string;
  /**
   * @format dateTime
   */
  updated_at?: string;
  /**
   * @format dateTime
   */
  published_at?: string;
  title?: string;
  context?: string;
  locked?: boolean;
  review_url?: string;
  site_capabilities?: {
    large_media_enabled?: boolean;
  };
  framework?: string;
  function_schedules?: {
    name?: string;
    cron?: string;
  }[];
};

export type DeployFiles = {
  files?: Record<string, any>;
  draft?: boolean;
  async?: boolean;
  functions?: Record<string, any>;
  function_schedules?: {
    name?: string;
    cron?: string;
  }[];
  functions_config?: {
    [key: string]: {
      display_name?: string;
      generator?: string;
      build_data?: Record<string, any>;
      routes?: {
        pattern?: string;
        literal?: string;
        expression?: string;
        methods?: ('GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS')[];
      }[];
    };
  };
  branch?: string;
  framework?: string;
};

export type PluginParams = {
  pinned_version?: string;
};

export type Plugin = {
  package?: string;
  pinned_version?: string;
};

export type BuildStatus = {
  active?: number;
  pending_concurrency?: number;
  enqueued?: number;
  build_count?: number;
  minutes?: {
    current?: number;
    current_average_sec?: number;
    previous?: number;
    /**
     * @format dateTime
     */
    period_start_date?: string;
    /**
     * @format dateTime
     */
    period_end_date?: string;
    /**
     * @format dateTime
     */
    last_updated_at?: string;
    included_minutes?: string;
    included_minutes_with_packs?: string;
  };
};

export type Build = {
  id?: string;
  deploy_id?: string;
  sha?: string;
  done?: boolean;
  error?: string;
  /**
   * @format dateTime
   */
  created_at?: string;
};

export type BuildLogMsg = {
  message?: string;
  error?: boolean;
  section?: 'initializing' | 'building' | 'deploying' | 'cleanup' | 'postprocessing';
};

export type PluginRunData = {
  package?: string;
  version?: string;
  state?: string;
  reporting_event?: string;
  title?: string;
  summary?: string;
  text?: string;
};

export type PluginRun = {
  package?: string;
  version?: string;
  state?: string;
  reporting_event?: string;
  title?: string;
  summary?: string;
  text?: string;
  deploy_id?: string;
};

export type Metadata = Record<string, any>;

export type DnsZoneSetup = {
  account_slug?: string;
  site_id?: string;
  name?: string;
};

export type DnsZones = {
  id?: string;
  name?: string;
  errors?: string[];
  supported_record_types?: string[];
  user_id?: string;
  /**
   * @format dateTime
   */
  created_at?: string;
  /**
   * @format dateTime
   */
  updated_at?: string;
  records?: {
    id?: string;
    hostname?: string;
    type?: string;
    value?: string;
    /**
     * @format int64
     */
    ttl?: number;
    /**
     * @format int64
     */
    priority?: number;
    dns_zone_id?: string;
    site_id?: string;
    flag?: number;
    tag?: string;
    managed?: boolean;
  }[];
  dns_servers?: string[];
  account_id?: string;
  site_id?: string;
  account_slug?: string;
  account_name?: string;
  domain?: string;
  ipv6_enabled?: boolean;
  dedicated?: boolean;
}[];

export type DnsZone = {
  id?: string;
  name?: string;
  errors?: string[];
  supported_record_types?: string[];
  user_id?: string;
  /**
   * @format dateTime
   */
  created_at?: string;
  /**
   * @format dateTime
   */
  updated_at?: string;
  records?: {
    id?: string;
    hostname?: string;
    type?: string;
    value?: string;
    /**
     * @format int64
     */
    ttl?: number;
    /**
     * @format int64
     */
    priority?: number;
    dns_zone_id?: string;
    site_id?: string;
    flag?: number;
    tag?: string;
    managed?: boolean;
  }[];
  dns_servers?: string[];
  account_id?: string;
  site_id?: string;
  account_slug?: string;
  account_name?: string;
  domain?: string;
  ipv6_enabled?: boolean;
  dedicated?: boolean;
};

export type DnsRecordCreate = {
  type?: string;
  hostname?: string;
  value?: string;
  /**
   * @format int64
   */
  ttl?: number;
  /**
   * @format int64
   */
  priority?: number;
  /**
   * @format int64
   */
  weight?: number;
  /**
   * @format int64
   */
  port?: number;
  /**
   * @format int64
   */
  flag?: number;
  tag?: string;
};

export type DnsRecords = {
  id?: string;
  hostname?: string;
  type?: string;
  value?: string;
  /**
   * @format int64
   */
  ttl?: number;
  /**
   * @format int64
   */
  priority?: number;
  dns_zone_id?: string;
  site_id?: string;
  flag?: number;
  tag?: string;
  managed?: boolean;
}[];

export type DnsRecord = {
  id?: string;
  hostname?: string;
  type?: string;
  value?: string;
  /**
   * @format int64
   */
  ttl?: number;
  /**
   * @format int64
   */
  priority?: number;
  dns_zone_id?: string;
  site_id?: string;
  flag?: number;
  tag?: string;
  managed?: boolean;
};

export type SniCertificate = {
  state?: string;
  domains?: string[];
  /**
   * @format dateTime
   */
  created_at?: string;
  /**
   * @format dateTime
   */
  updated_at?: string;
  /**
   * @format dateTime
   */
  expires_at?: string;
};

export type Ticket = {
  id?: string;
  client_id?: string;
  authorized?: boolean;
  /**
   * @format dateTime
   */
  created_at?: string;
};

export type AccessToken = {
  id?: string;
  access_token?: string;
  user_id?: string;
  user_email?: string;
  /**
   * @format dateTime
   */
  created_at?: string;
};

export type Asset = {
  id?: string;
  site_id?: string;
  creator_id?: string;
  name?: string;
  state?: string;
  content_type?: string;
  url?: string;
  key?: string;
  visibility?: string;
  /**
   * @format int64
   */
  size?: number;
  /**
   * @format dateTime
   */
  created_at?: string;
  /**
   * @format dateTime
   */
  updated_at?: string;
};

export type AssetForm = {
  url?: string;
  fields?: {
    [key: string]: string;
  };
};

export type AssetSignature = {
  form?: {
    url?: string;
    fields?: {
      [key: string]: string;
    };
  };
  asset?: {
    id?: string;
    site_id?: string;
    creator_id?: string;
    name?: string;
    state?: string;
    content_type?: string;
    url?: string;
    key?: string;
    visibility?: string;
    /**
     * @format int64
     */
    size?: number;
    /**
     * @format dateTime
     */
    created_at?: string;
    /**
     * @format dateTime
     */
    updated_at?: string;
  };
};

export type AssetPublicSignature = {
  url?: string;
};

export type DeployKey = {
  id?: string;
  public_key?: string;
  /**
   * @format dateTime
   */
  created_at?: string;
};

export type Member = {
  id?: string;
  full_name?: string;
  email?: string;
  avatar?: string;
  role?: string;
};

export type PaymentMethod = {
  id?: string;
  method_name?: string;
  type?: string;
  state?: string;
  data?: {
    card_type?: string;
    last4?: string;
    email?: string;
  };
  /**
   * @format dateTime
   */
  created_at?: string;
  /**
   * @format dateTime
   */
  updated_at?: string;
};

export type AccountType = {
  id?: string;
  name?: string;
  description?: string;
  capabilities?: Record<string, any>;
  monthly_dollar_price?: number;
  yearly_dollar_price?: number;
  monthly_seats_addon_dollar_price?: number;
  yearly_seats_addon_dollar_price?: number;
};

export type AccountSetup = {
  name: string;
  type_id: string;
  payment_method_id?: string;
  period?: 'monthly' | 'yearly';
  extra_seats_block?: number;
};

export type AccountUpdateSetup = {
  name?: string;
  slug?: string;
  type_id?: string;
  extra_seats_block?: number;
  billing_name?: string;
  billing_email?: string;
  billing_details?: string;
};

export type AccountAddMemberSetup = {
  role?: 'Owner' | 'Collaborator' | 'Controller';
  email?: string;
};

export type AccountUpdateMemberSetup = {
  role?: 'Owner' | 'Collaborator' | 'Controller';
  site_access?: 'all' | 'none' | 'selected';
  site_ids?: string[];
};

export type AccountMembership = {
  id?: string;
  name?: string;
  slug?: string;
  type?: string;
  capabilities?: {
    sites?: {
      included?: number;
      used?: number;
    };
    collaborators?: {
      included?: number;
      used?: number;
    };
  };
  billing_name?: string;
  billing_email?: string;
  billing_details?: string;
  billing_period?: string;
  payment_method_id?: string;
  type_name?: string;
  type_id?: string;
  owner_ids?: string[];
  roles_allowed?: string[];
  /**
   * @format dateTime
   */
  created_at?: string;
  /**
   * @format dateTime
   */
  updated_at?: string;
};

export type AuditLog = {
  id?: string;
  account_id?: string;
  payload?: {
    actor_id?: string;
    actor_name?: string;
    actor_email?: string;
    action?: string;
    /**
     * @format dateTime
     */
    timestamp?: string;
    log_type?: string;
  } & {
    [key: string]: Record<string, any>;
  };
};

export type AccountUsageCapability = {
  included?: number;
  used?: number;
};

export type MinifyOptions = {
  bundle?: boolean;
  minify?: boolean;
};

export type BuildSetup = {
  image?: string;
  clear_cache?: boolean;
};

export type BuildHookSetup = {
  title?: string;
  branch?: string;
};

export type BuildHook = {
  id?: string;
  title?: string;
  branch?: string;
  url?: string;
  site_id?: string;
  /**
   * @format dateTime
   */
  created_at?: string;
};

export type DeployedBranch = {
  id?: string;
  deploy_id?: string;
  name?: string;
  slug?: string;
  url?: string;
  ssl_url?: string;
};

export type User = {
  id?: string;
  uid?: string;
  full_name?: string;
  avatar_url?: string;
  email?: string;
  affiliate_id?: string;
  /**
   * @format int64
   */
  site_count?: number;
  /**
   * @format dateTime
   */
  created_at?: string;
  /**
   * @format dateTime
   */
  last_login?: string;
  login_providers?: string[];
  onboarding_progress?: {
    slides?: string;
  };
};

export type Error = {
  /**
   * @format int64
   */
  code?: number;
  message: string;
};

export type FunctionSchedule = {
  name?: string;
  cron?: string;
};

export type FunctionConfig = {
  display_name?: string;
  generator?: string;
  build_data?: Record<string, any>;
  routes?: {
    pattern?: string;
    literal?: string;
    expression?: string;
    methods?: ('GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS')[];
  }[];
};

export type FunctionRoute = {
  pattern?: string;
  literal?: string;
  expression?: string;
  methods?: ('GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS')[];
};
