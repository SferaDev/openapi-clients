/**
 * Generated by @openapi-codegen
 *
 * @version 2
 */
import type * as Fetcher from "./fetcher";
import { fetch, FetcherExtraProps } from "./fetcher";

export type ListArchivedFilesQueryParams = {
  /**
   * The number of records returned within a single API call.
   *
   * @maximum 300
   * @example 30
   * @default 30
   */
  page_size?: number;
  /**
   * Use the next page token to paginate through large result sets. A next page token is returned whenever the set of available results exceeds the current page size. This token's expiration period is 15 minutes.
   *
   * @example IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2
   */
  next_page_token?: string;
  /**
   * The query start date, in `yyyy-MM-dd'T'HH:mm:ssZ` format. This value and the `to` query parameter value cannot exceed seven days.
   *
   * @format date-time
   * @example 2021-03-11T05:41:36Z
   */
  from?: string;
  /**
   * The query end date, in `yyyy-MM-dd'T'HH:mm:ssZ` format. This value and the `from` query parameter value cannot exceed seven days.
   *
   * @format date-time
   * @example 2021-03-18T05:41:36Z
   */
  to?: string;
  /**
   * The type of query date.
   * * `meeting_start_time`
   * * `archive_complete_time`
   *
   *  This value defaults to `meeting_start_time`.
   *
   * @example meeting_start_time
   * @default meeting_start_time
   */
  query_date_type?: "meeting_start_time" | "archive_complete_time";
  /**
   * Deprecated. Please use 'group_ids' for querying.
   *
   * @example pvFIYKSDTum9iCDOOtQL4w
   * @deprecated true
   */
  group_id?: string;
  /**
   * The group IDs. To get a group ID, use the [List groups](/docs/api/rest/reference/scim-api/methods/#operation/groupSCIM2List) API.
   * (The maximum number of supported groups for filtering is 7.)
   *
   * @example CVCF1k8ZR3e52ChmEzlNxA,lwQiDh2kS0WaawetgMjtfw
   */
  group_ids?: string;
};

export type ListArchivedFilesError = Fetcher.ErrorWrapper<undefined>;

export type ListArchivedFilesResponse = {
  /**
   * The queried start date.
   *
   * @format date-time
   * @example 2021-03-12T02:12:27Z
   */
  from?: string;
  /**
   * Information about the meeting or webinar.
   */
  meetings?: {
    /**
     * The user's account name.
     *
     * @example account_01
     */
    account_name: string;
    /**
     * Information about the archive files.
     */
    archive_files: {
      /**
       * The URL to download the the archive file.
       *
       *  **OAuth apps**
       *
       *  If a user has authorized and installed your OAuth app that contains recording scopes, use the user's [OAuth access token](/docs/integrations/oauth/) to download the file. For example, `https://{{base-domain}}/rec/archive/download/xxx--header 'Authorization: Bearer {{OAuth-access-token}}'`
       *
       *  **Note:** This field does **not** return for [Zoom on-premise accounts](https://support.zoom.us/hc/en-us/articles/360034064852-Zoom-On-Premise-Deployment). Instead, this API will return the `file_path` field.
       *
       * @example https://example.com/recording/download/Qg75t7xZBtEbAkjdlgbfdngBBBB
       */
      download_url: string;
      /**
       * The archived file's extension.
       *
       * @example JSON
       */
      file_extension: string;
      /**
       * The file path to the on-premise account archive file.
       *
       *  **Note:** The API only returns this field for [Zoom on-premise accounts](https://support.zoom.us/hc/en-us/articles/360034064852-Zoom-On-Premise-Deployment). It does **not** return the `download_url` field.
       *
       * @example /9090876528/path01/demo.mp4
       */
      file_path?: string;
      /**
       * The archived file's size, in bytes.
       *
       * @example 165743
       */
      file_size: number;
      /**
       * The archive file's type.
       * * `MP4` - Video file.
       * * `M4A` - Audio-only file.
       * * `CHAT` - A TXT file containing in-meeting chat messages.
       * * `CC` - A file containing the closed captions of the recording, in VTT file format.
       * *  `CHAT_MESSAGE` - A JSON file encoded in base64 format containing chat messages. The file also includes waiting room chats, deleted messages, meeting emojis and non-verbal feedback.
       * *  `TRANSCRIPT` - A JSON file include audio transcript wording.
       * * `SUB_GROUP_MEMBER_LOG` - A json file containing records of members entering and leaving the subgroup.
       * * `AIC_COVERSATION` - A json file include internal user archive aic content.
       *
       * @example CHAT
       */
      file_type:
        | "MP4"
        | "M4A"
        | "CHAT"
        | "CC"
        | "CHAT_MESSAGE"
        | "TRANSCRIPT"
        | "SUB_GROUP_MEMBER_LOG"
        | "AIC_COVERSATION";
      /**
       * The archive file's unique ID.
       *
       * @example a2f19f96-9294-4f51-8134-6f0eea108eb2
       */
      id: string;
      /**
       * Whether the archive file is an individual recording file.
       * * `true` - An individual recording file.
       *  * `false` - An entire meeting file.
       *
       * @example true
       */
      individual: boolean;
      /**
       * The individual recording file's participant email address. This value is returned when the `individual` value is `true`. If the participant is **not** part of the host's account, this returns an empty string value, with some exceptions. See [Email address display rules](/docs/api/using-zoom-apis/#email-address-display-rules) for details.
       *
       * @format email
       * @example jchill@example.com
       */
      participant_email?: string;
      /**
       * The join time for the generated recording file. If this value is returned when the individual value is `true`, it is the recording file's participant join time. When the individual value is `false`, it returns the join time for the archiving gateway.
       *
       * @format date-time
       * @example 2021-03-12T02:07:27Z
       */
      participant_join_time: string;
      /**
       * The leave time for the generated recording file. If this value is returned when the individual value is `true`, it is the recording file's participant leave time. When the individual value is `false`, it returns the leave time for the archiving gateway.
       *
       * @format date-time
       * @example 2021-03-12T02:12:27Z
       */
      participant_leave_time: string;
      /**
       * The archive file's recording type.
       * * `shared_screen_with_speaker_view`
       * * `audio_only`
       * * `chat_file`
       * * `closed_caption`
       * * `chat_message`
       * * `audio_transcript`
       * * `aic_conversation`
       *
       *  For more information, read our [Managing and sharing cloud recordings](https://support.zoom.us/hc/en-us/articles/205347605-Managing-and-sharing-cloud-recordings#h_9898497b-e736-4980-a749-d55608f10773) documentation.
       *
       * @example chat_message
       */
      recording_type:
        | "shared_screen_with_speaker_view"
        | "audio_only"
        | "chat_file"
        | "closed_caption"
        | "chat_message"
        | "audio_transcript"
        | "aic_conversation";
      /**
       * The archived file's processing status.
       * * `completed` - The processing of the file is complete.
       * * `processing` - The file is processing.
       * * `failed` - The processing of the file failed.
       *
       * @example completed
       */
      status: "completed" | "processing" | "failed";
      /**
       * The archived file's encryption fingerprint, using the SHA256 hash algorithm.
       *
       * @example abf85f0fe6a4db3cdd8c37e505e1dd18a34d9696170a14b5bc6395677472cf43
       */
      encryption_fingerprint: string;
      /**
       * The number of `TXT` or `JSON` file messages. This field returns only when the `file_extension` is `JSON` or `TXT`.
       *
       * @example 150
       */
      number_of_messages?: number;
      /**
       * The region where the file is stored. This field returns only `Enable Distributed Compliance Archiving` op feature is enabled.
       *
       * @example US
       */
      storage_location?:
        | "US"
        | "AU"
        | "BR"
        | "CA"
        | "EU"
        | "IN"
        | "JP"
        | "SG"
        | "CH";
      /**
       * Whether to auto delete the archived file.
       *
       * **Prerequisites:**
       *
       * Enable the "Tag Archiving Files for Deletion" feature in OP. Contact [Zoom Support](https://support.zoom.us/hc/en-us/articles/201362003) to open.
       *
       * @example false
       */
      auto_delete?: boolean;
    }[];
    /**
     * The meeting or webinar's archive completion time.
     *
     * @format date-time
     * @example 2021-03-12T02:57:27Z
     */
    complete_time: Record<string, any> | "";
    /**
     * The meeting or webinar's scheduled duration.
     *
     * @example 1
     */
    duration: number;
    /**
     * The meeting or webinar's duration, in seconds.
     *
     * @example 1800
     */
    duration_in_second: number;
    /**
     * The ID of the user set as the host of the archived meeting or webinar.
     *
     * @example Dhjdfgdkg8w
     */
    host_id: string;
    /**
     * The meeting or webinar ID, either `meetingId` or `webinarId`.
     *
     * @format int64
     * @example 553068284
     */
    id: number;
    /**
     * Whether the room is a [breakout room](https://support.zoom.us/hc/en-us/articles/115005769646-Participating-in-breakout-rooms).
     *
     * @example false
     */
    is_breakout_room: boolean;
    /**
     * Whether the meeting or webinar is internal or external.
     * * `internal` - An internal meeting or webinar.
     * * `external` - An external meeting or webinar.
     *
     *  The `id`, `host_id`, and `topic` PII (Personal Identifiable Information) values in this response are removed when this value is `external`.
     *
     * @example internal
     */
    meeting_type: "internal" | "external";
    /**
     * The parent meeting's universally unique ID (UUID). Each meeting or webinar instance generates a UUID. If the `is_breakout_room` value is `true`, the API returns this value.
     *
     * @example atsXxhSEQWit9t+U02HXNQ==
     */
    parent_meeting_id?: string;
    /**
     * The number of archived files returned in the API call response.
     *
     * @example 2
     */
    recording_count: number;
    /**
     * The meeting or webinar's start time.
     *
     * @format date-time
     * @example 2021-04-26T05:23:18Z
     */
    start_time: string;
    /**
     * The meeting or webinar's [timezone](/docs/api/references/abbreviations/#timezones).
     *
     * @example Asia/Shanghai
     */
    timezone: string;
    /**
     * The meeting or webinar topic.
     *
     * @example My Personal Meeting Room
     */
    topic: string;
    /**
     * The total size of the archive file, in bytes.
     *
     * @example 364463
     */
    total_size: number;
    /**
     * The type of archived meeting or webinar.
     *
     *  Meeting recordings use these archive types.
     * * `1` - Instant meeting.
     * * `2` - Scheduled meeting.
     * * `3` - A recurring meeting with no fixed time.
     * * `4` - A meeting created via PMI (Personal Meeting ID).
     * * `7` - A [Personal Audio Conference](https://support.zoom.us/hc/en-us/articles/204517069-Getting-Started-with-Personal-Audio-Conference) (PAC).
     * * `8` - Recurring meeting with a fixed time.
     *
     *  Webinar recordings use these archive types.
     * * `5` - A webinar.
     * * `6` - A recurring webinar without a fixed time.
     * * `9` - A recurring webinar with a fixed time.
     *
     *  If the recording is **not** from a meeting or webinar:
     *
     * * `100` - A [breakout room](https://support.zoom.us/hc/en-us/articles/115005769646-Participating-in-breakout-rooms).
     *
     * @example 1
     */
    type: 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 100;
    /**
     * The recorded meeting or webinar instance's universally unique identifier (UUID). Each meeting or webinar instance generates a UUID.
     *
     * @example yO3dfhh3t467UkQ==
     */
    uuid: string;
    /**
     * The archive's processing status.
     * * `completed` - The archive's processing is complete.
     * * `processing` - The archive is processing.
     *
     * @example completed
     */
    status: "completed" | "processing";
    /**
     * Primary group IDs of participants who belong to your account. Each group ID is separated by a comma.
     *
     * @example pvFIYKSDTum9iCDOOtQL4w,_FsqLyI0RlO6LVPeUVWi8g
     */
    group_id?: string;
    /**
     * Information about the physical files.
     */
    physical_files?: {
      /**
       * The physical file's unique ID.
       *
       * @example pvKocCqVSMygaOcKus5Afw
       */
      file_id?: string;
      /**
       * The physical file's name.
       *
       * @example Screenshot 2025-02-12 at 10.42.27 AM.png
       */
      file_name?: string;
      /**
       * The physical file's size, in bytes.
       *
       * @example 540680
       */
      file_size?: number;
      /**
       * The URL to download the the archive file.
       *
       *  **OAuth apps**
       *
       *  If a user has authorized and installed your OAuth app that contains recording scopes, use the user's [OAuth access token](/docs/integrations/oauth/) to download the file.
       *
       *  Example:
       *
       *  `https://{{base-domain}}/rec/archive/attached/download/xxx--header 'Authorization: Bearer {{OAuth-access-token}}'`
       *
       * @example https://example.com/rec/archive/attached/download/HBAXbHc15BXbnq0JoDu6tc5MWlww9MAo9JJq2d14VAWkpcT5FEA.AK5calud4EJB7bMq
       */
      download_url?: string;
    }[];
  }[];
  /**
   * Use the next page token to paginate through large result sets. A next page token is returned whenever the set of available results exceeds the current page size. This token's expiration period is 15 minutes.
   *
   *  **Note:** if you use `next_page_token` as a parameter, your other request parameters should be changeless to make sure that the large result set is what you want. For example, if your `to` parameter is for a future time, Zoom resets this value to the current time and returns this value in the response body, along with the `next_page_token` value. Use these same `to` and `next_page_token` values in requests for the remaining results set; otherwise you will get an invalid token error.
   *
   * @example At6eWnFZ1FB3arCXnRxqHLXKhbDW18yz2i2
   */
  next_page_token?: string;
  /**
   * The number of records returned within a single API call.
   *
   * @example 20
   */
  page_size?: number;
  /**
   * The queried end date.
   *
   * @format date-time
   * @example 2021-03-12T02:12:27Z
   */
  to?: string;
  /**
   * The total number of returned meeting records.
   *
   * @example 20
   */
  total_records?: number;
};

export type ListArchivedFilesVariables = {
  queryParams?: ListArchivedFilesQueryParams;
} & FetcherExtraProps;

/**
 * Get an account's archived meeting or webinar files.
 *
 *  Zoom's [archiving solution](https://support.zoom.us/hc/en-us/articles/360050431572-Archiving-indicators) lets account administrators set up an automated mechanism to record, collect, and archive meeting data to a third-party platform of their choice to satisfy FINRA or other compliance requirements.
 *
 *  **Prerequisites:**
 * * The [**Meeting and Webinar Archiving** feature](https://support.zoom.us/hc/en-us/articles/4405656451213--Archiving-for-meetings-and-webinars) enabled for your account by [Zoom Support](https://support.zoom.us/hc/en-us/articles/201362003).
 *
 * **[Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `recording:read:admin`
 *
 * **[Granular Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `archiving:read:list_archived_files:admin`,`archiving:read:list_archived_files:master`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
 */
export const listArchivedFiles = (
  variables: ListArchivedFilesVariables,
  signal?: AbortSignal,
) =>
  fetch<
    ListArchivedFilesResponse,
    ListArchivedFilesError,
    undefined,
    {},
    ListArchivedFilesQueryParams,
    {}
  >({ url: "/archive_files", method: "get", ...variables, signal });

export type GetArchivedFileStatisticsQueryParams = {
  /**
   * The query start date, in `yyyy-MM-dd'T'HH:mm:ssZ` format. This value and the `to` query parameter value cannot exceed seven days.
   *
   * @format date-time
   * @example 2021-03-11T05:41:36Z
   */
  from?: string;
  /**
   * The query end date, in `yyyy-MM-dd'T'HH:mm:ssZ` format. This value and the `from` query parameter value cannot exceed seven days.
   *
   * @format date-time
   * @example 2021-03-18T05:41:36Z
   */
  to?: string;
};

export type GetArchivedFileStatisticsError = Fetcher.ErrorWrapper<undefined>;

export type GetArchivedFileStatisticsResponse = {
  /**
   * The queried start date.
   *
   * @format date-time
   * @example 2021-03-18T05:41:36Z
   */
  from?: string;
  /**
   * The queried end date.
   *
   * @format date-time
   * @example 2021-03-18T05:41:36Z
   */
  to?: string;
  /**
   * The total number of returned meeting records.
   *
   * @example 20
   */
  total_records?: number;
  /**
   * Statistics about archive files, by file extension.
   */
  statistic_by_file_extension?: {
    /**
     * The number of mp4 files.
     *
     * @example 1
     */
    mp4_file_count?: number;
    /**
     * The number of m4a files.
     *
     * @example 1
     */
    m4a_file_count?: number;
    /**
     * The number of txt files.
     *
     * @example 1
     */
    txt_file_count?: number;
    /**
     * The number of json files.
     *
     * @example 1
     */
    json_file_count?: number;
    /**
     * The number of vtt files.
     *
     * @example 1
     */
    vtt_file_count?: number;
  };
  /**
   * Statistics about archive files, by file status.
   */
  statistic_by_file_status?: {
    /**
     * The number of processing files.
     *
     * @example 1
     */
    processing_file_count?: number;
    /**
     * The number of completed files.
     *
     * @example 1
     */
    completed_file_count?: number;
    /**
     * The number of failed files.
     *
     * @example 1
     */
    failed_file_count?: number;
  };
};

export type GetArchivedFileStatisticsVariables = {
  queryParams?: GetArchivedFileStatisticsQueryParams;
} & FetcherExtraProps;

/**
 * Get statistics about an account's archived meeting or webinar files.
 *
 *  Zoom's [archiving solution](https://support.zoom.us/hc/en-us/articles/360050431572-Archiving-indicators) lets account administrators set up an automated mechanism to record, collect, and archive meeting data to a third-party platform of their choice to satisfy FINRA and other compliance requirements.
 *
 *  **Prerequisites:**
 * * The [**Meeting and Webinar Archiving** feature](https://support.zoom.us/hc/en-us/articles/4405656451213--Archiving-for-meetings-and-webinars) enabled for your account by [Zoom Support](https://support.zoom.us/hc/en-us/articles/201362003).
 *
 * **[Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `recording:read:admin`
 *
 * **[Granular Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `archiving:read:archived_file_statistics:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
 */
export const getArchivedFileStatistics = (
  variables: GetArchivedFileStatisticsVariables,
  signal?: AbortSignal,
) =>
  fetch<
    GetArchivedFileStatisticsResponse,
    GetArchivedFileStatisticsError,
    undefined,
    {},
    GetArchivedFileStatisticsQueryParams,
    {}
  >({ url: "/archive_files/statistics", method: "get", ...variables, signal });

export type UpdateArchivedFilePathParams = {
  /**
   * Archived file ID.
   *
   * @example a5983951-044e-473f-9acd-5c398c0a8cce
   */
  fileId: string;
};

export type UpdateArchivedFileError = Fetcher.ErrorWrapper<undefined>;

export type UpdateArchivedFileRequestBody = {
  /**
   * Whether to auto-delete the archived file.
   *
   * @example true
   */
  auto_delete: boolean;
};

export type UpdateArchivedFileVariables = {
  body: UpdateArchivedFileRequestBody;
  pathParams: UpdateArchivedFilePathParams;
} & FetcherExtraProps;

/**
 * Update an archived file's auto-delete status.
 *
 *  **Prerequisites:**
 * * [Zoom Support](https://support.zoom.us/hc/en-us/articles/201362003) must enable the [**Meeting and Webinar Archiving** feature](https://support.zoom.us/hc/en-us/articles/4405656451213--Archiving-for-meetings-and-webinars) for your account.
 * * Open the disabling auto-delete feature in OP. Contact [Zoom Support](https://support.zoom.us/hc/en-us/articles/201362003) to open.
 *
 * **[Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `recording:write`,`recording:write:admin`
 *
 * **[Granular Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `archiving:update:archived_file_auto_delete_status`,`archiving:update:archived_file_auto_delete_status:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
 */
export const updateArchivedFile = (
  variables: UpdateArchivedFileVariables,
  signal?: AbortSignal,
) =>
  fetch<
    undefined,
    UpdateArchivedFileError,
    UpdateArchivedFileRequestBody,
    {},
    {},
    UpdateArchivedFilePathParams
  >({ url: "/archive_files/{fileId}", method: "patch", ...variables, signal });

export type GetArchivedFilesPathParams = {
  /**
   * The meeting's universally unique identifier (UUID). Each meeting instance generates a UUID. After a meeting ends, a new UUID is generated for the next meeting instance.
   *
   * If the meeting UUID begins with a `/` character or contains a `//` character, you **must** [double encode](/docs/api/using-zoom-apis/#meeting-id-and-uuid) the meeting UUID when using the meeting UUID for other API calls.
   *
   * @example 4444AAAiAAAAAiAiAiiAii==
   */
  meetingUUID: string;
};

export type GetArchivedFilesError = Fetcher.ErrorWrapper<undefined>;

export type GetArchivedFilesResponse = {
  /**
   * The user's account name.
   *
   * @example account_01
   */
  account_name: string;
  /**
   * Information about the archive files.
   */
  archive_files: {
    /**
     * The URL to download the the archive file.
     *
     *  **OAuth apps**
     *
     *  If a user has authorized and installed your OAuth app that contains recording scopes, use the user's [OAuth access token](/docs/integrations/oauth/) to download the file. For example:
     *
     *  `https://{{base-domain}}/rec/archive/download/xxx--header 'Authorization: Bearer {{OAuth-access-token}}'`
     *
     *  **Note:** This field does **not** return for [Zoom On-Premise accounts](https://support.zoom.us/hc/en-us/articles/360034064852-Zoom-On-Premise-Deployment). Instead, this API will return the `file_path` field.
     *
     * @example https://example.com/recording/download/Qg75t7xZBtEbAkjdlgbfdngBBBB
     */
    download_url: string;
    /**
     * The archived file's extension.
     *
     * @example JSON
     */
    file_extension: string;
    /**
     * The file path to the on-premise account archive file.
     *
     *  **Note:** The API only returns this field for [Zoom On-Premise accounts](https://support.zoom.us/hc/en-us/articles/360034064852-Zoom-On-Premise-Deployment). It does **not** return the `download_url` field.
     *
     * @example /9090876528/path01/demo.mp4
     */
    file_path?: string;
    /**
     * The archived file's size, in bytes.
     *
     * @example 165743
     */
    file_size: number;
    /**
     * The archive file's type.
     * * `MP4` - Video file.
     * * `M4A` - Audio-only file.
     * * `CHAT` - A TXT file containing in-meeting chat messages.
     * * `CC` - A file containing the closed captions of the recording, in VTT file format.
     * * `CHAT_MESSAGE` - A JSON file encoded in base64 format containing chat messages. The file also includes waiting room chats, deleted messages, meeting emojis and non-verbal feedback.
     * *  `TRANSCRIPT` - A JSON file include audio transcript wording.
     * * `SUB_GROUP_MEMBER_LOG` - A JSON file containing records of members entering and leaving the subgroup.
     * * `AIC_COVERSATION` - A json file include internal user archive aic content.
     *
     * @example CHAT
     */
    file_type:
      | "MP4"
      | "M4A"
      | "CHAT"
      | "CC"
      | "CHAT_MESSAGE"
      | "TRANSCRIPT"
      | "SUB_GROUP_MEMBER_LOG"
      | "AIC_COVERSATION";
    /**
     * The archive file's unique ID.
     *
     * @example a2f19f96-9294-4f51-8134-6f0eea108eb2
     */
    id: string;
    /**
     * Whether the archive file is an individual recording file.
     * * `true` - An individual recording file.
     *  * `false` - An entire meeting file.
     *
     * @example true
     */
    individual: boolean;
    /**
     * The individual recording file's participant email address. This value is returned when the `individual` value is `true`. If the participant is **not** part of the host's account, this returns an empty string value, with some exceptions. See [Email address display rules](/docs/api/using-zoom-apis/#email-address-display-rules) for details.
     *
     * @format email
     * @example jchill@example.com
     */
    participant_email?: string;
    /**
     * The join time for the generated recording file. If this value is returned when the individual value is true, then it is the recording file's participant join time. When the individual value is false, it returns the join time for the archiving gateway.
     *
     * @format date-time
     * @example 2021-03-12T02:07:27Z
     */
    participant_join_time: string;
    /**
     * The leave time for the generated recording file. If this value is returned when the individual value is true, then it is the recording file's participant leave time. When the individual value is false, it returns the leave time for the archiving gateway.
     *
     * @format date-time
     * @example 2021-03-12T02:12:27Z
     */
    participant_leave_time: string;
    /**
     * The archive file's recording type.
     * * `shared_screen_with_speaker_view`
     * * `audio_only`
     * * `chat_file`
     * * `closed_caption`
     * * `chat_message`
     * * `audio_transcript`
     * * `aic_conversation`
     *
     *  For more information, read our [Managing and sharing cloud recordings](https://support.zoom.us/hc/en-us/articles/205347605-Managing-and-sharing-cloud-recordings#h_9898497b-e736-4980-a749-d55608f10773) documentation.
     *
     * @example chat_message
     */
    recording_type:
      | "shared_screen_with_speaker_view"
      | "audio_only"
      | "chat_file"
      | "closed_caption"
      | "chat_message"
      | "audio_transcript"
      | "aic_conversation";
    /**
     * The archived file's processing status.
     * * `completed` - The processing of the file is complete.
     * * `processing` - The file is processing.
     * * `failed` - The processing of the file failed.
     *
     * @example completed
     */
    status: "completed" | "processing" | "failed";
    /**
     * The archived file's encryption fingerprint, using the SHA256 hash algorithm.
     *
     * @example abf85f0fe6a4db3cdd8c37e505e1dd18a34d9696170a14b5bc6395677472cf43
     */
    encryption_fingerprint: string;
    /**
     * The number of `TXT` or `JSON` file messages. This field returns only when the `file_extension` is `JSON` or `TXT`
     *
     * @example 150
     */
    number_of_messages?: number;
    /**
     * The region where the file is stored. This field returns only `Enable Distributed Compliance Archiving` op feature is enabled.
     *
     * @example US
     */
    storage_location?:
      | "US"
      | "AU"
      | "BR"
      | "CA"
      | "EU"
      | "IN"
      | "JP"
      | "SG"
      | "CH";
    /**
     * Whether to auto delete the archived file.
     *
     *  **Prerequisites:**
     *
     * * The "Tag Archiving Files for Deletion" feature must be enabled in OP. Contact [Zoom Support](https://support.zoom.us/hc/en-us/articles/201362003) to open.
     *
     * @example false
     */
    auto_delete?: boolean;
  }[];
  /**
   * The meeting or webinar's archive completion time.
   *
   * @format date-time
   * @example 2021-03-12T02:57:27Z
   */
  complete_time: Record<string, any> | "";
  /**
   * The meeting or webinar's scheduled duration.
   *
   * @example 1
   */
  duration: number;
  /**
   * The meeting or webinar's duration, in seconds.
   *
   * @example 1800
   */
  duration_in_second: number;
  /**
   * The host's user ID for the archived meeting or webinar.
   *
   * @example Dhjdfgdkg8w
   */
  host_id: string;
  /**
   * The meeting or webinar ID, either `meetingId` or `webinarId`.
   *
   * @format int64
   * @example 553068284
   */
  id: number;
  /**
   * Whether the room is a [breakout room](https://support.zoom.us/hc/en-us/articles/115005769646-Participating-in-breakout-rooms).
   *
   * @example false
   */
  is_breakout_room: boolean;
  /**
   * Whether the meeting or webinar is internal or external.
   * * `internal` - An internal meeting or webinar.
   * * `external` - An external meeting or webinar.
   *
   *  The `id`, `host_id`, and `topic` PII (Personal Identifiable Information) values in this response are removed when this value is `external`.
   *
   * @example internal
   */
  meeting_type: "internal" | "external";
  /**
   * The parent meeting's universally unique ID (UUID). Each meeting or webinar instance generates a UUID. If the `is_breakout_room` value is `true`, the API returns this value.
   *
   * @example atsXxhSEQWit9t+U02HXNQ==
   */
  parent_meeting_id?: string;
  /**
   * The number of archived files returned in the API call response.
   *
   * @example 2
   */
  recording_count: number;
  /**
   * The meeting or webinar's start time.
   *
   * @format date-time
   * @example 2021-04-26T05:23:18Z
   */
  start_time: string;
  /**
   * The meeting or webinar's [timezone](/docs/api/references/abbreviations/#timezones).
   *
   * @example Asia/Shanghai
   */
  timezone: string;
  /**
   * The meeting or webinar topic.
   *
   * @example My Personal Meeting Room
   */
  topic: string;
  /**
   * The total size of the archive file, in bytes.
   *
   * @example 364463
   */
  total_size: number;
  /**
   * The type of archived meeting or webinar.
   *
   *  If the recording is of a meeting:
   * * `1` - Instant meeting.
   * * `2` - Scheduled meeting.
   * * `3` - A recurring meeting with no fixed time.
   * * `4` - A meeting created via PMI (Personal Meeting ID).
   * * `7` - A [Personal Audio Conference](https://support.zoom.us/hc/en-us/articles/204517069-Getting-Started-with-Personal-Audio-Conference) (PAC).
   * * `8` - Recurring meeting with a fixed time.
   *
   *  If the recording is of a webinar:
   * * `5` - A webinar.
   * * `6` - A recurring webinar without a fixed time.
   * * `9` - A recurring webinar with a fixed time.
   *
   *  If the recording is **not** from a meeting or webinar:
   *
   * * `100` - A [breakout room](https://support.zoom.us/hc/en-us/articles/115005769646-Participating-in-breakout-rooms).
   *
   * @example 1
   */
  type: 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 100;
  /**
   * The universally unique identifier (UUID) of the recorded meeting or webinar instance. Each meeting or webinar instance generates a UUID.
   *
   * @example yO3dfhh3t467UkQ==
   */
  uuid: string;
  /**
   * The archive's processing status.
   * * `completed` - The archive's processing is complete.
   * * `processing` - The archive is processing.
   *
   * @example completed
   */
  status: "completed" | "processing";
  /**
   * Primary group IDs of participants who belong to your account. Each group ID is separated by a comma.
   *
   * @example pvFIYKSDTum9iCDOOtQL4w,_FsqLyI0RlO6LVPeUVWi8g
   */
  group_id?: string;
  /**
   * Information about the physical files.
   */
  physical_files?: {
    /**
     * The physical file's unique ID.
     *
     * @example pvKocCqVSMygaOcKus5Afw
     */
    file_id?: string;
    /**
     * The physical file's name.
     *
     * @example Screenshot 2025-02-12 at 10.42.27 AM.png
     */
    file_name?: string;
    /**
     * The physical file's size, in bytes.
     *
     * @example 540680
     */
    file_size?: number;
    /**
     * The URL to download the the archive file.
     *
     *  **OAuth apps**
     *
     *  If a user has authorized and installed your OAuth app that contains recording scopes, use the user's [OAuth access token](/docs/integrations/oauth/) to download the file. For example:
     *
     *  `https://{{base-domain}}/rec/archive/attached/download/xxx--header 'Authorization: Bearer {{OAuth-access-token}}'`
     *
     * @example https://local.zoom.us/rec/archive/attached/download/HBAXbHc15BXbnq0JoDu6tc5MWlww9MAo9JJq2d14VAWkpcT5FEA.AK5calud4EJB7bMq
     */
    download_url?: string;
  }[];
};

export type GetArchivedFilesVariables = {
  pathParams: GetArchivedFilesPathParams;
} & FetcherExtraProps;

/**
 * Return a specific meeting instance's [archived files](https://support.zoom.us/hc/en-us/articles/360050431572-Archiving-indicators).
 *
 *  **Prerequisites:**
 * * The [**Meeting and Webinar Archiving** feature](https://support.zoom.us/hc/en-us/articles/4405656451213--Archiving-for-meetings-and-webinars) enabled for your account by [Zoom Support](https://support.zoom.us/hc/en-us/articles/201362003).
 *
 * **[Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `recording:read`
 *
 * **[Granular Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `archiving:read:archived_files:admin`,`archiving:read:archived_files`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
 */
export const getArchivedFiles = (
  variables: GetArchivedFilesVariables,
  signal?: AbortSignal,
) =>
  fetch<
    GetArchivedFilesResponse,
    GetArchivedFilesError,
    undefined,
    {},
    {},
    GetArchivedFilesPathParams
  >({
    url: "/past_meetings/{meetingUUID}/archive_files",
    method: "get",
    ...variables,
    signal,
  });

export type DeleteArchivedFilesPathParams = {
  /**
   * The meeting's universally unique identifier (UUID). Each meeting instance generates a UUID. For example, after a meeting ends, a new UUID is generated for the next meeting instance.
   *
   * If the meeting UUID begins with a `/` character or contains a `//` character, you **must** double-encode the meeting UUID when using the meeting UUID for other API calls.
   *
   * @example 4444AAAiAAAAAiAiAiiAii==
   */
  meetingUUID: string;
};

export type DeleteArchivedFilesError = Fetcher.ErrorWrapper<undefined>;

export type DeleteArchivedFilesVariables = {
  pathParams: DeleteArchivedFilesPathParams;
} & FetcherExtraProps;

/**
 * Delete all of a meeting's archived files.
 *
 *  **Prerequisites:**
 * * The [**Meeting and Webinar Archiving** feature](https://support.zoom.us/hc/en-us/articles/4405656451213--Archiving-for-meetings-and-webinars) enabled for your account by [Zoom Support](https://support.zoom.us/hc/en-us/articles/201362003).
 *
 * **[Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `recording:write:admin`
 *
 * **[Granular Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `archiving:delete:archived_files:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
 */
export const deleteArchivedFiles = (
  variables: DeleteArchivedFilesVariables,
  signal?: AbortSignal,
) =>
  fetch<
    undefined,
    DeleteArchivedFilesError,
    undefined,
    {},
    {},
    DeleteArchivedFilesPathParams
  >({
    url: "/past_meetings/{meetingUUID}/archive_files",
    method: "delete",
    ...variables,
    signal,
  });

export type RecordingGetPathParams = {
  /**
   * To get a meeting's cloud recordings, provide the meeting ID or UUID. If providing the meeting ID instead of UUID, the response will be for the latest meeting instance.
   *
   * To get a webinar's cloud recordings, provide the webinar's ID or UUID. If providing the webinar ID instead of UUID, the response will be for the latest webinar instance.
   *
   * If a UUID starts with `/` or contains `//` (example: `/ajXp112QmuoKj4854875==`), **[double encode](/docs/api/using-zoom-apis/#meeting-id-and-uuid) the UUID** before making an API request.
   *
   * @example atsXxhSEQWit9t+U02HXNQ==
   */
  meetingId: string;
};

export type RecordingGetQueryParams = {
  /**
   * Include fields in the response. Currently, only accepts `download_access_token` to get this token field and value for downloading the meeting's recordings. The `download_access_token` requires **View the recording content** enabled for the role authorizing the account. Use the format `include_fields=download_access_token`.
   *
   * @example download_access_token
   */
  include_fields?: string;
  /**
   * The `download_access_token` Time to Live (TTL) value. This parameter is only valid if the `include_fields` query parameter contains the value `download_access_token`.
   *
   * @maximum 604800
   * @minimum 0
   * @example 1
   */
  ttl?: number;
};

export type RecordingGetError = Fetcher.ErrorWrapper<undefined>;

export type RecordingGetResponse = {
  /**
   * List of recording files.
   */
  recording_files?: {
    /**
     * The time when the recording was deleted. Returned in the response only for the trash query.
     *
     * @example 2021-03-18T05:41:36Z
     */
    deleted_time?: string;
    /**
     * The URL to download the recording.
     *
     * If a user has authorized and installed your OAuth app that contains recording scopes, use the `download_access_token` or the user's [OAuth access token](/docs/integrations/oauth/) to download the file. Set the `access_token` as a Bearer token in the Authorization header. For example:
     *
     * `curl -H 'Authorization: Bearer <ACCESS_TOKEN>' https://{{base-domain}}/rec/archive/download/xyz`.
     *
     * **Note:** This field does **not** return for Zoom on-premise accounts. Instead, this API returns the `file_path` field. The URL may be a redirect. In that case, use `curl --location` to follow redirects or use another tool, like Postman.
     *
     * @example https://example.com/rec/download/Qg75t7xZBtEbAkjdlgbfdngBBBB
     */
    download_url?: string;
    /**
     * The file path to the on-premise account recording.
     *
     * **Note:** This API only returns this field for Zoom On-Premise accounts. It does **not** return the `download_url` field.
     *
     * @example /9090876528/path01/demo.mp4
     */
    file_path?: string;
    /**
     * The recording file size.
     *
     * @example 7220
     */
    file_size?: number;
    /**
     * The recording file type.
     *
     * `MP4` - Video file of the recording.
     *  `M4A` - Audio-only file of the recording.
     *  `TIMELINE` - Timestamp file of the recording in JSON file format. To get a timeline file, the **Add a timestamp to the recording** setting must be enabled in the [recording settings](https://support.zoom.com/hc/en/article?id=zm_kb&sysparm_article=KB0062627#h_3f14c3a4-d16b-4a3c-bbe5-ef7d24500048). The time will display in the host's timezone, set on their Zoom profile.
     *
     *   `TRANSCRIPT` - Transcription file of the recording in VTT format.
     *   `CHAT` - A TXT file containing in-meeting chat messages that were sent during the meeting.
     *  `CC` - File containing closed captions of the recording in VTT file format.
     *  `CSV` - File containing polling data in csv format.
     *
     *
     *
     *
     * A recording file object with file type of either `CC` or `TIMELINE` **does not have** these properties.
     *
     * 	`id`, `status`, `file_size`, `recording_type`, and `play_url`.
     *  `SUMMARY` - Summary file of the recording in JSON file format.
     *
     * @example MP4
     */
    file_type?:
      | "MP4"
      | "M4A"
      | "CHAT"
      | "TRANSCRIPT"
      | "CSV"
      | "TB"
      | "CC"
      | "CHAT_MESSAGE"
      | "SUMMARY";
    /**
     * The file extension type of the recording file.
     *
     * @example M4A
     */
    file_extension?: "MP4" | "M4A" | "TXT" | "VTT" | "CSV" | "JSON" | "JPG";
    /**
     * The recording file ID. It's included in the response of the general query.
     *
     * @example 72576a1f-4e66-4a77-87c4-f13f9808bd76
     */
    id?: string;
    /**
     * The meeting ID.
     *
     * @example L0AGOEPVR9m5WSOOs/d+FQ==
     */
    meeting_id?: string;
    /**
     * The URL that can play a recording file.
     *
     * @example https://example.com/rec/play/Qg75t7xZBtEbAkjdlgbfdngBBBB
     */
    play_url?: string;
    /**
     * The recording end time. The response is in the general query.
     *
     * @example 2021-03-18T05:41:36Z
     */
    recording_end?: string;
    /**
     * The recording start time.
     *
     * @example 2021-03-18T05:41:36Z
     */
    recording_start?: string;
    /**
     * The recording type.
     *
     * @example shared_screen_with_speaker_view
     */
    recording_type?:
      | "shared_screen_with_speaker_view(CC)"
      | "shared_screen_with_speaker_view"
      | "shared_screen_with_gallery_view"
      | "active_speaker"
      | "gallery_view"
      | "shared_screen"
      | "audio_only"
      | "audio_transcript"
      | "chat_file"
      | "poll"
      | "host_video"
      | "closed_caption"
      | "timeline"
      | "thumbnail"
      | "audio_interpretation"
      | "summary"
      | "summary_next_steps"
      | "summary_smart_chapters"
      | "sign_interpretation"
      | "production_studio";
    /**
     * The recording status.
     *
     * @example completed
     */
    status?: "completed";
  }[];
  /**
   * The user account's unique identifier.
   *
   * @example Cx3wERazSgup7ZWRHQM8-w
   */
  account_id?: string;
  /**
   * The duration of the meeting's recording.
   *
   * @example 20
   */
  duration?: number;
  /**
   * The ID of the user set as the host of the meeting.
   *
   * @example _0ctZtY0REqWalTmwvrdIw
   */
  host_id?: string;
  /**
   * The meeting ID, also known as the meeting number.
   *
   * @example 6840331990
   */
  id?: number;
  /**
   * The number of recording files returned in the response of this API call. This includes the `recording_files` and  `participant_audio_files` files.
   *
   * @example 22
   */
  recording_count?: number;
  /**
   * The time when the meeting started.
   *
   * @format date-time
   * @example 2021-03-18T05:41:36Z
   */
  start_time?: string;
  /**
   * The meeting topic.
   *
   * @example My Personal Meeting
   */
  topic?: string;
  /**
   * The recording's total file size. This includes the `recording_files` and `participant_audio_files` files.
   *
   * @format int64
   * @example 22
   */
  total_size?: number;
  /**
   * The recording's associated type of meeting or webinar.
   *
   * If the recording is of a meeting:
   * * `1` - Instant meeting.
   * * `2` - Scheduled meeting.
   * * `3` - A recurring meeting with no fixed time.
   * * `4` - A meeting created via PMI (Personal Meeting ID).
   * * `7` - A [Personal Audio Conference](https://support.zoom.com/hc/en/article?id=zm_kb&sysparm_article=KB0060449) (PAC).
   * * `8` - Recurring meeting with a fixed time.
   *
   * If the recording is of a webinar:
   * * `5` - A webinar.
   * * `6` - A recurring webinar without a fixed time
   * * `9` - A recurring webinar with a fixed time.
   *
   * If the recording is **not** from a meeting or webinar:
   *
   * * `99` - A recording uploaded via the [**Recordings**](https://zoom.us/recording) interface on the Zoom Web Portal.
   *
   * @example 1
   */
  type?: "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "99";
  /**
   * The unique meeting identifier. Each instance of the meeting has its own UUID.
   *
   * @example BOKXuumlTAGXuqwr3bLyuQ==
   */
  uuid?: string;
  /**
   * The cloud recording's passcode to be used in the URL. Directly splice this recording's passcode in `play_url` or `share_url` with `?pwd=` to access and play. Example: 'https://zoom.us/rec/share/**************?pwd=yNYIS408EJygs7rE5vVsJwXIz4-VW7MH'.
   *
   * @example yNYIS408EJygs7rE5vVsJwXIz4-VW7MH
   */
  recording_play_passcode?: string;
  /**
   * Auto-delete status of a meeting's [cloud recording](https://support.zoom.com/hc/en/article?id=zm_kb&sysparm_article=KB0062627).
   *
   * Prerequisite: To get the auto-delete status, the host of the recording must have the recording setting **Delete cloud recordings after a specified number of days** enabled.
   *
   * @example true
   */
  auto_delete?: boolean;
  /**
   * The date when the recording will be auto-deleted when `auto_delete` is true. Otherwise, no date will be returned.
   *
   * @example 2028-07-12
   */
  auto_delete_date?: string;
  /**
   * A list of recording files. The API only returns this response when the **Record a separate audio file of each participant** setting is enabled.
   */
  participant_audio_files?: {
    /**
     * The URL to download the recording. If a user has authorized and installed your OAuth app that contains recording scopes, use the user's [OAuth access token](/docs/integrations/oauth/) to download the file, and set the `access_token` as a Bearer token in the Authorization header.
     *
     * `curl -H 'Authorization: Bearer <ACCESS_TOKEN>' https://{{base-domain}}/rec/archive/download/xyz`
     *
     * **Note:** This field does **not** return for Zoom On-Premise accounts. Instead, this API will return the `file_path` field.
     *
     * @example https://example.com/rec/download/Qg75t7xZBtEbAkjdlgbfdngBBBB
     */
    download_url?: string;
    /**
     * The recording file's name.
     *
     * @example test.json
     */
    file_name?: string;
    /**
     * The file path to the on-premise account recording.
     *
     * **Note:** This API only returns this field for Zoom on-premise accounts. It does **not** return the `download_url` field.
     *
     * @example /9090876528/path01/demo.mp4
     */
    file_path?: string;
    /**
     * The recording file's size, in bytes.
     *
     * @example 65536
     */
    file_size?: number;
    /**
     * The recording file's format.
     *
     * * `MP4` - Video file.
     * * `M4A` - Audio-only file.
     * * `TIMELINE` - Timestamp file of the recording, in JSON file format. To get a timeline file, the **Add a timestamp to the recording** setting **must** be enabled in the [recording settings](https://support.zoom.com/hc/en/article?id=zm_kb&sysparm_article=KB0062627#h_3f14c3a4-d16b-4a3c-bbe5-ef7d24500048). The time will display in the host's timezone.
     * * `TRANSCRIPT` - A transcript of the recording, in VTT format.
     * * `CHAT` - A text file containing chat messages sent during the meeting.
     * * `CC` - A file containing the closed captions of the recording, in VTT file format.
     * * `CSV` - A file containing polling data, in CSV format.
     *
     * A recording file object with file the `CC` or `TIMELINE` value **does not** have the `id`, `status`, `file_size`, `recording_type`, and `play_url` properties.
     *
     * @example M4A
     */
    file_type?: string;
    /**
     * The recording file's unique ID. This is included in the general query response.
     *
     * @example a2f19f96-9294-4f51-8134-6f0eea108eb2
     */
    id?: string;
    /**
     * The URL where the recording file can be opened and played.
     *
     * @example https://example.com/rec/play/Qg75t7xZBtEbAkjdlgbfdngBBBB
     */
    play_url?: string;
    /**
     * The recording file's end time. This is included in the general query response.
     *
     * @format date-time
     * @example 2021-06-30T22:14:57Z
     */
    recording_end?: string;
    /**
     * The recording file's start time.
     *
     * @format date-time
     * @example 2021-06-30T22:14:57Z
     */
    recording_start?: string;
    /**
     * The recording file's status.
     *
     * @example completed
     */
    status?: "completed";
  }[];
  /**
   * The JWT token to download the meeting's recording. This response only returns if the `download_access_token` is included in the `include_fields` query parameter.
   *
   * @example abJhbGciOiJIUzUxMiJ9.eyJpc3MiOiJodHRwczovL2V2ZW50Lnpvb20udXMiLCJhY2NvdW50SWQiOiJNdDZzdjR1MFRBeVBrd2dzTDJseGlBIiwiYXVkIjoiaHR0cHM6Ly9vYXV0aC56b29tLnVzIiwibWlkIjoieFp3SEc0c3BRU2VuekdZWG16dnpiUT09IiwiZXhwIjoxNjI2MTM5NTA3LCJ1c2VySWQiOiJEWUhyZHBqclMzdWFPZjdkUGtrZzh3In0.a6KetiC6BlkDhf1dP4KBGUE1bb2brMeraoD45yhFx0eSSSTFdkHQnsKmlJQ-hdo9Zy-4vQw3rOxlyoHv583JyZ
   */
  download_access_token?: string;
  /**
   * The cloud recording's password.
   * Include fields in the response. The password field requires the user role of the authorized account to enable the `View Recording Content` permission.
   *
   * @example 981651
   */
  password?: string;
};

export type RecordingGetVariables = {
  pathParams: RecordingGetPathParams;
  queryParams?: RecordingGetQueryParams;
} & FetcherExtraProps;

/**
 * Returns all of a meeting's [recordings](https://support.zoom.com/hc/en/article?id=zm_kb&sysparm_article=KB0062627#h_7420acb5-1897-4061-87b4-5b76e99c03b4). Use the `download_url` property listed in the response to download the recording files.  To access a password-protected cloud recording, send the `download_access_token` or the user's [OAuth access token](/docs/integrations/oauth/) as a Bearer token in the Authorization header. For example:
 *
 *  `curl -H 'Authorization: Bearer <ACCESS_TOKEN>' https://{{base-domain}}/rec/archive/download/xyz`
 *
 * **[Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `recording:read`,`phone_recording:read:admin`
 *
 * **[Granular Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `cloud_recording:read:list_recording_files:admin`,`cloud_recording:read:list_recording_files`,`cloud_recording:read:list_recording_files:master`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
 */
export const recordingGet = (
  variables: RecordingGetVariables,
  signal?: AbortSignal,
) =>
  fetch<
    RecordingGetResponse,
    RecordingGetError,
    undefined,
    {},
    RecordingGetQueryParams,
    RecordingGetPathParams
  >({
    url: "/meetings/{meetingId}/recordings",
    method: "get",
    ...variables,
    signal,
  });

export type RecordingDeletePathParams = {
  /**
   * To get a meeting's cloud recordings, provide the meeting ID or meeting UUID. If the meeting ID is provided instead of UUID, the response will be for the latest meeting instance.
   *
   * To get a webinar's cloud recordings, provide the webinar ID or the webinar UUID. If the webinar ID is provided instead of UUID, the response will be for the latest webinar instance.
   *
   * If a UUID starts with `/` or contains `//`, like `/ajXp112QmuoKj4854875==`, you must **double encode** the UUID before making an API request.
   *
   * @example atsXxhSEQWit9t+U02HXNQ==
   */
  meetingId: string;
};

export type RecordingDeleteQueryParams = {
  /**
   * The recording delete actions.
   *  `trash` - Move recording to trash.
   *  `delete` - Delete recording permanently.
   *
   * @example delete
   * @default trash
   */
  action?: "trash" | "delete";
};

export type RecordingDeleteError = Fetcher.ErrorWrapper<undefined>;

export type RecordingDeleteVariables = {
  pathParams: RecordingDeletePathParams;
  queryParams?: RecordingDeleteQueryParams;
} & FetcherExtraProps;

/**
 * Delete all of a meeting's or webinar's recording files.
 *
 * **Prerequisites**:
 * * Cloud Recording should be enabled on the user's account.
 *
 *
 *
 * **[Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `recording:write:admin`,`recording:write`
 *
 * **[Granular Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `cloud_recording:delete:meeting_recording`,`cloud_recording:delete:meeting_recording:admin`,`cloud_recording:delete:meeting_recording:master`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
 */
export const recordingDelete = (
  variables: RecordingDeleteVariables,
  signal?: AbortSignal,
) =>
  fetch<
    undefined,
    RecordingDeleteError,
    undefined,
    {},
    RecordingDeleteQueryParams,
    RecordingDeletePathParams
  >({
    url: "/meetings/{meetingId}/recordings",
    method: "delete",
    ...variables,
    signal,
  });

export type AnalyticsDetailsPathParams = {
  /**
   * To get a meeting's cloud recordings, provide the meeting ID or meeting UUID. If the meeting ID is provided instead of UUID, the response will be for the latest meeting instance.
   *
   * To get a webinar's cloud recordings, provide the webinar ID or the webinar UUID. If the webinar ID is provided instead of UUID, the response will be for the latest webinar instance.
   *
   * If a UUID starts with `/` or contains `//`, like `/ajXp112QmuoKj4854875==`, you must **double encode** the UUID before making an API request.
   *
   * @example atsXxhSEQWit9t+U02HXNQ==
   */
  meetingId: string;
};

export type AnalyticsDetailsQueryParams = {
  /**
   * The number of records returned within a single API call.
   *
   * @maximum 300
   * @example 30
   * @default 30
   */
  page_size?: number;
  /**
   * Use the next page token to paginate through large result sets. A next page token is returned whenever the set of available results exceeds the current page size. This token's expiration period is 15 minutes.
   *
   * @example IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2
   */
  next_page_token?: string;
  /**
   * The start date for the monthly range to query. The maximum range can be a month. If you do not provide this value, this defaults to the current date.
   *
   * @format date
   * @example 2020-06-30
   */
  from?: string;
  /**
   * The end date for the monthly range to query. The maximum range can be a month.
   *
   * @format date
   * @example 2020-07-30
   */
  to?: string;
  /**
   * The type of analytics details:
   * * `by_view` &mdash; by_view.
   * * `by_download` &mdash; by_download.
   *
   * @example by_view
   */
  type?: "by_view" | "by_download";
};

export type AnalyticsDetailsError = Fetcher.ErrorWrapper<undefined>;

export type AnalyticsDetailsResponse = {
  /**
   * The queried start date
   *
   * @format date
   * @example 2020-07-30
   */
  from?: string;
  /**
   * The queried end date.
   *
   * @format date
   * @example 2020-07-30
   */
  to?: string;
  /**
   * The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
   *
   * @example R4aF9Oj0fVM2hhezJTEmSKaBSkfesDwGy42
   */
  next_page_token?: string;
  /**
   * The number of records returned within a single API call.
   *
   * @maximum 300
   * @example 30
   */
  page_size?: number;
  /**
   * The total number of all the records available across pages.
   *
   * @example 5
   */
  total_records?: number;
  /**
   * Analytics Detail.
   */
  analytics_details?: {
    /**
     * Explicit time to watch or download the recording.
     *
     * @format date-time
     * @example 2021-07-04T22:14:57Z
     */
    date_time?: string;
    /**
     * The user's name who watched or downloaded.
     *
     * @example 2
     */
    name?: string;
    /**
     * The user's email who downloaded this Meeting Recording.
     *
     * @example 2
     */
    email?: string;
    /**
     * When the query type is `by_view`, this field indicates the viewing time, unit: seconds
     *
     * @example 60
     */
    duration?: number;
  }[];
};

export type AnalyticsDetailsVariables = {
  pathParams: AnalyticsDetailsPathParams;
  queryParams?: AnalyticsDetailsQueryParams;
} & FetcherExtraProps;

/**
 * Retrieve a meeting or webinar recording's [analytics details](https://support.zoom.us/hc/en-us/articles/205347605-Managing-cloud-recordings#h_0b665029-ce74-4849-9794-d1aa0320d163). **Maximum duration:** 1 month.
 *
 * **[Granular Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `cloud_recording:read:recording_analytics_details`,`cloud_recording:read:recording_analytics_details:master`,`cloud_recording:read:recording_analytics_details:admin`
 */
export const analyticsDetails = (
  variables: AnalyticsDetailsVariables,
  signal?: AbortSignal,
) =>
  fetch<
    AnalyticsDetailsResponse,
    AnalyticsDetailsError,
    undefined,
    {},
    AnalyticsDetailsQueryParams,
    AnalyticsDetailsPathParams
  >({
    url: "/meetings/{meetingId}/recordings/analytics_details",
    method: "get",
    ...variables,
    signal,
  });

export type AnalyticsSummaryPathParams = {
  /**
   * To get a meeting's cloud recordings, provide the meeting ID or meeting UUID. If the meeting ID is provided instead of UUID, the response will be for the latest meeting instance.
   *
   * To get a webinar's cloud recordings, provide the webinar ID or the webinar UUID. If the webinar ID is provided instead of UUID, the response will be for the latest webinar instance.
   *
   * If a UUID starts with `/` or contains `//`, like `/ajXp112QmuoKj4854875==`, you must **double encode** the UUID before making an API request.
   *
   * @example atsXxhSEQWit9t+U02HXNQ==
   */
  meetingId: string;
};

export type AnalyticsSummaryQueryParams = {
  /**
   * The start date for the monthly range to query. The maximum range can be a month. If you do not provide this value, this defaults to the current date.
   *
   * @format date
   * @example 2020-06-30
   */
  from?: string;
  /**
   * The end date for the monthly range to query. The maximum range can be a month.
   *
   * @format date
   * @example 2020-07-30
   */
  to?: string;
};

export type AnalyticsSummaryError = Fetcher.ErrorWrapper<undefined>;

export type AnalyticsSummaryResponse = {
  /**
   * The queried start date
   *
   * @format date
   * @example 2020-07-30
   */
  from?: string;
  /**
   * The queried end date.
   *
   * @format date
   * @example 2020-07-30
   */
  to?: string;
  /**
   * Analytics Summary.
   */
  analytics_summary?: {
    /**
     * Date of viewing or downloading the recording.
     *
     * @example 2022-07-06
     */
    date?: string;
    /**
     * The number of people who have watched this Meeting Recording.
     *
     * @example 2
     */
    views_total_count?: number;
    /**
     * The number of people who downloaded this Meeting Recording.
     *
     * @example 2
     */
    downloads_total_count?: number;
  }[];
};

export type AnalyticsSummaryVariables = {
  pathParams: AnalyticsSummaryPathParams;
  queryParams?: AnalyticsSummaryQueryParams;
} & FetcherExtraProps;

/**
 * Retrieve meeting recording's [analytics summary](https://support.zoom.us/hc/en-us/articles/205347605-Managing-cloud-recordings#h_0b665029-ce74-4849-9794-d1aa0320d163). **Maximum duration:** 1 month.
 *
 * **[Granular Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `cloud_recording:read:recording_analytics_summary`,`cloud_recording:read:recording_analytics_summary:master`,`cloud_recording:read:recording_analytics_summary:admin`
 */
export const analyticsSummary = (
  variables: AnalyticsSummaryVariables,
  signal?: AbortSignal,
) =>
  fetch<
    AnalyticsSummaryResponse,
    AnalyticsSummaryError,
    undefined,
    {},
    AnalyticsSummaryQueryParams,
    AnalyticsSummaryPathParams
  >({
    url: "/meetings/{meetingId}/recordings/analytics_summary",
    method: "get",
    ...variables,
    signal,
  });

export type MeetingRecordingRegistrantsPathParams = {
  /**
   * The meeting's ID.
   *
   *  When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits.
   *
   * @format int64
   * @example 85746065
   */
  meetingId: number;
};

export type MeetingRecordingRegistrantsQueryParams = {
  /**
   * Query by the registrant's status.
   * * `pending` - The registration is pending.
   * * `approved` - The registrant is approved.
   * * `denied` - The registration is denied.
   *
   * @example pending
   * @default approved
   */
  status?: "pending" | "approved" | "denied";
  /**
   * The number of records returned within a single API call.
   *
   * @maximum 300
   * @example 30
   * @default 30
   */
  page_size?: number;
  /**
   * **Deprecated.** We will no longer support this field in a future release. Instead, use the `next_page_token` for pagination.
   *
   * @example 1
   * @default 1
   */
  page_number?: number;
  /**
   * Use the next page token to paginate through large result sets. A next page token is returned whenever the set of available results exceeds the current page size. This token's expiration period is 15 minutes.
   *
   * @example IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2
   */
  next_page_token?: string;
};

export type MeetingRecordingRegistrantsError = Fetcher.ErrorWrapper<undefined>;

export type MeetingRecordingRegistrantsResponse = {
  /**
   * Use the next page token to paginate through large result sets. A next page token is returned whenever the set of available results exceeds the current page size. This token's expiration period is 15 minutes.
   *
   * @example w7587w4eiyfsudgf
   */
  next_page_token?: string;
  /**
   * The number of pages returned for the request made.
   *
   * @example 1
   */
  page_count?: number;
  /**
   * **Deprecated.** We will no longer support this field in a future release. Instead, use the `next_page_token` for pagination.
   *
   * @example 1
   * @deprecated true
   * @default 1
   */
  page_number?: number;
  /**
   * The number of records returned with a single API call.
   *
   * @maximum 300
   * @example 30
   * @default 30
   */
  page_size?: number;
  /**
   * The total number of all the records available across pages.
   *
   * @example 20
   */
  total_records?: number;
  /**
   * Information about the cloud recording registrants.
   */
  registrants?: {
    /**
     * The registrant's address.
     *
     * @example 1800 Amphibious Blvd.
     */
    address?: string;
    /**
     * The registrant's city.
     *
     * @example Mountain View
     */
    city?: string;
    /**
     * The registrant's questions and comments.
     *
     * @example Looking forward to the discussion.
     */
    comments?: string;
    /**
     * The registrant's two-letter [country code](https://developers.zoom.us/docs/api/rest/other-references/abbreviation-lists/#countries).
     *
     * @example US
     */
    country?: string;
    /**
     * Information about custom questions.
     */
    custom_questions?: {
      /**
       * The custom question's title.
       *
       * @example What do you hope to learn from this?
       */
      title?: string;
      /**
       * The custom question's response value. This has a limit of 128 characters.
       *
       * @maxLength 128
       * @example Look forward to learning how you come up with new recipes and what other services you offer.
       */
      value?: string;
    }[];
    /**
     * The registrant's email address. See [Email address display rules](https://developers.zoom.us/docs/api/rest/using-zoom-apis/#email-address-display-rules) for return value details.
     *
     * @maxLength 128
     * @format email
     * @example jchill@example.com
     */
    email: string;
    /**
     * The registrant's first name.
     *
     * @maxLength 64
     * @example Jill
     */
    first_name: string;
    /**
     * The registrant's industry.
     *
     * @example Food
     */
    industry?: string;
    /**
     * The registrant's job title.
     *
     * @example Chef
     */
    job_title?: string;
    /**
     * The registrant's last name.
     *
     * @maxLength 64
     * @example Chill
     */
    last_name?: string;
    /**
     * The registrant's number of employees.
     * * `1-20`
     * * `21-50`
     * * `51-100`
     * * `101-250`
     * * `251-500`
     * * `501-1,000`
     * * `1,001-5,000`
     * * `5,001-10,000`
     * * `More than 10,000`
     *
     * @example 1-20
     */
    no_of_employees?:
      | ""
      | "1-20"
      | "21-50"
      | "51-100"
      | "101-250"
      | "251-500"
      | "501-1,000"
      | "1,001-5,000"
      | "5,001-10,000"
      | "More than 10,000";
    /**
     * The registrant's organization.
     *
     * @example Cooking Org
     */
    org?: string;
    /**
     * The registrant's phone number.
     *
     * @example 5550100
     */
    phone?: string;
    /**
     * The registrant's purchasing time frame.
     * * `Within a month`
     * * `1-3 months`
     * * `4-6 months`
     * * `More than 6 months`
     * * `No timeframe`
     *
     * @example 1-3 months
     */
    purchasing_time_frame?:
      | ""
      | "Within a month"
      | "1-3 months"
      | "4-6 months"
      | "More than 6 months"
      | "No timeframe";
    /**
     * The registrant's role in the purchase process.
     * * `Decision Maker`
     * * `Evaluator/Recommender`
     * * `Influencer`
     * * `Not involved`
     *
     * @example Influencer
     */
    role_in_purchase_process?:
      | ""
      | "Decision Maker"
      | "Evaluator/Recommender"
      | "Influencer"
      | "Not involved";
    /**
     * The registrant's state or province.
     *
     * @example CA
     */
    state?: string;
    /**
     * The registrant's status.
     * * `approved` - Registrant is approved.
     * * `denied` - Registrant is denied.
     * * `pending` - Registrant is waiting for approval.
     *
     * @example approved
     */
    status?: "approved" | "denied" | "pending";
    /**
     * The registrant's ZIP or postal code.
     *
     * @example 94045
     */
    zip?: string;
    /**
     * The registrant's ID.
     *
     * @example 3Z7sEm0TQQieLav3c3OD_g
     */
    id?: string;
  }[];
};

export type MeetingRecordingRegistrantsVariables = {
  pathParams: MeetingRecordingRegistrantsPathParams;
  queryParams?: MeetingRecordingRegistrantsQueryParams;
} & FetcherExtraProps;

/**
 * Get a list of registrants of a past meeting's [on-demand cloud recordings](https://support.zoom.us/hc/en-us/articles/360000488283-On-demand-recordings). Users must [register](/api-reference/zoom-api/methods#operation/meetingRecordingRegistrantCreate) to view the recordings.
 *
 *
 *
 * **[Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `recording:read:admin`,`recording:read`
 *
 * **[Granular Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `cloud_recording:read:list_recording_registrants`,`cloud_recording:read:list_recording_registrants:admin`,`cloud_recording:read:list_recording_registrants:master`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
 */
export const meetingRecordingRegistrants = (
  variables: MeetingRecordingRegistrantsVariables,
  signal?: AbortSignal,
) =>
  fetch<
    MeetingRecordingRegistrantsResponse,
    MeetingRecordingRegistrantsError,
    undefined,
    {},
    MeetingRecordingRegistrantsQueryParams,
    MeetingRecordingRegistrantsPathParams
  >({
    url: "/meetings/{meetingId}/recordings/registrants",
    method: "get",
    ...variables,
    signal,
  });

export type MeetingRecordingRegistrantCreatePathParams = {
  /**
   * The meeting's ID.
   *
   *  When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits.
   *
   * @format int64
   * @example 85746065
   */
  meetingId: number;
};

export type MeetingRecordingRegistrantCreateError =
  Fetcher.ErrorWrapper<undefined>;

export type MeetingRecordingRegistrantCreateResponse = {
  /**
   * [Meeting ID](https://support.zoom.us/hc/en-us/articles/201362373-What-is-a-Meeting-ID-): Unique identifier of the meeting in &quot;**long**&quot; format(represented as int64 data type in JSON), also known as the meeting number.
   *
   * @format int64
   * @example 6840331980
   */
  id?: number;
  /**
   * Registrant ID
   *
   * @example 3Z7sEm0TQQieLav3c3OD_g
   */
  registrant_id?: string;
  /**
   * Share URL for the on-demand recording. This includes the &ldquo;tk&rdquo; token for the registrant. This is similar to the token that Zoom returns in the URL response to join a registered meeting, for example: `url?tk=xxxx`. Except while the meeting registration token can be used to join the meeting, this token can only be used to watch the recording.
   *
   * @example https://example.com/rec/share/Qg75t7xZBtEbAkjdlgbfdngBBBB
   */
  share_url?: string;
  /**
   * Meeting Topic
   *
   * @example My Personal Meeting Room
   */
  topic?: string;
};

export type MeetingRecordingRegistrantCreateRequestBody = {
  /**
   * The registrant's address.
   *
   * @example 1800 Amphibious Blvd.
   */
  address?: string;
  /**
   * The registrant's city.
   *
   * @example Mountain View
   */
  city?: string;
  /**
   * The registrant's questions and comments.
   *
   * @example Looking forward to the discussion.
   */
  comments?: string;
  /**
   * The registrant's two-letter [country code](https://developers.zoom.us/docs/api/rest/other-references/abbreviation-lists/#countries).
   *
   * @example US
   */
  country?: string;
  /**
   * Information about custom questions.
   */
  custom_questions?: {
    /**
     * The title of the custom question.
     *
     * @example What do you hope to learn from this?
     */
    title?: string;
    /**
     * The custom question's response value. This has a limit of 128 characters.
     *
     * @maxLength 128
     * @example Look forward to learning how you come up with new recipes and what other services you offer.
     */
    value?: string;
  }[];
  /**
   * The registrant's email address. See [Email address display rules](https://developers.zoom.us/docs/api/rest/using-zoom-apis/#email-address-display-rules) for return value details.
   *
   * @maxLength 128
   * @format email
   * @example jchill@example.com
   */
  email: string;
  /**
   * The registrant's first name.
   *
   * @maxLength 64
   * @example Jill
   */
  first_name: string;
  /**
   * The registrant's industry.
   *
   * @example Food
   */
  industry?: string;
  /**
   * The registrant's job title.
   *
   * @example Chef
   */
  job_title?: string;
  /**
   * The registrant's last name.
   *
   * @maxLength 64
   * @example Chill
   */
  last_name?: string;
  /**
   * The registrant's number of employees.
   * * `1-20`
   * * `21-50`
   * * `51-100`
   * * `101-250`
   * * `251-500`
   * * `501-1,000`
   * * `1,001-5,000`
   * * `5,001-10,000`
   * * `More than 10,000`
   *
   * @example 1-20
   */
  no_of_employees?:
    | ""
    | "1-20"
    | "21-50"
    | "51-100"
    | "101-250"
    | "251-500"
    | "501-1,000"
    | "1,001-5,000"
    | "5,001-10,000"
    | "More than 10,000";
  /**
   * The registrant's organization.
   *
   * @example Cooking Org
   */
  org?: string;
  /**
   * The registrant's phone number.
   *
   * @example 5550100
   */
  phone?: string;
  /**
   * The registrant's purchasing time frame.
   * * `Within a month`
   * * `1-3 months`
   * * `4-6 months`
   * * `More than 6 months`
   * * `No timeframe`
   *
   * @example 1-3 months
   */
  purchasing_time_frame?:
    | ""
    | "Within a month"
    | "1-3 months"
    | "4-6 months"
    | "More than 6 months"
    | "No timeframe";
  /**
   * The registrant's role in the purchase process.
   * * `Decision Maker`
   * * `Evaluator/Recommender`
   * * `Influencer`
   * * `Not involved`
   *
   * @example Influencer
   */
  role_in_purchase_process?:
    | ""
    | "Decision Maker"
    | "Evaluator/Recommender"
    | "Influencer"
    | "Not involved";
  /**
   * The registrant's state or province.
   *
   * @example CA
   */
  state?: string;
  /**
   * The registrant's status.
   * * `approved` - Registrant is approved.
   * * `denied` - Registrant is denied.
   * * `pending` - Registrant is waiting for approval.
   *
   * @example approved
   */
  status?: "approved" | "denied" | "pending";
  /**
   * The registrant's ZIP or postal code.
   *
   * @example 94045
   */
  zip?: string;
};

export type MeetingRecordingRegistrantCreateVariables = {
  body?: MeetingRecordingRegistrantCreateRequestBody;
  pathParams: MeetingRecordingRegistrantCreatePathParams;
} & FetcherExtraProps;

/**
 * Register a user to gain access to **On-demand cloud recordings** of a previous meeting.
 *
 * Cloud recordings of past Zoom meetings can be made [on-demand](https://support.zoom.us/hc/en-us/articles/360000488283-On-demand-Recordings). Users should be [registered](/api-reference/zoom-api/methods#operation/meetingRecordingRegistrantCreate) to view these recordings.
 *
 *
 *
 * **[Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `recording:write:admin`,`recording:write`
 *
 * **[Granular Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `cloud_recording:write:recording_registrant`,`cloud_recording:write:recording_registrant:master`,`cloud_recording:write:recording_registrant:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
 */
export const meetingRecordingRegistrantCreate = (
  variables: MeetingRecordingRegistrantCreateVariables,
  signal?: AbortSignal,
) =>
  fetch<
    MeetingRecordingRegistrantCreateResponse,
    MeetingRecordingRegistrantCreateError,
    MeetingRecordingRegistrantCreateRequestBody,
    {},
    {},
    MeetingRecordingRegistrantCreatePathParams
  >({
    url: "/meetings/{meetingId}/recordings/registrants",
    method: "post",
    ...variables,
    signal,
  });

export type RecordingRegistrantsQuestionsGetPathParams = {
  /**
   * To get a meeting's cloud recordings, provide the meeting ID or meeting UUID. If the meeting ID is provided instead of UUID, the response will be for the latest meeting instance.
   *
   * To get a webinar's cloud recordings, provide the webinar ID or the webinar UUID. If the webinar ID is provided instead of UUID, the response will be for the latest webinar instance.
   *
   * If a UUID starts with `/` or contains `//`, like `/ajXp112QmuoKj4854875==`, you must **double encode** the UUID before making an API request.
   *
   * @example atsXxhSEQWit9t+U02HXNQ==
   */
  meetingId: string;
};

export type RecordingRegistrantsQuestionsGetError =
  Fetcher.ErrorWrapper<undefined>;

export type RecordingRegistrantsQuestionsGetResponse = {
  /**
   * Array of registrant custom questions.
   */
  custom_questions?: {
    /**
     * Answer choices for the question. Cannot be used with short answer type.
     */
    answers?: string[];
    /**
     * Whether registrants are required to answer custom questions or not.
     *
     * @example true
     */
    required?: boolean;
    /**
     * The question's title.
     *
     * @example What's your name?
     */
    title?: string;
    /**
     * The type of registration question and answers.
     *
     * @example short
     */
    type?: "short" | "single" | "multiple";
  }[];
  /**
   * Array of registrant questions.
   */
  questions?: {
    /**
     * Field name.
     *
     * @example last_name
     */
    field_name?:
      | "last_name"
      | "address"
      | "city"
      | "country"
      | "zip"
      | "state"
      | "phone"
      | "industry"
      | "org"
      | "job_title"
      | "purchasing_time_frame"
      | "role_in_purchase_process"
      | "no_of_employees"
      | "comments";
    /**
     * Whether the field is required to be answered by the registrant or not.
     *
     * @example true
     */
    required?: boolean;
  }[];
};

export type RecordingRegistrantsQuestionsGetVariables = {
  pathParams: RecordingRegistrantsQuestionsGetPathParams;
} & FetcherExtraProps;

/**
 * Retrieve a list of questions that are displayed for users to complete when registering to view the recording of a specific meeting.
 *
 * For [on-demand](https://support.zoom.us/hc/en-us/articles/360000488283-On-demand-Recordings) meeting recordings, you can include fields with questions that will be shown to registrants when they register to view the recording.
 *
 *
 *
 * **[Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `recording:read:admin`,`recording:read`
 *
 * **[Granular Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `cloud_recording:read:registration_questions`,`cloud_recording:read:registration_questions:master`,`cloud_recording:read:registration_questions:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
 */
export const recordingRegistrantsQuestionsGet = (
  variables: RecordingRegistrantsQuestionsGetVariables,
  signal?: AbortSignal,
) =>
  fetch<
    RecordingRegistrantsQuestionsGetResponse,
    RecordingRegistrantsQuestionsGetError,
    undefined,
    {},
    {},
    RecordingRegistrantsQuestionsGetPathParams
  >({
    url: "/meetings/{meetingId}/recordings/registrants/questions",
    method: "get",
    ...variables,
    signal,
  });

export type RecordingRegistrantQuestionUpdatePathParams = {
  /**
   * To get a meeting's cloud recordings, provide the meeting ID or meeting UUID. If the meeting ID is provided instead of UUID, the response will be for the latest meeting instance.
   *
   * To get a webinar's cloud recordings, provide the webinar ID or the webinar UUID. If the webinar ID is provided instead of UUID,the response will be for the latest webinar instance.
   *
   * If a UUID starts with `/` or contains `//`, like `/ajXp112QmuoKj4854875==`, you must **double encode** the UUID before making an API request.
   *
   * @example atsXxhSEQWit9t+U02HXNQ==
   */
  meetingId: string;
};

export type RecordingRegistrantQuestionUpdateError =
  Fetcher.ErrorWrapper<undefined>;

export type RecordingRegistrantQuestionUpdateRequestBody = {
  /**
   * Array of registrant custom questions.
   */
  custom_questions?: {
    /**
     * Answer choices for the question. Cannot be used with short answer type.
     */
    answers?: string[];
    /**
     * Whether registrants are required to answer custom questions or not.
     *
     * @example true
     */
    required?: boolean;
    /**
     * The question's title.
     *
     * @example What's your name?
     */
    title?: string;
    /**
     * The type of registration question and answers.
     *
     * @example short
     */
    type?: "short" | "single" | "multiple";
  }[];
  /**
   * Array of registrant questions.
   */
  questions?: {
    /**
     * Field name.
     *
     * @example last_name
     */
    field_name?:
      | "last_name"
      | "address"
      | "city"
      | "country"
      | "zip"
      | "state"
      | "phone"
      | "industry"
      | "org"
      | "job_title"
      | "purchasing_time_frame"
      | "role_in_purchase_process"
      | "no_of_employees"
      | "comments";
    /**
     * Whether the field is required to be answered by the registrant or not.
     *
     * @example true
     */
    required?: boolean;
  }[];
};

export type RecordingRegistrantQuestionUpdateVariables = {
  body?: RecordingRegistrantQuestionUpdateRequestBody;
  pathParams: RecordingRegistrantQuestionUpdatePathParams;
} & FetcherExtraProps;

/**
 * Update registration questions for users to answer while registering to view a recording.
 *
 * For [on-demand](https://support.zoom.us/hc/en-us/articles/360000488283-On-demand-Recordings) meeting recordings, you can include fields with questions that will be shown to registrants when they register to view the recording.
 *
 *
 *
 * **[Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `recording:write:admin`,`recording:write`
 *
 * **[Granular Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `cloud_recording:update:registration_questions:admin`,`cloud_recording:update:registration_questions`,`cloud_recording:update:registration_questions:master`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
 */
export const recordingRegistrantQuestionUpdate = (
  variables: RecordingRegistrantQuestionUpdateVariables,
  signal?: AbortSignal,
) =>
  fetch<
    undefined,
    RecordingRegistrantQuestionUpdateError,
    RecordingRegistrantQuestionUpdateRequestBody,
    {},
    {},
    RecordingRegistrantQuestionUpdatePathParams
  >({
    url: "/meetings/{meetingId}/recordings/registrants/questions",
    method: "patch",
    ...variables,
    signal,
  });

export type MeetingRecordingRegistrantStatusPathParams = {
  /**
   * The meeting's ID.
   *
   *  When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits.
   *
   * @format int64
   * @example 85746065
   */
  meetingId: number;
};

export type MeetingRecordingRegistrantStatusError =
  Fetcher.ErrorWrapper<undefined>;

export type MeetingRecordingRegistrantStatusRequestBody = {
  /**
   * @example approve
   */
  action: "approve" | "deny";
  /**
   * List of registrants.
   *
   * @maximum 30
   */
  registrants?: {
    /**
     * @example 3Z7sEm0TQQieLav3c3OD_g
     */
    id?: string;
  }[];
};

export type MeetingRecordingRegistrantStatusVariables = {
  body: MeetingRecordingRegistrantStatusRequestBody;
  pathParams: MeetingRecordingRegistrantStatusPathParams;
} & FetcherExtraProps;

/**
 * Update a registrant's status.
 * A registrant can either be approved or denied from viewing the [on-demand](https://support.zoom.us/hc/en-us/articles/360000488283-On-demand-Recordings) recording.
 *
 *
 *
 * **[Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `recording:write:admin`,`recording:write`
 *
 * **[Granular Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `cloud_recording:update:registrant_status`,`cloud_recording:update:registrant_status:master`,`cloud_recording:update:registrant_status:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
 */
export const meetingRecordingRegistrantStatus = (
  variables: MeetingRecordingRegistrantStatusVariables,
  signal?: AbortSignal,
) =>
  fetch<
    undefined,
    MeetingRecordingRegistrantStatusError,
    MeetingRecordingRegistrantStatusRequestBody,
    {},
    {},
    MeetingRecordingRegistrantStatusPathParams
  >({
    url: "/meetings/{meetingId}/recordings/registrants/status",
    method: "put",
    ...variables,
    signal,
  });

export type RecordingSettingUpdatePathParams = {
  /**
   * The meeting ID lets you get cloud recording of a meeting or webinar.
   * * Meeting - Provide the meeting ID or meeting UUID. If the meeting ID is provided instead of UUID, the response is for the latest meeting instance.
   *
   * * Webinar - Provide the webinar ID or the webinar UUID. If the webinar ID is provided instead of UUID, the response is for the latest webinar instance.
   *
   * If a UUID starts with `/` or contains `//` (example: `/ajXp112QmuoKj4854875==`), you must **double encode** the UUID before making an API request.
   *
   * @example atsXxhSEQWit9t+U02HXNQ==
   */
  meetingId: string;
};

export type RecordingSettingUpdateError = Fetcher.ErrorWrapper<undefined>;

export type RecordingSettingUpdateResponse = {
  /**
   * The registration approval type.
   *
   * `0` - Automatically approve the registration when a user registers.
   *
   * `1` - Manually approve or deny the registration of a user.
   *
   * `2` - No registration required to view the recording.
   *
   * @example 0
   */
  approval_type?: 0 | 1 | 2;
  /**
   * The domains for authentication.
   *
   * @example example.com
   */
  authentication_domains?: string;
  /**
   * The options for authentication.
   *
   * @example auth_option
   */
  authentication_option?: string;
  /**
   * The name for authentication.
   *
   * @example auth display name
   */
  authentication_name?: string;
  /**
   * This field determines whether registration is required to view the recording.
   *
   * @example false
   */
  on_demand?: boolean;
  /**
   * This field enables passcode protection for the recording by setting a passcode. The passcode must have a minimum of **eight** characters with a mix of numbers, letters and special characters.
   *
   *
   * **Note:** If the account owner or the admin has set minimum passcode strength requirements for recordings through Account Settings, the passcode value provided here must meet those requirements.
   *
   *  If the requirements are enabled, you can view those requirements by calling either the [**Get user settings**](/api-reference/zoom-api/methods#operation/userSettings) API or the [**Get account settings**](/api-reference/zoom-api/ma#operation/accountSettings) API.
   *
   * @maxLength 10
   * @minLength 8
   * @example 975238724
   */
  password?: string;
  /**
   * Only allow authenticated users to view.
   *
   * @example true
   */
  recording_authentication?: boolean;
  /**
   * Enable sending an email to the host when someone registers to view the recording. This applies for On-demand recordings only.
   *
   * @example false
   */
  send_email_to_host?: boolean;
  /**
   * Determine how the meeting recording is shared.
   *
   * @example publicly
   */
  share_recording?: "publicly" | "internally" | "none";
  /**
   * Show social share buttons on the registration page. This applies for On-demand recordings only.
   *
   * @example true
   */
  show_social_share_buttons?: boolean;
  /**
   * The recording's name.
   *
   * @example My Personal Meeting Room
   */
  topic?: string;
  /**
   * Determine whether a viewer can download the recording file or not.
   *
   * @example true
   */
  viewer_download?: boolean;
  /**
   * Auto-delete status of a meeting's [cloud recording](https://support.zoom.us/hc/en-us/articles/203741855-Cloud-Recording).
   *
   * Prerequisite: To get the auto-delete status, the host of the recording must have the recording setting "Delete cloud recordings after a specified number of days" enabled.
   *
   * @example true
   */
  auto_delete?: boolean;
  /**
   * The date when the recording will be auto-deleted when `auto_delete` is `true`. Otherwise, no date is returned.
   *
   * @example 2028-07-12
   */
  auto_delete_date?: string;
};

export type RecordingSettingUpdateVariables = {
  pathParams: RecordingSettingUpdatePathParams;
} & FetcherExtraProps;

/**
 * Retrieve settings applied to a meeting's [Cloud Recording](https://support.zoom.us/hc/en-us/articles/203741855-Cloud-Recording).
 *
 *
 * Response includes recording content access information, which requires the current user to have the `View the recording content` permission to access it.
 *
 * **[Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `recording:read:admin`,`recording:read`
 *
 * **[Granular Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `cloud_recording:read:recording_settings`,`cloud_recording:read:recording_settings:admin`,`cloud_recording:read:recording_settings:master`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
 */
export const recordingSettingUpdate = (
  variables: RecordingSettingUpdateVariables,
  signal?: AbortSignal,
) =>
  fetch<
    RecordingSettingUpdateResponse,
    RecordingSettingUpdateError,
    undefined,
    {},
    {},
    RecordingSettingUpdatePathParams
  >({
    url: "/meetings/{meetingId}/recordings/settings",
    method: "get",
    ...variables,
    signal,
  });

export type RecordingSettingsUpdatePathParams = {
  /**
   * To get cloud recordings of a meeting, provide the meeting ID or meeting UUID. If the meeting ID is provided instead of UUID, the response is for the latest meeting instance.
   *
   * To get cloud recordings of a webinar, provide the webinar ID or the webinar UUID. If the webinar ID is provided instead of UUID, the response is for the latest webinar instance.
   *
   * If a UUID starts with &quot;/&quot; or contains &quot;//&quot; (example: &quot;/ajXp112QmuoKj4854875==&quot;), you must **double encode** the UUID before making an API request.
   *
   * @example atsXxhSEQWit9t+U02HXNQ==
   */
  meetingId: string;
};

export type RecordingSettingsUpdateError = Fetcher.ErrorWrapper<undefined>;

export type RecordingSettingsUpdateRequestBody = {
  /**
   * The approval type for the registration.
   *
   * `0`- Automatically approve the registration when a user registers.
   *
   * `1` - Manually approve or deny the registration of a user.
   *
   * `2` - No registration required to view the recording.
   *
   * @example 0
   */
  approval_type?: 0 | 1 | 2;
  /**
   * The authentication domains.
   *
   * @example test.com
   */
  authentication_domains?: string;
  /**
   * The authentication options.
   *
   * @example auth_option
   */
  authentication_option?: string;
  /**
   * This field determines whether the registration is required to view the recording.
   *
   * @example false
   */
  on_demand?: boolean;
  /**
   * This field enables passcode protection for the recording by setting a passcode.
   *
   * The passcode must have a minimum of **eight** characters with a mix of numbers, letters and special characters.
   *
   *
   * **Note:** If the account owner or the admin has set minimum passcode strength requirements for recordings through Account Settings, the passcode value provided here must meet those requirements.
   *
   *  If the requirements are enabled, you can view those requirements by calling either the [**Get user settings**](/api-reference/zoom-api/methods#operation/userSettings) API or the [**Get account settings**](/api-reference/zoom-api/ma#operation/accountSettings) API.
   *
   * @maxLength 10
   * @minLength 8
   * @example 975238724
   */
  password?: string;
  /**
   * This field indicates that only authenticated users can view.
   *
   * @example true
   */
  recording_authentication?: boolean;
  /**
   * This field sends an email to host when someone registers to view the recording. This setting applies for On-demand recordings only.
   *
   * @example false
   */
  send_email_to_host?: boolean;
  /**
   * This field determines how the meeting recording is shared.
   *
   * @example publicly
   */
  share_recording?: "publicly" | "internally" | "none";
  /**
   * This field shows social share buttons on registration page. This setting applies for On-demand recordings only.
   *
   * @example true
   */
  show_social_share_buttons?: boolean;
  /**
   * The name of the recording.
   *
   * @example My Personal Meeting Room
   */
  topic?: string;
  /**
   * This field determines whether a viewer can download the recording file or not.
   *
   * @example true
   */
  viewer_download?: boolean;
  /**
   * Update the auto-delete status of a meeting's [cloud recording](https://support.zoom.us/hc/en-us/articles/203741855-Cloud-Recording).
   *
   * Prerequisite: To update the auto-delete status, the host of the recording must have the recording setting "Delete cloud recordings after a specified number of days" enabled.
   *
   * @example false
   */
  auto_delete?: boolean;
};

export type RecordingSettingsUpdateVariables = {
  body?: RecordingSettingsUpdateRequestBody;
  pathParams: RecordingSettingsUpdatePathParams;
} & FetcherExtraProps;

/**
 * Update settings applied to a meeting's [cloud recording](https://support.zoom.us/hc/en-us/articles/203741855-Cloud-Recording).
 * The request contains the recording content access information, which requires the current user to have the `view recording content` and `recording editing` permissions to access.
 *
 * **[Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `recording:write:admin`,`recording:write`
 *
 * **[Granular Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `cloud_recording:update:recording_settings`,`cloud_recording:update:recording_settings:master`,`cloud_recording:update:recording_settings:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
 */
export const recordingSettingsUpdate = (
  variables: RecordingSettingsUpdateVariables,
  signal?: AbortSignal,
) =>
  fetch<
    undefined,
    RecordingSettingsUpdateError,
    RecordingSettingsUpdateRequestBody,
    {},
    {},
    RecordingSettingsUpdatePathParams
  >({
    url: "/meetings/{meetingId}/recordings/settings",
    method: "patch",
    ...variables,
    signal,
  });

export type RecordingDeleteOnePathParams = {
  /**
   * To get a meeting's cloud recordings, provide the meeting ID or meeting UUID. If the meeting ID is provided instead of UUID, the response will be for the latest meeting instance.
   *
   * To get a webinar's cloud recordings, provide the webinar ID or the webinar UUID. If the webinar ID is provided instead of UUID, the response will be for the latest webinar instance.
   *
   * If a UUID starts with `/` or contains `//`, like `/ajXp112QmuoKj4854875==`, you must **double encode** the UUID before making an API request.
   *
   * @example atsXxhSEQWit9t+U02HXNQ==
   */
  meetingId: string;
  /**
   * The recording ID.
   *
   * @example a2f19f96-9294-4f51-8134-6f0eea108eb2
   */
  recordingId: string;
};

export type RecordingDeleteOneQueryParams = {
  /**
   * The recording delete actions.
   *  `trash` - Move recording to trash.
   *  `delete` - Delete recording permanently.
   *
   * @example delete
   * @default trash
   */
  action?: "trash" | "delete";
};

export type RecordingDeleteOneError = Fetcher.ErrorWrapper<undefined>;

export type RecordingDeleteOneVariables = {
  pathParams: RecordingDeleteOnePathParams;
  queryParams?: RecordingDeleteOneQueryParams;
} & FetcherExtraProps;

/**
 * Delete a specific recording file from a meeting or webinar. Note: To use this API, you must enable the **The host can delete cloud recordings** setting. Find this setting in the **Recording** tab of the **Settings** interface in the [Zoom web portal](https://zoom.us/).
 *
 *
 *
 * **[Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `recording:write:admin`,`recording:write`
 *
 * **[Granular Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `cloud_recording:delete:recording_file`,`cloud_recording:delete:recording_file:admin`,`cloud_recording:delete:recording_file:master`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
 */
export const recordingDeleteOne = (
  variables: RecordingDeleteOneVariables,
  signal?: AbortSignal,
) =>
  fetch<
    undefined,
    RecordingDeleteOneError,
    undefined,
    {},
    RecordingDeleteOneQueryParams,
    RecordingDeleteOnePathParams
  >({
    url: "/meetings/{meetingId}/recordings/{recordingId}",
    method: "delete",
    ...variables,
    signal,
  });

export type RecordingStatusUpdateOnePathParams = {
  /**
   * To get a meeting's cloud recordings, provide the meeting ID or meeting UUID. If the meeting ID is provided instead of UUID, the response will be for the latest meeting instance.
   *
   * To get a webinar's cloud recordings, provide the webinar ID or the webinar UUID. If the webinar ID is provided instead of UUID, the response will be for the latest webinar instance.
   *
   * If a UUID starts with `/` or contains `//`, like `/ajXp112QmuoKj4854875==`, you must **double encode** the UUID before making an API request.
   *
   * @example atsXxhSEQWit9t+U02HXNQ==
   */
  meetingId: string;
  /**
   * The recording ID.
   *
   * @example a2f19f96-9294-4f51-8134-6f0eea108eb2
   */
  recordingId: string;
};

export type RecordingStatusUpdateOneError = Fetcher.ErrorWrapper<undefined>;

export type RecordingStatusUpdateOneRequestBody = {
  /**
   * @example recover
   */
  action?: "recover";
};

export type RecordingStatusUpdateOneVariables = {
  body?: RecordingStatusUpdateOneRequestBody;
  pathParams: RecordingStatusUpdateOnePathParams;
} & FetcherExtraProps;

/**
 * Recover a single recording file from the meeting.
 *
 * Zoom lets users recover recordings from trash for up to 30 days from the deletion date.
 *
 *
 *
 * **[Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `recording:write:admin`,`recording:write`
 *
 * **[Granular Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `cloud_recording:update:recover_single_recording`,`cloud_recording:update:recover_single_recording:master`,`cloud_recording:update:recover_single_recording:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
 */
export const recordingStatusUpdateOne = (
  variables: RecordingStatusUpdateOneVariables,
  signal?: AbortSignal,
) =>
  fetch<
    undefined,
    RecordingStatusUpdateOneError,
    RecordingStatusUpdateOneRequestBody,
    {},
    {},
    RecordingStatusUpdateOnePathParams
  >({
    url: "/meetings/{meetingId}/recordings/{recordingId}/status",
    method: "put",
    ...variables,
    signal,
  });

export type GetMeetingTranscriptPathParams = {
  /**
   * To get a meeting's transcript, provide the meeting ID or meeting UUID. If the meeting ID is provided instead of UUID, the response will be for the latest meeting instance.
   *
   * To get a webinar's transcript, provide the webinar ID or the webinar UUID. If the webinar ID is provided instead of UUID, the response will be for the latest webinar instance.
   *
   * If a UUID starts with `/` or contains `//`, like `/ajXp112QmuoKj4854875==`, you must **double encode** the UUID before making an API request.
   *
   * @example atsXxhSEQWit9t+U02HXNQ==
   */
  meetingId: string;
};

export type GetMeetingTranscriptError = Fetcher.ErrorWrapper<undefined>;

export type GetMeetingTranscriptResponse = {
  /**
   * The meeting ID
   *
   * @example uaFkQyFCSwya8iNYtkAw3A==
   */
  meeting_id?: string;
  /**
   * The user account's unique identifier.
   *
   * @example Cx3wERazSgup7ZWRHQM8-w
   */
  account_id?: string;
  /**
   * The meeting topic.
   *
   * @example My Personal Meeting
   */
  meeting_topic?: string;
  /**
   * ID of the user set as the host of the meeting.
   *
   * @example _0ctZtY0REqWalTmwvrdIw
   */
  host_id?: string;
  /**
   * The date and time that the meeting's transcript was created.
   *
   * @example 2025-06-27T13:48:24Z
   */
  transcript_created_time?: string;
  /**
   * Whether the meeting transcript is available for download.
   * `true`: The transcript is ready and `download_url` will be returned.
   * `false`: The transcript cannot be downloaded. and the `download_restriction_reason` field will be returned instead with the explanation.
   *
   * Only when `can_download` is `true`, the transcript file can be accessed.
   *
   * @example true
   */
  can_download?: boolean;
  /**
   * Auto-delete status of a meeting's transcript
   *
   * Prerequisite: To get the auto-delete status, the host of the recording must have the recording setting **Delete cloud recordings after a specified number of days** enabled.
   *
   * @example true
   */
  auto_delete?: boolean;
  /**
   * The date when the recording will be auto-deleted when `auto_delete` is true. Otherwise, no date will be returned.
   *
   * @example 2052-11-07
   */
  auto_delete_date?: string;
  /**
   * The URL to download the transcript.
   *
   * This field is only present when `can_download` is `true`. If present, `download_restriction_reason` will not be included."
   *
   *
   * If a user has authorized and installed your OAuth app that contains recording scopes, use  the user's [OAuth access token](https://developers.zoom.us/docs/integrations/oauth/) to download the file. Set the `access_token` as a Bearer token in the Authorization header. For example:
   *
   * `curl -H 'Authorization: Bearer <ACCESS_TOKEN>' https://{{base-domain}}/rec/archive/download/xyz`.
   *
   * @example https://example.com/rec/meeting/transcript/download/YDztop0PYLrAQat616a1q1H86RM4jf1Bf3p42a4Ap1jV3bWAJAE.jjixtQU52SEwrsuJ
   */
  download_url?: string | null;
  /**
   * If `can_download` is false, this field provides the reason why the transcript cannot be downloaded.
   *
   * This field is only present when `can_download` is `false`. If present, `download_url` will not be included."
   *
   * | Value                | Description                                                                                  |
   * | -------------------- | -------------------------------------------------------------------------------------------- |
   * | `DELETED_OR_TRASHED` | The transcript has been deleted or moved to trash and is no longer available.                |
   * | `UNSUPPORTED`        | The transcript format is not supported for download. |
   * | `NO_TRANSCRIPT_DATA` | No transcript data exists for the meeting.                                                   |
   * | `NOT_READY`          | The transcript is still being processed and not yet ready for download.                      |
   *
   * @example NOT_READY
   */
  download_restriction_reason?:
    | "DELETED_OR_TRASHED"
    | "UNSUPPORTED"
    | "NO_TRANSCRIPT_DATA"
    | "NOT_READY"
    | null;
};

export type GetMeetingTranscriptVariables = {
  pathParams: GetMeetingTranscriptPathParams;
} & FetcherExtraProps;

/**
 * Return a meeting's [transcript](https://support.zoom.com/hc/en/article?id=zm_kb&sysparm_article=KB0076632) information. Use the `download_url` property listed in the response to download the transcript content.
 *
 * To download the trancript, send the user's [OAuth access token](/docs/integrations/oauth/) as a Bearer token in the Authorization header.
 *
 *  `curl -H 'Authorization: Bearer <ACCESS_TOKEN>' https://{{base-domain}}//rec/meeting/transcript/download/xyz`
 *
 * **[Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `recording:read`,`recording:write`,`recording:read:admin`,`recording:write:admin`
 *
 * **[Granular Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `cloud_recording:read:meeting_transcript`,`cloud_recording:read:meeting_transcript:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
 */
export const getMeetingTranscript = (
  variables: GetMeetingTranscriptVariables,
  signal?: AbortSignal,
) =>
  fetch<
    GetMeetingTranscriptResponse,
    GetMeetingTranscriptError,
    undefined,
    {},
    {},
    GetMeetingTranscriptPathParams
  >({
    url: "/meetings/{meetingId}/transcript",
    method: "get",
    ...variables,
    signal,
  });

export type DeleteMeetingTranscriptPathParams = {
  /**
   * To delete a meeting's transcript, provide the meeting ID or meeting's unique universal identifier (UUID). If the meeting ID is provided instead of UUID, the response will be for the latest meeting instance.
   *
   * To delete a webinar's transcript, provide the webinar ID or the webinar's UUID. If the webinar ID is provided instead of UUID, the response will be for the latest webinar instance.
   *
   * If a UUID starts with `/` or contains `//`, like `/ajXp112QmuoKj4854875==`, you must **double encode** the UUID before making an API request.
   *
   * @example atsXxhSEQWit9t+U02HXNQ==
   */
  meetingId: string;
};

export type DeleteMeetingTranscriptError = Fetcher.ErrorWrapper<undefined>;

export type DeleteMeetingTranscriptVariables = {
  pathParams: DeleteMeetingTranscriptPathParams;
} & FetcherExtraProps;

/**
 * Delete a transcript for a meeting or webinar.
 *
 *
 *
 * **[Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `recording:write`,`recording:write:admin`
 *
 * **[Granular Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `cloud_recording:delete:meeting_transcript`,`cloud_recording:delete:meeting_transcript:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
 */
export const deleteMeetingTranscript = (
  variables: DeleteMeetingTranscriptVariables,
  signal?: AbortSignal,
) =>
  fetch<
    undefined,
    DeleteMeetingTranscriptError,
    undefined,
    {},
    {},
    DeleteMeetingTranscriptPathParams
  >({
    url: "/meetings/{meetingId}/transcript",
    method: "delete",
    ...variables,
    signal,
  });

export type RecordingStatusUpdatePathParams = {
  /**
   * The meeting's universally unique identifier (UUID). Each meeting instance generates a UUID. For example, after a meeting ends, a new UUID is generated for the next meeting instance.
   *
   * If the meeting UUID begins with a `/` character or contains a `//` character, you **must** double-encode the meeting UUID when using the meeting UUID for other API calls.
   *
   * @example 4444AAAiAAAAAiAiAiiAii==
   */
  meetingUUID: string;
};

export type RecordingStatusUpdateError = Fetcher.ErrorWrapper<undefined>;

export type RecordingStatusUpdateRequestBody = {
  /**
   * @example recover
   */
  action?: "recover";
};

export type RecordingStatusUpdateVariables = {
  body?: RecordingStatusUpdateRequestBody;
  pathParams: RecordingStatusUpdatePathParams;
} & FetcherExtraProps;

/**
 * Recover all deleted [cloud recordings](https://support.zoom.us/hc/en-us/articles/203741855-Cloud-Recording) of a specific meeting.
 * Zoom lets users recover recordings from trash for up to 30 days from the deletion date.
 *
 *
 * **Prerequisites**:
 *
 * * A Pro user with Cloud Recording enabled.
 *
 * **[Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `recording:write:admin`,`recording:write`
 *
 * **[Granular Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `cloud_recording:update:recover_meeting_recordings`,`cloud_recording:update:recover_meeting_recordings:master`,`cloud_recording:update:recover_meeting_recordings:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
 */
export const recordingStatusUpdate = (
  variables: RecordingStatusUpdateVariables,
  signal?: AbortSignal,
) =>
  fetch<
    undefined,
    RecordingStatusUpdateError,
    RecordingStatusUpdateRequestBody,
    {},
    {},
    RecordingStatusUpdatePathParams
  >({
    url: "/meetings/{meetingUUID}/recordings/status",
    method: "put",
    ...variables,
    signal,
  });

export type RecordingsListPathParams = {
  /**
   * The user's ID or email address. For user-level apps, pass the `me` value.
   */
  userId: string;
};

export type RecordingsListQueryParams = {
  /**
   * The number of records returned within a single API call.
   *
   * @maximum 300
   * @example 30
   * @default 30
   */
  page_size?: number;
  /**
   * The next page token paginates through a large set of results. A next page token returns whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
   *
   * @example IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2
   */
  next_page_token?: string;
  /**
   * The query metadata of the recording if using an on-premise meeting connector for the meeting.
   *
   * @example false
   * @default false
   */
  mc?: string;
  /**
   * The query trash.
   * * `true` - List recordings from trash.
   * * `false` - Do not list recordings from the trash.
   *
   * The default value is `false`. If you set it to `true`, you can use the `trash_type` property to indicate the type of Cloud recording that you need to retrieve.
   *
   * @example false
   * @default false
   */
  trash?: boolean;
  /**
   * The start date in 'yyyy-mm-dd' UTC format for the date range where you would like to retrieve recordings. The maximum range can be a month. If no value is provided for this field, the default will be current date.
   *
   * For example, if you make the API request on June 30, 2020, without providing the `from` and `to` parameters, by default the value of 'from' field will be `2020-06-30` and the value of the 'to' field will be `2020-07-01`.
   *
   * **Note**: The `trash` files cannot be filtered by date range and thus, the `from` and `to` fields should not be used for trash files.
   *
   * @format date
   * @example 2020-06-30
   */
  from?: string;
  /**
   * The end date in 'yyyy-mm-dd' 'yyyy-mm-dd' UTC format.
   *
   * @format date
   * @example 2020-06-30
   */
  to?: string;
  /**
   * The type of cloud recording to retrieve from the trash.
   *
   *  *   `meeting_recordings`: List all meeting recordings from the trash.
   *  *  `recording_file`: List all individual recording files from the trash.
   *
   * @example meeting_recordings
   * @default meeting_recordings
   */
  trash_type?: string;
  /**
   * The meeting ID.
   *
   * @example 6840331990
   */
  meeting_id?: number;
};

export type RecordingsListError = Fetcher.ErrorWrapper<undefined>;

export type RecordingsListResponse = {
  /**
   * The start date.
   *
   * @format date
   * @example 2022-01-01
   */
  from?: string;
  /**
   * The end date.
   *
   * @format date
   * @example 2022-04-01
   */
  to?: string;
  /**
   * The next page token paginates through a large set of results. A next page token returns whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
   *
   * @example Tva2CuIdTgsv8wAnhyAdU3m06Y2HuLQtlh3
   */
  next_page_token?: string;
  /**
   * The number of pages returned for the request made.
   *
   * @example 1
   */
  page_count?: number;
  /**
   * The number of records returned within a single API call.
   *
   * @maximum 300
   * @example 30
   * @default 30
   */
  page_size?: number;
  /**
   * The number of all records available across pages.
   *
   * @example 1
   */
  total_records?: number;
  /**
   * List of recordings.
   */
  meetings?: {
    /**
     * List of recording file.
     */
    recording_files?: {
      /**
       * The time when recording was deleted. Returned in the response only for trash query.
       *
       * @example 2021-03-18T05:41:36Z
       */
      deleted_time?: string;
      /**
       * The URL to download the recording. If a user has authorized and installed your OAuth app that contains recording scopes, use the `download_access_token` or the user's [OAuth access token](https://developers.zoom.us/docs/integrations/oauth/) to download the file. Set the token as a Bearer token in the Authorization header.
       *
       * `curl -H 'Authorization: Bearer <ACCESS_TOKEN>' https://{{base-domain}}/rec/archive/download/xyz`.
       *
       * **Note:** This field does **not** return for [Zoom On-Premise accounts](https://support.zoom.us/hc/en-us/articles/360034064852-Zoom-On-Premise-Deployment). Instead, this API will return the `file_path` field. The URL may be a redirect. In that case, use `curl --location` to follow redirects or use another tool, like Postman.
       *
       * @example https://example.com/rec/download/Qg75t7xZBtEbAkjdlgbfdngBBBB
       */
      download_url?: string;
      /**
       * The file path to the On-Premise account recording.
       *
       * **Note:** This API only returns this field for [Zoom On-Premise accounts](https://support.zoom.us/hc/en-us/articles/360034064852-Zoom-On-Premise-Deployment). It does **not** return the `download_url` field.
       *
       * @example /9090876528/path01/demo.mp4
       */
      file_path?: string;
      /**
       * The recording file size.
       *
       * @example 7220
       */
      file_size?: number;
      /**
       * The recording file type.
       *
       * `MP4` - Video file of the recording.
       *  `M4A` Audio-only file of the recording.
       *  `TIMELINE` - Timestamp file of the recording in JSON file format. To get a timeline file, the **Add a timestamp to the recording** setting must be enabled in the [recording settings](https://support.zoom.us/hc/en-us/articles/203741855-Cloud-recording#h_3f14c3a4-d16b-4a3c-bbe5-ef7d24500048). The time will display in the host's timezone, set on their Zoom profile.
       *
       *   `TRANSCRIPT` - Transcription file of the recording in VTT format.
       *   `CHAT` - A TXT file containing in-meeting chat messages that were sent during the meeting.
       *  `CC` - File containing closed captions of the recording in VTT file format.
       *  `CSV` - File containing polling data in CSV format.
       *
       *
       *
       *
       * A recording file object with file type of either `CC` or `TIMELINE` **does not have** the following properties:
       *
       * 	`id`, `status`, `file_size`, `recording_type`, and `play_url`.
       *  `SUMMARY` - Summary file of the recording in JSON file format.
       *
       * @example MP4
       */
      file_type?:
        | "MP4"
        | "M4A"
        | "CHAT"
        | "TRANSCRIPT"
        | "CSV"
        | "TB"
        | "CC"
        | "CHAT_MESSAGE"
        | "SUMMARY";
      /**
       * The file extension type of the recording file.
       *
       * @example M4A
       */
      file_extension?: "MP4" | "M4A" | "TXT" | "VTT" | "CSV" | "JSON" | "JPG";
      /**
       * The recording file ID. Included in the response of general query.
       *
       * @example 72576a1f-4e66-4a77-87c4-f13f9808bd76
       */
      id?: string;
      /**
       * The meeting ID.
       *
       * @example L0AGOEPVR9m5WSOOs/d+FQ==
       */
      meeting_id?: string;
      /**
       * The URL to play a recording file.
       *
       * @example https://example.com/rec/play/Qg75t7xZBtEbAkjdlgbfdngBBBB
       */
      play_url?: string;
      /**
       * The recording end time. Response in general query.
       *
       * @example 2021-03-18T05:41:36Z
       */
      recording_end?: string;
      /**
       * The recording start time.
       *
       * @example 2021-03-18T05:41:36Z
       */
      recording_start?: string;
      /**
       * The recording type.
       *  `shared_screen_with_speaker_view(CC)`
       *  `shared_screen_with_speaker_view`
       *  `shared_screen_with_gallery_view`
       *  `active_speaker`
       *  `gallery_view`
       *  `shared_screen`
       *  `audio_only`
       *  `audio_transcript`
       *  `chat_file`
       *  `poll`
       *  `timeline`
       *  `closed_caption`
       *  `audio_interpretation`
       *  `summary`
       *  `summary_next_steps`
       *  `summary_smart_chapters`
       *  `sign_interpretation`
       *  `production_studio`
       *
       * @example shared_screen_with_speaker_view
       */
      recording_type?:
        | "shared_screen_with_speaker_view(CC)"
        | "shared_screen_with_speaker_view"
        | "shared_screen_with_gallery_view"
        | "active_speaker"
        | "gallery_view"
        | "shared_screen"
        | "audio_only"
        | "audio_transcript"
        | "chat_file"
        | "poll"
        | "host_video"
        | "closed_caption"
        | "timeline"
        | "thumbnail"
        | "audio_interpretation"
        | "summary"
        | "summary_next_steps"
        | "summary_smart_chapters"
        | "sign_interpretation"
        | "production_studio";
      /**
       * The recording status.
       *
       * @example completed
       */
      status?: "completed";
    }[];
    /**
     * Unique Identifier of the user account.
     *
     * @example Cx3wERazSgup7ZWRHQM8-w
     */
    account_id?: string;
    /**
     * Meeting duration.
     *
     * @example 20
     */
    duration?: number;
    /**
     * ID of the user set as host of meeting.
     *
     * @example _0ctZtY0REqWalTmwvrdIw
     */
    host_id?: string;
    /**
     * Meeting ID - also known as the meeting number.
     *
     * @example 6840331990
     */
    id?: number;
    /**
     * Number of recording files returned in the response of this API call. This includes the `recording_files` and  `participant_audio_files` files.
     *
     * @example 22
     */
    recording_count?: number;
    /**
     * The time when the meeting started.
     *
     * @format date-time
     * @example 2021-03-18T05:41:36Z
     */
    start_time?: string;
    /**
     * Meeting topic.
     *
     * @example My Personal Meeting
     */
    topic?: string;
    /**
     * The total file size of the recording. This includes the `recording_files` and `participant_audio_files` files.
     *
     * @format int64
     * @example 22
     */
    total_size?: number;
    /**
     * The recording's associated type of meeting or webinar:
     *
     * If the recording is of a meeting:
     * * `1` - Instant meeting.
     * * `2` - Scheduled meeting.
     * * `3` - A recurring meeting with no fixed time.
     * * `4` - A meeting created viaPersonal Meeting ID (PMI).
     * * `7` - A [Personal Audio Conference](https://support.zoom.us/hc/en-us/articles/204517069-Getting-Started-with-Personal-Audio-Conference) (PAC).
     * * `8` - Recurring meeting with a fixed time.
     *
     * If the recording is of a webinar:
     * * `5` - A webinar.
     * * `6` - A recurring webinar without a fixed time
     * * `9` - A recurring webinar with a fixed time.
     *
     * If the recording is **not** from a meeting or webinar:
     *
     * * `99` - A recording uploaded via the [**Recordings**](https://zoom.us/recording) interface on the Zoom Web Portal.
     *
     * @example 1
     */
    type?: "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "99";
    /**
     * Unique Meeting Identifier. Each instance of the meeting will have its own UUID.
     *
     * @example BOKXuumlTAGXuqwr3bLyuQ==
     */
    uuid?: string;
    /**
     * The cloud recording's passcode to be used in the URL.
     * Include fields in the response. The password field requires the user role of the authorized account to enable the **View Recording Content** permission to be returned.
     * This recording's passcode can be directly spliced in `play_url` or `share_url` with `?pwd=` to access and play. For example, 'https://zoom.us/rec/share/**************?pwd=yNYIS408EJygs7rE5vVsJwXIz4-VW7MH'. If you want to use this field, please contact Zoom support.
     *
     * @example yNYIS408EJygs7rE5vVsJwXIz4-VW7MH
     */
    recording_play_passcode?: string;
    /**
     * Auto-delete status of a meeting's [cloud recording](https://support.zoom.us/hc/en-us/articles/203741855-Cloud-Recording).
     *
     * Prerequisite: To get the auto-delete status, the host of the recording must have the recording setting **Delete cloud recordings after a specified number of days** enabled.
     *
     * @example true
     */
    auto_delete?: boolean;
    /**
     * The date when the recording will be auto-deleted when `auto_delete` is `true`. Otherwise, no date will be returned.
     *
     * @example 2028-07-12
     */
    auto_delete_date?: string;
  }[];
};

export type RecordingsListVariables = {
  pathParams: RecordingsListPathParams;
  queryParams?: RecordingsListQueryParams;
} & FetcherExtraProps;

/**
 * Lists all [cloud recordings](https://support.zoom.us/hc/en-us/articles/203741855-Cloud-Recording) for a user.
 *
 * For user-level apps, pass the [`me` value](https://developers.zoom.us/docs/api/rest/using-zoom-apis/#the-me-keyword) instead of the `userId` parameter.  To access a user's passcode protected cloud recording, send the user's [OAuth access token](https://developers.zoom.us/docs/integrations/oauth/) as a bearer token in the authorization header.
 *
 * Example:  `curl -H "Authorization: Bearer <ACCESS_TOKEN>" https://{{base-domain}}/rec/archive/download/xyz`
 *
 * **Prerequisites:**
 * * Must have a Pro or a higher plan.
 * * Must enable Cloud Recording on the user's account.
 *
 * **[Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `recording:read:admin`,`recording:read`
 *
 * **[Granular Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `cloud_recording:read:list_user_recordings`,`cloud_recording:read:list_user_recordings:master`,`cloud_recording:read:list_user_recordings:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
 */
export const recordingsList = (
  variables: RecordingsListVariables,
  signal?: AbortSignal,
) =>
  fetch<
    RecordingsListResponse,
    RecordingsListError,
    undefined,
    {},
    RecordingsListQueryParams,
    RecordingsListPathParams
  >({ url: "/users/{userId}/recordings", method: "get", ...variables, signal });

export type ListDevicesQueryParams = {
  /**
   * Filter devices by name or serial number.
   *
   * @example poly
   */
  search_text?: string;
  /**
   * Filter devices by platform operating system.
   *
   * @example win
   */
  platform_os?: "win" | "mac" | "ipad" | "iphone" | "android" | "linux";
  /**
   * Filter devices by enrollment of ZDM (Zoom Device Management).
   *
   * @example true
   * @default true
   */
  is_enrolled_in_zdm?: boolean;
  /**
   * Filter devices by device type.
   *   Device Type:
   *  `-1` - All Zoom Room device(0,1,2,3,4,6).
   *  `0` - Zoom Rooms Computer.
   *  `1` - Zoom Rooms Controller.
   *  `2` - Zoom Rooms Scheduling Display.
   *  `3` - Zoom Rooms Control System.
   *  `4` -  Zoom Rooms Whiteboard.
   *  `5` - Zoom Phone Appliance.
   *  `6` - Zoom Rooms Computer (with Controller).
   *
   * @example 0
   * @default -1
   */
  device_type?: -1 | 0 | 1 | 2 | 3 | 4 | 5 | 6;
  /**
   * Filter devices by vendor.
   *
   * @example poly
   */
  device_vendor?: string;
  /**
   * Filter devices by model.
   *
   * @example ep5
   */
  device_model?: string;
  /**
   * Filter devices by status.
   *   Device Status:
   *  `0` - offline.
   *  `1` - online.
   *  `-1` - unlink
   *
   * @example 0
   * @default -1
   */
  device_status?: -1 | 0 | 1;
  /**
   * The number of records returned within a single API call.
   *
   * @maximum 300
   * @example 30
   * @default 30
   */
  page_size?: number;
  /**
   * Use the next page token to paginate through large result sets. A next page token is returned whenever the set of available results exceeds the current page size. This token's expiration period is 15 minutes.
   *
   * @example IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2
   */
  next_page_token?: string;
};

export type ListDevicesError = Fetcher.ErrorWrapper<undefined>;

export type ListDevicesResponse = {
  /**
   * The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
   *
   * @example At6eWnFZ1FB3arCXnRxqHLXKhbDW18yz2i2
   */
  next_page_token?: string;
  /**
   * The number of records returned within a single API call.
   *
   * @example 20
   */
  page_size?: number;
  devices?: {
    /**
     * Unique identifier of the device.
     *
     * @example F1C6E9DF-429E-4FA1-85DA-AC95464F3D18
     */
    device_id?: string;
    /**
     * The name of the device.
     *
     * @example My device
     */
    device_name?: string;
    /**
     * The mac address of the device.
     *
     * @example 01-23-45-67-89-AB
     */
    mac_address?: string;
    /**
     * The device's serial number.
     *
     * @example 6NRN2A0
     */
    serial_number?: string;
    /**
     * The device's manufacturer.
     *
     * @example Poly
     */
    vendor?: string;
    /**
     * The device's model.
     *
     * @example StudioX30
     */
    model?: string;
    /**
     * The device's platform.
     *
     * @example Epos expandvision5 1.2.22315.04
     */
    platform_os?: string;
    /**
     * App version of Zoom Rooms.
     *
     * @example 5.13.0.5762
     */
    app_version?: string;
    /**
     * The name of the tag.
     *
     * @example personal rooms
     */
    tag?: string;
    /**
     * Whether the device enrolled in ZDM (Zoom Device Management).
     *
     * @example true
     */
    enrolled_in_zdm?: boolean;
    /**
     * Whether the device connected to ZDM (Zoom Device Management).
     *
     * @example true
     */
    connected_to_zdm?: boolean;
    /**
     * id of the Zoom Room.
     *
     * @example 72afdc13-a289-40c3-b358-50c8b8de
     */
    room_id?: string;
    /**
     * Name of the Zoom Room.
     *
     * @example My Personal Meeting Room
     */
    room_name?: string;
    /**
     * Filter devices by device type.
     *   Device Type:
     *  `-1` - All Zoom Room device(0,1,2,3,4,6).
     *  `0` - Zoom Rooms Computer.
     *  `1` - Zoom Rooms Controller.
     *  `2` - Zoom Rooms Scheduling Display.
     *  `3` - Zoom Rooms Control System.
     *  `4` -  Zoom Rooms Whiteboard.
     *  `5` - Zoom Phone Appliance.
     *  `6` - Zoom Rooms Computer (with Controller).
     *
     * @example 0
     */
    device_type?: 0 | 1 | 2 | 3 | 4 | 5 | 6;
    /**
     * The version of the SDK.
     *
     * @example 2.0.11
     */
    skd_version?: string;
    /**
     * Filter devices by status.
     *   Device Status:
     *  `0` - offline.
     *  `1` - online.
     *  `-1` - unlink
     *
     * @example 0
     */
    device_status?: -1 | 0 | 1;
    /**
     * The time when device was online last time.
     *
     * @example 2022-10-27T10:23:15Z
     */
    last_online?: string;
    /**
     * The owner of the phone device
     *
     * @example test-user@ya.us
     */
    user_email?: string;
  }[];
};

export type ListDevicesVariables = {
  queryParams?: ListDevicesQueryParams;
} & FetcherExtraProps;

/**
 * This API lets you list devices.
 *
 *
 *
 * **[Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `device:read:admin`,`device:write:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `HEAVY`
 */
export const listDevices = (
  variables: ListDevicesVariables,
  signal?: AbortSignal,
) =>
  fetch<
    ListDevicesResponse,
    ListDevicesError,
    undefined,
    {},
    ListDevicesQueryParams,
    {}
  >({ url: "/devices", method: "get", ...variables, signal });

export type AddDeviceError = Fetcher.ErrorWrapper<undefined>;

export type AddDeviceRequestBody = {
  /**
   * The device's name.
   *
   * @example My device
   */
  device_name: string;
  /**
   * The device's mac address.
   *
   * @example 01-23-45-67-89-AB
   */
  mac_address: string;
  /**
   * The device's serial number.
   *
   * @example 6NRN2A0
   */
  serial_number: string;
  /**
   * The device's manufacturer.
   *
   * @example Poly
   */
  vendor: string;
  /**
   * The device's model.
   *
   * @example StudioX30
   */
  model: string;
  /**
   * The Zoom Room's ID. Only for Zoom Room devices.
   *
   * @example 72afdc13-a289-40c3-b358-50c8b8de
   */
  room_id?: string;
  /**
   * User email for assigning the Zoom Phone device. Only for Zoom Phone devices.
   *
   * @example test-user@ya.us
   */
  user_email?: string;
  /**
   * Device type.
   *  `0` - Zoom Rooms computer.
   *  `1` - Zoom Rooms controller.
   *  `5` - Zoom Phone appliance.
   *
   * @example 0
   */
  device_type: 0 | 1 | 5;
  /**
   * The name of the tag.
   *
   * @example personal rooms
   */
  tag?: string;
  /**
   * The ZDM group ID.
   *
   * @example ff49588c-92c4-4406-99e6-1942d8a61a7b
   */
  zdm_group_id?: string;
  /**
   * The extension number.
   *
   * @example 802
   */
  extension_number?: string;
};

export type AddDeviceVariables = {
  body: AddDeviceRequestBody;
} & FetcherExtraProps;

/**
 * Add a new device to Zoom account.
 *
 * **Scope:** `device:write:admin`
 *
 *  **[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Medium`
 *
 * **[Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `device:write:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
 */
export const addDevice = (
  variables: AddDeviceVariables,
  signal?: AbortSignal,
) =>
  fetch<undefined, AddDeviceError, AddDeviceRequestBody, {}, {}, {}>({
    url: "/devices",
    method: "post",
    ...variables,
    signal,
  });

export type GetzdmgroupinfoQueryParams = {
  /**
   * The total number of records returned from a single API call.
   * Default - 30.
   * Max -100.
   *
   * @example 30
   */
  page_size?: number;
  /**
   * Use the next page token to paginate through large result sets. A next page token is returned whenever the set of available results exceeds the current page size. This token's expiration period token is 15 minutes.
   *
   * @example BJLYC6PABbAHdjwSkGVQeeR6B1juwHqj3G2
   */
  next_page_token?: string;
};

export type GetzdmgroupinfoError = Fetcher.ErrorWrapper<undefined>;

export type GetzdmgroupinfoResponse = {
  /**
   * All ZDM group information under current account.
   *
   * @maxItems 50
   */
  groups?: {
    /**
     * The ZDM group's unique ID.
     *
     * @example ff49588c-92c4-4406-99e6-1942d8a61a7b
     */
    zdm_group_id?: string;
    /**
     * The ZDM group's name.
     *
     * @example HeFei-group
     */
    name?: string;
    /**
     * The ZDM group's describe.
     *
     * @example Group in Hefei region
     */
    description?: string;
  }[];
  /**
   * Use the next page token to paginate through a large set of results. A next page token is returned whenever the set of available results exceeds the current page size. This token's expiration period is 15 minutes.
   *
   * @example RaO87FrnwXvFQta5aV8sU5C3c9O8s9Nraq2
   */
  next_page_token?: string;
  /**
   * The total number of records returned from a single API call.
   *
   * @example 30
   */
  page_size?: number;
};

export type GetzdmgroupinfoVariables = {
  queryParams?: GetzdmgroupinfoQueryParams;
} & FetcherExtraProps;

/**
 * Get Zoom Device Manager (ZDM) group information for an account.
 *
 * **[Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `device:read:admin`
 *
 * **[Granular Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `device:read:list_groups:admin`,`device:read:list_groups:master`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
 */
export const getzdmgroupinfo = (
  variables: GetzdmgroupinfoVariables,
  signal?: AbortSignal,
) =>
  fetch<
    GetzdmgroupinfoResponse,
    GetzdmgroupinfoError,
    undefined,
    {},
    GetzdmgroupinfoQueryParams,
    {}
  >({ url: "/devices/groups", method: "get", ...variables, signal });

export type AssigndevicetoauserCommonareaError =
  Fetcher.ErrorWrapper<undefined>;

export type AssigndevicetoauserCommonareaRequestBody = {
  /**
   * The extension number.
   *
   * @example 802
   */
  extension_number?: string;
  /**
   * The device's mac address.
   *
   * @example 64167ffc0ed7
   */
  mac_address: string;
  /**
   * The device's manufacturer.
   *
   * @example poly
   */
  vendor: string;
};

export type AssigndevicetoauserCommonareaVariables = {
  body: AssigndevicetoauserCommonareaRequestBody;
} & FetcherExtraProps;

/**
 * Assign a device to a user or common area, or move a device to another user or common area, or remove a device.
 *
 * **Prerequisites:**
 * * Device must be enrolled in Zoom Device Management (ZDM).
 *
 * **[Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `device:write:admin`
 *
 * **[Granular Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `device:write:zpa_device:admin`,`device:write:zpa_device:master`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
 */
export const assigndevicetoauserCommonarea = (
  variables: AssigndevicetoauserCommonareaVariables,
  signal?: AbortSignal,
) =>
  fetch<
    undefined,
    AssigndevicetoauserCommonareaError,
    AssigndevicetoauserCommonareaRequestBody,
    {},
    {},
    {}
  >({ url: "/devices/zpa/assignment", method: "post", ...variables, signal });

export type GetZpaDeviceListProfileSettingOfaUserQueryParams = {
  /**
   * The user's ID or email address. For user-level apps, pass `me` as the value for `user_id`.
   *
   * @example DYHrdpjrS3uaOf7dPkkg8w
   */
  user_id?: string;
};

export type GetZpaDeviceListProfileSettingOfaUserError =
  Fetcher.ErrorWrapper<undefined>;

export type GetZpaDeviceListProfileSettingOfaUserResponse = {
  /**
   * The user's language.
   *
   * @example English
   */
  language?: string;
  /**
   * The user's timezone.
   *
   * @example  (GMT+6:00) Astana, Dhaka
   */
  timezone?: string;
  /**
   * The ZPA information.
   *
   * @maxItems 50
   * @minItems 0
   */
  device_infos?: {
    /**
     * The device ID.
     *
     * @example yealink-249AD8E00476
     */
    device_id?: string;
    /**
     * The device type.
     *
     * @example Zoom Phone Appliance
     */
    device_type?: string;
    /**
     * The device's manufacturer.
     *
     * @example Yealink
     */
    vendor?: string;
    /**
     * The device's model name.
     *
     * @example MP56
     */
    model?: string;
    /**
     * The device's status, either `online` or `offline`.
     */
    status?: "online" | "offline";
    /**
     * The device policy.
     */
    policy?: {
      hot_desking?: {
        /**
         * The device's status, either `online` or `offline`.
         *
         * @example online
         */
        status?: "online" | "offline";
      };
      call_control?: {
        /**
         * This field lets the call control feature to the current device. Configure the desk phone devices to enable call control, which lets users perform desk phone's call control actions from the Zoom desktop client, including making and accepting calls.
         * * `unsupported`
         * * `on`
         * * `off`
         *
         * @example off
         */
        status?: "unsupported" | "on" | "off";
      };
    };
  }[];
};

export type GetZpaDeviceListProfileSettingOfaUserVariables = {
  queryParams?: GetZpaDeviceListProfileSettingOfaUserQueryParams;
} & FetcherExtraProps;

/**
 * Get a user's Zoom Phone Appliance (ZPA) device profile settings. For user-level apps, pass the `me` value instead of the `userId` parameter.
 *
 * **[Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `device:read:admin`
 *
 * **[Granular Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `device:read:user_setting:admin`,`device:read:user_setting:master`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
 */
export const getZpaDeviceListProfileSettingOfaUser = (
  variables: GetZpaDeviceListProfileSettingOfaUserVariables,
  signal?: AbortSignal,
) =>
  fetch<
    GetZpaDeviceListProfileSettingOfaUserResponse,
    GetZpaDeviceListProfileSettingOfaUserError,
    undefined,
    {},
    GetZpaDeviceListProfileSettingOfaUserQueryParams,
    {}
  >({ url: "/devices/zpa/settings", method: "get", ...variables, signal });

export type UpgradeZpasAppError = Fetcher.ErrorWrapper<undefined>;

export type UpgradeZpasAppRequestBody = {
  /**
   * The ZDM group ID.
   *
   * @example ff49588c-92c4-4406-99e6-1942d8a61a7b
   */
  zdm_group_id: string;
  data:
    | {
        firmware_versions?: {
          /**
           * The device's manufacturer.
           *
           * @example AudioCodes
           */
          vendor?: string;
          /**
           * The firmware version.
           *
           * @example 1.19.552
           */
          version?: string;
          /**
           * The device's model name. Maximum of 64 characters.
           *
           * @example C470HD
           */
          model?: string;
        }[];
        /**
         * Upgrade firmware.
         *
         * @example UPGRADE_FIRMWARE
         * @default UPGRADE_FIRMWARE
         */
        upgrade_type: "UPGRADE_FIRMWARE";
      }
    | {
        /**
         * The app version to be upgraded. If upgrade type is `0`, this field won't work. If upgrade type is `1`, this field will work.
         *
         * @example 5.16.5.3920
         */
        app_version?: string;
        /**
         * Upgrade app.
         *
         * @example UPGRADE_APP
         */
        upgrade_type: "UPGRADE_APP";
      };
};

export type UpgradeZpasAppVariables = {
  body: UpgradeZpasAppRequestBody;
} & FetcherExtraProps;

/**
 * Upgrade ZPA firmware or app by Zoom Device Manager (ZDM) group ID.
 *
 * **Prerequisites:**
 *
 * * Account owner or admin permissions.
 *
 * **[Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `device:write:admin`
 *
 * **[Granular Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `device:write:zpa_os_app:admin`,`device:write:zpa_os_app:master`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `HEAVY`
 */
export const upgradeZpasApp = (
  variables: UpgradeZpasAppVariables,
  signal?: AbortSignal,
) =>
  fetch<undefined, UpgradeZpasAppError, UpgradeZpasAppRequestBody, {}, {}, {}>({
    url: "/devices/zpa/upgrade",
    method: "post",
    ...variables,
    signal,
  });

export type DeleteZpaDeviceByVendorAndMacAddressPathParams = {
  /**
   * The device's manufacturer.
   *
   * @example Poly
   */
  vendor: string;
  /**
   * The device's mac address.
   *
   * @example 64167ffc0ed7
   */
  macAddress: string;
};

export type DeleteZpaDeviceByVendorAndMacAddressError =
  Fetcher.ErrorWrapper<undefined>;

export type DeleteZpaDeviceByVendorAndMacAddressVariables = {
  pathParams: DeleteZpaDeviceByVendorAndMacAddressPathParams;
} & FetcherExtraProps;

/**
 * Remove a ZPA device from the device manager, by vendor and mac address.
 *
 * **[Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `device:write:admin`
 *
 * **[Granular Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `device:delete:zpa_device:admin`,`device:delete:zpa_device:master`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
 */
export const deleteZpaDeviceByVendorAndMacAddress = (
  variables: DeleteZpaDeviceByVendorAndMacAddressVariables,
  signal?: AbortSignal,
) =>
  fetch<
    undefined,
    DeleteZpaDeviceByVendorAndMacAddressError,
    undefined,
    {},
    {},
    DeleteZpaDeviceByVendorAndMacAddressPathParams
  >({
    url: "/devices/zpa/vendors/{vendor}/mac_addresses/{macAddress}",
    method: "delete",
    ...variables,
    signal,
  });

export type GetZpaVersioninfoPathParams = {
  /**
   * The Zoom Device Management (ZDM) group ID.
   *
   * @example ff49588c-92c4-4406-99e6-1942d8a61a7b
   */
  zdmGroupId: string;
};

export type GetZpaVersioninfoError = Fetcher.ErrorWrapper<undefined>;

export type GetZpaVersioninfoResponse = {
  /**
   * List of firmware that can be upgraded.
   *
   * @maxItems 3
   */
  firmware_versions?: {
    /**
     * The device's manufacturer.
     *
     * @example AudioCodes
     */
    vendor?: string;
    /**
     * The device's model name.
     *
     * @example C470HD
     */
    model?: string;
    /**
     * The package version.
     *
     * @example 1.19.552
     */
    version?: string;
    /**
     * The prompt information for this version.
     *
     * @example You are about to perform an Android operating system upgrade. The change is permanent and cannot be reversed.
     */
    warn_info?: string;
  }[];
  /**
   * List of app versions that can be upgraded.
   *
   * @maxItems 3
   */
  app_versions?: string[];
};

export type GetZpaVersioninfoVariables = {
  pathParams: GetZpaVersioninfoPathParams;
} & FetcherExtraProps;

/**
 * Get ZPA firmware and app version information that can be upgraded for devices.
 *
 * **[Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `device:read:admin`
 *
 * **[Granular Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `device:read:list_zpa_versions:admin`,`device:read:list_zpa_versions:master`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
 */
export const getZpaVersioninfo = (
  variables: GetZpaVersioninfoVariables,
  signal?: AbortSignal,
) =>
  fetch<
    GetZpaVersioninfoResponse,
    GetZpaVersioninfoError,
    undefined,
    {},
    {},
    GetZpaVersioninfoPathParams
  >({
    url: "/devices/zpa/zdm_groups/{zdmGroupId}/versions",
    method: "get",
    ...variables,
    signal,
  });

export type GetDevicePathParams = {
  /**
   * The device's unique identifier.
   *
   * @example F1C6E9DF-429E-4FA1-85DA-AC95464F3D18
   */
  deviceId: string;
};

export type GetDeviceError = Fetcher.ErrorWrapper<undefined>;

export type GetDeviceResponse = {
  /**
   * The device's unique identifier.
   *
   * @example F1C6E9DF-429E-4FA1-85DA-AC95464F3D18
   */
  device_id?: string;
  /**
   * The name of the device.
   *
   * @example My device
   */
  device_name?: string;
  /**
   * The device's MAC address.
   *
   * @example 01-23-45-67-89-AB
   */
  mac_address?: string;
  /**
   * The device's serial number.
   *
   * @example 6NRN2A0
   */
  serial_number?: string;
  /**
   * The device's manufacturer.
   *
   * @example Poly
   */
  vendor?: string;
  /**
   * The device's model.
   *
   * @example StudioX30
   */
  model?: string;
  /**
   * The device's platform.
   *
   * @example Epos expandvision5 1.2.22315.04
   */
  platform_os?: string;
  /**
   * App version of Zoom Rooms.
   *
   * @example 5.13.0.5762
   */
  app_version?: string;
  /**
   * The tag's name.
   *
   * @example personal rooms
   */
  tag?: string;
  /**
   * Whether the device is enrolled in ZDM (Zoom Device Management).
   *
   * @example true
   */
  enrolled_in_zdm?: boolean;
  /**
   * Whether the device is connected to ZDM (Zoom Device Management).
   *
   * @example true
   */
  connected_to_zdm?: boolean;
  /**
   * The Zoom Room's ID.
   *
   * @example 72afdc13-a289-40c3-b358-50c8b8de
   */
  room_id?: string;
  /**
   * The Zoom Room's name.
   *
   * @example My Personal Meeting Room
   */
  room_name?: string;
  /**
   * Filter devices by device type.
   * Device Type:
   *  `-1` - All Zoom Room device(0,1,2,3,4,6).
   *  `0` - Zoom Rooms Computer.
   *  `1` - Zoom Rooms Controller.
   *  `2` - Zoom Rooms Scheduling Display.
   *  `3` - Zoom Rooms Control System.
   *  `4` - Zoom Rooms Whiteboard.
   *  `5` - Zoom Phone Appliance.
   *  `6` - Zoom Rooms Computer (with Controller).
   *
   * @example 0
   */
  device_type?: 0 | 1 | 2 | 3 | 4 | 5 | 6;
  /**
   * The SDK version.
   *
   * @example 2.0.11
   */
  sdk_version?: string;
  /**
   * Filter devices by status.
   *  Device Status:
   *  `0` - offline.
   *  `1` - online.
   *  `-1` - unlink
   *
   * @example 0
   */
  device_status?: -1 | 0 | 1;
  /**
   * The time when the device was last online.
   *
   * @example 2022-10-27T10:23:15Z
   */
  last_online?: string;
  /**
   * The phone device's owner.
   *
   * @example test-user@ya.us
   */
  user_email?: string;
};

export type GetDeviceVariables = {
  pathParams: GetDevicePathParams;
} & FetcherExtraProps;

/**
 * Retrieve a device's details.
 *
 * **[Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `device:read:admin`,`device:write:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `HEAVY`
 */
export const getDevice = (
  variables: GetDeviceVariables,
  signal?: AbortSignal,
) =>
  fetch<
    GetDeviceResponse,
    GetDeviceError,
    undefined,
    {},
    {},
    GetDevicePathParams
  >({ url: "/devices/{deviceId}", method: "get", ...variables, signal });

export type DeleteDevicePathParams = {
  /**
   * Unique identifier of the device.
   *
   * @example F1C6E9DF-429E-4FA1-85DA-AC95464F3D18
   */
  deviceId: string;
};

export type DeleteDeviceError = Fetcher.ErrorWrapper<undefined>;

export type DeleteDeviceVariables = {
  pathParams: DeleteDevicePathParams;
} & FetcherExtraProps;

/**
 * Delete a device from a Zoom account.
 *
 * **Prerequisites:**
 * * Device must be enrolled in ZMD (Zoom Device Management)
 *
 * **[Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `device:write:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `HEAVY`
 */
export const deleteDevice = (
  variables: DeleteDeviceVariables,
  signal?: AbortSignal,
) =>
  fetch<
    undefined,
    DeleteDeviceError,
    undefined,
    {},
    {},
    DeleteDevicePathParams
  >({ url: "/devices/{deviceId}", method: "delete", ...variables, signal });

export type UpdateDevicePathParams = {
  /**
   * Unique identifier of the device.
   *
   * @example F1C6E9DF-429E-4FA1-85DA-AC95464F3D18
   */
  deviceId: string;
};

export type UpdateDeviceError = Fetcher.ErrorWrapper<undefined>;

export type UpdateDeviceRequestBody = {
  /**
   * The name of the device.
   *
   * @example My device
   */
  device_name: string;
  /**
   * The name of the tag.
   *
   * @example personal rooms
   */
  tag?: string;
  /**
   * id of the Zoom Room.
   *
   * @example 72afdc13-a289-40c3-b358-50c8b8de
   */
  room_id?: string;
  /**
   * Device Type:
   *  `0` - Zoom Rooms Computer.
   *  `1` - Zoom Rooms Controller.
   *  `2` - Zoom Rooms Scheduling Display.
   *
   * @example 1
   */
  device_type?: 0 | 1 | 3;
};

export type UpdateDeviceVariables = {
  body: UpdateDeviceRequestBody;
  pathParams: UpdateDevicePathParams;
} & FetcherExtraProps;

/**
 * Change device name.
 *
 * **Prerequisites:**
 * * Device must be enrolled in ZMD (Zoom Device Management)
 *
 * **[Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `device:write:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
 */
export const updateDevice = (
  variables: UpdateDeviceVariables,
  signal?: AbortSignal,
) =>
  fetch<
    undefined,
    UpdateDeviceError,
    UpdateDeviceRequestBody,
    {},
    {},
    UpdateDevicePathParams
  >({ url: "/devices/{deviceId}", method: "patch", ...variables, signal });

export type AssginGroupPathParams = {
  /**
   * The device ID.
   *
   * @example 12as-asdas-sas-12asd-as01
   */
  deviceId: string;
};

export type AssginGroupQueryParams = {
  /**
   * The group's ID.
   *
   * @example 12as-asdas-sas-12asd-as01
   */
  group_id: string;
};

export type AssginGroupError = Fetcher.ErrorWrapper<undefined>;

export type AssginGroupVariables = {
  pathParams: AssginGroupPathParams;
  queryParams: AssginGroupQueryParams;
} & FetcherExtraProps;

/**
 * Assign a device to a new group.
 *
 * **[Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `device:write:admin`
 *
 * **[Granular Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `device:write:group:admin`,`device:write:group:master`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
 */
export const assginGroup = (
  variables: AssginGroupVariables,
  signal?: AbortSignal,
) =>
  fetch<
    undefined,
    AssginGroupError,
    undefined,
    {},
    AssginGroupQueryParams,
    AssginGroupPathParams
  >({
    url: "/devices/{deviceId}/assign_group",
    method: "patch",
    ...variables,
    signal,
  });

export type ChangeDeviceAssociationPathParams = {
  /**
   * The device's unique identifier.
   *
   * @example F1C6E9DF-429E-4FA1-85DA-AC95464F3D18
   */
  deviceId: string;
};

export type ChangeDeviceAssociationError = Fetcher.ErrorWrapper<undefined>;

export type ChangeDeviceAssociationRequestBody = {
  /**
   * The Zoom Room ID of the device being associated to. The `room_id` is required. It can be ` ` or the specific room ID. If it is ` ` , it means release from the room. If the room ID is a specific value, assign that room to the device .
   *
   * @example qMOLddnySIGGVycz8aX_JQ
   */
  room_id?: string;
  /**
   * Specify one of these values for this field.
   *
   * `ZR` - Zoom Room computer.
   *
   * `ZRC` - Zoom Room controller.
   *
   * `ZRP` - Scheduling display.
   *
   * `ZRW` - Companion whiteboard.
   *
   * @example ZR
   * @default ZR
   */
  app_type?: "ZR" | "ZRC" | "ZRP" | "ZRW";
};

export type ChangeDeviceAssociationVariables = {
  body: ChangeDeviceAssociationRequestBody;
  pathParams: ChangeDeviceAssociationPathParams;
} & FetcherExtraProps;

/**
 * Change a device's association from one Zoom Room to another. **Prerequisites:** Device must be enrolled in ZDM (Zoom Device Management).
 *
 * **[Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `device:write:admin`
 *
 * **[Granular Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `device:update:zdm_device_assignment:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
 */
export const changeDeviceAssociation = (
  variables: ChangeDeviceAssociationVariables,
  signal?: AbortSignal,
) =>
  fetch<
    undefined,
    ChangeDeviceAssociationError,
    ChangeDeviceAssociationRequestBody,
    {},
    {},
    ChangeDeviceAssociationPathParams
  >({
    url: "/devices/{deviceId}/assignment",
    method: "patch",
    ...variables,
    signal,
  });

export type DeviceListQueryParams = {
  /**
   * The number of records returned within a single API call.
   *
   * @maximum 300
   * @example 30
   * @default 30
   */
  page_size?: number;
  /**
   * **Deprecated.** We will no longer support this field in a future release. Instead, use the `next_page_token` for pagination.
   *
   * @example 1
   * @default 1
   */
  page_number?: number;
  /**
   * Use the next page token to paginate through large result sets. A next page token is returned whenever the set of available results exceeds the current page size. This token's expiration period is 15 minutes.
   *
   * @example IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2
   */
  next_page_token?: string;
};

export type DeviceListError = Fetcher.ErrorWrapper<undefined>;

export type DeviceListResponse = {
  /**
   * The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
   *
   * @example w7587w4eiyfsudgf
   */
  next_page_token?: string;
  /**
   * The number of pages returned for the request made.
   *
   * @example 1
   */
  page_count?: number;
  /**
   * **Deprecated.** We will no longer support this field in a future release. Instead, use the `next_page_token` for pagination.
   *
   * @example 1
   * @deprecated true
   * @default 1
   */
  page_number?: number;
  /**
   * The number of records returned with a single API call.
   *
   * @maximum 300
   * @example 30
   * @default 30
   */
  page_size?: number;
  /**
   * The total number of all the records available across pages.
   *
   * @example 20
   */
  total_records?: number;
  /**
   * List of H.323/SIP Device objects.
   */
  devices?: {
    /**
     * Device ID.
     *
     * @example abceHewahkrehwiK
     */
    id?: string;
    /**
     * Device encryption:
     *  `auto` - auto.
     *  `yes` - yes.
     *  `no` - no.
     *
     * @example auto
     */
    encryption: "auto" | "yes" | "no";
    /**
     * Device IP.
     *
     * @example 127.0.0.1
     */
    ip: string;
    /**
     * Device name.
     *
     * @maxLength 64
     * @example api_test_20190508
     */
    name: string;
    /**
     * Device protocol:
     *  `H.323` - H.323.
     *  `SIP` - SIP.
     *
     * @example H.323
     */
    protocol: "H.323" | "SIP";
  }[];
};

export type DeviceListVariables = {
  queryParams?: DeviceListQueryParams;
} & FetcherExtraProps;

/**
 * A H.323 or SIP device can make a video call to a [Room Connector](https://support.zoom.us/hc/en-us/articles/201363273-Getting-Started-With-H-323-SIP-Room-Connector) to join a Zoom cloud meeting. A Room Connector can also call out to a H.323 or SIP device to join a Zoom cloud meeting. Use this API to list all H.323/SIP Devices on a Zoom account.
 *
 *
 *
 *
 * **[Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `h323:read:admin`
 *
 * **[Granular Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `h323_device:read:list_devices:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
 */
export const deviceList = (
  variables: DeviceListVariables,
  signal?: AbortSignal,
) =>
  fetch<
    DeviceListResponse,
    DeviceListError,
    undefined,
    {},
    DeviceListQueryParams,
    {}
  >({ url: "/h323/devices", method: "get", ...variables, signal });

export type DeviceCreateError = Fetcher.ErrorWrapper<undefined>;

export type DeviceCreateResponse = {
  /**
   * Device ID.
   *
   * @example abceHewahkrehwiK
   */
  id?: string;
  /**
   * Device encryption:
   *  `auto` - auto.
   *  `yes` - yes.
   *  `no` - no.
   *
   * @example auto
   */
  encryption: "auto" | "yes" | "no";
  /**
   * Device IP.
   *
   * @example 127.0.0.1
   */
  ip: string;
  /**
   * Device name.
   *
   * @maxLength 64
   * @example api_test_20190508
   */
  name: string;
  /**
   * Device protocol:
   *  `H.323` - H.323.
   *  `SIP` - SIP.
   *
   * @example H.323
   */
  protocol: "H.323" | "SIP";
};

export type DeviceCreateRequestBody = {
  /**
   * Device encryption:
   *  `auto` - auto.
   *  `yes` - yes.
   *  `no` - no.
   *
   * @example auto
   */
  encryption: "auto" | "yes" | "no";
  /**
   * Device IP.
   *
   * @example 127.0.0.1
   */
  ip: string;
  /**
   * Device name.
   *
   * @maxLength 64
   * @example api_test_20190508
   */
  name: string;
  /**
   * Device protocol:
   *  `H.323` - H.323.
   *  `SIP` - SIP.
   *
   * @example H.323
   */
  protocol: "H.323" | "SIP";
};

export type DeviceCreateVariables = {
  body: DeviceCreateRequestBody;
} & FetcherExtraProps;

/**
 * A H.323 or SIP device can make a video call to a [Room Connector](https://support.zoom.us/hc/en-us/articles/201363273-Getting-Started-With-H-323-SIP-Room-Connector) to join a Zoom cloud meeting. A Room Connector can also call out to a H.323 or SIP device to join a Zoom cloud meeting. Use this API to add a H.323/SIP device to your Zoom account
 *
 *
 *
 *
 * **[Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `h323:write:admin`
 *
 * **[Granular Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `h323_device:write:device:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
 */
export const deviceCreate = (
  variables: DeviceCreateVariables,
  signal?: AbortSignal,
) =>
  fetch<
    DeviceCreateResponse,
    DeviceCreateError,
    DeviceCreateRequestBody,
    {},
    {},
    {}
  >({ url: "/h323/devices", method: "post", ...variables, signal });

export type DeviceDeletePathParams = {
  /**
   * The device ID.
   *
   * @example abceHewahkrehwiK
   */
  deviceId: string;
};

export type DeviceDeleteError = Fetcher.ErrorWrapper<undefined>;

export type DeviceDeleteVariables = {
  pathParams: DeviceDeletePathParams;
} & FetcherExtraProps;

/**
 * A H.323 or SIP device can make a video call to a [Room Connector](https://support.zoom.us/hc/en-us/articles/201363273-Getting-Started-With-H-323-SIP-Room-Connector) to join a Zoom cloud meeting. A Room Connector can also call out to a H.323 or SIP device to join a Zoom cloud meeting. Use this API to delete a H.323/SIP device from your Zoom account.
 *
 *
 *
 *
 * **[Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `h323:write:admin`
 *
 * **[Granular Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `h323_device:delete:device:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
 */
export const deviceDelete = (
  variables: DeviceDeleteVariables,
  signal?: AbortSignal,
) =>
  fetch<
    undefined,
    DeviceDeleteError,
    undefined,
    {},
    {},
    DeviceDeletePathParams
  >({
    url: "/h323/devices/{deviceId}",
    method: "delete",
    ...variables,
    signal,
  });

export type DeviceUpdatePathParams = {
  /**
   * The device ID.
   *
   * @example abceHewahkrehwiK
   */
  deviceId: string;
};

export type DeviceUpdateError = Fetcher.ErrorWrapper<undefined>;

export type DeviceUpdateRequestBody = {
  /**
   * Device encryption:
   *  `auto` - auto.
   *  `yes` - yes.
   *  `no` - no.
   *
   * @example auto
   */
  encryption: "auto" | "yes" | "no";
  /**
   * Device IP.
   *
   * @example 127.0.0.1
   */
  ip: string;
  /**
   * Device name.
   *
   * @maxLength 64
   * @example api_test_20190508
   */
  name: string;
  /**
   * Device protocol.
   *  `H.323` - H.323.
   *  `SIP` - SIP.
   *
   * @example H.323
   */
  protocol: "H.323" | "SIP";
};

export type DeviceUpdateVariables = {
  body: DeviceUpdateRequestBody;
  pathParams: DeviceUpdatePathParams;
} & FetcherExtraProps;

/**
 * Edit information for a H.323/SIP device from your Zoom account.
 *
 *  A H.323 or SIP device can make a video call to a [Room Connector](https://support.zoom.us/hc/en-us/articles/201363273-Getting-Started-With-H-323-SIP-Room-Connector) to join a Zoom cloud meeting. A Room Connector can also call out to a H.323 or SIP device to join a Zoom cloud meeting.
 *
 *
 *
 * **[Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `h323:write:admin`
 *
 * **[Granular Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `h323_device:update:device:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
 */
export const deviceUpdate = (
  variables: DeviceUpdateVariables,
  signal?: AbortSignal,
) =>
  fetch<
    undefined,
    DeviceUpdateError,
    DeviceUpdateRequestBody,
    {},
    {},
    DeviceUpdatePathParams
  >({ url: "/h323/devices/{deviceId}", method: "patch", ...variables, signal });

export type DeleteMeetingChatMessageByIdPathParams = {
  /**
   * The meeting's ID.
   *
   *  When storing this value in your database, store it as a long-format integer and **not** an integer. Meeting IDs can be more than 10 digits.
   *
   * @format int64
   * @example 85746065
   */
  meetingId: number;
  /**
   * The live meeting chat message's unique identifier (UUID), in base64-encoded format.
   *
   * @example MS17MDQ5NjE4QjYtRjk4Ny00REEwLUFBQUItMTg3QTY0RjU2MzhFfQ==
   */
  messageId: string;
};

export type DeleteMeetingChatMessageByIdQueryParams = {
  /**
   * The live webinar chat file's universally unique identifier, in base64-encoded format. Separate multiple values with commas.
   *
   * @example MS17RDk0QTY3QUQtQkFGQy04QTJFLTI2RUEtNkYxQjRBRTU1MTk5fQ==,MS17NDQ0OEU5MjMtM0JFOS1CMDA1LTQ0NDAtQjdGOTU0Rjk5MTkyfQ==
   */
  file_ids?: string;
};

export type DeleteMeetingChatMessageByIdError = Fetcher.ErrorWrapper<undefined>;

export type DeleteMeetingChatMessageByIdVariables = {
  pathParams: DeleteMeetingChatMessageByIdPathParams;
  queryParams?: DeleteMeetingChatMessageByIdQueryParams;
} & FetcherExtraProps;

/**
 * Delete a message in a live meeting, based on ID.
 *
 * **Prerequisites:**
 * * Have Zoom enable the DLP for the in-meeting chat feature to use this API.
 *
 * **[Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `meeting:write`,`meeting:write:admin`
 *
 * **[Granular Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `meeting:delete:live_meeting_chat_message`,`meeting:delete:live_meeting_chat_message:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
 */
export const deleteMeetingChatMessageById = (
  variables: DeleteMeetingChatMessageByIdVariables,
  signal?: AbortSignal,
) =>
  fetch<
    undefined,
    DeleteMeetingChatMessageByIdError,
    undefined,
    {},
    DeleteMeetingChatMessageByIdQueryParams,
    DeleteMeetingChatMessageByIdPathParams
  >({
    url: "/live_meetings/{meetingId}/chat/messages/{messageId}",
    method: "delete",
    ...variables,
    signal,
  });

export type UpdateMeetingChatMessageByIdPathParams = {
  /**
   * The meeting's ID.
   *
   *  When storing this value in your database, store it as a long-format integer and **not** an integer. Meeting IDs can exceed 10 digits.
   *
   * @format int64
   * @example 85746065
   */
  meetingId: number;
  /**
   * The live meeting chat message's unique identifier (UUID), in base64-encoded format.
   *
   * @example MS17MDQ5NjE4QjYtRjk4Ny00REEwLUFBQUItMTg3QTY0RjU2MzhFfQ==
   */
  messageId: string;
};

export type UpdateMeetingChatMessageByIdError = Fetcher.ErrorWrapper<undefined>;

export type UpdateMeetingChatMessageByIdRequestBody = {
  /**
   * The content of the chat message.
   *
   * @example This is a test message
   */
  message_content: string;
};

export type UpdateMeetingChatMessageByIdVariables = {
  body: UpdateMeetingChatMessageByIdRequestBody;
  pathParams: UpdateMeetingChatMessageByIdPathParams;
} & FetcherExtraProps;

/**
 * Update a message in a live meeting, based on ID. **Prerequisites:** * Have Zoom enable the DLP for the in-meeting chat feature to use this API.
 *
 * **[Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `meeting:write`,`meeting:write:admin`
 *
 * **[Granular Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `meeting:update:live_meeting_chat_message`,`meeting:update:live_meeting_chat_message:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
 */
export const updateMeetingChatMessageById = (
  variables: UpdateMeetingChatMessageByIdVariables,
  signal?: AbortSignal,
) =>
  fetch<
    undefined,
    UpdateMeetingChatMessageByIdError,
    UpdateMeetingChatMessageByIdRequestBody,
    {},
    {},
    UpdateMeetingChatMessageByIdPathParams
  >({
    url: "/live_meetings/{meetingId}/chat/messages/{messageId}",
    method: "patch",
    ...variables,
    signal,
  });

export type InMeetingControlPathParams = {
  /**
   * The live meeting's ID.
   *
   * @example 93398114182
   */
  meetingId: string;
};

export type InMeetingControlError = Fetcher.ErrorWrapper<undefined>;

export type InMeetingControlRequestBody = {
  /**
   * The method that you would like to control.
   * * `recording.start` - Start the recording.
   * * `recording.stop` - Stop the recording.
   * * `recording.pause` - Pause the recording.
   * * `recording.resume` - Resume a paused recording.
   * * `participant.invite` - Invite a participant to the meeting.
   * * `participant.invite.callout` - Invite a participant to the meeting through [call out (phone)](https://support.zoom.com/hc/en/article?id=zm_kb&sysparm_article=KB0062038).
   * * `participant.invite.room_system_callout` - Invite a participant to the meeting through [call out (room system)](https://support.zoom.com/hc/en/article?id=zm_kb&sysparm_article=KB0065721).
   * * `waiting_room.update` - Update the waiting room with a custom message.
   *
   * @example recording.start
   */
  method?:
    | "recording.start"
    | "recording.stop"
    | "recording.pause"
    | "recording.resume"
    | "participant.invite"
    | "participant.invite.callout"
    | "participant.invite.room_system_callout"
    | "waiting_room.update";
  /**
   * The in-meeting parameters.
   */
  params?: {
    /**
     * The user's email address or the user ID, up to a maximum of 10 contacts. The account must be a part of the meeting host's account.
     *
     * @maximum 10
     */
    contacts?: {
      /**
       * The user's email address. Use this value if you do not have the user's ID.
       *
       * If you pass the `id` value, the API ignores this query parameter.
       *
       * @example jchill@example.com
       */
      email?: string;
      /**
       * The user's ID.
       *
       * @example 30R7kT7bTIKSNUFEuH_Qlg
       */
      id?: string;
    }[];
    /**
     * The user's name to display in the meeting. Use this field if you pass the `participant.invite.callout` value for the `method` field.
     *
     * @example Jill Chill
     */
    invitee_name?: string;
    /**
     * The user's phone number. Use this field if you pass the `participant.invite.callout` value for the `method` field. As a best practice, ensure this includes a country code and area code.
     *
     * If you are dialing a phone number that includes an extension, type a hyphen '-' after the phone number and enter the extension. For example, 6032331333-156 dials the extension 156.
     *
     * @example 5550100
     */
    phone_number?: string;
    /**
     * Information about the `participant.invite.callout` settings.
     */
    invite_options?: {
      /**
       * Whether to require a greeting before being connected. Use this field if you pass the `participant.invite.callout` value for the `method` field.
       *
       * @example true
       * @default true
       */
      require_greeting?: boolean;
      /**
       * Whether to require pressing 1 before being connected. Use this field if you pass the `participant.invite.callout` value for the `method` field.
       *
       * @example true
       * @default true
       */
      require_pressing_one?: boolean;
    };
    /**
     * The type of call out. Use a value of `h323` or `sip`. Use this field if you pass the `participant.invite.room_system_callout` value for the `method` field.
     *
     * @example h323
     */
    call_type?: string;
    /**
     * The user's device IP address or URI. Use this field if you pass the `participant.invite.room_system_callout` value for the `method` field.
     *
     * @example 10.100.111.237
     */
    device_ip?: string;
    /**
     * Enable customers to leverage services that require customization of the FROM header to identify the caller. Use this field if you pass the `participant.invite.room_system_callout` value for the `method` field and the `h323` value for the `call_type` field.
     */
    h323_headers?: {
      /**
       * Custom name that will be used within the h323 Header.
       *
       * @maxLength 64
       * @example display name
       */
      from_display_name?: string;
      /**
       * Custom remote name that will be used within the meeting.
       *
       * @maxLength 64
       * @example display name
       */
      to_display_name?: string;
    };
    /**
     * Enable customers to leverage services that require customization of the FROM header to identify the caller. Use this field if you pass the `participant.invite.room_system_callout` value for the `method` field and the `sip` value for the `call_type` field.
     */
    sip_headers?: {
      /**
       * Custom name that will be used within the SIP Header.
       *
       * @maxLength 64
       * @example display name
       */
      from_display_name?: string;
      /**
       * Custom remote name that will be used within the meeting.
       *
       * @maxLength 64
       * @example display name
       */
      to_display_name?: string;
      /**
       * Custom URI that will be used within the SIP Header. The URI must start with 'sip:' or 'sips:' as a valid URI based on parameters defined by the platform.
       *
       * @maxLength 256
       * @example sip:username@domain.company.org
       */
      from_uri?: string;
      /**
       * Ability to add 1 to 10 custom headers, each of which has a maximum length of 256 bytes to comply with SIP standards.  Custom headers would leverage header names starting with 'X-' per SIP guidelines.
       *
       * @maximum 10
       */
      additional_headers?: {
        /**
         * Additional custom SIP header's key.
         *
         * @maxLength 32
         * @example X-Header1
         */
        key?: string;
        /**
         * Additional custom SIP header's value.
         *
         * @maxLength 256
         * @example X-body1
         */
        value?: string;
      }[];
    };
    /**
     * The title displayed in the waiting room. Use this field if you pass the `waiting_room.update` value for the `method` field.
     *
     * @example waiting room title
     */
    waiting_room_title?: string;
    /**
     * The description shown in the waiting room. Use this field if you pass the `waiting_room.update` value for the `method` field.
     *
     * @example waiting room description
     */
    waiting_room_description?: string;
  };
};

export type InMeetingControlVariables = {
  body?: InMeetingControlRequestBody;
  pathParams: InMeetingControlPathParams;
} & FetcherExtraProps;

/**
 * Control [in-meeting](https://support.zoom.us/hc/en-us/articles/360021921032-In-Meeting-Controls) features. In-meeting controls include starting and stopping a recording, pausing and resuming a recording, and inviting participants.
 *
 * **Note:** This API's recording control only works for cloud recordings, **not** for local recordings.
 *
 * **Prerequisites:**
 * * The meeting **must** be a live meeting **except** inviting participants to the meeting through [call out (phone)](https://support.zoom.com/hc/en/article?id=zm_kb&sysparm_article=KB0062038)/[call out (room system)](https://support.zoom.com/hc/en/article?id=zm_kb&sysparm_article=KB0065721).
 * * Recording control: [Cloud recording](https://support.zoom.us/hc/en-us/articles/360060231472-Enabling-cloud-recording) must be enabled on the account.
 * * The user calling this API must be the host or an alternative meeting host.
 *
 * **[Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `meeting:write`,`meeting:write:admin`,`meeting:master`
 *
 * **[Granular Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `meeting:update:in_meeting_controls`,`meeting:update:in_meeting_controls:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
 */
export const inMeetingControl = (
  variables: InMeetingControlVariables,
  signal?: AbortSignal,
) =>
  fetch<
    undefined,
    InMeetingControlError,
    InMeetingControlRequestBody,
    {},
    {},
    InMeetingControlPathParams
  >({
    url: "/live_meetings/{meetingId}/events",
    method: "patch",
    ...variables,
    signal,
  });

export type MeetingRTMSStatusUpdatePathParams = {
  /**
   * The meeting's ID.
   *
   * When storing this value in your database, store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits.
   *
   * @format int64
   * @example 85746065
   */
  meetingId: number;
};

export type MeetingRTMSStatusUpdateError = Fetcher.ErrorWrapper<undefined>;

export type MeetingRTMSStatusUpdateRequestBody = {
  /**
   * The participant's RTMS app status.
   * * `start` - Start an RTMS app.
   * * `stop` - Stop an ongoing RTMS app.
   * * `pause` - Pause an ongoing RTMS app.
   * * `resume` - Resume a paused RTMS app.
   *
   * @example start
   */
  action?: "start" | "stop" | "pause" | "resume";
  /**
   * The participant's RTMS app settings.
   */
  settings?: {
    /**
     * The participant's user ID. This field is optional. If not provided, the user ID will be automatically obtained from the authentication token. This value matches the `id` field in the [**Get a user**](/docs/api/users/#tag/users/GET/users/{userId}) API response. Use this field if you pass the `start`, `stop`, `pause` or `resume` value for the `action` field.
     *
     * @example 30R7kT7bTIKSNUFEuH_Qlg
     */
    participant_user_id?: string;
    /**
     * The unique identifier of the authorized app, configured in the Account Settings under **Allow apps to access meeting content**. This app must have host approval to access in-meeting content. Use this field if you pass the `start`, `stop`, `pause` or `resume` value for the `action` field.
     *
     * @example a_Zu0X_FVBUycmEi9ms5hg
     */
    client_id: string;
  };
};

export type MeetingRTMSStatusUpdateVariables = {
  body?: MeetingRTMSStatusUpdateRequestBody;
  pathParams: MeetingRTMSStatusUpdatePathParams;
} & FetcherExtraProps;

/**
 * Update the Real-Time Media Streams (RTMS) status for a specific participant in an ongoing meeting. Zoom lets individuals control their own RTMS during a meeting.
 *
 * **Prerequisites:**
 * * The meeting must be in progress.
 * * Contact [Developer Support](https://developers.zoom.us/support/) to enable RTMS features.
 * * The **Allow apps to access meeting content** setting enabled in the Zoom web portal.
 *
 * **[Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `meeting:write:admin`,`meeting:write`
 *
 * **[Granular Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `meeting:update:participant_rtms_app_status`,`meeting:update:participant_rtms_app_status:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
 */
export const meetingRTMSStatusUpdate = (
  variables: MeetingRTMSStatusUpdateVariables,
  signal?: AbortSignal,
) =>
  fetch<
    undefined,
    MeetingRTMSStatusUpdateError,
    MeetingRTMSStatusUpdateRequestBody,
    {},
    {},
    MeetingRTMSStatusUpdatePathParams
  >({
    url: "/live_meetings/{meetingId}/rtms_app/status",
    method: "patch",
    ...variables,
    signal,
  });

export type ListmeetingsummariesQueryParams = {
  /**
   * The number of records returned within a single API call.
   *
   * @maximum 300
   * @example 30
   * @default 30
   */
  page_size?: number;
  /**
   * The next page token paginates through a large set of results. A next page token returns whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
   *
   * @example IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2
   */
  next_page_token?: string;
  /**
   * The start date in `yyyy-MM-dd'T'HH:mm:ss'Z'` UTC format used to retrieve the creation date range of the meeting summaries.
   *
   * @format date-time
   * @example 2023-10-19T07:00:00Z
   */
  from?: string;
  /**
   * The end date in `yyyy-MM-dd'T'HH:mm:ss'Z'` UTC format used to retrieve the creation date range of the meeting summaries.
   *
   * @format date-time
   * @example 2023-10-20T07:00:00Z
   */
  to?: string;
};

export type ListmeetingsummariesError = Fetcher.ErrorWrapper<undefined>;

export type ListmeetingsummariesResponse = {
  /**
   * The number of records returned with a single API call.
   *
   * @maximum 300
   * @example 30
   * @default 30
   */
  page_size?: number;
  /**
   * The next page token paginates through a large set of results. A next page token returns whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
   *
   * @example Tva2CuIdTgsv8wAnhyAdU3m06Y2HuLQtlh3
   */
  next_page_token?: string;
  /**
   * The start date in `yyyy-MM-dd'T'HH:mm:ss'Z'` UTC format used to retrieve the creation date range of the meeting summaries.
   *
   * @format date-time
   * @example 2023-10-19T07:00:00Z
   */
  from?: string;
  /**
   * The end date in `yyyy-MM-dd'T'HH:mm:ss'Z'` UTC format used to retrieve the creation date range of the meeting summaries.
   *
   * @format date-time
   * @example 2023-10-20T07:00:00Z
   */
  to?: string;
  /**
   * List of meeting summary objects.
   */
  summaries?: {
    /**
     * The ID of the user who is set as the meeting host.
     *
     * @example 30R7kT7bTIKSNUFEuH_Qlg
     */
    meeting_host_id?: string;
    /**
     * The meeting host's email address.
     *
     * @format email
     * @example jchill@example.com
     */
    meeting_host_email?: string;
    /**
     * Unique meeting ID. Each meeting instance generates its own meeting UUID. After a meeting ends, a new UUID is generated for the next instance of the meeting. Retrieve a list of UUIDs from past meeting instances using the [**List past meeting instances**](/docs/api-reference/zoom-api/methods#operation/pastMeetings) API. [Double encode](/docs/api/using-zoom-apis/#meeting-id-and-uuid) your UUID when using it for API calls if the UUID begins with a `/` or contains `//` in it.
     *
     * @example aDYlohsHRtCd4ii1uC2+hA==
     */
    meeting_uuid?: string;
    /**
     * [Meeting ID](https://support.zoom.us/hc/en-us/articles/201362373-What-is-a-Meeting-ID-) - the meeting's unique identifier in **long** format, represented as int64 data type in JSON, also known as the meeting number.
     *
     * @format int64
     * @example 97763643886
     */
    meeting_id?: number;
    /**
     * Meeting topic.
     *
     * @example My Meeting
     */
    meeting_topic?: string;
    /**
     * The meeting's start date and time.
     *
     * @format date-time
     * @example 2019-07-15T23:24:52Z
     */
    meeting_start_time?: string;
    /**
     * The meeting's end date and time.
     *
     * @format date-time
     * @example 2020-07-15T23:30:19Z
     */
    meeting_end_time?: string;
    /**
     * The summary's start date and time.
     *
     * @format date-time
     * @example 2019-07-15T23:24:52Z
     */
    summary_start_time?: string;
    /**
     * The summary's end date and time.
     *
     * @format date-time
     * @example 2020-07-15T23:30:19Z
     */
    summary_end_time?: string;
    /**
     * The date and time at which the meeting summary was created.
     *
     * @format date-time
     * @example 2019-07-15T23:24:52Z
     */
    summary_created_time?: string;
    /**
     * The date and time at which the meeting summary was last modified.
     *
     * @format date-time
     * @example 2020-07-15T23:30:19Z
     */
    summary_last_modified_time?: string;
  }[];
};

export type ListmeetingsummariesVariables = {
  queryParams?: ListmeetingsummariesQueryParams;
} & FetcherExtraProps;

/**
 * Retrieve a list of all meeting or webinar summaries available for an account.
 *
 * **Prerequisites**
 * * The host must have a Pro, Business, or higher subscription plan.
 * * For meetings - the host's **Meeting Summary with AI Companion** user setting must be enabled.
 * * For webinars - the host's **Webinar Summary with AI Companion** user setting must be enabled.
 * * End-to-End Encrypted (E2EE) meetings do not support summaries.
 *
 * **[Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `meeting_summary:read:admin`
 *
 * **[Granular Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `meeting:read:list_summaries:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
 */
export const listmeetingsummaries = (
  variables: ListmeetingsummariesVariables,
  signal?: AbortSignal,
) =>
  fetch<
    ListmeetingsummariesResponse,
    ListmeetingsummariesError,
    undefined,
    {},
    ListmeetingsummariesQueryParams,
    {}
  >({
    url: "/meetings/meeting_summaries",
    method: "get",
    ...variables,
    signal,
  });

export type MeetingPathParams = {
  /**
   * The meeting's ID.
   *
   *  When storing this value in your database, store it as a long format integer and **not** an integer. Meeting IDs can be more than 10 digits.
   *
   * @format int64
   * @example 85746065
   */
  meetingId: number;
};

export type MeetingQueryParams = {
  /**
   * Meeting occurrence ID. Provide this field to view meeting details of a particular occurrence of the [recurring meeting](https://support.zoom.us/hc/en-us/articles/214973206-Scheduling-Recurring-Meetings).
   *
   * @example 1648194360000
   */
  occurrence_id?: string;
  /**
   * Set this field's value to `true` to view meeting details of all previous occurrences of a [recurring meeting](https://support.zoom.us/hc/en-us/articles/214973206-Scheduling-Recurring-Meetings).
   *
   * @example true
   */
  show_previous_occurrences?: boolean;
};

export type MeetingError = Fetcher.ErrorWrapper<undefined>;

export type MeetingResponse = {
  /**
   * The ID of the user who scheduled this meeting on behalf of the host.
   *
   * @example kFFvsJc-Q1OSxaJQLvaa_A
   */
  assistant_id?: string;
  /**
   * The meeting host's email address.
   *
   * @format email
   * @example jchill@example.com
   */
  host_email?: string;
  /**
   * The ID of the user who is set as the meeting host.
   *
   * @example 30R7kT7bTIKSNUFEuH_Qlg
   */
  host_id?: string;
  /**
   * [Meeting ID](https://support.zoom.us/hc/en-us/articles/201362373-What-is-a-Meeting-ID-): Unique identifier of the meeting in **long** format, represented as int64 data type in JSON, also known as the meeting number.
   *
   * @format int64
   * @example 97763643886
   */
  id?: number;
  /**
   * Unique meeting ID. Each meeting instance generates its own meeting UUID - after a meeting ends, a new UUID is generated for the next instance of the meeting. Retrieve a list of UUIDs from past meeting instances using the [**List past meeting instances**](/docs/api/rest/reference/zoom-api/methods#operation/pastMeetings) API. [Double encode](/docs/api/rest/using-zoom-apis/#meeting-id-and-uuid) your UUID when using it for API calls if the UUID begins with a `/` or contains `//` in it.
   *
   * @example aDYlohsHRtCd4ii1uC2+hA==
   */
  uuid?: string;
  /**
   * The meeting description.
   *
   * @maxLength 2000
   * @example My Meeting
   */
  agenda?: string;
  /**
   * The creation time.
   *
   * @format date-time
   * @example 2022-03-25T07:29:29Z
   */
  created_at?: string;
  /**
   * The meeting duration.
   *
   * @example 60
   */
  duration?: number;
  /**
   * Encrypted passcode for third party endpoints (H323/SIP).
   *
   * @example 8pEkRweVXPV3Ob2KJYgFTRlDtl1gSn.1
   */
  encrypted_password?: string;
  /**
   * Password for participants to join the meeting via [PSTN](https://support.zoom.us/hc/en-us/articles/204517069-Getting-Started-with-Personal-Audio-Conference).
   *
   * @example 123456
   */
  pstn_password?: string;
  /**
   * H.323/SIP room system passcode.
   *
   * @example 123456
   */
  h323_password?: string;
  /**
   * The URL for participants to join the meeting. This URL should only be shared with users invited to the meeting.
   *
   * @example https://example.com/j/11111
   */
  join_url?: string;
  /**
   * The URL to join the chat.
   *
   * @example https://example.com/launch/jc/11111
   */
  chat_join_url?: string;
  /**
   * Array of occurrence objects.
   */
  occurrences?: {
    /**
     * Duration.
     *
     * @example 60
     */
    duration?: number;
    /**
     * Occurrence ID. The unique identifier for an occurrence of a recurring meeting. [Recurring meetings](https://support.zoom.us/hc/en-us/articles/214973206-Scheduling-Recurring-Meetings) can have a maximum of 50 occurrences.
     *
     * @example 1648194360000
     */
    occurrence_id?: string;
    /**
     * Start time.
     *
     * @format date-time
     * @example 2022-03-25T07:46:00Z
     */
    start_time?: string;
    /**
     * Occurrence status.
     *  `available` - Available occurrence.
     *  `deleted` -  Deleted occurrence.
     *
     * @example available
     */
    status?: "available" | "deleted";
  }[];
  /**
   * Meeting passcode.
   *
   * @minimum 8
   * @example 123456
   */
  password?: string;
  /**
   * [Personal meeting ID (PMI)](/docs/api/rest/using-zoom-apis/#understanding-personal-meeting-id-pmi). Only used for scheduled meetings and recurring meetings with no fixed time.
   *
   * @example 97891943927
   */
  pmi?: string;
  /**
   * Whether the prescheduled meeting was created via the [GSuite app](https://support.zoom.us/hc/en-us/articles/360020187492-Zoom-for-GSuite-add-on). This **only** supports the meeting `type` value of `2` (scheduled meetings) and `3` (recurring meetings with no fixed time).
   * * `true` - A GSuite prescheduled meeting.
   * * `false` - A regular meeting.
   *
   * @example false
   * @default false
   */
  pre_schedule?: boolean;
  /**
   * Recurrence object. Use this object only for a meeting with type `8`, a recurring meeting with a fixed time.
   */
  recurrence?: {
    /**
     * Select the final date when the meeting will recur before it is canceled. Should be in UTC time, such as 2017-11-25T12:00:00Z. (Cannot be used with `end_times`.)
     *
     * @format date-time
     * @example 2022-04-02T15:59:00Z
     */
    end_date_time?: string;
    /**
     * Select how many times the meeting should recur before it is canceled. If `end_times` is set to 0, it means there is no end time. The maximum number of recurrences is 60. Cannot be used with `end_date_time`.
     *
     * @maximum 60
     * @example 7
     * @default 1
     */
    end_times?: number;
    /**
     * Use this field only if you're scheduling a recurring meeting of type `3` to state the day in a month when the meeting should recur. The value range is from 1 to 31.
     *
     * For example, for a meeting to recur on 23rd of each month, provide `23` as this field's value and `1` as the `repeat_interval` field's value. Instead, to have the meeting to recur every three months on 23rd of the month, change the `repeat_interval` field's value to `3`.
     *
     * @example 1
     * @default 1
     */
    monthly_day?: number;
    /**
     * Use this field only if you're scheduling a recurring meeting of type `3` to state the week of the month when the meeting should recur. If you use this field, **you must also use the `monthly_week_day` field to state the day of the week when the meeting should recur.**
     *  `-1` - Last week of the month.
     *  `1` - First week of the month.
     *  `2` - Second week of the month.
     *  `3` - Third week of the month.
     *  `4` - Fourth week of the month.
     *
     * @example 1
     */
    monthly_week?: -1 | 1 | 2 | 3 | 4;
    /**
     * Use this field **only if you're scheduling a recurring meeting of type** `3` to state a specific day in a week when the monthly meeting should recur. To use this field, you must also use the `monthly_week` field.
     *
     *
     *  `1` - Sunday.
     *  `2` - Monday.
     *  `3` - Tuesday.
     *  `4` -  Wednesday.
     *  `5` - Thursday.
     *  `6` - Friday.
     *  `7` - Saturday.
     *
     * @example 1
     */
    monthly_week_day?: 1 | 2 | 3 | 4 | 5 | 6 | 7;
    /**
     * Define the interval when the meeting should recur. For instance, to schedule a meeting that recurs every two months, you must set this field's value as `2` and the `type` parameter's value as `3`.
     *
     * For a daily meeting, the maximum interval you can set is `99` days. For a weekly meeting the maximum interval that you can set is  of `50` weeks. For a monthly meeting, there is a maximum of `10` months.
     *
     * @example 1
     */
    repeat_interval?: number;
    /**
     * Recurring meeting types.
     *  `1` - Daily.
     *  `2` - Weekly.
     *  `3` - Monthly.
     *
     * @example 1
     */
    type: 1 | 2 | 3;
    /**
     * This field is required if you're scheduling a recurring meeting of type `2` to state which days of the week the meeting should repeat.
     *
     *   The value for this field could be a number between `1` to `7` in string format. For instance, if the meeting should recur on Sunday, provide `1` as this field's value.
     *
     *   **Note** To have the meeting occur on multiple days of a week, provide comma separated values for this field. For instance, if the meeting should recur on Sundays and Tuesdays provide `1,3` as this field's value.
     *
     *
     *  `1`  - Sunday.
     *  `2` - Monday.
     *  `3` - Tuesday.
     *  `4` -  Wednesday.
     *  `5` -  Thursday.
     *  `6` - Friday.
     *  `7` - Saturday.
     *
     * @example 1
     * @default 1
     */
    weekly_days?: "1" | "2" | "3" | "4" | "5" | "6" | "7";
  };
  /**
   * Meeting settings.
   */
  settings?: {
    /**
     * Allow attendees to join the meeting from multiple devices. This setting only works for meetings that require [registration](https://support.zoom.us/hc/en-us/articles/211579443-Setting-up-registration-for-a-meeting).
     *
     * @example true
     */
    allow_multiple_devices?: boolean;
    /**
     * A semicolon-separated list of the meeting's alternative hosts' email addresses or IDs.
     *
     * @example jchill@example.com;thill@example.com
     */
    alternative_hosts?: string;
    /**
     * Flag to determine whether to send email notifications to alternative hosts, default value is true.
     *
     * @example true
     * @default true
     */
    alternative_hosts_email_notification?: boolean;
    /**
     * Whether the **Allow alternative hosts to add or edit polls** feature is enabled. This requires Zoom version 5.8.0 or higher.
     *
     * @example true
     */
    alternative_host_update_polls?: boolean;
    /**
     * Enable registration and set approval for the registration. Note that this feature requires the host to be of **Licensed** user type. **Registration cannot be enabled for a basic user.**
     *
     *
     *
     * `0` - Automatically approve.
     *  `1` - Manually approve.
     *  `2` - No registration required.
     *
     * @example 0
     * @default 2
     */
    approval_type?: 0 | 1 | 2;
    /**
     * Approve or block users from specific regions/countries from joining this meeting.
     */
    approved_or_denied_countries_or_regions?: {
      /**
       * List of countries/regions from where participants can join this meeting.
       */
      approved_list?: string[];
      /**
       * List of countries or regions from where participants can not join this meeting.
       */
      denied_list?: string[];
      /**
       * `true` - Setting enabled to either allow users or block users from specific regions to join your meetings.
       *
       *
       * `false` - Setting disabled.
       *
       * @example true
       */
      enable?: boolean;
      /**
       * Specify whether to allow users from specific regions to join this meeting; or block users from specific regions from joining this meeting.
       *
       *
       * `approve`: Allow users from specific regions/countries to join this meeting. If this setting is selected, the approved regions/countries must be included in the `approved_list`.
       *
       *
       * `deny`: Block users from specific regions/countries from joining this meeting. If this setting is selected, the approved regions/countries must be included in the `denied_list`
       *
       * @example approve
       */
      method?: "approve" | "deny";
    };
    /**
     * Determine how participants can join the audio portion of the meeting.
     *  `both` - Both Telephony and VoIP.
     *  `telephony` - Telephony only.
     *  `voip` - VoIP only.
     *  `thirdParty` - Third party audio conference.
     *
     * @example telephony
     * @default both
     */
    audio?: "both" | "telephony" | "voip" | "thirdParty";
    /**
     * Third party audio conference information.
     *
     * @maxLength 2048
     * @example test
     */
    audio_conference_info?: string;
    /**
     * If user has configured [Sign Into Zoom with Specified Domains](https://support.zoom.us/hc/en-us/articles/360037117472-Authentication-Profiles-for-Meetings-and-Webinars#h_5c0df2e1-cfd2-469f-bb4a-c77d7c0cca6f) option, this will list the domains that are authenticated.
     *
     * @example example.com
     */
    authentication_domains?: string;
    /**
     * The participants added here will receive unique meeting invite links and bypass authentication.
     */
    authentication_exception?: {
      /**
       * The participant's email address.
       *
       * @format email
       * @example jchill@example.com
       */
      email?: string;
      /**
       * The participant's name.
       *
       * @example Jill Chill
       */
      name?: string;
      /**
       * URL for participants to join the meeting
       *
       * @example https://example.com/s/11111
       */
      join_url?: string;
    }[];
    /**
     * Authentication name set in the [authentication profile](https://support.zoom.us/hc/en-us/articles/360037117472-Authentication-Profiles-for-Meetings-and-Webinars#h_5c0df2e1-cfd2-469f-bb4a-c77d7c0cca6f).
     *
     * @example Sign in to Zoom
     */
    authentication_name?: string;
    /**
     * Meeting authentication option ID.
     *
     * @example signIn_D8cJuqWVQ623CI4Q8yQK0Q
     */
    authentication_option?: string;
    /**
     * Automatic recording.
     *  `local` - Record on local.
     *  `cloud` -  Record on cloud.
     *  `none` - Disabled.
     *
     * @example cloud
     * @default none
     */
    auto_recording?: "local" | "cloud" | "none";
    /**
     * Setting to [pre-assign breakout rooms](https://support.zoom.us/hc/en-us/articles/360032752671-Pre-assigning-participants-to-breakout-rooms#h_36f71353-4190-48a2-b999-ca129861c1f4).
     */
    breakout_room?: {
      /**
       * Set this field's value to `true` if you would like to enable the [breakout room pre-assign](https://support.zoom.us/hc/en-us/articles/360032752671-Pre-assigning-participants-to-breakout-rooms#h_36f71353-4190-48a2-b999-ca129861c1f4) option.
       *
       * @example true
       */
      enable?: boolean;
      /**
       * Create room or rooms.
       */
      rooms?: {
        /**
         * The breakout room's name.
         *
         * @example room1
         */
        name?: string;
        /**
         * Email addresses of the participants who are to be assigned to the breakout room.
         */
        participants?: string[];
      }[];
    };
    /**
     * Indicates the type of calendar integration used to schedule the meeting.
     * * `1` - [Zoom Outlook add-in](https://support.zoom.us/hc/en-us/articles/360031592971-Getting-started-with-Outlook-plugin-and-add-in)
     * * `2` - [Zoom for Google Workspace add-on](https://support.zoom.us/hc/en-us/articles/360020187492-Using-the-Zoom-for-Google-Workspace-add-on)
     *
     * Works with the `private_meeting` field to determine whether to share details of meetings or not.
     *
     * @example 1
     */
    calendar_type?: 1 | 2;
    /**
     * Close registration after event date.
     *
     * @example false
     * @default false
     */
    close_registration?: boolean;
    /**
     * Host meeting in China.
     *
     * @example false
     * @deprecated true
     * @default false
     */
    cn_meeting?: boolean;
    /**
     * Contact email for registration.
     *
     * @example jchill@example.com
     */
    contact_email?: string;
    /**
     * Contact name for registration.
     *
     * @example Jill Chill
     */
    contact_name?: string;
    /**
     * Custom keys and values assigned to the meeting.
     *
     * @maxItems 10
     */
    custom_keys?: {
      /**
       * Custom key associated with the user.
       *
       * @maxLength 64
       * @example key1
       */
      key?: string;
      /**
       * Value of the custom key associated with the user.
       *
       * @maxLength 256
       * @example value1
       */
      value?: string;
    }[];
    /**
     * Whether to send email notifications to [alternative hosts](https://support.zoom.us/hc/en-us/articles/208220166) and [users with scheduling privileges](https://support.zoom.us/hc/en-us/articles/201362803-Scheduling-privilege). This value defaults to `true`.
     *
     * @example true
     * @default true
     */
    email_notification?: boolean;
    /**
     * Choose between enhanced encryption and [end-to-end encryption](https://support.zoom.us/hc/en-us/articles/360048660871) when starting or a meeting. When using end-to-end encryption, several features (e.g. cloud recording, phone/SIP/H.323 dial-in) will be **automatically disabled**.
     *
     * `enhanced_encryption` - Enhanced encryption. Encryption is stored in the cloud if you enable this option.
     *
     *
     * `e2ee` - [End-to-end encryption](https://support.zoom.us/hc/en-us/articles/360048660871). The encryption key is stored in your local device and can not be obtained by anyone else. Enabling this setting also **disables** the join before host, cloud recording, streaming, live transcription, breakout rooms, polling, 1:1 private chat, and meeting reactions features.
     *
     * @example enhanced_encryption
     */
    encryption_type?: "enhanced_encryption" | "e2ee";
    /**
     * Only signed in users can join this meeting.
     *
     * **This field is deprecated and will not be supported in the future.**
     *
     *  As an alternative, use the `meeting_authentication`, `authentication_option`, and `authentication_domains` fields to understand the [authentication configurations](https://support.zoom.us/hc/en-us/articles/360037117472-Authentication-Profiles-for-Meetings-and-Webinars) set for the meeting.
     *
     * @example true
     * @deprecated true
     */
    enforce_login?: boolean;
    /**
     * Only signed in users with specified domains can join meetings.
     *
     * **This field is deprecated and will not be supported in the future.**
     *
     *  As an alternative, use the `meeting_authentication`, `authentication_option`, and `authentication_domains` fields to understand the [authentication configurations](https://support.zoom.us/hc/en-us/articles/360037117472-Authentication-Profiles-for-Meetings-and-Webinars) set for the meeting.
     *
     * @example example.com
     * @deprecated true
     */
    enforce_login_domains?: string;
    /**
     * Whether the [**Focus Mode** feature](https://support.zoom.us/hc/en-us/articles/360061113751-Using-focus-mode) is enabled when the meeting starts.
     *
     * @example true
     */
    focus_mode?: boolean;
    /**
     * List of global dial-in countries.
     */
    global_dial_in_countries?: string[];
    /**
     * Global Dial-in Countries and Regions
     */
    global_dial_in_numbers?: {
      /**
       * City of the number, if any. For example, Chicago.
       *
       * @example New York
       */
      city?: string;
      /**
       * Country code, such as BR.
       *
       * @example US
       */
      country?: string;
      /**
       * Full name of country, such as Brazil.
       *
       * @example US
       */
      country_name?: string;
      /**
       * Phone number, such as +1 2332357613.
       *
       * @example +1 1000200200
       */
      number?: string;
      /**
       * Type of number.
       *
       * @example toll
       */
      type?: "toll" | "tollfree";
    }[];
    /**
     * Start video when the host joins the meeting.
     *
     * @example true
     */
    host_video?: boolean;
    /**
     * Host meeting in India.
     *
     * @example false
     * @deprecated true
     * @default false
     */
    in_meeting?: boolean;
    /**
     * If the value of `join_before_host` field is set to true, this field can be used to indicate time limits when a participant may join a meeting before a host.
     *
     * *  `0` - Allow participant to join anytime.
     * *  `5` - Allow participant to join 5 minutes before meeting start time.
     *  * `10` - Allow participant to join 10 minutes before meeting start time.
     *  * `15` - Allow participant to join 15 minutes before meeting start time.
     *
     * @example 0
     */
    jbh_time?: 0 | 5 | 10 | 15;
    /**
     * Allow participants to join the meeting before the host starts the meeting. Only used for scheduled or recurring meetings.
     *
     * @example true
     * @default false
     */
    join_before_host?: boolean;
    /**
     * [Q&amp;A](https://support.zoom.com/hc/en/article?id=zm_kb&sysparm_article=KB0065237) for meeting.
     */
    question_and_answer?: {
      /**
       * * `true` - Enable [Q&amp;A](https://support.zoom.com/hc/en/article?id=zm_kb&sysparm_article=KB0065237) for the meeting.
       *
       * * `false` - Disable Q&amp;A for the meeting.
       *
       * @example true
       */
      enable?: boolean;
      /**
       * * `true` - Allow participants to submit questions.
       *
       * * `false` - Don't allow participants to submit questions.
       *
       * @example true
       */
      allow_submit_questions?: boolean;
      /**
       * * `true` - Allow participants to send questions without providing their name to the host, co-host, and panelists.
       *
       * * `false` - Don't allow anonymous questions. Not supported for simulive meetings.
       *
       * @example true
       */
      allow_anonymous_questions?: boolean;
      /**
       * Indicate whether you want attendees to be able to view only answered questions, or view all questions.
       *
       * * `answered` - Attendees can only view answered questions.
       *
       * * `all` - Attendees can view all questions submitted in the Q&amp;A.
       *
       * @example all
       */
      question_visibility?: "answered" | "all";
      /**
       * * `true` - Attendees can answer questions or leave a comment in the question thread.
       *
       * * `false` - Attendees can't answer questions or leave a comment in the question thread.
       *
       * @example true
       */
      attendees_can_comment?: boolean;
      /**
       * * `true` - Attendees can select the thumbs up button to bring popular questions to the top of the Q&amp;A window.
       *
       * * `false` - Attendees can't select the thumbs up button on questions.
       *
       * @example true
       */
      attendees_can_upvote?: boolean;
    };
    /**
     * The meeting's [language interpretation settings](https://support.zoom.com/hc/en/article?id=zm_kb&sysparm_article=KB0064768). Make sure to add the language in the web portal in order to use it in the API. See link for details.
     *
     * **Note:** This feature is only available for certain Meeting add-on, Education, and Business and higher plans. If this feature is not enabled on the host's account, this setting will **not** be applied to the meeting.
     */
    language_interpretation?: {
      /**
       * Whether to enable [language interpretation](https://support.zoom.com/hc/en/article?id=zm_kb&sysparm_article=KB0064768) for the meeting.
       *
       * @example true
       */
      enable?: boolean;
      /**
       * Information about the meeting's language interpreters.
       */
      interpreters?: {
        /**
         * The interpreter's email address.
         *
         * @format email
         * @example interpreter@example.com
         */
        email?: string;
        /**
         * A comma-separated list of the interpreter's languages. The string must contain exactly two country IDs.
         *
         * Only system-supported languages are allowed: `US` (English), `CN` (Chinese), `JP` (Japanese), `DE` (German), `FR` (French), `RU` (Russian), `PT` (Portuguese), `ES` (Spanish), and `KR` (Korean).
         *
         * For example, to set an interpreter translating from English to Chinese, use `US,CN`.
         *
         * @example US,FR
         * @deprecated true
         */
        languages?: string;
        /**
         * A comma-separated list of the interpreter's languages. The string must contain exactly two languages.
         *
         * To get this value, use the `language_interpretation` object's `languages` and `custom_languages` values in the [**Get user settings**](/docs/api/users/#tag/users/GET/users/{userId}/settings) API response.
         *
         * **languages**: System-supported languages include `English`, `Chinese`, `Japanese`, `German`, `French`, `Russian`, `Portuguese`, `Spanish`, and `Korean`.
         *
         * **custom_languages**: User-defined languages added by the user.
         *
         * For example, an interpreter translating between English and French should use `English,French`.
         *
         * @example English,French
         */
        interpreter_languages?: string;
      }[];
    };
    /**
     * The meeting's [sign language interpretation settings](https://support.zoom.us/hc/en-us/articles/9644962487309-Using-sign-language-interpretation-in-a-meeting-or-webinar). Make sure to add the language in the web portal in order to use it in the API. See link for details.
     *
     * **Note:** If this feature is not enabled on the host's account, this setting will **not** be applied to the meeting.
     */
    sign_language_interpretation?: {
      /**
       * Whether to enable [sign language interpretation](https://support.zoom.us/hc/en-us/articles/9644962487309-Using-sign-language-interpretation-in-a-meeting-or-webinar) for the meeting.
       *
       * @example true
       */
      enable?: boolean;
      /**
       * Information about the meeting's sign language interpreters.
       *
       * @maximum 20
       */
      interpreters?: {
        /**
         * The interpreter's email address.
         *
         * @format email
         * @example interpreter@example.com
         */
        email?: string;
        /**
         * The interpreter's sign language.
         *
         *  To get this value, use the `sign_language_interpretation` object's `languages` and `custom_languages` values in the [**Get user settings**](/docs/api/rest/reference/zoom-api/methods#operation/userSettings) API response.
         *
         * @example American
         */
        sign_language?: string;
      }[];
    };
    /**
     * `true` - Only authenticated users can join meetings.
     *
     * @example true
     */
    meeting_authentication?: boolean;
    /**
     * Mute participants upon entry.
     *
     * @example false
     * @default false
     */
    mute_upon_entry?: boolean;
    /**
     * Start video when participants join the meeting.
     *
     * @example false
     */
    participant_video?: boolean;
    /**
     * Whether the meeting is set as private.
     *
     * @example false
     */
    private_meeting?: boolean;
    /**
     * Whether to send registrants an email confirmation.
     * * `true` - Send a confirmation email.
     * * `false` - Do not send a confirmation email.
     *
     * @example true
     */
    registrants_confirmation_email?: boolean;
    /**
     * Whether to send registrants email notifications about their registration approval, cancellation, or rejection.
     *
     * * `true` - Send an email notification.
     * * `false` - Do not send an email notification.
     *
     *  Set this value to `true` to also use the `registrants_confirmation_email` parameter.
     *
     * @example true
     */
    registrants_email_notification?: boolean;
    /**
     * Registration type. Used for recurring meeting with fixed time only.
     *  `1` Attendees register once and can attend any of the occurrences.
     *  `2` Attendees need to register for each occurrence to attend.
     *  `3` Attendees register once and can choose one or more occurrences to attend.
     *
     * @example 1
     * @default 1
     */
    registration_type?: 1 | 2 | 3;
    /**
     * Show social share buttons on the meeting registration page.
     * This setting only works for meetings that require [registration](https://support.zoom.us/hc/en-us/articles/211579443-Setting-up-registration-for-a-meeting).
     *
     * @example true
     */
    show_share_button?: boolean;
    /**
     * Use a [personal meeting ID (PMI)](/docs/api/rest/using-zoom-apis/#understanding-personal-meeting-id-pmi). Only used for scheduled meetings and recurring meetings with no fixed time.
     *
     * @example false
     * @default false
     */
    use_pmi?: boolean;
    /**
     * Enable waiting room
     *
     * @example false
     * @default false
     */
    waiting_room?: boolean;
    /**
     * Add watermark when viewing a shared screen.
     *
     * @example false
     * @default false
     */
    watermark?: boolean;
    /**
     * Whether the **Allow host to save video order** feature is enabled.
     *
     * @example true
     */
    host_save_video_order?: boolean;
    /**
     * Whether to set the meeting as an internal meeting.
     *
     * @example false
     * @default false
     */
    internal_meeting?: boolean;
    /**
     * A list of the meeting's invitees.
     */
    meeting_invitees?: {
      /**
       * The invitee's email address.
       *
       * @format email
       * @example jchill@example.com
       */
      email?: string;
      /**
       * Whether the meeting invitee is an internal user.
       *
       * @example false
       * @default false
       */
      internal_user?: boolean;
    }[];
    /**
     * Information about the **Enable continuous meeting chat** feature. This setting only applies to scheduled and recurring meetings, types `2`, `3`, or `8`. It is **not supported** for type `1` instant meetings or type `10` screen share only meetings.
     */
    continuous_meeting_chat?: {
      /**
       * Whether to enable the **Enable continuous meeting chat** setting.
       *
       * @example true
       */
      enable?: boolean;
      /**
       * Whether to enable the **Automatically add invited external users** setting.
       *
       * @example true
       * @deprecated true
       */
      auto_add_invited_external_users?: boolean;
      /**
       * Whether to enable the **Automatically add meeting participants** setting.
       *
       * @example true
       * @deprecated true
       */
      auto_add_meeting_participants?: boolean;
      /**
       * Who is added to the continuous meeting chat. Invitees are users added during scheduling. Participants are users who join the meeting.
       * * `all_users` - For all users, including external invitees and meeting participants.
       * * `org_invitees_and_participants` - Only for meeting invitees and participants in your organization.
       * * `org_invitees` - Only for meeting invitees in your organization.
       *
       * @example all_users
       */
      who_is_added?:
        | "all_users"
        | "org_invitees_and_participants"
        | "org_invitees";
      /**
       * The channel's ID.
       *
       * @example cabc1234567defghijkl01234
       */
      channel_id?: string;
    };
    /**
     * Whether to set the meeting as a participant focused meeting.
     *
     * @example false
     * @default false
     */
    participant_focused_meeting?: boolean;
    /**
     * Whether to push meeting changes to the calendar.
     *
     *  To enable this feature, configure the **Configure Calendar and Contacts Service** in the user's profile page of the Zoom web portal and enable the **Automatically sync Zoom calendar events information bi-directionally between Zoom and integrated calendars.** setting in the **Settings** page of the Zoom web portal.
     * * `true` - Push meeting changes to the calendar.
     * * `false` - Do not push meeting changes to the calendar.
     *
     * @example false
     * @default false
     */
    push_change_to_calendar?: boolean;
    /**
     * The meeting's resources.
     */
    resources?: {
      /**
       * The resource type.
       *
       * @example whiteboard
       */
      resource_type?: "whiteboard";
      /**
       * The resource ID.
       *
       * @example X4Hy02w3QUOdskKofgb9Jg
       */
      resource_id?: string;
      /**
       * The permission levels for users to access the whiteboard.
       * * `editor` - Users with link access can edit the board.
       * * `commenter` - Users with link access can comment on the board.
       * * `viewer` - Users with link access can view the board.
       *
       * @example editor
       * @default editor
       */
      permission_level?: "editor" | "commenter" | "viewer";
    }[];
    /**
     * Whether to automatically start a meeting summary.
     *
     * @example false
     * @default false
     */
    auto_start_meeting_summary?: boolean;
    /**
     * Defines who will receive a summary after this meeting. This field is applicable only when `auto_start_meeting_summary` is set to `true`.
     * * `1` - Only meeting host.
     * * `2` - Only meeting host, co-hosts, and alternative hosts.
     * * `3` - Only meeting host and meeting invitees in our organization.
     * * `4` - All meeting invitees including those outside of our organization.
     *
     * @example 1
     */
    who_will_receive_summary?: 1 | 2 | 3 | 4;
    /**
     * Whether to automatically start AI Companion questions.
     *
     * @example false
     * @default false
     */
    auto_start_ai_companion_questions?: boolean;
    /**
     * Defines who can ask questions about this meeting's transcript. This field is applicable only when `auto_start_ai_companion_questions` is set to `true`.
     * * `1` - All participants and invitees.
     * * `2` - All participants only from when they join.
     * * `3` - Only meeting host.
     * * `4` - Participants and invitees in our organization.
     * * `5` - Participants in our organization only from when they join.
     *
     * @example 1
     */
    who_can_ask_questions?: 1 | 2 | 3 | 4 | 5;
    /**
     * The summary template ID used to generate a meeting summary based on a predefined template. To get available summary templates, use the **Get user summary templates** API. To enable this feature for your account, please [contact Zoom Support](https://support.zoom.com/hc/en).
     *
     * @example 1e1356ad
     */
    summary_template_id?: string;
    /**
     * Enable the device testing.
     *
     * @example false
     * @default false
     */
    device_testing?: boolean;
    /**
     * Whether to allow the host and co-hosts to fully control the mute state of participants.
     *
     * @example false
     * @default false
     */
    allow_host_control_participant_mute_state?: boolean;
    /**
     * Whether to disable the participant video during meeting. To enable this feature for your account, please [contact Zoom Support](https://support.zoom.us/hc/en-us).
     *
     * @example false
     * @default false
     */
    disable_participant_video?: boolean;
    /**
     * Whether to include authenticated guest's email addresses in meetings' attendee reports.
     *
     * @example true
     */
    email_in_attendee_report?: boolean;
  };
  /**
   * Meeting start time in GMT or UTC. Start time will not be returned if the meeting is an **instant** meeting.
   *
   * @format date-time
   * @example 2022-03-25T07:29:29Z
   */
  start_time?: string;
  /**
   * The `start_url` of a meeting is a URL that a host or an alternative host can start the meeting.
   *
   * The expiration time for the `start_url` field listed in the response of the [**Create a meeting**](/docs/api/rest/reference/zoom-api/methods#operation/meetingCreate) API is two hours for all regular users.
   *
   * For users created using the `custCreate` option via the [**Create users**](/docs/api/rest/reference/zoom-api/methods#operation/userCreate) API, the expiration time of the `start_url` field is 90 days.
   *
   * For security reasons, to retrieve the updated value for the `start_url` field programmatically after the expiry time, you must call the [**Get a meeting](/docs/api/rest/reference/zoom-api/methods#operation/meeting) API and refer to the value of the `start_url` field in the response.
   *  This URL should only be used by the host of the meeting and **should not be shared with anyone other than the host** of the meeting as anyone with this URL will be able to login to the Zoom Client as the host of the meeting.
   *
   * @example https://example.com/s/11111
   */
  start_url?: string;
  /**
   * Meeting status
   *
   * @example waiting
   */
  status?: "waiting" | "started";
  /**
   * The timezone to format the meeting start time.
   *
   * @example America/Los_Angeles
   */
  timezone?: string;
  /**
   * Meeting topic.
   *
   * @example My Meeting
   */
  topic?: string;
  /**
   * Tracking fields.
   */
  tracking_fields?: {
    /**
     * The tracking field's label.
     *
     * @example field1
     */
    field?: string;
    /**
     * The tracking field's value.
     *
     * @example value1
     */
    value?: string;
    /**
     * Indicates whether the [tracking field](https://support.zoom.us/hc/en-us/articles/115000293426-Scheduling-Tracking-Fields) is visible in the meeting scheduling options in the Zoom Web Portal or not.
     *
     * `true`: Tracking field is visible.
     *
     *
     * `false`: Tracking field is not visible to the users when they look at the meeting details in the Zoom Web Portal but the field was used while scheduling this meeting via API. An invisible tracking field can be used by users while scheduling meetings via API only.
     *
     * @example true
     */
    visible?: boolean;
  }[];
  /**
   * The type of meeting.
   * * `1` - An instant meeting.
   * * `2` - A scheduled meeting.
   * * `3` - A recurring meeting with no fixed time.
   * * `4` - A PMI Meeting.
   * * `8` - A recurring meeting with fixed time.
   * * `10` - A screen share only meeting.
   *
   * @example 2
   * @default 2
   */
  type?: 1 | 2 | 3 | 4 | 8 | 10;
  /**
   * The meeting dynamic host key.
   *
   * @example 123456
   */
  dynamic_host_key?: string;
  /**
   * The platform used when creating the meeting.
   * * `other` - Created through another platform.
   * * `open_api` - Created through Open API.
   * * `web_portal` - Created through the web portal.
   *
   * @example open_api
   */
  creation_source?: "other" | "open_api" | "web_portal";
};

export type MeetingVariables = {
  pathParams: MeetingPathParams;
  queryParams?: MeetingQueryParams;
} & FetcherExtraProps;

/**
 * Retrieve the given meeting's details.
 *
 * **Prerequisites**:
 * * Host user must have a Zoom Meetings Basic license or higher.
 *
 * **[Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `meeting:read`,`meeting:read:admin`
 *
 * **[Granular Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `meeting:read:meeting`,`meeting:read:meeting:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
 */
export const meeting = (variables: MeetingVariables, signal?: AbortSignal) =>
  fetch<
    MeetingResponse,
    MeetingError,
    undefined,
    {},
    MeetingQueryParams,
    MeetingPathParams
  >({ url: "/meetings/{meetingId}", method: "get", ...variables, signal });

export type MeetingDeletePathParams = {
  /**
   * The meeting's ID.
   *
   *  When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits.
   *
   * @format int64
   * @example 85746065
   */
  meetingId: number;
};

export type MeetingDeleteQueryParams = {
  /**
   * The meeting or webinar occurrence ID.
   *
   * @example 1648194360000
   */
  occurrence_id?: string;
  /**
   * `true`: Notify host and alternative host about the meeting cancellation via email.
   * `false`: Do not send any email notification.
   *
   * @example true
   */
  schedule_for_reminder?: boolean;
  /**
   * `true`: Notify registrants about the meeting cancellation via email.
   *
   * `false`: Do not send any email notification to meeting registrants.
   *
   * The default value of this field is `false`.
   *
   * @example true
   */
  cancel_meeting_reminder?: boolean;
};

export type MeetingDeleteError = Fetcher.ErrorWrapper<undefined>;

export type MeetingDeleteVariables = {
  pathParams: MeetingDeletePathParams;
  queryParams?: MeetingDeleteQueryParams;
} & FetcherExtraProps;

/**
 * Delete a meeting.
 *
 * **Prerequisites**:
 * * For recurring meetings, the `occurrence_id` is required to delete a specific occurrence. If not provided, the entire recurring series will be deleted.
 *
 * **[Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `meeting:write:admin`,`meeting:write`
 *
 * **[Granular Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `meeting:delete:meeting`,`meeting:delete:meeting:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
 */
export const meetingDelete = (
  variables: MeetingDeleteVariables,
  signal?: AbortSignal,
) =>
  fetch<
    undefined,
    MeetingDeleteError,
    undefined,
    {},
    MeetingDeleteQueryParams,
    MeetingDeletePathParams
  >({ url: "/meetings/{meetingId}", method: "delete", ...variables, signal });

export type MeetingUpdatePathParams = {
  /**
   * The meeting's ID.
   *
   *  When storing this value in your database, store it as a long format integer and **not** an integer. Meeting IDs can be greater than 10 digits.
   *
   * @format int64
   * @example 85746065
   */
  meetingId: number;
};

export type MeetingUpdateQueryParams = {
  /**
   * Meeting occurrence ID. Support change of agenda, `start_time`, duration, or settings {`host_video`, `participant_video`, `join_before_host`, `mute_upon_entry`, `waiting_room`, `watermark`, `auto_recording`}.
   *
   * @example 1648194360000
   */
  occurrence_id?: string;
};

export type MeetingUpdateError = Fetcher.ErrorWrapper<undefined>;

export type MeetingUpdateRequestBody = {
  /**
   * Meeting description.
   *
   * @maxLength 2000
   * @example My Meeting
   */
  agenda?: string;
  /**
   * The meeting's scheduled duration, in minutes. This field is used for type `2` scheduled meetings and type `8` recurring meetings with a fixed time. The value must be between 1 and 1440 minutes, which equates to 24 hours.
   *
   * @maximum 1440
   * @minimum 1
   * @example 60
   */
  duration?: number;
  /**
   * The passcode required to join the meeting. By default, a passcode can **only** have a maximum length of 10 characters and only contain alphanumeric characters and the `@`, `-`, `_`, and `*` characters.
   *
   * **Note**
   * * If the account owner or administrator has configured [minimum passcode requirement settings](https://support.zoom.us/hc/en-us/articles/360033559832-Meeting-and-webinar-passwords#h_a427384b-e383-4f80-864d-794bf0a37604), the passcode **must** meet those requirements.
   * * If passcode requirements are enabled, use the [**Get user settings**](/docs/api/users/#tag/users/GET/users/{userId}/settings) API or the [**Get account settings**](/docs/api/accounts/#tag/accounts/GET/accounts/{accountId}/settings) API to get the requirements.
   * * If the **Require a passcode when scheduling new meetings** account setting is enabled and locked, a passcode will be automatically generated if one is not provided.
   *
   * @maxLength 10
   * @example 123456
   */
  password?: string;
  /**
   * Whether to create a prescheduled meeting through the [GSuite app](https://support.zoom.us/hc/en-us/articles/360020187492-Zoom-for-GSuite-add-on). This **only** supports the meeting `type` value of `2` - scheduled meetings- and `3` - recurring meetings with no fixed time.
   * * `true` - Create a prescheduled meeting.
   * * `false` - Create a regular meeting.
   *
   * @example false
   * @default false
   */
  pre_schedule?: boolean;
  /**
   * The email address or `userId` of the user to schedule a meeting for.
   *
   * @example jchill@example.com
   */
  schedule_for?: string;
  /**
   * Recurrence object. Use this object only for a meeting with type `8`, a recurring meeting with fixed time.
   */
  recurrence?: {
    /**
     * Select the final date when the meeting recurs before it is canceled. Should be in UTC time, such as 2017-11-25T12:00:00Z. Cannot be used with `end_times`.
     *
     * @format date-time
     * @example 2022-04-02T15:59:00Z
     */
    end_date_time?: string;
    /**
     * Select how many times the meeting should recur before it is canceled. If `end_times` is set to 0, it means there is no end time. The maximum number of recurrences is 60. Cannot be used with `end_date_time`.
     *
     * @maximum 60
     * @example 7
     * @default 1
     */
    end_times?: number;
    /**
     * Use this field **only if you're scheduling a recurring meeting of type** `3` to state the day in a month when the meeting should recur. The value range is from 1 to 31.
     *
     * For instance, if the meeting should recur on 23rd of each month, provide `23` as this field's value and `1` as the `repeat_interval` field's value. If the meeting should recur every three months on 23rd of the month, change the `repeat_interval` field's value to `3`.
     *
     * @example 1
     * @default 1
     */
    monthly_day?: number;
    /**
     * Use this field **only if you're scheduling a recurring meeting of type** `3` to state the week of the month when the meeting should recur. If you use this field, you must also use the `monthly_week_day` field to state the day of the week when the meeting should recur.
     *  `-1` - Last week of the month.
     *  `1` - First week of the month.
     *  `2` - Second week of the month.
     *  `3` - Third week of the month.
     *  `4` - Fourth week of the month.
     *
     * @example 1
     */
    monthly_week?: -1 | 1 | 2 | 3 | 4;
    /**
     * Use this field only if you're scheduling a recurring meeting of type `3` to state a specific day in a week when a monthly meeting should recur. To use this field, you must also use the `monthly_week` field.
     *
     *
     *  `1` - Sunday.
     *  `2` - Monday.
     *  `3` - Tuesday.
     *  `4` -  Wednesday.
     *  `5` - Thursday.
     *  `6` - Friday.
     *  `7` - Saturday.
     *
     * @example 1
     */
    monthly_week_day?: 1 | 2 | 3 | 4 | 5 | 6 | 7;
    /**
     * Define the interval when the meeting should recur. For instance, to schedule a meeting that recurs every two months, set this field's value as `2` and the `type` parameter's value to `3`.
     *
     * For a daily meeting, the maximum interval is `99` days. For a weekly meeting, the maximum interval is `50` weeks. For a monthly meeting, the maximum value is `10` months.
     *
     * @example 1
     */
    repeat_interval?: number;
    /**
     * Recurrence meeting types.
     *  `1` - Daily.
     *  `2` - Weekly.
     *  `3` - Monthly.
     *
     * @example 1
     */
    type: 1 | 2 | 3;
    /**
     * This field is required if you're scheduling a recurring meeting of type `2`, to state which days of the week the meeting should repeat.
     *
     * Thiw field's value could be a number between `1` to `7` in string format. For instance, if the meeting should recur on Sunday, provide `1` as this field's value.
     *
     *   **Note** If you would like the meeting to occur on multiple days of a week, you should provide comma separated values for this field. For instance, if the meeting should recur on Sundays and Tuesdays provide `1,3` as this field's value.
     *
     *
     *  `1`  - Sunday.
     *  `2` - Monday.
     *  `3` - Tuesday.
     *  `4` -  Wednesday.
     *  `5` -  Thursday.
     *  `6` - Friday.
     *  `7` - Saturday.
     *
     * @example 1
     * @default 1
     */
    weekly_days?: "1" | "2" | "3" | "4" | "5" | "6" | "7";
  };
  /**
   * Meeting settings.
   */
  settings?: {
    /**
     * Allow attendees to join the meeting from multiple devices. This setting only works for meetings that require [registration](https://support.zoom.us/hc/en-us/articles/211579443-Setting-up-registration-for-a-meeting).
     *
     * @example true
     */
    allow_multiple_devices?: boolean;
    /**
     * A semicolon-separated list of the meeting's alternative hosts' email addresses or IDs.
     *
     * @example jchill@example.com;thill@example.com
     */
    alternative_hosts?: string;
    /**
     * Flag to determine whether to send email notifications to alternative hosts, default value is true.
     *
     * @example true
     * @default true
     */
    alternative_hosts_email_notification?: boolean;
    /**
     * Whether the **Allow alternative hosts to add or edit polls** feature is enabled. This requires Zoom version 5.8.0 or higher.
     *
     * @example true
     */
    alternative_host_update_polls?: boolean;
    /**
     * Enable registration and set approval for the registration. Note that this feature requires the host to be of **Licensed** user type. **Registration cannot be enabled for a basic user.**
     *
     *
     *
     * `0` - Automatically approve.
     *  `1` - Manually approve.
     *  `2` - No registration required.
     *
     * @example 0
     * @default 2
     */
    approval_type?: 0 | 1 | 2;
    /**
     * Approve or block users from specific regions or countries from joining this meeting.
     */
    approved_or_denied_countries_or_regions?: {
      /**
       * List of countries or regions from where participants can join this meeting.
       */
      approved_list?: string[];
      /**
       * List of countries or regions from where participants can not join this meeting.
       */
      denied_list?: string[];
      /**
       * `true` - Setting enabled to either allow users or block users from specific regions to join your meetings.
       *
       *
       * `false` - Setting disabled.
       *
       * @example true
       */
      enable?: boolean;
      /**
       * Specify whether to allow users from specific regions to join this meeting, or block users from specific regions from joining this meeting.
       *
       *
       * `approve` - Allow users from specific regions or countries to join this meeting. If this setting is selected, include the approved regions or countries in the `approved_list`.
       *
       *
       * `deny` - Block users from specific regions or countries from joining this meeting. If this setting is selected, include the approved regions orcountries in the `denied_list`
       *
       * @example approve
       */
      method?: "approve" | "deny";
    };
    /**
     * Determine how participants can join the audio portion of the meeting.
     *  `both` - Both Telephony and VoIP.
     *  `telephony` - Telephony only.
     *  `voip` - VoIP only.
     *  `thirdParty` - Third party audio conference.
     *
     * @example telephony
     * @default both
     */
    audio?: "both" | "telephony" | "voip" | "thirdParty";
    /**
     * Third party audio conference info.
     *
     * @maxLength 2048
     * @example test
     */
    audio_conference_info?: string;
    /**
     * If user has configured [Sign Into Zoom with Specified Domains](https://support.zoom.us/hc/en-us/articles/360037117472-Authentication-Profiles-for-Meetings-and-Webinars#h_5c0df2e1-cfd2-469f-bb4a-c77d7c0cca6f) option, this will list the domains that are authenticated.
     *
     * @example example.com
     */
    authentication_domains?: string;
    /**
     * The participants added here will receive unique meeting invite links and bypass authentication.
     */
    authentication_exception?: {
      /**
       * The participant's email address.
       *
       * @format email
       * @example jchill@example.com
       */
      email?: string;
      /**
       * The participant's name.
       *
       * @example Jill Chill
       */
      name?: string;
      /**
       * URL for participants to join the meeting
       *
       * @example https://example.com/s/11111
       */
      join_url?: string;
    }[];
    /**
     * Authentication name set in the [authentication profile](https://support.zoom.us/hc/en-us/articles/360037117472-Authentication-Profiles-for-Meetings-and-Webinars#h_5c0df2e1-cfd2-469f-bb4a-c77d7c0cca6f).
     *
     * @example Sign in to Zoom
     */
    authentication_name?: string;
    /**
     * Meeting authentication option ID.
     *
     * @example signIn_D8cJuqWVQ623CI4Q8yQK0Q
     */
    authentication_option?: string;
    /**
     * Automatic recording.
     *  `local` - Record on local.
     *  `cloud` -  Record on cloud.
     *  `none` - Disabled.
     *
     * @example cloud
     * @default none
     */
    auto_recording?: "local" | "cloud" | "none";
    /**
     * Setting to [pre-assign breakout rooms](https://support.zoom.us/hc/en-us/articles/360032752671-Pre-assigning-participants-to-breakout-rooms#h_36f71353-4190-48a2-b999-ca129861c1f4).
     */
    breakout_room?: {
      /**
       * Set this field's value to `true` to enable the [breakout room pre-assign](https://support.zoom.us/hc/en-us/articles/360032752671-Pre-assigning-participants-to-breakout-rooms#h_36f71353-4190-48a2-b999-ca129861c1f4) option.
       *
       * @example true
       */
      enable?: boolean;
      /**
       * Create room(s).
       */
      rooms?: {
        /**
         * The breakout room's name.
         *
         * @example room1
         */
        name?: string;
        /**
         * Email addresses of the participants who are to be assigned to the breakout room.
         */
        participants?: string[];
      }[];
    };
    /**
     * The type of calendar integration used to schedule the meeting.
     * * `1` - [Zoom Outlook add-in](https://support.zoom.us/hc/en-us/articles/360031592971-Getting-started-with-Outlook-plugin-and-add-in)
     * * `2` - [Zoom for Google Workspace add-on](https://support.zoom.us/hc/en-us/articles/360020187492-Using-the-Zoom-for-Google-Workspace-add-on)
     *
     * Works with the `private_meeting` field to determine whether to share details of meetings.
     *
     * @example 1
     */
    calendar_type?: 1 | 2;
    /**
     * Close registration after the event date.
     *
     * @example false
     * @default false
     */
    close_registration?: boolean;
    /**
     * Host the meeting in China.
     *
     * @example false
     * @deprecated true
     * @default false
     */
    cn_meeting?: boolean;
    /**
     * Contact email for registration.
     *
     * @example jchill@example.com
     */
    contact_email?: string;
    /**
     * Contact name for registration.
     *
     * @example Jill Chill
     */
    contact_name?: string;
    /**
     * Custom keys and values assigned to the meeting.
     *
     * @maxItems 10
     */
    custom_keys?: {
      /**
       * Custom key associated with the user.
       *
       * @maxLength 64
       * @example key1
       */
      key?: string;
      /**
       * Value of the custom key associated with the user.
       *
       * @maxLength 256
       * @example value1
       */
      value?: string;
    }[];
    /**
     * Whether to send email notifications to [alternative hosts](https://support.zoom.us/hc/en-us/articles/208220166) and [users with scheduling privileges](https://support.zoom.us/hc/en-us/articles/201362803-Scheduling-privilege). This value defaults to `true`.
     *
     * @example true
     * @default true
     */
    email_notification?: boolean;
    /**
     * Choose between enhanced encryption and [end-to-end encryption](https://support.zoom.us/hc/en-us/articles/360048660871) when starting or a meeting. When using end-to-end encryption, several features such cloud recording and phone/SIP/H.323 dial-in, will be **automatically disabled**.
     *
     * `enhanced_encryption` - Enhanced encryption. Encryption is stored in the cloud if you enable this option.
     *
     *
     * `e2ee` - [End-to-end encryption](https://support.zoom.us/hc/en-us/articles/360048660871). The encryption key is stored in your local device and can not be obtained by anyone else. Enabling this setting also **disables** the features join before host, cloud recording, streaming, live transcription, breakout rooms, polling, 1:1 private chat, and meeting reactions.
     *
     * @example enhanced_encryption
     */
    encryption_type?: "enhanced_encryption" | "e2ee";
    /**
     * Only signed in users can join this meeting.
     *
     * **This field is deprecated and will not be supported in the future.**
     *
     *  As an alternative, use the `meeting_authentication`, `authentication_option`, and `authentication_domains` fields to understand the [authentication configurations](https://support.zoom.us/hc/en-us/articles/360037117472-Authentication-Profiles-for-Meetings-and-Webinars) set for the meeting.
     *
     * @example true
     * @deprecated true
     */
    enforce_login?: boolean;
    /**
     * Only signed in users with specified domains can join meetings.
     *
     * **This field is deprecated and will not be supported in the future.**
     *
     *  As an alternative, use the `meeting_authentication`, `authentication_option`. and `authentication_domains` fields to understand the [authentication configurations](https://support.zoom.us/hc/en-us/articles/360037117472-Authentication-Profiles-for-Meetings-and-Webinars) set for the meeting.
     *
     * @example example.com
     * @deprecated true
     */
    enforce_login_domains?: string;
    /**
     * Whether the [**Focus Mode** feature](https://support.zoom.us/hc/en-us/articles/360061113751-Using-focus-mode) is enabled when the meeting starts.
     *
     * @example true
     */
    focus_mode?: boolean;
    /**
     * List of global dial-in countries
     */
    global_dial_in_countries?: string[];
    /**
     * Global dial-in countries or regions
     */
    global_dial_in_numbers?: {
      /**
       * City of the number, if any, such as Chicago.
       *
       * @example New York
       */
      city?: string;
      /**
       * Country code, such as BR.
       *
       * @example US
       */
      country?: string;
      /**
       * Full name of country, such as Brazil.
       *
       * @example US
       */
      country_name?: string;
      /**
       * Phone number, such as +1 2332357613.
       *
       * @example +1 1000200200
       */
      number?: string;
      /**
       * Type of number.
       *
       * @example toll
       */
      type?: "toll" | "tollfree";
    }[];
    /**
     * Start video when the host joins the meeting.
     *
     * @example true
     */
    host_video?: boolean;
    /**
     * Host meeting in India.
     *
     * @example false
     * @deprecated true
     * @default false
     */
    in_meeting?: boolean;
    /**
     * If the value of `join_before_host` field is set to true, use this field to indicate time limits for a participant to join a meeting before a host.
     *
     * *  `0` - Allow participant to join anytime.
     * *  `5` - Allow participant to join 5 minutes before meeting start time.
     *  * `10` - Allow participant to join 10 minutes before meeting start time.
     *  * `15` - Allow participant to join 15 minutes before meeting start time.
     *
     * @example 0
     */
    jbh_time?: 0 | 5 | 10 | 15;
    /**
     * Allow participants to join the meeting before the host starts the meeting. Only used for scheduled or recurring meetings.
     *
     * @example true
     * @default false
     */
    join_before_host?: boolean;
    /**
     * [Q&amp;A](https://support.zoom.com/hc/en/article?id=zm_kb&sysparm_article=KB0065237) for meeting.
     */
    question_and_answer?: {
      /**
       * * `true` - Enable [Q&amp;A](https://support.zoom.com/hc/en/article?id=zm_kb&sysparm_article=KB0065237) for meeting.
       *
       * * `false` - Disable Q&amp;A for meeting.
       *
       * @example true
       */
      enable?: boolean;
      /**
       * * `true`: Allow participants to submit questions.
       *
       * * `false`: Do not allow submit questions.
       *
       * @example true
       */
      allow_submit_questions?: boolean;
      /**
       * * `true` - Allow participants to send questions without providing their name to the host, co-host, and panelists..
       *
       * * `false` - Do not allow anonymous questions.(Not supported for simulive meeting.)
       *
       * @example true
       */
      allow_anonymous_questions?: boolean;
      /**
       * Indicate whether you want attendees to be able to view answered questions only or view all questions.
       *
       * * `answered` - Attendees are able to view answered questions only.
       *
       * *  `all` - Attendees are able to view all questions submitted in the Q&amp;A.
       *
       * @example all
       */
      question_visibility?: "answered" | "all";
      /**
       * * `true` - Attendees can answer questions or leave a comment in the question thread.
       *
       * * `false` - Attendees can not answer questions or leave a comment in the question thread
       *
       * @example true
       */
      attendees_can_comment?: boolean;
      /**
       * * `true` - Attendees can click the thumbs up button to bring popular questions to the top of the Q&amp;A window.
       *
       * * `false` - Attendees can not click the thumbs up button on questions.
       *
       * @example true
       */
      attendees_can_upvote?: boolean;
    };
    /**
     * The meeting's [language interpretation settings](https://support.zoom.com/hc/en/article?id=zm_kb&sysparm_article=KB0064768). Make sure to add the language in the web portal in order to use it in the API. See link for details.
     *
     * **Note:** This feature is only available for certain Meeting add-on, Education, and Business and higher plans. If this feature is not enabled on the host's account, this setting will **not** be applied to the meeting.
     */
    language_interpretation?: {
      /**
       * Whether to enable [language interpretation](https://support.zoom.com/hc/en/article?id=zm_kb&sysparm_article=KB0064768) for the meeting.
       *
       * @example true
       */
      enable?: boolean;
      /**
       * Information about the meeting's language interpreters.
       */
      interpreters?: {
        /**
         * The interpreter's email address.
         *
         * @format email
         * @example interpreter@example.com
         */
        email?: string;
        /**
         * A comma-separated list of the interpreter's languages. The string must contain exactly two country IDs.
         *
         * Only system-supported languages are allowed: `US` (English), `CN` (Chinese), `JP` (Japanese), `DE` (German), `FR` (French), `RU` (Russian), `PT` (Portuguese), `ES` (Spanish), and `KR` (Korean).
         *
         * For example, to set an interpreter translating from English to Chinese, use `US,CN`.
         *
         * @example US,FR
         * @deprecated true
         */
        languages?: string;
        /**
         * A comma-separated list of the interpreter's languages. The string must contain exactly two languages.
         *
         * To get this value, use the `language_interpretation` object's `languages` and `custom_languages` values in the [**Get user settings**](/docs/api/users/#tag/users/GET/users/{userId}/settings) API response.
         *
         * **languages**: System-supported languages include `English`, `Chinese`, `Japanese`, `German`, `French`, `Russian`, `Portuguese`, `Spanish`, and `Korean`.
         *
         * **custom_languages**: User-defined languages added by the user.
         *
         * For example, an interpreter translating between English and French should use `English,French`.
         *
         * @example English,French
         */
        interpreter_languages?: string;
      }[];
    };
    /**
     * The meeting's [sign language interpretation settings](https://support.zoom.us/hc/en-us/articles/9644962487309-Using-sign-language-interpretation-in-a-meeting-or-webinar). Make sure to add the language in the web portal in order to use it in the API. See link for details.
     *
     * **Note:** If this feature is not enabled on the host's account, this setting will **not** be applied to the meeting.
     */
    sign_language_interpretation?: {
      /**
       * Whether to enable [sign language interpretation](https://support.zoom.us/hc/en-us/articles/9644962487309-Using-sign-language-interpretation-in-a-meeting-or-webinar) for the meeting.
       *
       * @example true
       */
      enable?: boolean;
      /**
       * Information about the meeting's sign language interpreters.
       *
       * @maximum 20
       */
      interpreters?: {
        /**
         * The interpreter's email address.
         *
         * @format email
         * @example interpreter@example.com
         */
        email?: string;
        /**
         * The interpreter's sign language.
         *
         *  To get this value, use the `sign_language_interpretation` object's `languages` and `custom_languages` values in the [**Get user settings**](/api-reference/zoom-api/methods#operation/userSettings) API response.
         *
         * @example American
         */
        sign_language?: string;
      }[];
    };
    /**
     * `true`- Only authenticated users can join meetings.
     *
     * @example true
     */
    meeting_authentication?: boolean;
    /**
     * A list of the meeting's invitees.
     */
    meeting_invitees?: {
      /**
       * The invitee's email address.
       *
       * @format email
       * @example jchil@example.com
       */
      email?: string;
    }[];
    /**
     * Mute participants upon entry.
     *
     * @example false
     * @default false
     */
    mute_upon_entry?: boolean;
    /**
     * Start video when participants join the meeting.
     *
     * @example false
     */
    participant_video?: boolean;
    /**
     * Whether the meeting is set as private.
     *
     * @example false
     */
    private_meeting?: boolean;
    /**
     * Whether to send registrants an email confirmation.
     * * `true` - Send a confirmation email.
     * * `false` - Do not send a confirmation email.
     *
     * @example true
     */
    registrants_confirmation_email?: boolean;
    /**
     * Whether to send registrants email notifications about their registration approval, cancellation, or rejection.
     *
     * * `true` - Send an email notification.
     * * `false` - Do not send an email notification.
     *
     *  Set this value to `true` to also use the `registrants_confirmation_email` parameter.
     *
     * @example true
     */
    registrants_email_notification?: boolean;
    /**
     * Registration type. Used for recurring meeting with fixed time only.
     *  `1` - Attendees register once and can attend any of the occurrences.
     *  `2` - Attendees need to register for each occurrence to attend.
     *  `3` - Attendees register once and can choose one or more occurrences to attend.
     *
     * @example 1
     * @default 1
     */
    registration_type?: 1 | 2 | 3;
    /**
     * Show social share buttons on the meeting registration page.
     * This setting only works for meetings that require [registration](https://support.zoom.us/hc/en-us/articles/211579443-Setting-up-registration-for-a-meeting).
     *
     * @example true
     */
    show_share_button?: boolean;
    /**
     * Use a [personal meeting ID (PMI)](/docs/api/rest/using-zoom-apis/#understanding-personal-meeting-id-pmi). Only used for scheduled meetings and recurring meetings with no fixed time.
     *
     * @example false
     * @default false
     */
    use_pmi?: boolean;
    /**
     * Enable waiting room.
     *
     * @example false
     * @default false
     */
    waiting_room?: boolean;
    /**
     * Add a watermark when viewing a shared screen.
     *
     * @example false
     * @default false
     */
    watermark?: boolean;
    /**
     * Whether the **Allow host to save video order** feature is enabled.
     *
     * @example true
     */
    host_save_video_order?: boolean;
    /**
     * Whether to set the meeting as an internal meeting.
     *
     * @example false
     * @default false
     */
    internal_meeting?: boolean;
    /**
     * Information about the **Enable continuous meeting chat** feature. This setting only applies to scheduled and recurring meetings, type `2`, `3`, and `8`. It is **not supported** for type `1` instant meetings or type `10` screen share only meetings.
     */
    continuous_meeting_chat?: {
      /**
       * Whether to enable the **Enable continuous meeting chat** setting.
       *
       * @example true
       */
      enable?: boolean;
      /**
       * Whether to enable the **Automatically add invited external users** setting.
       *
       * @example true
       * @deprecated true
       */
      auto_add_invited_external_users?: boolean;
      /**
       * Whether to enable the **Automatically add meeting participants** setting.
       *
       * @example true
       * @deprecated true
       */
      auto_add_meeting_participants?: boolean;
      /**
       * Who is added to the continuous meeting chat. Invitees are users added during scheduling. Participants are users who join the meeting.
       * * `all_users` - For all users, including external invitees and meeting participants.
       * * `org_invitees_and_participants` - Only for meeting invitees and participants in your organization.
       * * `org_invitees` - Only for meeting invitees in your organization.
       *
       * @example all_users
       */
      who_is_added?:
        | "all_users"
        | "org_invitees_and_participants"
        | "org_invitees";
    };
    /**
     * Whether to set the meeting as a participant focused meeting.
     *
     * @example false
     * @default false
     */
    participant_focused_meeting?: boolean;
    /**
     * The meeting's resources.
     */
    resources?: {
      /**
       * The resource type.
       *
       * @example whiteboard
       */
      resource_type?: "whiteboard";
      /**
       * The resource ID.
       *
       * @example X4Hy02w3QUOdskKofgb9Jg
       */
      resource_id?: string;
      /**
       * The permission levels for users to access the whiteboard.
       * * `editor` - Users with link access can edit the board.
       * * `commenter` - Users with link access can comment on the board.
       * * `viewer` - Users with link access can view the board.
       *
       * @example editor
       * @default editor
       */
      permission_level?: "editor" | "commenter" | "viewer";
    }[];
    /**
     * Whether to automatically start meeting summary.
     *
     * @example false
     * @default false
     */
    auto_start_meeting_summary?: boolean;
    /**
     * Defines who will receive a summary after this meeting. This field is applicable only when `auto_start_meeting_summary` is set to `true`.
     * * `1` - Only meeting host.
     * * `2` - Only meeting host, co-hosts, and alternative hosts.
     * * `3` - Only meeting host and meeting invitees in our organization.
     * * `4` - All meeting invitees including those outside of our organization.
     *
     * @example 1
     */
    who_will_receive_summary?: 1 | 2 | 3 | 4;
    /**
     * Whether to automatically start AI Companion questions.
     *
     * @example false
     * @default false
     */
    auto_start_ai_companion_questions?: boolean;
    /**
     * Defines who can ask questions about this meeting's transcript. This field is applicable only when `auto_start_ai_companion_questions` is set to `true`.
     * * `1` - All participants and invitees.
     * * `2` - All participants only from when they join.
     * * `3` - Only meeting host.
     * * `4` - Participants and invitees in our organization.
     * * `5` - Participants in our organization only from when they join.
     *
     * @example 1
     */
    who_can_ask_questions?: 1 | 2 | 3 | 4 | 5;
    /**
     * The summary template ID used to generate a meeting summary based on a predefined template. To get available summary templates, use the **Get user summary templates** API. To enable this feature for your account, please [contact Zoom Support](https://support.zoom.com/hc/en).
     *
     * @example 1e1356ad
     */
    summary_template_id?: string;
    /**
     * Enable the device testing.
     *
     * @example false
     * @default false
     */
    device_testing?: boolean;
    /**
     * Whether to allow the host and co-hosts to fully control the mute state of participants.
     *
     * @example false
     * @default false
     */
    allow_host_control_participant_mute_state?: boolean;
    /**
     * Whether to disable the participant video during a meeting. To enable this feature for your account, [contact Zoom Support](https://support.zoom.us/hc/en-us).
     *
     * @example false
     * @default false
     */
    disable_participant_video?: boolean;
    /**
     * Whether to include authenticated guest's email addresses in meetings' attendee reports.
     *
     * @example true
     */
    email_in_attendee_report?: boolean;
  };
  /**
   * Meeting start time. When using a format like `yyyy-MM-dd'T'HH:mm:ss'Z'`, always use GMT time. When using a format like `yyyy-MM-dd'T'HH:mm:ss`, use local time and specify the time zone. Only used for scheduled meetings and recurring meetings with a fixed time.
   *
   * @format date-time
   * @example 2022-03-25T07:29:29Z
   */
  start_time?: string;
  /**
   * Unique identifier of the meeting template.
   *
   * [Schedule the meeting from a meeting template](https://support.zoom.us/hc/en-us/articles/360036559151-Meeting-templates#h_86f06cff-0852-4998-81c5-c83663c176fb). Retrieve this field's value by calling the [List meeting templates](/docs/api/rest/reference/zoom-api/methods/#operation/listMeetingTemplates) API.
   *
   * @example 5Cj3ceXoStO6TGOVvIOVPA==
   */
  template_id?: string;
  /**
   * The timezone to assign to the `start_time` value. Only use this field for scheduled or recurring meetings with a fixed time.
   *
   * For a list of supported timezones and their formats, see our [timezone list](/docs/api/references/abbreviations/#timezones).
   *
   * @example America/Los_Angeles
   */
  timezone?: string;
  /**
   * Meeting topic.
   *
   * @maxLength 200
   * @example My Meeting
   */
  topic?: string;
  /**
   * Tracking fields.
   */
  tracking_fields?: {
    /**
     * Tracking fields type.
     *
     * @example field1
     */
    field?: string;
    /**
     * Tracking fields value.
     *
     * @example value1
     */
    value?: string;
  }[];
  /**
   * The type of meeting.
   * * `1` - An instant meeting.
   * * `2` - A scheduled meeting.
   * * `3` - A recurring meeting with no fixed time.
   * * `8` - A recurring meeting with fixed time.
   * * `10` - A screen share only meeting.
   *
   * @example 2
   * @default 2
   */
  type?: 1 | 2 | 3 | 8 | 10;
};

export type MeetingUpdateVariables = {
  body?: MeetingUpdateRequestBody;
  pathParams: MeetingUpdatePathParams;
  queryParams?: MeetingUpdateQueryParams;
} & FetcherExtraProps;

/**
 * Update meeting details.
 *
 * **Prerequisites**
 * * The `start_time` value must be a future date. If the value is omitted or a date is in the past, the API ignores this value and does not update any recurring meetings.
 * * The `recurrence` object is required only when updating the entire series of a recurring meeting with `type=8`.
 * * This API has a rate limit of **100 requests per day**. You can update a meeting for a maximum of 100 times within a 24-hour period.
 *
 * **[Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `meeting:write`,`meeting:write:admin`
 *
 * **[Granular Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `meeting:update:meeting:admin`,`meeting:update:meeting`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
 */
export const meetingUpdate = (
  variables: MeetingUpdateVariables,
  signal?: AbortSignal,
) =>
  fetch<
    undefined,
    MeetingUpdateError,
    MeetingUpdateRequestBody,
    {},
    MeetingUpdateQueryParams,
    MeetingUpdatePathParams
  >({ url: "/meetings/{meetingId}", method: "patch", ...variables, signal });

export type CreateBatchPollsPathParams = {
  /**
   * @example 93398114182
   */
  meetingId: string;
};

export type CreateBatchPollsError = Fetcher.ErrorWrapper<undefined>;

export type CreateBatchPollsResponse = {
  polls?: {
    /**
     * Whether to allow meeting participants to answer poll questions anonymously:
     * * `true` &mdash; Anonymous polls enabled.
     * * `false` &mdash; Participants cannot answer poll questions anonymously.
     *
     * @example true
     */
    anonymous?: boolean;
    /**
     * Meeting Poll ID
     *
     * @example QalIoKWLTJehBJ8e1xRrbQ
     */
    id?: string;
    /**
     * The type of poll:
     * * `1` &mdash; Poll.
     * * `2` &mdash; Advanced Poll. This feature must be enabled in your Zoom account.
     * * `3` &mdash; Quiz. This feature must be enabled in your Zoom account.
     *
     * @example 2
     */
    poll_type?: 1 | 2 | 3;
    /**
     * The information about the poll's questions.
     */
    questions?: {
      /**
       * The allowed maximum number of characters. This field only returns for `short_answer` and `long_answer` polls.
       *
       * @example 200
       */
      answer_max_character?: number;
      /**
       * The allowed minimum number of characters. This field only returns for `short_answer` and `long_answer` polls.
       *
       * @example 1
       */
      answer_min_character?: number;
      /**
       * Whether participants must answer the question:
       * * `true` &mdash; The participant must answer the question.
       * * `false` &mdash; The participant does not need to answer the question.
       *
       * @example false
       */
      answer_required?: boolean;
      /**
       * The poll question's available answers.
       */
      answers?: string[];
      /**
       * Whether the correct answer is case sensitive. This field only returns for `fill_in_the_blank` polls:
       * * `true` &mdash; The answer is case-sensitive.
       * * `false` &mdash; The answer is not case-sensitive.
       *
       * @example false
       * @default false
       */
      case_sensitive?: boolean;
      /**
       * The poll question's title. For `fill_in_the_blank` polls, this field is the poll's question.
       *
       * @example How useful was this meeting?
       */
      name?: string;
      /**
       * The information about the prompt questions. This object only returns for `matching` and `rank_order` polls.
       */
      prompts?: {
        /**
         * The question prompt's title.
         *
         * @example How are you?
         */
        prompt_question?: string;
        /**
         * The question prompt's correct answers.
         */
        prompt_right_answers?: string[];
      }[];
      /**
       * The high score label for the `rating_max_value` field. This field only returns for `rating_scale` polls.
       *
       * @example Extremely Likely
       */
      rating_max_label?: string;
      /**
       * The rating scale's maximum value. This field only returns for `rating_scale` polls.
       *
       * @maximum 10
       * @example 4
       */
      rating_max_value?: number;
      /**
       * The low score label for the `rating_min_value` field. This field only returns for `rating_scale` polls.
       *
       * @example Not likely
       */
      rating_min_label?: string;
      /**
       * The rating scale's minimum value. This field only returns for `rating_scale` polls.
       *
       * @example 0
       */
      rating_min_value?: number;
      /**
       * The poll question's correct answer(s).
       */
      right_answers?: string[];
      /**
       * Whether to display the radio selection as a drop-down box:
       * * `true` &mdash; Show as a drop-down box.
       * * `false` &mdash; Do not show as a drop-down box.
       *
       * @example false
       */
      show_as_dropdown?: boolean;
      /**
       * The poll's question and answer type:
       * * `single` &mdash; Single choice.
       * * `multiple` &mdash; Multiple choice.
       * * `matching` &mdash; Matching.
       * * `rank_order` &mdash; Rank order.
       * * `short_answer` &mdash; Short answer.
       * * `long_answer` &mdash; Long answer.
       * * `fill_in_the_blank` &mdash; Fill in the blank.
       * * `rating_scale` &mdash; Rating scale.
       *
       * @example single
       */
      type?:
        | "single"
        | "multiple"
        | "matching"
        | "rank_order"
        | "short_answer"
        | "long_answer"
        | "fill_in_the_blank"
        | "rating_scale";
    }[];
    /**
     * The status of the meeting poll:
     *  `notstart` - Poll not started
     *  `started` - Poll started
     *  `ended` - Poll ended
     *  `sharing` - Sharing poll results
     *
     * @example notstart
     */
    status?: "notstart" | "started" | "ended" | "sharing";
    /**
     * The title for the poll.
     *
     * @example Learn something new
     */
    title?: string;
  }[];
};

export type CreateBatchPollsRequestBody = {
  /**
   * The information about the meeting's polls.
   *
   * @maxItems 25
   * @minItems 1
   */
  polls?: {
    /**
     * Whether to allow meeting participants to answer poll questions anonymously:
     * * `true` &mdash; Anonymous polls enabled.
     * * `false` &mdash; Participants cannot answer poll questions anonymously.
     *
     * This value defaults to `false`.
     *
     * @example false
     * @default false
     */
    anonymous?: boolean;
    /**
     * The type of poll:
     * * `1` &mdash; Poll.
     * * `2` &mdash; Advanced Poll. This feature must be enabled in your Zoom account.
     * * `3` &mdash; Quiz. This feature must be enabled in your Zoom account.
     *
     *  This value defaults to `1`.
     *
     * @example 2
     * @default 1
     */
    poll_type?: 1 | 2 | 3;
    /**
     * The information about the poll's questions.
     *
     * @minLength 1
     */
    questions?: {
      /**
       * The allowed maximum number of characters. This field only applies to `short_answer` and `long_answer` polls:
       * * For `short_answer` polls, a maximum of 500 characters.
       * * For `long_answer` polls, a maximum of 2,000 characters.
       *
       * @example 200
       */
      answer_max_character?: number;
      /**
       * The allowed minimum number of characters. This field only applies to `short_answer` and `long_answer` polls. You must provide at least a **one** character minimum value.
       *
       * @minimum 1
       * @example 1
       */
      answer_min_character?: number;
      /**
       * Whether participants must answer the question:
       * * `true` &mdash; The participant must answer the question.
       * * `false` &mdash; The participant does not need to answer the question.
       *
       * **Note:**
       * * When the poll's `type` value is `1` (Poll), this value defaults to `true`.
       * * When the poll's `type` value is the `2` (Advanced Poll) or `3` (Quiz) values, this value defaults to `false`.
       *
       * @example false
       * @default false
       */
      answer_required?: boolean;
      /**
       * The poll question's available answers. This field requires a **minimum** of two answers.
       *
       * * For `single` and `multiple` polls, you can only provide a maximum of 10 answers.
       * * For `matching` polls, you can only provide a maximum of 16 answers.
       * * For `rank_order` polls, you can only provide a maximum of seven answers.
       *
       * @minItems 2
       */
      answers?: string[];
      /**
       * Whether the correct answer is case sensitive. This field only applies to `fill_in_the_blank` polls:
       * * `true` &mdash; The answer is case-sensitive.
       * * `false` &mdash; The answer is not case-sensitive.
       *
       * This value defaults to `false`.
       *
       * @example false
       * @default false
       */
      case_sensitive?: boolean;
      /**
       * The poll question's title, up to 1024 characters.
       *
       * For `fill_in_the_blank` polls, this field is the poll's question. For each value that the user must fill in, ensure that there are the same number of `right_answers` values.
       *
       * @maxLength 1024
       * @example How useful was this meeting?
       */
      name?: string;
      /**
       * The information about the prompt questions. This field only applies to `matching` and `rank_order` polls. You **must** provide a minimum of two prompts, up to a maximum of 10 prompts.
       */
      prompts?: {
        /**
         * The question prompt's title.
         *
         * @example How are you?
         */
        prompt_question?: string;
        /**
         * The question prompt's correct answers:
         * * For `matching` polls, you must provide a minimum of two correct answers, up to a maximum of 10 correct answers.
         * * For `rank_order` polls, you can only provide one correct answer.
         */
        prompt_right_answers?: string[];
      }[];
      /**
       * The high score label for the `rating_max_value` field.
       *
       * This field only applies to the `rating_scale` poll.
       *
       * @example Extremely Likely
       */
      rating_max_label?: string;
      /**
       * The rating scale's maximum value, up to a maximum value of 10.
       *
       * This field only applies to the `rating_scale` poll.
       *
       * @maximum 10
       * @example 4
       */
      rating_max_value?: number;
      /**
       * The low score label for the `rating_min_value` field.
       *
       * This field only applies to the `rating_scale` poll.
       *
       * @example Not likely
       */
      rating_min_label?: string;
      /**
       * The rating scale's minimum value. This value cannot be less than zero.
       *
       * This field only applies to the `rating_scale` poll.
       *
       * @minimum 1
       * @example 1
       */
      rating_min_value?: number;
      /**
       * The poll question's correct answer(s). This field is **required** if the poll's `type` value is `3` (Quiz).
       *
       *  For `single` and `matching` polls, this field only accepts one answer.
       *
       * @minItems 1
       */
      right_answers?: string[];
      /**
       * Whether to display the radio selection as a drop-down box:
       * * `true` &mdash; Show as a drop-down box.
       * * `false` &mdash; Do not show as a drop-down box.
       *
       * This value defaults to `false`.
       *
       * @example false
       * @default false
       */
      show_as_dropdown?: boolean;
      /**
       * The poll's question and answer type:
       * * `single` &mdash; Single choice.
       * * `multiple` &mdash; Multiple choice.
       * * `matching` &mdash; Matching.
       * * `rank_order` &mdash; Rank order.
       * * `short_answer` &mdash; Short answer.
       * * `long_answer` &mdash; Long answer.
       * * `fill_in_the_blank` &mdash; Fill in the blank.
       * * `rating_scale` &mdash; Rating scale.
       *
       * @example single
       */
      type?:
        | "single"
        | "multiple"
        | "matching"
        | "rank_order"
        | "short_answer"
        | "long_answer"
        | "fill_in_the_blank"
        | "rating_scale";
    }[];
    /**
     * The poll's title, up to 64 characters.
     *
     * @maxLength 64
     * @example Learn something new
     */
    title?: string;
  }[];
};

export type CreateBatchPollsVariables = {
  body?: CreateBatchPollsRequestBody;
  pathParams: CreateBatchPollsPathParams;
} & FetcherExtraProps;

/**
 * Polls allow the meeting host to survey attendees. Create batch [polls](https://support.zoom.us/hc/en-us/articles/213756303-Polling-for-Meetings) for a meeting.
 *
 *
 *
 * **Prerequisites**:
 *
 * * Host user type must be **Pro** or higher plan.
 * * Polling feature must be enabled in the host's account.
 * * Meeting must be a scheduled meeting. Instant meetings do not have polling features enabled.
 *
 * **[Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `meeting:write:admin`,`meeting:write`
 *
 * **[Granular Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `meeting:write:batch_polls`,`meeting:write:batch_polls:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
 */
export const createBatchPolls = (
  variables: CreateBatchPollsVariables,
  signal?: AbortSignal,
) =>
  fetch<
    CreateBatchPollsResponse,
    CreateBatchPollsError,
    CreateBatchPollsRequestBody,
    {},
    {},
    CreateBatchPollsPathParams
  >({
    url: "/meetings/{meetingId}/batch_polls",
    method: "post",
    ...variables,
    signal,
  });

export type AddBatchRegistrantsPathParams = {
  /**
   * Unique identifier of the meeting (Meeting Number).
   *
   * @example 91498058927
   */
  meetingId: string;
};

export type AddBatchRegistrantsError = Fetcher.ErrorWrapper<undefined>;

export type AddBatchRegistrantsResponse = {
  registrants?: {
    /**
     * Email address of the registrant.
     *
     * @example jchill@example.com
     */
    email?: string;
    /**
     * Unique URL using which registrant can join the meeting.
     *
     * @example https://example.com/j/11111
     */
    join_url?: string;
    /**
     * Unique identifier of the registrant.
     *
     * @example 9tboDiHUQAeOnbmudzWa5g
     */
    registrant_id?: string;
    /**
     * The participant PIN code is used to authenticate audio participants before they join the meeting.
     *
     * @format int64
     * @example 380303
     */
    participant_pin_code?: number;
  }[];
};

export type AddBatchRegistrantsRequestBody = {
  /**
   * If a meeting was scheduled with approval_type `1` (manual approval), but you would like to automatically approve the registrants that are added via this API, you can set the value of this field to `true`.
   *
   * You **cannot** use this field to change approval setting for a meeting  that was originally scheduled with approval_type `0` (automatic approval).
   *
   * @example true
   */
  auto_approve?: boolean;
  /**
   * Send confirmation Email to Registrants
   *
   * @example true
   */
  registrants_confirmation_email?: boolean;
  registrants?: {
    /**
     * Email address of the registrant.
     *
     * @format email
     * @example jchill@example.com
     */
    email: string;
    /**
     * First name of the registrant.
     *
     * @example Jill
     */
    first_name: string;
    /**
     * Last name of the registrant.
     *
     * @example Chill
     */
    last_name?: string;
  }[];
};

export type AddBatchRegistrantsVariables = {
  body?: AddBatchRegistrantsRequestBody;
  pathParams: AddBatchRegistrantsPathParams;
} & FetcherExtraProps;

/**
 * Register up to 30 registrants at once for a meeting that requires [registration](https://support.zoom.us/hc/en-us/articles/211579443-Registration-for-Meetings).
 *
 *
 * **Prerequisites:**
 *
 * * The meeting host must be a Licensed user.
 * * The meeting must require registration and should be of type `2`, i.e., they should be scheduled meetings. Instant meetings and Recurring meetings are not supported by this API.
 *
 *
 *
 *
 * **[Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `meeting:write`,`meeting:write:admin`
 *
 * **[Granular Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `meeting:write:batch_registrants`,`meeting:write:batch_registrants:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `HEAVY`
 */
export const addBatchRegistrants = (
  variables: AddBatchRegistrantsVariables,
  signal?: AbortSignal,
) =>
  fetch<
    AddBatchRegistrantsResponse,
    AddBatchRegistrantsError,
    AddBatchRegistrantsRequestBody,
    {},
    {},
    AddBatchRegistrantsPathParams
  >({
    url: "/meetings/{meetingId}/batch_registrants",
    method: "post",
    ...variables,
    signal,
  });

export type MeetingInvitationPathParams = {
  /**
   * The meeting's ID.
   *
   *  When storing this value in your database, you must store it as a long format integer, not a simple integer. Meeting IDs can exceed 10 digits.
   *
   * @format int64
   * @example 85746065
   */
  meetingId: number;
};

export type MeetingInvitationError = Fetcher.ErrorWrapper<undefined>;

export type MeetingInvitationResponse = {
  /**
     * Meeting invitation.
     *
     * @example Jill Chill is inviting you to a scheduled Zoom meeting.
    
    Topic: My Meeting
    Time: Mar 25, 2022 03:32 PM America, Los_Angeles
    
    Join Zoom Meeting
    https://zoom.us/j/55544443210?pwd=8pEkRweVXPV3Ob2KJYgFTRlDtl1gSn.1
    
    Meeting ID: 555 4444 3210
    Passcode: 123456
    One tap mobile
    +5678901234,,55544443210#,,,,*123456# US (gg)
    
    Dial by your location
    +1 15550100 US (gg)
    Meeting ID: 555 4444 3210
    Passcode: 123456
    Find your local number: https://zoom.us/u/ab12cdef34jh
    
    Join by SIP
    5550100@zoomcrc.com
    
    Join by H.323
    192.0.2.1 (US West)
    Meeting ID: 555 4444 3210
    Passcode: 123456
    
     */
  invitation?: string;
  /**
   * A list of SIP phone addresses.
   */
  sip_links?: string[];
};

export type MeetingInvitationVariables = {
  pathParams: MeetingInvitationPathParams;
} & FetcherExtraProps;

/**
 * Retrieve the meeting invitation note for a specific meeting.
 *
 * **Prerequisites**:
 * * Host user must have a Zoom Meetings Basic license or higher.
 *
 * **[Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `meeting:read`,`meeting:read:admin`
 *
 * **[Granular Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `meeting:read:invitation`,`meeting:read:invitation:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
 */
export const meetingInvitation = (
  variables: MeetingInvitationVariables,
  signal?: AbortSignal,
) =>
  fetch<
    MeetingInvitationResponse,
    MeetingInvitationError,
    undefined,
    {},
    {},
    MeetingInvitationPathParams
  >({
    url: "/meetings/{meetingId}/invitation",
    method: "get",
    ...variables,
    signal,
  });

export type MeetingInviteLinksCreatePathParams = {
  /**
   * The meeting's ID.
   *
   *  When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits.
   *
   * @format int64
   * @example 85746065
   */
  meetingId: number;
};

export type MeetingInviteLinksCreateError = Fetcher.ErrorWrapper<undefined>;

export type MeetingInviteLinksCreateResponse = {
  /**
   * The attendee list.
   *
   * @maxItems 500
   * @minItems 1
   */
  attendees?: {
    /**
     * The URL to join the meeting.
     *
     * @example https://example.com/j/11111
     */
    join_url?: string;
    /**
     * The user's display name.
     *
     * @example Jill Chill
     */
    name?: string;
  }[];
};

export type MeetingInviteLinksCreateRequestBody = {
  /**
   * The attendees list.
   *
   * @maxItems 500
   * @minItems 1
   */
  attendees?: {
    /**
     * User display name.
     *
     * @maxLength 64
     * @example Jill Chill
     */
    name: string;
    /**
     * Whether to disable participant video when joining the meeting. If not provided or set to `false`, the participant video will follow the meeting's default settings.
     *
     * @example false
     * @default false
     */
    disable_video?: boolean;
    /**
     * Whether to disable participant audio when joining the meeting. If not provided or set to `false`, the participant audio will follow the meeting's default settings.
     *
     * @example false
     * @default false
     */
    disable_audio?: boolean;
  }[];
  /**
   * The invite link's expiration time, in seconds.
   *
   * This value defaults to `7200`.
   *
   * @maximum 7776000
   * @minimum 0
   * @format int64
   * @example 1000
   * @default 7200
   */
  ttl?: number;
};

export type MeetingInviteLinksCreateVariables = {
  body?: MeetingInviteLinksCreateRequestBody;
  pathParams: MeetingInviteLinksCreatePathParams;
} & FetcherExtraProps;

/**
 * Create a batch of invitation links for a meeting.
 *
 * **Prerequisites**:
 * * The `ttl` value, in seconds, defines the invite link's expiration time. It must be between `0` or no expiration and `7776000` or 90 days, and has a default value of `7200` or 2 hours.
 *
 * **[Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `meeting:write:admin`,`meeting:write`
 *
 * **[Granular Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `meeting:write:invite_links`,`meeting:write:invite_links:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
 */
export const meetingInviteLinksCreate = (
  variables: MeetingInviteLinksCreateVariables,
  signal?: AbortSignal,
) =>
  fetch<
    MeetingInviteLinksCreateResponse,
    MeetingInviteLinksCreateError,
    MeetingInviteLinksCreateRequestBody,
    {},
    {},
    MeetingInviteLinksCreatePathParams
  >({
    url: "/meetings/{meetingId}/invite_links",
    method: "post",
    ...variables,
    signal,
  });

export type MeetingLiveStreamingJoinTokenPathParams = {
  /**
   * The meeting's ID.
   *
   *  When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits.
   *
   * @format int64
   * @example 85746065
   */
  meetingId: number;
};

export type MeetingLiveStreamingJoinTokenError =
  Fetcher.ErrorWrapper<undefined>;

export type MeetingLiveStreamingJoinTokenResponse = {
  /**
   * The number of seconds the join token is valid for before it expires. This value always returns `120`.
   *
   * @format int64
   * @example 120
   */
  expire_in?: 120;
  /**
   * The join token.
   *
   * @example 2njt50mj
   */
  token?: string;
};

export type MeetingLiveStreamingJoinTokenVariables = {
  pathParams: MeetingLiveStreamingJoinTokenPathParams;
} & FetcherExtraProps;

/**
 * Get a meeting's join token to allow live streaming. The join token allows a recording bot implemented using Zoom meeting SDK to connect to a Zoom meeting &quot;hosted by the issuer of the token&quot;, and can call the streaming method automatically. It supports both regular live streaming, and raw streaming.
 *
 * **Prerequisites:**
 * * A Pro or higher plan for the meeting host.
 * * The **Allow livestreaming of meetings** user setting enabled in the Zoom web portal.
 *
 * **[Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `meeting_token:read:admin:live_streaming`,`meeting_token:read:live_streaming`
 *
 * **[Granular Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `meeting:read:live_streaming_token`,`meeting:read:live_streaming_token:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
 */
export const meetingLiveStreamingJoinToken = (
  variables: MeetingLiveStreamingJoinTokenVariables,
  signal?: AbortSignal,
) =>
  fetch<
    MeetingLiveStreamingJoinTokenResponse,
    MeetingLiveStreamingJoinTokenError,
    undefined,
    {},
    {},
    MeetingLiveStreamingJoinTokenPathParams
  >({
    url: "/meetings/{meetingId}/jointoken/live_streaming",
    method: "get",
    ...variables,
    signal,
  });

export type MeetingLocalArchivingArchiveTokenPathParams = {
  /**
   * The meeting's ID.
   *
   *  When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits.
   *
   * @format int64
   * @example 85746065
   */
  meetingId: number;
};

export type MeetingLocalArchivingArchiveTokenError =
  Fetcher.ErrorWrapper<undefined>;

export type MeetingLocalArchivingArchiveTokenResponse = {
  /**
   * The number of seconds the archive token is valid for before it expires. This value always returns `120`.
   *
   * @format int64
   * @example 120
   */
  expire_in?: 120;
  /**
   * The archive token.
   *
   * @example 2njt50mj
   */
  token?: string;
};

export type MeetingLocalArchivingArchiveTokenVariables = {
  pathParams: MeetingLocalArchivingArchiveTokenPathParams;
} & FetcherExtraProps;

/**
 * Get a meeting's archive token to allow local archiving. The archive token allows a meeting SDK app or bot to get archive permission to access the meeting's raw audio and video media stream in real-time.
 *
 * **Prerequisites:**
 * * A Pro or higher plan for the meeting host.
 * * The **Archive meetings and webinars** account setting enabled in the Zoom web portal.
 *
 * **[Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `meeting_token:read:admin:local_archiving`
 *
 * **[Granular Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `meeting:read:local_archiving_token:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
 */
export const meetingLocalArchivingArchiveToken = (
  variables: MeetingLocalArchivingArchiveTokenVariables,
  signal?: AbortSignal,
) =>
  fetch<
    MeetingLocalArchivingArchiveTokenResponse,
    MeetingLocalArchivingArchiveTokenError,
    undefined,
    {},
    {},
    MeetingLocalArchivingArchiveTokenPathParams
  >({
    url: "/meetings/{meetingId}/jointoken/local_archiving",
    method: "get",
    ...variables,
    signal,
  });

export type MeetingLocalRecordingJoinTokenPathParams = {
  /**
   * The meeting's ID.
   *
   *  When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits.
   *
   * @format int64
   * @example 85746065
   */
  meetingId: number;
};

export type MeetingLocalRecordingJoinTokenQueryParams = {
  /**
   * Whether to bypass the waiting room.
   *
   * @example true
   */
  bypass_waiting_room?: boolean;
};

export type MeetingLocalRecordingJoinTokenError =
  Fetcher.ErrorWrapper<undefined>;

export type MeetingLocalRecordingJoinTokenResponse = {
  /**
   * The number of seconds the join token is valid for before it expires. This value always returns `120`.
   *
   * @format int64
   * @example 120
   */
  expire_in?: 120;
  /**
   * The join token.
   *
   * @example 2njt50mj
   */
  token?: string;
};

export type MeetingLocalRecordingJoinTokenVariables = {
  pathParams: MeetingLocalRecordingJoinTokenPathParams;
  queryParams?: MeetingLocalRecordingJoinTokenQueryParams;
} & FetcherExtraProps;

/**
 * Get a meeting's join token to allow for local recording. The join token lets a recording bot implemented using Zoom Meeting SDK to connect to a Zoom meeting. The recording bot can then automatically start locally recording. This supports both regular and raw local recording types.
 *
 * **Prerequisites:**
 * * The **Local recording** user setting enabled in the Zoom web portal.
 *
 * **[Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `meeting_token:read:admin:local_recording`,`meeting_token:read:local_recording`
 *
 * **[Granular Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `meeting:read:local_recording_token`,`meeting:read:local_recording_token:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
 */
export const meetingLocalRecordingJoinToken = (
  variables: MeetingLocalRecordingJoinTokenVariables,
  signal?: AbortSignal,
) =>
  fetch<
    MeetingLocalRecordingJoinTokenResponse,
    MeetingLocalRecordingJoinTokenError,
    undefined,
    {},
    MeetingLocalRecordingJoinTokenQueryParams,
    MeetingLocalRecordingJoinTokenPathParams
  >({
    url: "/meetings/{meetingId}/jointoken/local_recording",
    method: "get",
    ...variables,
    signal,
  });

export type GetMeetingLiveStreamDetailsPathParams = {
  /**
   * Unique identifier of the meeting.
   *
   * @example 93398114182
   */
  meetingId: string;
};

export type GetMeetingLiveStreamDetailsError = Fetcher.ErrorWrapper<undefined>;

export type GetMeetingLiveStreamDetailsResponse = {
  /**
   * Live streaming page URL. This is the URL using which anyone can view the livestream of the meeting.
   *
   * @example https://example.com/livestream/123
   */
  page_url?: string;
  /**
   * Stream Key.
   *
   * @example contact-ic@example.com
   */
  stream_key?: string;
  /**
   * Stream URL.
   *
   * @example https://example.com/livestream
   */
  stream_url?: string;
  /**
   * The number of pixels in each dimension that the video camera can display.
   *
   * @example 720p
   */
  resolution?: string;
};

export type GetMeetingLiveStreamDetailsVariables = {
  pathParams: GetMeetingLiveStreamDetailsPathParams;
} & FetcherExtraProps;

/**
 * Zoom allows users to [livestream a meeting](https://support.zoom.us/hc/en-us/articles/115001777826-Live-Streaming-Meetings-or-Webinars-Using-a-Custom-Service) to a custom platform. Get a meeting's livestream configuration details such as Stream URL, Stream Key and Page URL.
 *
 *
 * **Prerequisites:**
 *
 * * Meeting host must be a licensed user with a Pro or higher plan.
 *
 * * Live streaming details must have been [configured](https://support.zoom.us/hc/en-us/articles/115001777826-Live-Streaming-Meetings-or-Webinars-Using-a-Custom-Service#h_01589a6f-a40a-4e18-a448-cb746e52ebc5) for the meeting.
 *
 *
 *
 *
 * **[Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `meeting:read:admin`,`meeting:read`
 *
 * **[Granular Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `meeting:read:livestream`,`meeting:read:livestream:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
 */
export const getMeetingLiveStreamDetails = (
  variables: GetMeetingLiveStreamDetailsVariables,
  signal?: AbortSignal,
) =>
  fetch<
    GetMeetingLiveStreamDetailsResponse,
    GetMeetingLiveStreamDetailsError,
    undefined,
    {},
    {},
    GetMeetingLiveStreamDetailsPathParams
  >({
    url: "/meetings/{meetingId}/livestream",
    method: "get",
    ...variables,
    signal,
  });

export type MeetingLiveStreamUpdatePathParams = {
  /**
   * The meeting's ID.
   *
   *  When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits.
   *
   * @format int64
   * @example 85746065
   */
  meetingId: number;
};

export type MeetingLiveStreamUpdateError = Fetcher.ErrorWrapper<undefined>;

export type MeetingLiveStreamUpdateRequestBody = {
  /**
   * The live stream page URL.
   *
   * @maxLength 1024
   * @format uri
   * @example https://example.com/livestream/123
   */
  page_url: string;
  /**
   * Stream name and key.
   *
   * @maxLength 512
   * @example contact-it@example.com
   */
  stream_key: string;
  /**
   * Streaming URL.
   *
   * @maxLength 1024
   * @example https://example.com/livestream
   */
  stream_url: string;
  /**
   * The number of pixels in each dimension that the video camera can display, required when a user enables 1080p. Use a value of `720p` or `1080p`
   *
   * @example 720p
   */
  resolution?: string;
};

export type MeetingLiveStreamUpdateVariables = {
  body: MeetingLiveStreamUpdateRequestBody;
  pathParams: MeetingLiveStreamUpdatePathParams;
} & FetcherExtraProps;

/**
 * Update a meeting's livestream information. Zoom allows users to [livestream a meeting](https://support.zoom.us/hc/en-us/articles/115001777826-Live-Streaming-Meetings-or-Webinars-Using-a-Custom-Service) to a custom platform.
 *
 * **Prerequisites:**
 * * Meeting host must have a Pro license.
 *
 * **[Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `meeting:write:admin`,`meeting:write`
 *
 * **[Granular Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `meeting:update:livestream`,`meeting:update:livestream:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
 */
export const meetingLiveStreamUpdate = (
  variables: MeetingLiveStreamUpdateVariables,
  signal?: AbortSignal,
) =>
  fetch<
    undefined,
    MeetingLiveStreamUpdateError,
    MeetingLiveStreamUpdateRequestBody,
    {},
    {},
    MeetingLiveStreamUpdatePathParams
  >({
    url: "/meetings/{meetingId}/livestream",
    method: "patch",
    ...variables,
    signal,
  });

export type MeetingLiveStreamStatusUpdatePathParams = {
  /**
   * The meeting's ID.
   *
   *  When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits.
   *
   * @format int64
   * @example 85746065
   */
  meetingId: number;
};

export type MeetingLiveStreamStatusUpdateError =
  Fetcher.ErrorWrapper<undefined>;

export type MeetingLiveStreamStatusUpdateRequestBody = {
  /**
   * The meeting's livestream status.
   * * `start` - Start a livestream.
   * * `stop` - Stop an ongoing livestream.
   * * `mode` - Control a livestream view at runtime.
   *
   * @example start
   */
  action?: "start" | "stop" | "mode";
  /**
   * The meeting's livestreaming settings.
   */
  settings?: {
    /**
     * Whether to display the name of the active speaker during a meeting's livestream. Use this field if you pass the `start` value for the `action` field.
     *
     * @example true
     */
    active_speaker_name?: boolean;
    /**
     * The display name of the meeting's livestream. Use this field if you pass the `start` value for the `action` field.
     *
     * @maxLength 50
     * @minLength 1
     * @example Jill Chill
     */
    display_name?: string;
    /**
     * The layout of the meeting's livestream. Use this field if you pass the `start` or `mode` value for the `action` field.
     * * `follow_host` - Follow host view.
     * * `gallery_view` - Gallery view.
     * * `speaker_view` - Speaker view.
     *
     * @example follow_host
     * @default follow_host
     */
    layout?: "follow_host" | "gallery_view" | "speaker_view";
    /**
     * The livestream's closed caption type for this session. Use this field if you pass the `start` or `mode` value for the `action` field.
     * * `burnt-in` - Burnt in captions.
     * * `embedded` - Embedded captions.
     * * `off` - Turn off captions.
     *
     * @example burnt-in
     * @default burnt-in
     */
    close_caption?: "burnt-in" | "embedded" | "off";
  };
};

export type MeetingLiveStreamStatusUpdateVariables = {
  body?: MeetingLiveStreamStatusUpdateRequestBody;
  pathParams: MeetingLiveStreamStatusUpdatePathParams;
} & FetcherExtraProps;

/**
 * Zoom allows users to [livestream a meeting](https://support.zoom.us/hc/en-us/articles/115001777826-Live-Streaming-Meetings-or-Webinars-Using-a-Custom-Service) to a custom platform. Update the status of a meeting's livestream.
 *
 * **Prerequisites:**
 * * Meeting host must have a Pro license.
 *
 * **[Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `meeting:write:admin`,`meeting:write`
 *
 * **[Granular Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `meeting:update:livestream_status`,`meeting:update:livestream_status:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
 */
export const meetingLiveStreamStatusUpdate = (
  variables: MeetingLiveStreamStatusUpdateVariables,
  signal?: AbortSignal,
) =>
  fetch<
    undefined,
    MeetingLiveStreamStatusUpdateError,
    MeetingLiveStreamStatusUpdateRequestBody,
    {},
    {},
    MeetingLiveStreamStatusUpdatePathParams
  >({
    url: "/meetings/{meetingId}/livestream/status",
    method: "patch",
    ...variables,
    signal,
  });

export type GetameetingsummaryPathParams = {
  /**
   * The meeting's universally unique ID (UUID). When you provide a meeting UUID that begins with a `/` character or contains the `//` characters, you **must** double-encode the meeting UUID before making an API request.
   *
   * @example aDYlohsHRtCd4ii1uC2+hA==
   */
  meetingId: string;
};

export type GetameetingsummaryError = Fetcher.ErrorWrapper<undefined>;

export type GetameetingsummaryResponse = {
  /**
   * The ID of the user who is set as the meeting host.
   *
   * @example 30R7kT7bTIKSNUFEuH_Qlg
   */
  meeting_host_id?: string;
  /**
   * The meeting host's email address.
   *
   * @format email
   * @example jchill@example.com
   */
  meeting_host_email?: string;
  /**
   * The unique meeting ID.
   *
   * Each meeting instance generates its own meeting UUID. After a meeting ends, a new UUID is generated for the next instance of the meeting.
   *
   *  Use the [**List past meeting instances**](/docs/api-reference/zoom-api/methods#operation/pastMeetings) API to retrieve a list of UUIDs from past meeting instances. [Double encode](/docs/api/rest/using-zoom-apis/#meeting-id-and-uuid) your UUID when using it for API calls if the UUID begins with a `/` or contains `//` in it.
   *
   * @example aDYlohsHRtCd4ii1uC2+hA==
   */
  meeting_uuid?: string;
  /**
   * [The meeting ID](https://support.zoom.us/hc/en-us/articles/201362373-What-is-a-Meeting-ID-)
   * The meeting's unique identifier in **long** format, represented as int64 data type in JSON. Also known as the meeting number.
   *
   * @format int64
   * @example 97763643886
   */
  meeting_id?: number;
  /**
   * The meeting topic.
   *
   * @example My Meeting
   */
  meeting_topic?: string;
  /**
   * The meeting's start date and time.
   *
   * @format date-time
   * @example 2019-07-15T23:24:52Z
   */
  meeting_start_time?: string;
  /**
   * The meeting's end date and time.
   *
   * @format date-time
   * @example 2020-07-15T23:30:19Z
   */
  meeting_end_time?: string;
  /**
   * The summary's start date and time.
   *
   * @format date-time
   * @example 2019-07-15T23:24:52Z
   */
  summary_start_time?: string;
  /**
   * The summary's end date and time.
   *
   * @format date-time
   * @example 2020-07-15T23:30:19Z
   */
  summary_end_time?: string;
  /**
   * The date and time when the meeting summary was created.
   *
   * @format date-time
   * @example 2019-07-15T23:24:52Z
   */
  summary_created_time?: string;
  /**
   * The date and time when the meeting summary was last modified.
   *
   * @format date-time
   * @example 2020-07-15T23:30:19Z
   */
  summary_last_modified_time?: string;
  /**
   * The user ID of the user who last modified the meeting summary.
   *
   * @example Lfi0BlBQTM-bbktE9BRUvA
   */
  summary_last_modified_user_id?: string;
  /**
   * The user email of the user who last modified the meeting summary.
   *
   * @example user@example.com
   */
  summary_last_modified_user_email?: string;
  /**
   * The summary title.
   *
   * @example Meeting summary for my meeting
   */
  summary_title?: string;
  /**
   * The summary overview.
   *
   * @example Meeting overview
   * @deprecated true
   */
  summary_overview?: string;
  /**
   * The summary content details.
   *
   * @deprecated true
   */
  summary_details?: {
    /**
     * The summary label.
     *
     * @example Meeting overview
     */
    label?: string;
    /**
     * The summary content.
     *
     * @example Meeting overview
     */
    summary?: string;
  }[];
  /**
   * The next steps.
   *
   * @deprecated true
   */
  next_steps?: string[];
  /**
   * The edited summary content.
   *
   * @deprecated true
   */
  edited_summary?: {
    /**
     * The user edited summary overview.
     *
     * @example Meeting overview
     */
    summary_overview?: string;
    /**
     * The user edited summary details.
     *
     * @example Meeting overview
     */
    summary_details?: string;
    /**
     * The user edited next steps.
     */
    next_steps?: string[];
  };
  /**
     * The complete meeting summary in Markdown format. This unified field is used for all summaries. For compatibility, the legacy fields `summary_overview`, `summary_details`, `next_steps`, and `edited_summary` are still returned, but are deprecated and will not be supported in the future.
     *
     * @example ## Key takeaways
    - Mobile app performance issues are affecting user retention.
    - New onboarding flow received positive feedback from beta testers.
    - Need to prioritize accessibility improvements.
    - Customer support response time has improved by 25%.
    
    ## Discussed topics
    ### Mobile App Performance
    Discussion of recent performance metrics and user complaints
    - **Details**
        - Sarah (Product): Reports of app crashes increased 15% this month
        - Mike (Engineering): Memory optimization needed in latest release
        - Tom (QA): Identified memory leak in photo upload feature
    - **Conclusion**
        - Implement performance monitoring tools
        - Prioritize memory optimization in next sprint
    
    ### Onboarding Flow
    Review of beta testing results for new user onboarding
    - **Details**
        - Rachel (UX): 90% completion rate in beta testing
        - David (Product): Positive feedback on simplified registration
    - **Conclusion**
        - Ready for full rollout next month
        - Need to monitor analytics post-launch
    
    ### Accessibility Compliance
    Discussion of current accessibility status and needed improvements
    - **Details**
        - Lisa (Design): Screen reader compatibility issues identified
        - John (Engineering): WCAG compliance at 80%
    - **Conclusion**
        - Create accessibility improvement roadmap
        - Schedule external audit
    
    ## Challenges
    * Resource constraints for performance optimization
    * Integration testing environment stability issues
    * Lack of accessibility expertise in the team
    
    ## Action items
    - **Sarah**
      - Prepare performance monitoring implementation plan
      - Schedule follow-up meeting with engineering team
    - **Mike**
      - Investigate memory leak fix
      - Document performance optimization guidelines
    - **Lisa**
      - Create accessibility improvement proposal
      - Research accessibility testing tools
    - **Rachel**
      - Prepare onboarding analytics dashboard
      - Document beta testing findings
     */
  summary_content?: string;
};

export type GetameetingsummaryVariables = {
  pathParams: GetameetingsummaryPathParams;
} & FetcherExtraProps;

/**
 * Retrieve the summary of a meeting or webinar.
 *
 * **Prerequisites**
 * - The host must have a Pro, Business, or higher subscription plan.
 * - For meetings - the host's **Meeting Summary with AI Companion** user setting must be enabled.
 * - For webinars - the host's **Webinar Summary with AI Companion** user setting must be enabled.
 * - End-to-End Encrypted (E2EE) meetings do not support summaries.
 *
 * **[Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `meeting_summary:read`,`meeting_summary:read:admin`
 *
 * **[Granular Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `meeting:read:summary`,`meeting:read:summary:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
 */
export const getameetingsummary = (
  variables: GetameetingsummaryVariables,
  signal?: AbortSignal,
) =>
  fetch<
    GetameetingsummaryResponse,
    GetameetingsummaryError,
    undefined,
    {},
    {},
    GetameetingsummaryPathParams
  >({
    url: "/meetings/{meetingId}/meeting_summary",
    method: "get",
    ...variables,
    signal,
  });

export type DeletemeetingorwebinarsummaryPathParams = {
  /**
   * The meeting's universally unique ID (UUID). When you provide a meeting UUID that begins with a `/` character or contains the `//` characters, you **must** double-encode the meeting UUID before making an API request.
   *
   * @example aDYlohsHRtCd4ii1uC2+hA==
   */
  meetingId: string;
};

export type DeletemeetingorwebinarsummaryError =
  Fetcher.ErrorWrapper<undefined>;

export type DeletemeetingorwebinarsummaryVariables = {
  pathParams: DeletemeetingorwebinarsummaryPathParams;
} & FetcherExtraProps;

/**
 * Delete the summary of a meeting or webinar.
 *
 * **Prerequisites**
 * * The host must have a Pro, Business, or higher subscription plan.
 * * For meetings - the host's **Meeting Summary with AI Companion** user setting must be enabled.
 * * For webinars - the host's **Webinar Summary with AI Companion** user setting must be enabled.
 * * End-to-End Encrypted (E2EE) meetings do not support summaries.
 *
 * **[Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `meeting_summary:write`,`meeting_summary:write:admin`
 *
 * **[Granular Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `meeting:delete:summary`,`meeting:delete:summary:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
 */
export const deletemeetingorwebinarsummary = (
  variables: DeletemeetingorwebinarsummaryVariables,
  signal?: AbortSignal,
) =>
  fetch<
    undefined,
    DeletemeetingorwebinarsummaryError,
    undefined,
    {},
    {},
    DeletemeetingorwebinarsummaryPathParams
  >({
    url: "/meetings/{meetingId}/meeting_summary",
    method: "delete",
    ...variables,
    signal,
  });

export type MeetingAppAddPathParams = {
  /**
   * The meeting's ID.
   *
   *  When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits.
   *
   * @format int64
   * @example 85746065
   */
  meetingId: number;
};

export type MeetingAppAddError = Fetcher.ErrorWrapper<undefined>;

export type MeetingAppAddResponse = {
  /**
   * The [meeting ID](https://support.zoom.us/hc/en-us/articles/201362373-What-is-a-Meeting-ID-): Unique identifier of the meeting in **long** format(represented as int64 data type in JSON), also known as the meeting number.
   *
   * @format int64
   * @example 92674392836
   */
  id?: number;
  /**
   * For scheduled meetings only. Meeting start date-time in UTC/GMT, such as `2020-03-31T12:02:00Z`.
   *
   * @format date-time
   * @example 2022-03-25T07:29:29Z
   */
  start_time?: string;
  /**
   * The app's ID.
   *
   * @example fdgsfh2ey82fuh
   */
  app_id?: string;
};

export type MeetingAppAddVariables = {
  pathParams: MeetingAppAddPathParams;
} & FetcherExtraProps;

/**
 * Add an auto-open app in a meeting. This endpoint lets a developer auto-open an app in a specific meeting. This is only for configuring an app to automatically open before a given session. This can't open the app while a meeting or webinar is in session.
 *
 * **Prerequisites**:
 * * The meeting must not be a live meeting.
 * * The **Zoom Apps Quick Launch Button** setting enabled in the Zoom web portal.
 *
 * **[Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `meeting:write`,`meeting:write:admin`
 *
 * **[Granular Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `meeting:write:open_app`,`meeting:write:open_app:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
 */
export const meetingAppAdd = (
  variables: MeetingAppAddVariables,
  signal?: AbortSignal,
) =>
  fetch<
    MeetingAppAddResponse,
    MeetingAppAddError,
    undefined,
    {},
    {},
    MeetingAppAddPathParams
  >({
    url: "/meetings/{meetingId}/open_apps",
    method: "post",
    ...variables,
    signal,
  });

export type MeetingAppDeletePathParams = {
  /**
   * The meeting's ID.
   *
   *  When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits.
   *
   * @format int64
   * @example 85746065
   */
  meetingId: number;
};

export type MeetingAppDeleteError = Fetcher.ErrorWrapper<undefined>;

export type MeetingAppDeleteVariables = {
  pathParams: MeetingAppDeletePathParams;
} & FetcherExtraProps;

/**
 * Delete a meeting auto-open app.
 *
 * **Prerequisites**:
 * * The meeting must not be a live meeting.
 * * The **Zoom Apps Quick Launch Button** setting enabled in the Zoom web portal.
 *
 * **[Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `meeting:write`,`meeting:write:admin`
 *
 * **[Granular Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `meeting:delete:open_app`,`meeting:delete:open_app:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
 */
export const meetingAppDelete = (
  variables: MeetingAppDeleteVariables,
  signal?: AbortSignal,
) =>
  fetch<
    undefined,
    MeetingAppDeleteError,
    undefined,
    {},
    {},
    MeetingAppDeletePathParams
  >({
    url: "/meetings/{meetingId}/open_apps",
    method: "delete",
    ...variables,
    signal,
  });

export type MeetingPollsPathParams = {
  /**
   * The meeting's ID.
   *
   *  When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits.
   *
   * @format int64
   * @example 85746065
   */
  meetingId: number;
};

export type MeetingPollsQueryParams = {
  /**
   * Whether to query for polls with the **Anonymous** option enabled:
   * * `true` &mdash; Query for polls with the **Anonymous** option enabled.
   * * `false` &mdash; Do not query for polls with the **Anonymous** option enabled.
   *
   * @example true
   */
  anonymous?: boolean;
};

export type MeetingPollsError = Fetcher.ErrorWrapper<undefined>;

export type MeetingPollsResponse = {
  /**
   * An array of polls.
   */
  polls?: {
    /**
     * The poll ID.
     *
     * @example QalIoKWLTJehBJ8e1xRrbQ
     */
    id?: string;
    /**
     * The meeting poll's status.
     * `notstart` - Poll not started
     * `started` - Poll started
     * `ended` - Poll ended
     * `sharing` - Sharing poll results
     * `deactivated` - Poll deactivated
     *
     * @example notstart
     */
    status?: "notstart" | "started" | "ended" | "sharing" | "deactivated";
    /**
     * Whether meeting participants can answer poll questions anonymously.
     *
     * This value defaults to `false`.
     *
     * @example true
     * @default false
     */
    anonymous?: boolean;
    /**
     * The type of poll.
     * * `1` - Poll.
     * * `2` - Advanced Poll. This feature must be enabled in your Zoom account.
     * * `3` - Quiz. This feature must be enabled in your Zoom account.
     *
     *  This value defaults to `1`.
     *
     * @example 2
     */
    poll_type?: 1 | 2 | 3;
    /**
     * Information about the poll's questions.
     */
    questions?: {
      /**
       * The allowed maximum number of characters. This field only applies to `short_answer` and `long_answer` polls:
       * * For `short_answer` polls, a maximum of 500 characters.
       * * For `long_answer` polls, a maximum of 2,000 characters.
       *
       * @example 200
       */
      answer_max_character?: number;
      /**
       * The allowed minimum number of characters. This field only applies to `short_answer` and `long_answer` polls. You must provide at least a **one** character minimum value.
       *
       * @minimum 1
       * @example 1
       */
      answer_min_character?: number;
      /**
       * Whether participants must answer the question:
       * * `true` &mdash; The participant must answer the question.
       * * `false` &mdash; The participant does not need to answer the question.
       *
       * **Note:**
       * * When the poll's `type` value is `1` (Poll), this value defaults to `true`.
       * * When the poll's `type` value is the `2` (Advanced Poll) or `3` (Quiz) values, this value defaults to `false`.
       *
       * @example false
       * @default false
       */
      answer_required?: boolean;
      /**
       * The poll question's available answers. This field requires a **minimum** of two answers.
       *
       * * For `single` and `multiple` polls, you can only provide a maximum of 10 answers.
       * * For `matching` polls, you can only provide a maximum of 16 answers.
       * * For `rank_order` polls, you can only provide a maximum of seven answers.
       *
       * @minItems 2
       */
      answers?: string[];
      /**
       * Whether the correct answer is case sensitive. This field only applies to `fill_in_the_blank` polls:
       * * `true` &mdash; The answer is case-sensitive.
       * * `false` &mdash; The answer is not case-sensitive.
       *
       * This value defaults to `false`.
       *
       * @example false
       * @default false
       */
      case_sensitive?: boolean;
      /**
       * The poll question, up to 1024 characters.
       *
       * For `fill_in_the_blank` polls, this field is the poll's question. For each value that the user must fill in, ensure that there are the same number of `right_answers` values.
       *
       * @maxLength 1024
       * @example How useful was this meeting?
       */
      name?: string;
      /**
       * Information about the prompt questions. This field only applies to `matching` and `rank_order` polls. You **must** provide a minimum of two prompts, up to a maximum of 10 prompts.
       */
      prompts?: {
        /**
         * The question prompt's title.
         *
         * @example How are you?
         */
        prompt_question?: string;
        /**
         * The question prompt's correct answers:
         * * For `matching` polls, you must provide a minimum of two correct answers, up to a maximum of 10 correct answers.
         * * For `rank_order` polls, you can only provide one correct answer.
         */
        prompt_right_answers?: string[];
      }[];
      /**
       * The high score label for the `rating_max_value` field.
       *
       * This field only applies to the `rating_scale` poll.
       *
       * @example Extremely Likely
       */
      rating_max_label?: string;
      /**
       * The rating scale's maximum value, up to a maximum value of 10.
       *
       * This field only applies to the `rating_scale` poll.
       *
       * @maximum 10
       * @example 4
       */
      rating_max_value?: number;
      /**
       * The low score label for the `rating_min_value` field.
       *
       * This field only applies to the `rating_scale` poll.
       *
       * @example Not likely
       */
      rating_min_label?: string;
      /**
       * The rating scale's minimum value. This value cannot be less than zero.
       *
       * This field only applies to the `rating_scale` poll.
       *
       * @minimum 0
       * @example 0
       */
      rating_min_value?: number;
      /**
       * The poll question's correct answer(s). This field is **required** if the poll's `type` value is `3` (Quiz).
       *
       *  For `single` and `matching` polls, this field only accepts one answer.
       *
       * @minItems 1
       */
      right_answers?: string[];
      /**
       * Whether to display the radio selection as a drop-down box:
       * * `true` &mdash; Show as a drop-down box.
       * * `false` &mdash; Do not show as a drop-down box.
       *
       * This value defaults to `false`.
       *
       * @example false
       * @default false
       */
      show_as_dropdown?: boolean;
      /**
       * The poll's question and answer type:
       * * `single` &mdash; Single choice.
       * * `multiple` &mdash; Multiple choice.
       * * `matching` &mdash; Matching.
       * * `rank_order` &mdash; Rank order.
       * * `short_answer` &mdash; Short answer.
       * * `long_answer` &mdash; Long answer.
       * * `fill_in_the_blank` &mdash; Fill in the blank.
       * * `rating_scale` &mdash; Rating scale.
       *
       * @example single
       */
      type?:
        | "single"
        | "multiple"
        | "matching"
        | "rank_order"
        | "short_answer"
        | "long_answer"
        | "fill_in_the_blank"
        | "rating_scale";
    }[];
    /**
     * The poll's title, up to 64 characters.
     *
     * @maxLength 64
     * @example Learn something new
     */
    title?: string;
  }[];
  /**
   * The number of all records available across pages
   *
   * @example 1
   */
  total_records?: number;
};

export type MeetingPollsVariables = {
  pathParams: MeetingPollsPathParams;
  queryParams?: MeetingPollsQueryParams;
} & FetcherExtraProps;

/**
 * Polls allow the meeting host to survey attendees. List all [polls](https://support.zoom.us/hc/en-us/articles/213756303-Polling-for-Meetings) of a meeting.
 *
 *
 *
 * **Prerequisites**:
 *
 * * Host user type must be **Pro** or higher plan.
 * * Meeting must be a scheduled meeting. Instant meetings do not have polling features enabled.
 *
 * **[Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `meeting:read:admin`,`meeting:read`
 *
 * **[Granular Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `meeting:read:list_polls`,`meeting:read:list_polls:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
 */
export const meetingPolls = (
  variables: MeetingPollsVariables,
  signal?: AbortSignal,
) =>
  fetch<
    MeetingPollsResponse,
    MeetingPollsError,
    undefined,
    {},
    MeetingPollsQueryParams,
    MeetingPollsPathParams
  >({
    url: "/meetings/{meetingId}/polls",
    method: "get",
    ...variables,
    signal,
  });

export type MeetingPollCreatePathParams = {
  /**
   * The meeting's ID.
   *
   *  When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits.
   *
   * @format int64
   * @example 85746065
   */
  meetingId: number;
};

export type MeetingPollCreateError = Fetcher.ErrorWrapper<undefined>;

export type MeetingPollCreateResponse = {
  /**
   * The meeting poll ID
   *
   * @example QalIoKWLTJehBJ8e1xRrbQ
   */
  id?: string;
  /**
   * The status of the meeting poll:
   *  `notstart` - Poll not started
   *  `started` - Poll started
   *  `ended` - Poll ended
   *  `sharing` - Sharing poll results
   *
   * @example notstart
   */
  status?: "notstart" | "started" | "ended" | "sharing";
  /**
   * Whether meeting participants answer poll questions anonymously.
   *
   * This value defaults to `false`.
   *
   * @example true
   * @default false
   */
  anonymous?: boolean;
  /**
   * The type of poll:
   * * `1` &mdash; Poll.
   * * `2` &mdash; Advanced Poll. This feature must be enabled in your Zoom account.
   * * `3` &mdash; Quiz. This feature must be enabled in your Zoom account.
   *
   *  This value defaults to `1`.
   *
   * @example 2
   */
  poll_type?: 1 | 2 | 3;
  /**
   * The information about the poll's questions.
   */
  questions?: {
    /**
     * The allowed maximum number of characters. This field only applies to `short_answer` and `long_answer` polls:
     * * For `short_answer` polls, a maximum of 500 characters.
     * * For `long_answer` polls, a maximum of 2,000 characters.
     *
     * @example 200
     */
    answer_max_character?: number;
    /**
     * The allowed minimum number of characters. This field only applies to `short_answer` and `long_answer` polls. You must provide at least a **one** character minimum value.
     *
     * @minimum 1
     * @example 1
     */
    answer_min_character?: number;
    /**
     * Whether participants must answer the question:
     * * `true` &mdash; The participant must answer the question.
     * * `false` &mdash; The participant does not need to answer the question.
     *
     * **Note:**
     * * When the poll's `type` value is `1` (Poll), this value defaults to `true`.
     * * When the poll's `type` value is the `2` (Advanced Poll) or `3` (Quiz) values, this value defaults to `false`.
     *
     * @example false
     * @default false
     */
    answer_required?: boolean;
    /**
     * The poll question's available answers. This field requires a **minimum** of two answers.
     *
     * * For `single` and `multiple` polls, you can only provide a maximum of 10 answers.
     * * For `matching` polls, you can only provide a maximum of 16 answers.
     * * For `rank_order` polls, you can only provide a maximum of seven answers.
     *
     * @minItems 2
     */
    answers?: string[];
    /**
     * Whether the correct answer is case sensitive. This field only applies to `fill_in_the_blank` polls:
     * * `true` &mdash; The answer is case-sensitive.
     * * `false` &mdash; The answer is not case-sensitive.
     *
     * This value defaults to `false`.
     *
     * @example false
     * @default false
     */
    case_sensitive?: boolean;
    /**
     * The poll question, up to 1024 characters.
     *
     * For `fill_in_the_blank` polls, this field is the poll's question. For each value that the user must fill in, ensure that there are the same number of `right_answers` values.
     *
     * @maxLength 1024
     * @example How useful was this meeting?
     */
    name?: string;
    /**
     * The information about the prompt questions. This field only applies to `matching` and `rank_order` polls. You **must** provide a minimum of two prompts, up to a maximum of 10 prompts.
     */
    prompts?: {
      /**
       * The question prompt's title.
       *
       * @example How are you?
       */
      prompt_question?: string;
      /**
       * The question prompt's correct answers:
       * * For `matching` polls, you must provide a minimum of two correct answers, up to a maximum of 10 correct answers.
       * * For `rank_order` polls, you can only provide one correct answer.
       */
      prompt_right_answers?: string[];
    }[];
    /**
     * The high score label for the `rating_max_value` field.
     *
     * This field only applies to the `rating_scale` poll.
     *
     * @example Extremely Likely
     */
    rating_max_label?: string;
    /**
     * The rating scale's maximum value, up to a maximum value of 10.
     *
     * This field only applies to the `rating_scale` poll.
     *
     * @maximum 10
     * @example 4
     */
    rating_max_value?: number;
    /**
     * The low score label for the `rating_min_value` field.
     *
     * This field only applies to the `rating_scale` poll.
     *
     * @example Not likely
     */
    rating_min_label?: string;
    /**
     * The rating scale's minimum value. This value cannot be less than zero.
     *
     * This field only applies to the `rating_scale` poll.
     *
     * @minimum 0
     * @example 0
     */
    rating_min_value?: number;
    /**
     * The poll question's correct answer(s). This field is **required** if the poll's `type` value is `3` (Quiz).
     *
     *  For `single` and `matching` polls, this field only accepts one answer.
     *
     * @minItems 1
     */
    right_answers?: string[];
    /**
     * Whether to display the radio selection as a drop-down box:
     * * `true` &mdash; Show as a drop-down box.
     * * `false` &mdash; Do not show as a drop-down box.
     *
     * This value defaults to `false`.
     *
     * @example false
     * @default false
     */
    show_as_dropdown?: boolean;
    /**
     * The poll's question and answer type:
     * * `single` &mdash; Single choice.
     * * `multiple` &mdash; Multiple choice.
     * * `matching` &mdash; Matching.
     * * `rank_order` &mdash; Rank order.
     * * `short_answer` &mdash; Short answer.
     * * `long_answer` &mdash; Long answer.
     * * `fill_in_the_blank` &mdash; Fill in the blank.
     * * `rating_scale` &mdash; Rating scale.
     *
     * @example single
     */
    type?:
      | "single"
      | "multiple"
      | "matching"
      | "rank_order"
      | "short_answer"
      | "long_answer"
      | "fill_in_the_blank"
      | "rating_scale";
  }[];
  /**
   * The poll's title, up to 64 characters.
   *
   * @maxLength 64
   * @example Learn something new
   */
  title?: string;
};

export type MeetingPollCreateRequestBody = {
  /**
   * Whether meeting participants answer poll questions anonymously.
   *
   * This value defaults to `false`.
   *
   * @example true
   * @default false
   */
  anonymous?: boolean;
  /**
   * The type of poll:
   * * `1` &mdash; Poll.
   * * `2` &mdash; Advanced Poll. This feature must be enabled in your Zoom account.
   * * `3` &mdash; Quiz. This feature must be enabled in your Zoom account.
   *
   *  This value defaults to `1`.
   *
   * @example 2
   */
  poll_type?: 1 | 2 | 3;
  /**
   * The information about the poll's questions.
   */
  questions?: {
    /**
     * The allowed maximum number of characters. This field only applies to `short_answer` and `long_answer` polls:
     * * For `short_answer` polls, a maximum of 500 characters.
     * * For `long_answer` polls, a maximum of 2,000 characters.
     *
     * @example 200
     */
    answer_max_character?: number;
    /**
     * The allowed minimum number of characters. This field only applies to `short_answer` and `long_answer` polls. You must provide at least a **one** character minimum value.
     *
     * @minimum 1
     * @example 1
     */
    answer_min_character?: number;
    /**
     * Whether participants must answer the question:
     * * `true` &mdash; The participant must answer the question.
     * * `false` &mdash; The participant does not need to answer the question.
     *
     * **Note:**
     * * When the poll's `type` value is `1` (Poll), this value defaults to `true`.
     * * When the poll's `type` value is the `2` (Advanced Poll) or `3` (Quiz) values, this value defaults to `false`.
     *
     * @example false
     * @default false
     */
    answer_required?: boolean;
    /**
     * The poll question's available answers. This field requires a **minimum** of two answers.
     *
     * * For `single` and `multiple` polls, you can only provide a maximum of 10 answers.
     * * For `matching` polls, you can only provide a maximum of 16 answers.
     * * For `rank_order` polls, you can only provide a maximum of seven answers.
     *
     * @minItems 2
     */
    answers?: string[];
    /**
     * Whether the correct answer is case sensitive. This field only applies to `fill_in_the_blank` polls:
     * * `true` &mdash; The answer is case-sensitive.
     * * `false` &mdash; The answer is not case-sensitive.
     *
     * This value defaults to `false`.
     *
     * @example false
     * @default false
     */
    case_sensitive?: boolean;
    /**
     * The poll question, up to 1024 characters.
     *
     * For `fill_in_the_blank` polls, this field is the poll's question. For each value that the user must fill in, ensure that there are the same number of `right_answers` values.
     *
     * @maxLength 1024
     * @example How useful was this meeting?
     */
    name?: string;
    /**
     * The information about the prompt questions. This field only applies to `matching` and `rank_order` polls. You **must** provide a minimum of two prompts, up to a maximum of 10 prompts.
     */
    prompts?: {
      /**
       * The question prompt's title.
       *
       * @example How are you?
       */
      prompt_question?: string;
      /**
       * The question prompt's correct answers:
       * * For `matching` polls, you must provide a minimum of two correct answers, up to a maximum of 10 correct answers.
       * * For `rank_order` polls, you can only provide one correct answer.
       */
      prompt_right_answers?: string[];
    }[];
    /**
     * The high score label for the `rating_max_value` field.
     *
     * This field only applies to the `rating_scale` poll.
     *
     * @example Extremely Likely
     */
    rating_max_label?: string;
    /**
     * The rating scale's maximum value, up to a maximum value of 10.
     *
     * This field only applies to the `rating_scale` poll.
     *
     * @maximum 10
     * @example 4
     */
    rating_max_value?: number;
    /**
     * The low score label for the `rating_min_value` field.
     *
     * This field only applies to the `rating_scale` poll.
     *
     * @example Not likely
     */
    rating_min_label?: string;
    /**
     * The rating scale's minimum value. This value cannot be less than zero.
     *
     * This field only applies to the `rating_scale` poll.
     *
     * @minimum 0
     * @example 0
     */
    rating_min_value?: number;
    /**
     * The poll question's correct answer(s). This field is **required** if the poll's `type` value is `3` (Quiz).
     *
     *  For `single` and `matching` polls, this field only accepts one answer.
     *
     * @minItems 1
     */
    right_answers?: string[];
    /**
     * Whether to display the radio selection as a drop-down box:
     * * `true` &mdash; Show as a drop-down box.
     * * `false` &mdash; Do not show as a drop-down box.
     *
     * This value defaults to `false`.
     *
     * @example false
     * @default false
     */
    show_as_dropdown?: boolean;
    /**
     * The poll's question and answer type:
     * * `single` &mdash; Single choice.
     * * `multiple` &mdash; Multiple choice.
     * * `matching` &mdash; Matching.
     * * `rank_order` &mdash; Rank order.
     * * `short_answer` &mdash; Short answer.
     * * `long_answer` &mdash; Long answer.
     * * `fill_in_the_blank` &mdash; Fill in the blank.
     * * `rating_scale` &mdash; Rating scale.
     *
     * @example single
     */
    type?:
      | "single"
      | "multiple"
      | "matching"
      | "rank_order"
      | "short_answer"
      | "long_answer"
      | "fill_in_the_blank"
      | "rating_scale";
  }[];
  /**
   * The poll's title, up to 64 characters.
   *
   * @maxLength 64
   * @example Learn something new
   */
  title?: string;
};

export type MeetingPollCreateVariables = {
  body?: MeetingPollCreateRequestBody;
  pathParams: MeetingPollCreatePathParams;
} & FetcherExtraProps;

/**
 * Polls allow the meeting host to survey attendees. Create a [poll](https://support.zoom.us/hc/en-us/articles/213756303-Polling-for-Meetings) for a meeting.
 *
 *
 *
 * **Prerequisites**:
 *
 * * Host user type must be **Pro** or higher plan.
 * * Polling feature must be enabled in the host's account.
 * * Meeting must be a scheduled meeting. Instant meetings do not have polling features enabled.
 *
 * **[Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `meeting:write:admin`,`meeting:write`
 *
 * **[Granular Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `meeting:write:poll`,`meeting:write:poll:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
 */
export const meetingPollCreate = (
  variables: MeetingPollCreateVariables,
  signal?: AbortSignal,
) =>
  fetch<
    MeetingPollCreateResponse,
    MeetingPollCreateError,
    MeetingPollCreateRequestBody,
    {},
    {},
    MeetingPollCreatePathParams
  >({
    url: "/meetings/{meetingId}/polls",
    method: "post",
    ...variables,
    signal,
  });

export type MeetingPollGetPathParams = {
  /**
   * The meeting's ID.
   *
   *  When storing this value in your database, store it as a `long` format integer, not a simple integer. Meeting IDs can exceed 10 digits.
   *
   * @format int64
   * @example 85746065
   */
  meetingId: number;
  /**
   * The poll ID.
   *
   * @example QalIoKWLTJehBJ8e1xRrbQ
   */
  pollId: string;
};

export type MeetingPollGetError = Fetcher.ErrorWrapper<undefined>;

export type MeetingPollGetResponse = {
  /**
   * The meeting poll ID.
   *
   * @example QalIoKWLTJehBJ8e1xRrbQ
   */
  id?: string;
  /**
   * The meeting poll's status.
   * `notstart` - Poll not started
   * `started` - Poll started
   * `ended` - Poll ended
   * `sharing` - Sharing poll results
   * `deactivated` - Poll deactivated
   *
   * @example notstart
   */
  status?: "notstart" | "started" | "ended" | "sharing" | "deactivated";
  /**
   * Whether meeting participants answer poll questions anonymously.
   *
   * This value defaults to `false`.
   *
   * @example true
   * @default false
   */
  anonymous?: boolean;
  /**
   * The poll's type.
   * * `1` - Poll.
   * * `2` - Advanced poll. This feature must be enabled in your Zoom account.
   * * `3` - Quiz. This feature must be enabled in your Zoom account.
   *
   *  This value defaults to `1`.
   *
   * @example 2
   */
  poll_type?: 1 | 2 | 3;
  /**
   * Information about the poll's questions.
   */
  questions?: {
    /**
     * The allowed maximum number of characters. This field only applies to `short_answer` and `long_answer` polls.
     * * For `short_answer` polls, a maximum of 500 characters.
     * * For `long_answer` polls, a maximum of 2,000 characters.
     *
     * @example 200
     */
    answer_max_character?: number;
    /**
     * The allowed minimum number of characters. This field only applies to `short_answer` and `long_answer` polls. You must provide at least a one-character minimum value.
     *
     * @minimum 1
     * @example 1
     */
    answer_min_character?: number;
    /**
     * Whether participants must answer the question.
     * * `true` - The participant must answer the question.
     * * `false` - The participant does not need to answer the question.
     *
     * **Note:**
     * * When the poll's `type` value is `1` (Poll), this value defaults to `true`.
     * * When the poll's `type` value is the `2` (Advanced Poll) or `3` (Quiz) values, this value defaults to `false`.
     *
     * @example false
     * @default false
     */
    answer_required?: boolean;
    /**
     * The poll question's available answers. This field requires a **minimum** of two answers.
     *
     * * For `single` and `multiple` polls, you can only provide a maximum of 10 answers.
     * * For `matching` polls, you can only provide a maximum of 16 answers.
     * * For `rank_order` polls, you can only provide a maximum of seven answers.
     *
     * @minItems 2
     */
    answers?: string[];
    /**
     * Whether the correct answer is case sensitive. This field only applies to `fill_in_the_blank` polls:
     * * `true` &mdash; The answer is case-sensitive.
     * * `false` &mdash; The answer is not case-sensitive.
     *
     * This value defaults to `false`.
     *
     * @example false
     * @default false
     */
    case_sensitive?: boolean;
    /**
     * The poll question, up to 1024 characters.
     *
     * For `fill_in_the_blank` polls, this field is the poll's question. For each value that the user must fill in, ensure that there are the same number of `right_answers` values.
     *
     * @maxLength 1024
     * @example How useful was this meeting?
     */
    name?: string;
    /**
     * The information about the prompt questions. This field only applies to `matching` and `rank_order` polls. You **must** provide a minimum of two prompts, up to a maximum of 10 prompts.
     */
    prompts?: {
      /**
       * The question prompt's title.
       *
       * @example How are you?
       */
      prompt_question?: string;
      /**
       * The question prompt's correct answers:
       * * For `matching` polls, you must provide a minimum of two correct answers, up to a maximum of 10 correct answers.
       * * For `rank_order` polls, you can only provide one correct answer.
       */
      prompt_right_answers?: string[];
    }[];
    /**
     * The high score label for the `rating_max_value` field.
     *
     * This field only applies to the `rating_scale` poll.
     *
     * @example Extremely Likely
     */
    rating_max_label?: string;
    /**
     * The rating scale's maximum value, up to a maximum value of 10.
     *
     * This field only applies to the `rating_scale` poll.
     *
     * @maximum 10
     * @example 4
     */
    rating_max_value?: number;
    /**
     * The low score label for the `rating_min_value` field.
     *
     * This field only applies to the `rating_scale` poll.
     *
     * @example Not likely
     */
    rating_min_label?: string;
    /**
     * The rating scale's minimum value. This value cannot be less than zero.
     *
     * This field only applies to the `rating_scale` poll.
     *
     * @minimum 0
     * @example 0
     */
    rating_min_value?: number;
    /**
     * The poll question's correct answer(s). This field is required if the poll's `type` value is `3` (Quiz).
     *
     *  For `single` and `matching` polls, this field only accepts one answer.
     *
     * @minItems 1
     */
    right_answers?: string[];
    /**
     * Whether to display the radio selection as a drop-down box.
     * * `true` - Show as a drop-down box.
     * * `false` - Do not show as a drop-down box.
     *
     * This value defaults to `false`.
     *
     * @example false
     * @default false
     */
    show_as_dropdown?: boolean;
    /**
     * The poll's question and answer type.
     * * `single` - Single choice.
     * * `multiple` - Multiple choice.
     * * `matching` - Matching.
     * * `rank_order` - Rank order.
     * * `short_answer` - Short answer.
     * * `long_answer` - Long answer.
     * * `fill_in_the_blank` - Fill in the blank.
     * * `rating_scale` - Rating scale.
     *
     * @example single
     */
    type?:
      | "single"
      | "multiple"
      | "matching"
      | "rank_order"
      | "short_answer"
      | "long_answer"
      | "fill_in_the_blank"
      | "rating_scale";
  }[];
  /**
   * The poll's title, up to 64 characters.
   *
   * @maxLength 64
   * @example Learn something new
   */
  title?: string;
};

export type MeetingPollGetVariables = {
  pathParams: MeetingPollGetPathParams;
} & FetcherExtraProps;

/**
 * Retrieves information about a specific meeting [poll](https://support.zoom.us/hc/en-us/articles/213756303-Polling-for-Meetings).
 *
 * **Prerequisites**:
 * * Host must have Pro or higher plan.
 * * Enable the **Meeting Polls/Quizzes** setting in the Zoom web portal.
 *
 * **[Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `meeting:read:admin`,`meeting:read`
 *
 * **[Granular Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `meeting:read:poll`,`meeting:read:poll:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
 */
export const meetingPollGet = (
  variables: MeetingPollGetVariables,
  signal?: AbortSignal,
) =>
  fetch<
    MeetingPollGetResponse,
    MeetingPollGetError,
    undefined,
    {},
    {},
    MeetingPollGetPathParams
  >({
    url: "/meetings/{meetingId}/polls/{pollId}",
    method: "get",
    ...variables,
    signal,
  });

export type MeetingPollUpdatePathParams = {
  /**
   * The meeting's ID.
   *
   *  When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits.
   *
   * @format int64
   * @example 85746065
   */
  meetingId: number;
  /**
   * The poll ID.
   *
   * @example QalIoKWLTJehBJ8e1xRrbQ
   */
  pollId: string;
};

export type MeetingPollUpdateError = Fetcher.ErrorWrapper<undefined>;

export type MeetingPollUpdateRequestBody = {
  /**
   * Whether meeting participants answer poll questions anonymously.
   *
   * This value defaults to `false`.
   *
   * @example true
   * @default false
   */
  anonymous?: boolean;
  /**
   * The type of poll.
   * * `1` - Poll.
   * * `2` - Advanced Poll. This feature must be enabled in your Zoom account.
   * * `3` - Quiz. This feature must be enabled in your Zoom account.
   *
   *  This value defaults to `1`.
   *
   * @example 2
   */
  poll_type?: 1 | 2 | 3;
  /**
   * The information about the poll's questions.
   */
  questions?: {
    /**
     * The allowed maximum number of characters. This field only applies to `short_answer` and `long_answer` polls.
     * * For `short_answer` polls, a maximum of 500 characters.
     * * For `long_answer` polls, a maximum of 2,000 characters.
     *
     * @example 200
     */
    answer_max_character?: number;
    /**
     * The allowed minimum number of characters. This field only applies to `short_answer` and `long_answer` polls. You must provide at least a one character minimum value.
     *
     * @minimum 1
     * @example 1
     */
    answer_min_character?: number;
    /**
     * Whether participants must answer the question.
     * * `true` - The participant must answer the question.
     * * `false` - The participant does not need to answer the question.
     *
     * **Note:**
     * * When the poll's `type` value is `1` (Poll), this value defaults to `true`.
     * * When the poll's `type` value is the `2` (Advanced Poll) or `3` (Quiz) values, this value defaults to `false`.
     *
     * @example false
     * @default false
     */
    answer_required?: boolean;
    /**
     * The poll question's available answers. This field requires a **minimum** of two answers.
     *
     * * For `single` and `multiple` polls, you can only provide a maximum of 10 answers.
     * * For `matching` polls, you can only provide a maximum of 16 answers.
     * * For `rank_order` polls, you can only provide a maximum of seven answers.
     *
     * @minItems 2
     */
    answers?: string[];
    /**
     * Whether the correct answer is case sensitive. This field only applies to `fill_in_the_blank` polls:
     * * `true` - The answer is case-sensitive.
     * * `false` - The answer is not case-sensitive.
     *
     * This value defaults to `false`.
     *
     * @example false
     * @default false
     */
    case_sensitive?: boolean;
    /**
     * The poll question, up to 1024 characters.
     *
     * For `fill_in_the_blank` polls, this field is the poll's question. For each value that the user must fill in, ensure that there are the same number of `right_answers` values.
     *
     * @maxLength 1024
     * @example How useful was this meeting?
     */
    name?: string;
    /**
     * The information about the prompt questions. This field only applies to `matching` and `rank_order` polls. You must provide a minimum of two prompts, up to a maximum of 10 prompts.
     */
    prompts?: {
      /**
       * The question prompt's title.
       *
       * @example How are you?
       */
      prompt_question?: string;
      /**
       * The question prompt's correct answers:
       * * For `matching` polls, you must provide a minimum of two correct answers, up to a maximum of 10 correct answers.
       * * For `rank_order` polls, you can only provide one correct answer.
       */
      prompt_right_answers?: string[];
    }[];
    /**
     * The high score label for the `rating_max_value` field.
     *
     * This field only applies to the `rating_scale` poll.
     *
     * @example Extremely Likely
     */
    rating_max_label?: string;
    /**
     * The rating scale's maximum value, up to a maximum value of 10.
     *
     * This field only applies to the `rating_scale` poll.
     *
     * @maximum 10
     * @example 4
     */
    rating_max_value?: number;
    /**
     * The low score label for the `rating_min_value` field.
     *
     * This field only applies to the `rating_scale` poll.
     *
     * @example Not likely
     */
    rating_min_label?: string;
    /**
     * The rating scale's minimum value. This value cannot be less than zero.
     *
     * This field only applies to the `rating_scale` poll.
     *
     * @minimum 0
     * @example 0
     */
    rating_min_value?: number;
    /**
     * The poll question's correct answer(s). This field is **required** if the poll's `type` value is `3` (Quiz).
     *
     *  For `single` and `matching` polls, this field only accepts one answer.
     *
     * @minItems 1
     */
    right_answers?: string[];
    /**
     * Whether to display the radio selection as a drop-down box.
     * * `true` - Show as a drop-down box.
     * * `false` - Do not show as a drop-down box.
     *
     * This value defaults to `false`.
     *
     * @example false
     * @default false
     */
    show_as_dropdown?: boolean;
    /**
     * The poll's question and answer type.
     * * `single` - Single choice.
     * * `multiple` - Multiple choice.
     * * `matching` - Matching.
     * * `rank_order` - Rank order.
     * * `short_answer` - Short answer.
     * * `long_answer` - Long answer.
     * * `fill_in_the_blank` - Fill in the blank.
     * * `rating_scale` - Rating scale.
     *
     * @example single
     */
    type?:
      | "single"
      | "multiple"
      | "matching"
      | "rank_order"
      | "short_answer"
      | "long_answer"
      | "fill_in_the_blank"
      | "rating_scale";
  }[];
  /**
   * The poll's title, up to 64 characters.
   *
   * @maxLength 64
   * @example Learn something new
   */
  title?: string;
};

export type MeetingPollUpdateVariables = {
  body?: MeetingPollUpdateRequestBody;
  pathParams: MeetingPollUpdatePathParams;
} & FetcherExtraProps;

/**
 * Polls allow the meeting host to survey attendees. Update information of a specific meeting [poll](https://support.zoom.us/hc/en-us/articles/213756303-Polling-for-Meetings).
 *
 * **Prerequisites**:
 * * Host user type must be **Pro** or higher plan.
 * * The **Meeting Polls/Quizzes** setting enabled in the Zoom web portal.
 * * Meeting must be a scheduled meeting. Instant meetings do not have polling features enabled.
 *
 * **[Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `meeting:write:admin`,`meeting:write`
 *
 * **[Granular Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `meeting:update:poll`,`meeting:update:poll:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
 */
export const meetingPollUpdate = (
  variables: MeetingPollUpdateVariables,
  signal?: AbortSignal,
) =>
  fetch<
    undefined,
    MeetingPollUpdateError,
    MeetingPollUpdateRequestBody,
    {},
    {},
    MeetingPollUpdatePathParams
  >({
    url: "/meetings/{meetingId}/polls/{pollId}",
    method: "put",
    ...variables,
    signal,
  });

export type MeetingPollDeletePathParams = {
  /**
   * The meeting's ID.
   *
   *  When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits.
   *
   * @format int64
   * @example 85746065
   */
  meetingId: number;
  /**
   * The poll ID
   *
   * @example QalIoKWLTJehBJ8e1xRrbQ
   */
  pollId: string;
};

export type MeetingPollDeleteError = Fetcher.ErrorWrapper<undefined>;

export type MeetingPollDeleteVariables = {
  pathParams: MeetingPollDeletePathParams;
} & FetcherExtraProps;

/**
 * Polls allow the meeting host to survey attendees. Delete a meeting [poll](https://support.zoom.us/hc/en-us/articles/213756303-Polling-for-Meetings).
 *
 * **Prerequisites**:
 *
 * * Host user type must be **Pro**.
 * * Polling feature should be enabled in the host's account.
 * * Meeting must be a scheduled meeting. Instant meetings do not have polling features enabled.
 *
 * **[Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `meeting:write:admin`,`meeting:write`
 *
 * **[Granular Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `meeting:delete:poll`,`meeting:delete:poll:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
 */
export const meetingPollDelete = (
  variables: MeetingPollDeleteVariables,
  signal?: AbortSignal,
) =>
  fetch<
    undefined,
    MeetingPollDeleteError,
    undefined,
    {},
    {},
    MeetingPollDeletePathParams
  >({
    url: "/meetings/{meetingId}/polls/{pollId}",
    method: "delete",
    ...variables,
    signal,
  });

export type MeetingRegistrantsPathParams = {
  /**
   * The meeting's ID.
   *
   *  When storing this value in your database, store it as a long format integer, not an integer. Meeting IDs can exceed 10 digits.
   *
   * @format int64
   * @example 85746065
   */
  meetingId: number;
};

export type MeetingRegistrantsQueryParams = {
  /**
   * The meeting or webinar occurrence ID.
   *
   * @example 1648194360000
   */
  occurrence_id?: string;
  /**
   * Query by the registrant's status.
   * * `pending` - The registration is pending.
   * * `approved` - The registrant is approved.
   * * `denied` - The registration is denied.
   *
   * @example pending
   * @default approved
   */
  status?: "pending" | "approved" | "denied";
  /**
   * The number of records returned within a single API call.
   *
   * @maximum 300
   * @example 30
   * @default 30
   */
  page_size?: number;
  /**
   * **Deprecated.** We will no longer support this field in a future release. Instead, use the `next_page_token` for pagination.
   *
   * @example 1
   * @default 1
   */
  page_number?: number;
  /**
   * Use the next page token to paginate through large result sets. A next page token is returned whenever the set of available results exceeds the current page size. This token's expiration period is 15 minutes.
   *
   * @example IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2
   */
  next_page_token?: string;
};

export type MeetingRegistrantsError = Fetcher.ErrorWrapper<undefined>;

export type MeetingRegistrantsResponse = {
  /**
   * Use the next page token to paginate through large result sets. A next page token is returned whenever the set of available results exceeds the current page size. This token's expiration period is 15 minutes.
   *
   * @example w7587w4eiyfsudgf
   */
  next_page_token?: string;
  /**
   * The number of pages returned for the request made.
   *
   * @example 1
   */
  page_count?: number;
  /**
   * **Deprecated.** We will no longer support this field in a future release. Instead, use the `next_page_token` for pagination.
   *
   * @example 1
   * @deprecated true
   * @default 1
   */
  page_number?: number;
  /**
   * The number of records returned with a single API call.
   *
   * @maximum 300
   * @example 30
   * @default 30
   */
  page_size?: number;
  /**
   * The total number of all the records available across pages.
   *
   * @example 20
   */
  total_records?: number;
  /**
   * List of registrant objects.
   */
  registrants?: {
    /**
     * The registrant's address.
     *
     * @example 1800 Amphibious Blvd.
     */
    address?: string;
    /**
     * The registrant's city.
     *
     * @example Mountain View
     */
    city?: string;
    /**
     * The registrant's questions and comments.
     *
     * @example Looking forward to the discussion.
     */
    comments?: string;
    /**
     * The registrant's two-letter [country code](/docs/api/rest/other-references/abbreviation-lists/#countries).
     *
     * @example US
     */
    country?: string;
    /**
     * Information about custom questions.
     */
    custom_questions?: {
      /**
       * The title of the custom question.
       *
       * @example What do you hope to learn from this?
       */
      title?: string;
      /**
       * The custom question's response value. This has a limit of 128 characters.
       *
       * @maxLength 128
       * @example Look forward to learning how you come up with new recipes and what other services you offer.
       */
      value?: string;
    }[];
    /**
     * The registrant's email address. See [Email address display rules](https://developers.zoom.us/docs/api/rest/using-zoom-apis/#email-address-display-rules) for return value details.
     *
     * @maxLength 128
     * @format email
     * @example jchill@example.com
     */
    email: string;
    /**
     * The registrant's first name.
     *
     * @maxLength 64
     * @example Jill
     */
    first_name: string;
    /**
     * The registrant's industry.
     *
     * @example Food
     */
    industry?: string;
    /**
     * The registrant's job title.
     *
     * @example Chef
     */
    job_title?: string;
    /**
     * The registrant's last name.
     *
     * @maxLength 64
     * @example Chill
     */
    last_name?: string;
    /**
     * The registrant's number of employees.
     * * `1-20`
     * * `21-50`
     * * `51-100`
     * * `101-250`
     * * `251-500`
     * * `501-1,000`
     * * `1,001-5,000`
     * * `5,001-10,000`
     * * `More than 10,000`
     *
     * @example 1-20
     */
    no_of_employees?:
      | ""
      | "1-20"
      | "21-50"
      | "51-100"
      | "101-250"
      | "251-500"
      | "501-1,000"
      | "1,001-5,000"
      | "5,001-10,000"
      | "More than 10,000";
    /**
     * The registrant's organization.
     *
     * @example Cooking Org
     */
    org?: string;
    /**
     * The registrant's phone number.
     *
     * @example 5550100
     */
    phone?: string;
    /**
     * The registrant's purchasing time frame.
     * * `Within a month`
     * * `1-3 months`
     * * `4-6 months`
     * * `More than 6 months`
     * * `No timeframe`
     *
     * @example 1-3 months
     */
    purchasing_time_frame?:
      | ""
      | "Within a month"
      | "1-3 months"
      | "4-6 months"
      | "More than 6 months"
      | "No timeframe";
    /**
     * The registrant's role in the purchase process.
     * * `Decision Maker`
     * * `Evaluator/Recommender`
     * * `Influencer`
     * * `Not involved`
     *
     * @example Influencer
     */
    role_in_purchase_process?:
      | ""
      | "Decision Maker"
      | "Evaluator/Recommender"
      | "Influencer"
      | "Not involved";
    /**
     * The registrant's state or province.
     *
     * @example CA
     */
    state?: string;
    /**
     * The status of the registrant's registration.
     *   `approved` - User has been successfully approved for the webinar.
     *   `pending` - The registration is still pending.
     *   `denied` - User has been denied from joining the webinar.
     *
     * @example approved
     */
    status?: "approved" | "denied" | "pending";
    /**
     * The registrant's ZIP or postal code.
     *
     * @example 94045
     */
    zip?: string;
    /**
     * Registrant ID.
     *
     * @example 9tboDiHUQAeOnbmudzWa5g
     */
    id?: string;
    /**
     * The time when the registrant registered.
     *
     * @format date-time
     * @example 2022-03-22T05:59:09Z
     */
    create_time?: string;
    /**
     * The URL that an approved registrant can use to join the meeting or webinar.
     *
     * @format string
     * @example https://example.com/j/11111
     */
    join_url?: string;
    /**
     * The participant PIN code is used to authenticate audio participants before they join the meeting.
     *
     * @format int64
     * @example 380303
     */
    participant_pin_code?: number;
  }[];
};

export type MeetingRegistrantsVariables = {
  pathParams: MeetingRegistrantsPathParams;
  queryParams?: MeetingRegistrantsQueryParams;
} & FetcherExtraProps;

/**
 * List users that have registered for a meeting. A host or a user with admin permission can require [registration for a Zoom meeting](https://support.zoom.us/hc/en-us/articles/211579443-Registration-for-Meetings).
 *
 * **Prerequisites**:
 * * Host user type must be **Pro** or higher plan.
 * * Registration must be enabled for the meeting.
 *
 * **[Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `meeting:read:admin`,`meeting:read`
 *
 * **[Granular Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `meeting:read:list_registrants`,`meeting:read:list_registrants:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
 */
export const meetingRegistrants = (
  variables: MeetingRegistrantsVariables,
  signal?: AbortSignal,
) =>
  fetch<
    MeetingRegistrantsResponse,
    MeetingRegistrantsError,
    undefined,
    {},
    MeetingRegistrantsQueryParams,
    MeetingRegistrantsPathParams
  >({
    url: "/meetings/{meetingId}/registrants",
    method: "get",
    ...variables,
    signal,
  });

export type MeetingRegistrantCreatePathParams = {
  /**
   * The meeting's ID.
   *
   *  When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits.
   *
   * @format int64
   * @example 85746065
   */
  meetingId: number;
};

export type MeetingRegistrantCreateQueryParams = {
  /**
   * A comma-separated list of meeting occurrence IDs. You can get this value with the [Get a meeting](/docs/api-reference/zoom-api/methods#operation/meeting) API.
   *
   * @example 1648194360000,1648367160000
   */
  occurrence_ids?: string;
};

export type MeetingRegistrantCreateError = Fetcher.ErrorWrapper<undefined>;

export type MeetingRegistrantCreateResponse = {
  /**
   * The meeting ID.
   *
   * @format int64
   * @example 85746065
   */
  id?: number;
  /**
   * The URL the registrant can use to join the meeting.
   *
   * The API will not return this field if the meeting was [created](/docs/api-reference/zoom-api/methods#operation/meetingCreate) with the `approval_type` field value of `1` (manual approval).
   *
   * @example https://example.com/j/11111
   */
  join_url?: string;
  /**
   * The registrant's ID.
   *
   * @example fdgsfh2ey82fuh
   */
  registrant_id?: string;
  /**
   * The meeting's start time.
   *
   * @format date-time
   * @example 2021-07-13T21:44:51Z
   */
  start_time?: string;
  /**
   * The meeting's topic.
   *
   * @maxLength 200
   * @example My Meeting
   */
  topic?: string;
  /**
   * Array of occurrence objects.
   */
  occurrences?: {
    /**
     * Duration.
     *
     * @example 60
     */
    duration?: number;
    /**
     * Occurrence ID: Unique Identifier that identifies an occurrence of a recurring webinar. [Recurring webinars](https://support.zoom.us/hc/en-us/articles/216354763-How-to-Schedule-A-Recurring-Webinar) can have a maximum of 50 occurrences.
     *
     * @example 1648194360000
     */
    occurrence_id?: string;
    /**
     * Start time.
     *
     * @format date-time
     * @example 2022-03-25T07:46:00Z
     */
    start_time?: string;
    /**
     * Occurrence status.
     *
     * @example available
     */
    status?: string;
  }[];
  /**
   * The participant PIN code is used to authenticate audio participants before they join the meeting.
   *
   * @format int64
   * @example 380303
   */
  participant_pin_code?: number;
};

export type MeetingRegistrantCreateRequestBody = {
  /**
   * The registrant's first name.
   *
   * @maxLength 64
   * @example Jill
   */
  first_name: string;
  /**
   * The registrant's last name.
   *
   * @maxLength 64
   * @example Chill
   */
  last_name?: string;
  /**
   * The registrant's email address.
   *
   * @maxLength 128
   * @format email
   * @example jchill@example.com
   */
  email: string;
  /**
   * The registrant's address.
   *
   * @example 1800 Amphibious Blvd.
   */
  address?: string;
  /**
   * The registrant's city.
   *
   * @example Mountain View
   */
  city?: string;
  /**
   * The registrant's state or province.
   *
   * @example CA
   */
  state?: string;
  /**
   * The registrant's ZIP or postal code.
   *
   * @example 94045
   */
  zip?: string;
  /**
   * The registrant's two-letter [country code](https://marketplace.zoom.us/docs/api-reference/other-references/abbreviation-lists#countries).
   *
   * @example US
   */
  country?: string;
  /**
   * The registrant's phone number.
   *
   * @example 5550100
   */
  phone?: string;
  /**
   * The registrant's questions and comments.
   *
   * @example Looking forward to the discussion.
   */
  comments?: string;
  /**
   * Information about custom questions.
   */
  custom_questions?: {
    /**
     * The title of the custom question.
     *
     * @example What do you hope to learn from this?
     */
    title?: string;
    /**
     * The custom question's response value. This has a limit of 128 characters.
     *
     * @maxLength 128
     * @example Look forward to learning how you come up with new recipes and what other services you offer.
     */
    value?: string;
  }[];
  /**
   * The registrant's industry.
   *
   * @example Food
   */
  industry?: string;
  /**
   * The registrant's job title.
   *
   * @example Chef
   */
  job_title?: string;
  /**
   * The registrant's number of employees:
   * * `1-20`
   * * `21-50`
   * * `51-100`
   * * `101-500`
   * * `500-1,000`
   * * `1,001-5,000`
   * * `5,001-10,000`
   * * `More than 10,000`
   *
   * @example 1-20
   */
  no_of_employees?:
    | ""
    | "1-20"
    | "21-50"
    | "51-100"
    | "101-500"
    | "500-1,000"
    | "1,001-5,000"
    | "5,001-10,000"
    | "More than 10,000";
  /**
   * The registrant's organization.
   *
   * @example Cooking Org
   */
  org?: string;
  /**
   * The registrant's purchasing time frame:
   * * `Within a month`
   * * `1-3 months`
   * * `4-6 months`
   * * `More than 6 months`
   * * `No timeframe`
   *
   * @example 1-3 months
   */
  purchasing_time_frame?:
    | ""
    | "Within a month"
    | "1-3 months"
    | "4-6 months"
    | "More than 6 months"
    | "No timeframe";
  /**
   * The registrant's role in the purchase process:
   * * `Decision Maker`
   * * `Evaluator/Recommender`
   * * `Influencer`
   * * `Not involved`
   *
   * @example Influencer
   */
  role_in_purchase_process?:
    | ""
    | "Decision Maker"
    | "Evaluator/Recommender"
    | "Influencer"
    | "Not involved";
  /**
   * The registrant's language preference for confirmation emails:
   * * `en-US` &mdash; English (US)
   * * `de-DE` &mdash; German (Germany)
   * * `es-ES` &mdash; Spanish (Spain)
   * * `fr-FR` &mdash; French (France)
   * * `jp-JP` &mdash; Japanese
   * * `pt-PT` &mdash; Portuguese (Portugal)
   * * `ru-RU` &mdash; Russian
   * * `zh-CN` &mdash; Chinese (PRC)
   * * `zh-TW` &mdash; Chinese (Taiwan)
   * * `ko-KO` &mdash; Korean
   * * `it-IT` &mdash; Italian (Italy)
   * * `vi-VN` &mdash; Vietnamese
   * * `pl-PL` &mdash; Polish
   * * `Tr-TR` &mdash; Turkish
   *
   * @example en-US
   */
  language?:
    | "en-US"
    | "de-DE"
    | "es-ES"
    | "fr-FR"
    | "jp-JP"
    | "pt-PT"
    | "ru-RU"
    | "zh-CN"
    | "zh-TW"
    | "ko-KO"
    | "it-IT"
    | "vi-VN"
    | "pl-PL"
    | "Tr-TR";
  /**
   * If a meeting was scheduled with the `approval_type` field value of `1` (manual approval) but you want to automatically approve meeting registrants, set the value of this field to `true`.
   *
   * **Note:** You cannot use this field to change approval setting for a meeting originally scheduled with the `approval_type` field value of `0` (automatic approval).
   *
   * @example true
   */
  auto_approve?: boolean;
};

export type MeetingRegistrantCreateVariables = {
  body?: MeetingRegistrantCreateRequestBody;
  pathParams: MeetingRegistrantCreatePathParams;
  queryParams?: MeetingRegistrantCreateQueryParams;
} & FetcherExtraProps;

/**
 * Create and submit a user's registration to a meeting. See [Customizing webinar registration](https://support.zoom.us/hc/en-us/articles/202835649-Customizing-webinar-registration) for details on how to set the requirements for these fields. Note that there is a maximum limit of 4,999 registrants per meeting and users will see an error if the meeting's capacity is reached.
 *
 *  **Prerequisites:**
 * * The host must be a **Licensed** user type.
 *
 * **[Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `meeting:write:admin`,`meeting:write`
 *
 * **[Granular Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `meeting:write:registrant`,`meeting:write:registrant:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
 */
export const meetingRegistrantCreate = (
  variables: MeetingRegistrantCreateVariables,
  signal?: AbortSignal,
) =>
  fetch<
    MeetingRegistrantCreateResponse,
    MeetingRegistrantCreateError,
    MeetingRegistrantCreateRequestBody,
    {},
    MeetingRegistrantCreateQueryParams,
    MeetingRegistrantCreatePathParams
  >({
    url: "/meetings/{meetingId}/registrants",
    method: "post",
    ...variables,
    signal,
  });

export type MeetingRegistrantsQuestionsGetPathParams = {
  /**
   * The meeting's ID.
   *
   *  When storing this value in your database, store it as a long format integer, not a simple integer. Meeting IDs can exceed 10 digits.
   *
   * @format int64
   * @example 85746065
   */
  meetingId: number;
};

export type MeetingRegistrantsQuestionsGetError =
  Fetcher.ErrorWrapper<undefined>;

export type MeetingRegistrantsQuestionsGetResponse = {
  /**
   * Array of custom questions for registrants.
   */
  custom_questions?: {
    /**
     * Answer choices for the question. Can not be used for `short` question type as this type of question requires registrants to type out the answer.
     */
    answers?: string[];
    /**
     * Whether or not the custom question is required to be answered by participants or not.
     *
     * @example true
     */
    required?: boolean;
    /**
     * Title of the custom question.
     *
     * @example How are you?
     */
    title?: string;
    /**
     * Type of the question being asked.
     *
     * @example short
     */
    type?: "short" | "single";
  }[];
  /**
   * Array of registrant questions.
   */
  questions?: {
    /**
     * Field name of the question.
     *
     * @example last_name
     */
    field_name?:
      | "last_name"
      | "address"
      | "city"
      | "country"
      | "zip"
      | "state"
      | "phone"
      | "industry"
      | "org"
      | "job_title"
      | "purchasing_time_frame"
      | "role_in_purchase_process"
      | "no_of_employees"
      | "comments";
    /**
     * Whether or not the displayed fields are required to be filled out by registrants.
     *
     * @example true
     */
    required?: boolean;
  }[];
};

export type MeetingRegistrantsQuestionsGetVariables = {
  pathParams: MeetingRegistrantsQuestionsGetPathParams;
} & FetcherExtraProps;

/**
 * List registration questions that will be displayed to users while [registering for a meeting](https://support.zoom.us/hc/en-us/articles/211579443-Registration-for-Meetings).
 *
 * **Prerequisites**:
 * * Host user type must be **Pro** or higher plan.
 * * Registration must be enabled for the meeting.
 *
 * **[Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `meeting:read`,`meeting:read:admin`
 *
 * **[Granular Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `meeting:read:list_registration_questions`,`meeting:read:list_registration_questions:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
 */
export const meetingRegistrantsQuestionsGet = (
  variables: MeetingRegistrantsQuestionsGetVariables,
  signal?: AbortSignal,
) =>
  fetch<
    MeetingRegistrantsQuestionsGetResponse,
    MeetingRegistrantsQuestionsGetError,
    undefined,
    {},
    {},
    MeetingRegistrantsQuestionsGetPathParams
  >({
    url: "/meetings/{meetingId}/registrants/questions",
    method: "get",
    ...variables,
    signal,
  });

export type MeetingRegistrantQuestionUpdatePathParams = {
  /**
   * The meeting's ID.
   *
   *  When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits.
   *
   * @format int64
   * @example 85746065
   */
  meetingId: number;
};

export type MeetingRegistrantQuestionUpdateError =
  Fetcher.ErrorWrapper<undefined>;

export type MeetingRegistrantQuestionUpdateRequestBody = {
  /**
   * Array of Registrant Custom Questions
   */
  custom_questions?: {
    /**
     * Answer choices for the question. Can not be used for `short` question type as this type of question requires registrants to type out the answer.
     */
    answers?: string[];
    /**
     * Indicates whether or not the custom question is required to be answered by participants or not.
     *
     * @example true
     */
    required?: boolean;
    /**
     * Title of the custom question.
     *
     * @example How are you?
     */
    title?: string;
    /**
     * The type of question being asked.
     *
     * @example short
     */
    type?: "short" | "single";
  }[];
  /**
   * Array of registrant questions.
   */
  questions?: {
    /**
     * The question's field name.
     *
     * @example last_name
     */
    field_name?:
      | "last_name"
      | "address"
      | "city"
      | "country"
      | "zip"
      | "state"
      | "phone"
      | "industry"
      | "org"
      | "job_title"
      | "purchasing_time_frame"
      | "role_in_purchase_process"
      | "no_of_employees"
      | "comments";
    /**
     * Indicates whether or not the displayed fields are required to be filled out by registrants.
     *
     * @example true
     */
    required?: boolean;
  }[];
};

export type MeetingRegistrantQuestionUpdateVariables = {
  body?: MeetingRegistrantQuestionUpdateRequestBody;
  pathParams: MeetingRegistrantQuestionUpdatePathParams;
} & FetcherExtraProps;

/**
 * Update registration questions that will be displayed to users while [registering for a meeting](https://support.zoom.us/hc/en-us/articles/211579443-Registration-for-Meetings).
 *
 * **Prerequisites**:
 * * Host user type must be **Pro** or higher plan.
 * * Registration must be enabled for the meeting.
 *
 * **[Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `meeting:write`,`meeting:write:admin`
 *
 * **[Granular Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `meeting:update:registration_question`,`meeting:update:registration_question:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
 */
export const meetingRegistrantQuestionUpdate = (
  variables: MeetingRegistrantQuestionUpdateVariables,
  signal?: AbortSignal,
) =>
  fetch<
    undefined,
    MeetingRegistrantQuestionUpdateError,
    MeetingRegistrantQuestionUpdateRequestBody,
    {},
    {},
    MeetingRegistrantQuestionUpdatePathParams
  >({
    url: "/meetings/{meetingId}/registrants/questions",
    method: "patch",
    ...variables,
    signal,
  });

export type MeetingRegistrantStatusPathParams = {
  /**
   * The meeting's ID.
   *
   *  When storing this value in your database, store it as a `long` format integer, not as a simple integer. Meeting IDs can exceed 10 digits.
   *
   * @format int64
   * @example 85746065
   */
  meetingId: number;
};

export type MeetingRegistrantStatusQueryParams = {
  /**
   * The meeting or webinar occurrence ID.
   *
   * @example 1648194360000
   */
  occurrence_id?: string;
};

export type MeetingRegistrantStatusError = Fetcher.ErrorWrapper<undefined>;

export type MeetingRegistrantStatusRequestBody = {
  /**
   * Registrant status.
   *  `approve` - Approve registrant.
   *  `cancel` - Cancel previously approved registrant's registration.
   *  `deny` - Deny registrant.
   *
   * @example approve
   */
  action: "approve" | "cancel" | "deny";
  /**
   * List of registrants.
   *
   * @maximum 30
   */
  registrants?: {
    /**
     * @example jchill@example.com
     */
    email?: string;
    /**
     * @example 9tboDiHUQAeOnbmudzWa5g
     */
    id?: string;
  }[];
};

export type MeetingRegistrantStatusVariables = {
  body: MeetingRegistrantStatusRequestBody;
  pathParams: MeetingRegistrantStatusPathParams;
  queryParams?: MeetingRegistrantStatusQueryParams;
} & FetcherExtraProps;

/**
 * Update a meeting registrant's status by either approving, cancelling or denying a registrant from joining the meeting.
 *
 * **Prerequisites**:
 * * Host user type must be **Pro** or higher plan.
 * * Registration must be enabled for the meeting.
 *
 * **[Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `meeting:write:admin`,`meeting:write`
 *
 * **[Granular Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `meeting:update:registrant_status`,`meeting:update:registrant_status:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
 */
export const meetingRegistrantStatus = (
  variables: MeetingRegistrantStatusVariables,
  signal?: AbortSignal,
) =>
  fetch<
    undefined,
    MeetingRegistrantStatusError,
    MeetingRegistrantStatusRequestBody,
    {},
    MeetingRegistrantStatusQueryParams,
    MeetingRegistrantStatusPathParams
  >({
    url: "/meetings/{meetingId}/registrants/status",
    method: "put",
    ...variables,
    signal,
  });

export type MeetingRegistrantGetPathParams = {
  /**
   * The meeting's ID.
   *
   *  When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits.
   *
   * @format int64
   * @example 85746065
   */
  meetingId: number;
  /**
   * The registrant ID.
   *
   * @example 9tboDiHUQAeOnbmudzWa5g
   */
  registrantId: string;
};

export type MeetingRegistrantGetError = Fetcher.ErrorWrapper<undefined>;

export type MeetingRegistrantGetResponse = {
  /**
   * The registrant's address.
   *
   * @example 1800 Amphibious Blvd.
   */
  address?: string;
  /**
   * The registrant's city.
   *
   * @example Mountain View
   */
  city?: string;
  /**
   * The registrant's questions and comments.
   *
   * @example Looking forward to the discussion.
   */
  comments?: string;
  /**
   * The registrant's two-letter [country code](https://developers.zoom.us/docs/api/rest/other-references/abbreviation-lists/#countries).
   *
   * @example US
   */
  country?: string;
  /**
   * Information about custom questions.
   */
  custom_questions?: {
    /**
     * The title of the custom question.
     *
     * @example What do you hope to learn from this?
     */
    title?: string;
    /**
     * The custom question's response value. This has a limit of 128 characters.
     *
     * @maxLength 128
     * @example Look forward to learning how you come up with new recipes and what other services you offer.
     */
    value?: string;
  }[];
  /**
   * The registrant's email address. See [Email address display rules](https://developers.zoom.us/docs/api/rest/using-zoom-apis/#email-address-display-rules) for return value details.
   *
   * @maxLength 128
   * @format email
   * @example jchill@example.com
   */
  email: string;
  /**
   * The registrant's first name.
   *
   * @maxLength 64
   * @example Jill
   */
  first_name: string;
  /**
   * The registrant's industry.
   *
   * @example Food
   */
  industry?: string;
  /**
   * The registrant's job title.
   *
   * @example Chef
   */
  job_title?: string;
  /**
   * The registrant's last name.
   *
   * @maxLength 64
   * @example Chill
   */
  last_name?: string;
  /**
   * The registrant's number of employees.
   * * `1-20`
   * * `21-50`
   * * `51-100`
   * * `101-250`
   * * `251-500`
   * * `501-1,000`
   * * `1,001-5,000`
   * * `5,001-10,000`
   * * `More than 10,000`
   *
   * @example 1-20
   */
  no_of_employees?:
    | ""
    | "1-20"
    | "21-50"
    | "51-100"
    | "101-250"
    | "251-500"
    | "501-1,000"
    | "1,001-5,000"
    | "5,001-10,000"
    | "More than 10,000";
  /**
   * The registrant's organization.
   *
   * @example Cooking Org
   */
  org?: string;
  /**
   * The registrant's phone number.
   *
   * @example 5550100
   */
  phone?: string;
  /**
   * The registrant's purchasing time frame.
   * * `Within a month`
   * * `1-3 months`
   * * `4-6 months`
   * * `More than 6 months`
   * * `No timeframe`
   *
   * @example 1-3 months
   */
  purchasing_time_frame?:
    | ""
    | "Within a month"
    | "1-3 months"
    | "4-6 months"
    | "More than 6 months"
    | "No timeframe";
  /**
   * The registrant's role in the purchase process.
   * * `Decision Maker`
   * * `Evaluator/Recommender`
   * * `Influencer`
   * * `Not involved`
   *
   * @example Influencer
   */
  role_in_purchase_process?:
    | ""
    | "Decision Maker"
    | "Evaluator/Recommender"
    | "Influencer"
    | "Not involved";
  /**
   * The registrant's state or province.
   *
   * @example CA
   */
  state?: string;
  /**
   * The registrant's registration status.
   * * `approved` - The registrant is approved to join the meeting.
   * * `pending` - The registrant's registration is pending.
   * * `denied` - The registrant was declined to join the meeting.
   *
   * @example approved
   */
  status?: "approved" | "pending" | "denied";
  /**
   * The registrant's ZIP or postal code.
   *
   * @example 94045
   */
  zip?: string;
  /**
   * @example 9tboDiHUQAeOnbmudzWa5g
   */
  id?: string;
  /**
   * The registrant's registration date and time.
   *
   * @format date-time
   * @example 2022-03-22T05:58:44Z
   */
  create_time?: string;
  /**
   * The URL with which the approved registrant can join the meeting.
   *
   * @format url
   * @example https://example.com/j/11111
   */
  join_url?: string;
  /**
   * The participant PIN code is used to authenticate audio participants before they join the meeting.
   *
   * @format int64
   * @example 380303
   */
  participant_pin_code?: number;
};

export type MeetingRegistrantGetVariables = {
  pathParams: MeetingRegistrantGetPathParams;
} & FetcherExtraProps;

/**
 * Retrieve details on a specific user who has registered for the meeting. A host or a user with administrative permissions can require [registration for Zoom meetings](https://support.zoom.us/hc/en-us/articles/211579443-Registration-for-Meetings).
 *
 * **Prerequisites:**
 * * The account must have a Meeting plan
 *
 * **[Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `meeting:read:admin`,`meeting:read`
 *
 * **[Granular Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `meeting:read:registrant`,`meeting:read:registrant:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
 */
export const meetingRegistrantGet = (
  variables: MeetingRegistrantGetVariables,
  signal?: AbortSignal,
) =>
  fetch<
    MeetingRegistrantGetResponse,
    MeetingRegistrantGetError,
    undefined,
    {},
    {},
    MeetingRegistrantGetPathParams
  >({
    url: "/meetings/{meetingId}/registrants/{registrantId}",
    method: "get",
    ...variables,
    signal,
  });

export type MeetingregistrantdeletePathParams = {
  /**
   * The meeting ID.
   *
   * @example 91498058927
   */
  meetingId: number;
  /**
   * The meeting registrant ID.
   *
   * @example 9tboDiHUQAeOnbmudzWa5g
   */
  registrantId: string;
};

export type MeetingregistrantdeleteQueryParams = {
  /**
   * The meeting occurrence ID.
   *
   * @example approved
   */
  occurrence_id?: string;
};

export type MeetingregistrantdeleteError = Fetcher.ErrorWrapper<undefined>;

export type MeetingregistrantdeleteVariables = {
  pathParams: MeetingregistrantdeletePathParams;
  queryParams?: MeetingregistrantdeleteQueryParams;
} & FetcherExtraProps;

/**
 * Delete a meeting registrant.
 *
 * **Prerequisites**:
 * * Host user type must be Pro or higher plan.
 * * Registration must be enabled for the meeting.
 * * For recurring meetings:
 *   * The `registration_type` must be 2 or 3 to require the `occurrence_id` field.
 *   * If the `registration_type` is 1, the `occurrence_id` is not needed, as registrants can attend any occurrence.
 *
 * **[Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `meeting:write:admin`,`meeting:write`
 *
 * **[Granular Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `meeting:delete:registrant`,`meeting:delete:registrant:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
 */
export const meetingregistrantdelete = (
  variables: MeetingregistrantdeleteVariables,
  signal?: AbortSignal,
) =>
  fetch<
    undefined,
    MeetingregistrantdeleteError,
    undefined,
    {},
    MeetingregistrantdeleteQueryParams,
    MeetingregistrantdeletePathParams
  >({
    url: "/meetings/{meetingId}/registrants/{registrantId}",
    method: "delete",
    ...variables,
    signal,
  });

export type GetSipDialingWithPasscodePathParams = {
  /**
   * The meeting's ID.
   *
   *  When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits.
   *
   * @format int64
   * @example 85746065
   */
  meetingId: number;
};

export type GetSipDialingWithPasscodeError = Fetcher.ErrorWrapper<undefined>;

export type GetSipDialingWithPasscodeResponse = {
  /**
   * The meeting's encoded SIP URI.
   *
   * @example 9678722567.xxxx....30qonrvgy@zoomcrc.com
   */
  sip_dialing?: string;
  /**
   * Whether the API caller has a CRC (Conference Room Connector) plan.
   *
   * @example true
   */
  paid_crc_plan_participant?: boolean;
  /**
   * This value identifies the meeting participant. It is automatically embedded in the SIP URI if the API caller has a CRC (Conference Room Connector) plan.
   *
   * @example 30qonrvgy
   */
  participant_identifier_code?: string;
  /**
   * The number of seconds the encoded SIP URI is valid before it expires.
   *
   * @format int64
   * @example 7200
   */
  expire_in?: number;
};

export type GetSipDialingWithPasscodeRequestBody = {
  /**
   * If customers desire that a passcode be embedded in the SIP URI dial string, they must supply the passcode. Zoom will not validate the passcode.
   *
   * @example xxxx
   */
  passcode?: string;
};

export type GetSipDialingWithPasscodeVariables = {
  body?: GetSipDialingWithPasscodeRequestBody;
  pathParams: GetSipDialingWithPasscodePathParams;
} & FetcherExtraProps;

/**
 * Get a meeting's SIP URI. The URI consists of the meeting ID, and may include the user-supplied passcode and participant identifier code. The API return data also includes additional fields to indicate whether the API caller has a valid Cloud Room Connector subscription, the participant identifier code from the URI, and the SIP URI validity period in seconds.
 *
 * **Prerequisites**:
 * * The SIP URI is valid for 2 hours, or 7200 seconds, by default. After this period, the URI will expire and the API must be called again to retrieve a new one.
 *
 * **[Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `meeting:write:sip_dialing`,`meeting:write:admin:sip_dialing`
 *
 * **[Granular Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `meeting:write:sip_dialing`,`meeting:write:sip_dialing:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
 */
export const getSipDialingWithPasscode = (
  variables: GetSipDialingWithPasscodeVariables,
  signal?: AbortSignal,
) =>
  fetch<
    GetSipDialingWithPasscodeResponse,
    GetSipDialingWithPasscodeError,
    GetSipDialingWithPasscodeRequestBody,
    {},
    {},
    GetSipDialingWithPasscodePathParams
  >({
    url: "/meetings/{meetingId}/sip_dialing",
    method: "post",
    ...variables,
    signal,
  });

export type MeetingStatusPathParams = {
  /**
   * The meeting's ID.
   *
   *  When storing this value in your database, you must store it as a `long` format integer and not an integer. Meeting IDs can exceed 10 digits.
   *
   * @format int64
   * @example 85746065
   */
  meetingId: number;
};

export type MeetingStatusError = Fetcher.ErrorWrapper<undefined>;

export type MeetingStatusRequestBody = {
  /**
   * `end` - End a meeting.
   *
   * `recover` - [Recover](https://support.zoom.us/hc/en-us/articles/360038297111-Recover-a-deleted-meeting) a deleted meeting.
   *
   * @example recover
   */
  action?: "end" | "recover";
};

export type MeetingStatusVariables = {
  body?: MeetingStatusRequestBody;
  pathParams: MeetingStatusPathParams;
} & FetcherExtraProps;

/**
 * Update the status of a meeting.
 *
 * **Prerequisites**:
 * * Host user must have a Zoom Meetings Basic license or higher.
 *
 * **[Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `meeting:write:admin`,`meeting:write`
 *
 * **[Granular Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `meeting:update:status`,`meeting:update:status:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
 */
export const meetingStatus = (
  variables: MeetingStatusVariables,
  signal?: AbortSignal,
) =>
  fetch<
    undefined,
    MeetingStatusError,
    MeetingStatusRequestBody,
    {},
    {},
    MeetingStatusPathParams
  >({
    url: "/meetings/{meetingId}/status",
    method: "put",
    ...variables,
    signal,
  });

export type MeetingSurveyGetPathParams = {
  /**
   * The meeting's ID.
   *
   *  When storing this value in your database, store it as a long-format integer and **not** a simple integer. Meeting IDs can be more than 10 digits.
   *
   * @format int64
   * @example 85746065
   */
  meetingId: number;
};

export type MeetingSurveyGetError = Fetcher.ErrorWrapper<undefined>;

export type MeetingSurveyGetResponse = {
  /**
   * Information about the customized meeting survey.
   */
  custom_survey?: {
    /**
     * The survey's title, up to 64 characters.
     *
     * @maxLength 64
     * @example Learn something new
     */
    title?: string;
    /**
     * Allow participants to anonymously answer survey questions.
     *
     *  This value defaults to `true`.
     *
     * @example false
     * @default false
     */
    anonymous?: boolean;
    /**
     * Whether to display the number in the question name.
     *
     *  This value defaults to `true`.
     *
     * @example false
     * @default false
     */
    numbered_questions?: boolean;
    /**
     * Whether to display the question type in the question name.
     *
     *  This value defaults to `false`.
     *
     * @example false
     * @default false
     */
    show_question_type?: boolean;
    /**
     * The survey's feedback, up to 320 characters.
     *
     *  This value defaults to `Thank you so much for taking the time to complete the survey. Your feedback really makes a difference.`.
     *
     * @maxLength 320
     * @example Thank you so much for taking the time to complete the survey. Your feedback really makes a difference.
     */
    feedback?: string;
    /**
     * Information about the meeting survey's questions.
     *
     * @maxItems 100
     * @minItems 1
     */
    questions?: {
      /**
       * The survey question, up to 420 characters.
       *
       * @example How useful was this meeting?
       */
      name?: string;
      /**
       * The survey's question and answer type.
       * * `single` - Single choice.
       * * `multiple` - Multiple choice.
       * * `matching` - Matching.
       * * `rank_order` - Rank order
       * * `short_answer` - Short answer
       * * `long_answer` - Long answer.
       * * `fill_in_the_blank` - Fill in the blank
       * * `rating_scale` - Rating scale.
       *
       * @example single
       */
      type?:
        | "single"
        | "multiple"
        | "matching"
        | "rank_order"
        | "short_answer"
        | "long_answer"
        | "fill_in_the_blank"
        | "rating_scale";
      /**
       * Whether participants must answer the question.
       * * `true` - The participant must answer the question.
       * * `false` - The participant does not need to answer the question.
       *
       *  This value defaults to `false`.
       *
       * @example false
       * @default false
       */
      answer_required?: boolean;
      /**
       * Whether to display the radio selection as a drop-down box.
       * * `true` - Show as a drop-down box.
       * * `false` - Do not show as a drop-down box.
       *
       *  This value defaults to `false`.
       *
       * @example false
       * @default false
       */
      show_as_dropdown?: boolean;
      /**
       * The survey question's available answers. This field requires a **minimum** of two answers.
       *
       * * For `single` and `multiple` questions, you can only provide a maximum of 50 answers.
       * * For `matching` polls, you can only provide a maximum of 16 answers.
       * * For `rank_order` polls, you can only provide a maximum of seven answers.
       *
       * @minItems 2
       */
      answers?: string[];
      /**
       * Information about the prompt questions. This field only applies to `matching` and `rank_order` questions. You **must** provide a minimum of two prompts, up to a maximum of 10 prompts.
       *
       * @maxItems 10
       * @minItems 2
       */
      prompts?: {
        /**
         * The question prompt's title.
         *
         * @maxLength 200
         * @example How are you?
         */
        prompt_question?: string;
      }[];
      /**
       * The allowed minimum number of characters. This field only applies to `short_answer` and `long_answer` questions. You must provide at least a **one** character minimum value.
       *
       * @minimum 1
       * @example 1
       */
      answer_min_character?: number;
      /**
       * The allowed maximum number of characters. This field only applies to `short_answer` and `long_answer` questions.
       * * For `short_answer` question, a maximum of 500 characters.
       * * For `long_answer` question, a maximum of 2,000 characters.
       *
       * @example 200
       */
      answer_max_character?: number;
      /**
       * The rating scale's minimum value. This value cannot be less than zero.
       *
       *  This field only applies to the `rating_scale` survey.
       *
       * @minimum 0
       * @example 1
       */
      rating_min_value?: number;
      /**
       * The rating scale's maximum value, up to a maximum value of 10.
       *
       *  This field only applies to the `rating_scale` survey.
       *
       * @maximum 10
       * @example 4
       */
      rating_max_value?: number;
      /**
       * The low score label used for the `rating_min_value` field, up to 50 characters.
       *
       *  This field only applies to the `rating_scale` survey.
       *
       * @maxLength 50
       * @example Not likely
       */
      rating_min_label?: string;
      /**
       * The high score label used for the `rating_max_value` field, up to 50 characters.
       *
       *  This field only applies to the `rating_scale` survey.
       *
       * @maxLength 50
       * @example Extremely Likely
       */
      rating_max_label?: string;
    }[];
  };
  /**
   * Whether the **Show in the browser when the meeting ends** option is enabled.
   * * `true` - Enabled.
   * * `false` - Disabled.
   *
   *  This value defaults to `true`.
   *
   * @example true
   * @default true
   */
  show_in_the_browser?: boolean;
  /**
   * The link to the third party meeting survey.
   *
   * @maxLength 64
   * @example https://example.com
   */
  third_party_survey?: string;
};

export type MeetingSurveyGetVariables = {
  pathParams: MeetingSurveyGetPathParams;
} & FetcherExtraProps;

/**
 * Display information about a [meeting survey](https://support.zoom.us/hc/en-us/articles/4404969060621-Post-meeting-survey-and-reporting).  **Prerequisites:** * The host has a **Pro** license. * The [**Meeting Survey**](https://support.zoom.us/hc/en-us/articles/4404939095053-Enabling-meeting-surveys) feature is enabled on the host's account. * The meeting must be a scheduled meeting. Instant meetings do not have survey features enabled.
 *
 * **[Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `meeting:read`,`meeting:read:admin`
 *
 * **[Granular Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `meeting:read:survey`,`meeting:read:survey:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
 */
export const meetingSurveyGet = (
  variables: MeetingSurveyGetVariables,
  signal?: AbortSignal,
) =>
  fetch<
    MeetingSurveyGetResponse,
    MeetingSurveyGetError,
    undefined,
    {},
    {},
    MeetingSurveyGetPathParams
  >({
    url: "/meetings/{meetingId}/survey",
    method: "get",
    ...variables,
    signal,
  });

export type MeetingSurveyDeletePathParams = {
  /**
   * The meeting's ID.
   *
   *  When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits.
   *
   * @format int64
   * @example 85746065
   */
  meetingId: number;
};

export type MeetingSurveyDeleteError = Fetcher.ErrorWrapper<undefined>;

export type MeetingSurveyDeleteVariables = {
  pathParams: MeetingSurveyDeletePathParams;
} & FetcherExtraProps;

/**
 * Delete a [meeting survey](https://support.zoom.us/hc/en-us/articles/4404969060621-Post-meeting-survey-and-reporting).
 *
 *  **Prerequisites:**
 * * The host must be a **Pro** user type.
 * * The [**Meeting Survey**](https://support.zoom.us/hc/en-us/articles/4404939095053-Enabling-meeting-surveys) feature enabled in the host's account.
 * * The meeting must be a scheduled meeting. Instant meetings do not have survey features enabled.
 *
 * **[Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `meeting:write`,`meeting:write:admin`
 *
 * **[Granular Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `meeting:delete:survey`,`meeting:delete:survey:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
 */
export const meetingSurveyDelete = (
  variables: MeetingSurveyDeleteVariables,
  signal?: AbortSignal,
) =>
  fetch<
    undefined,
    MeetingSurveyDeleteError,
    undefined,
    {},
    {},
    MeetingSurveyDeletePathParams
  >({
    url: "/meetings/{meetingId}/survey",
    method: "delete",
    ...variables,
    signal,
  });

export type MeetingSurveyUpdatePathParams = {
  /**
   * The meeting's ID.
   *
   *  When storing this value in your database, store it as a long-format integer and **not** a simple integer. Meeting IDs can be over 10 digits.
   *
   * @format int64
   * @example 85746065
   */
  meetingId: number;
};

export type MeetingSurveyUpdateError = Fetcher.ErrorWrapper<undefined>;

export type MeetingSurveyUpdateRequestBody = {
  /**
   * Information about the customized meeting survey.
   */
  custom_survey?: {
    /**
     * The survey's title, up to 64 characters.
     *
     * @maxLength 64
     * @example Learn something new
     */
    title?: string;
    /**
     * Allow participants to anonymously answer survey questions.
     *
     *  This value defaults to `true`.
     *
     * @example false
     * @default false
     */
    anonymous?: boolean;
    /**
     * Whether to display the number in the question name.
     *
     *  This value defaults to `true`.
     *
     * @example false
     * @default false
     */
    numbered_questions?: boolean;
    /**
     * Whether to display the question type in the question name.
     *
     *  This value defaults to `false`.
     *
     * @example false
     * @default false
     */
    show_question_type?: boolean;
    /**
     * The survey's feedback, up to 320 characters.
     *
     *  This value defaults to `Thank you so much for taking the time to complete the survey. Your feedback really makes a difference.`.
     *
     * @maxLength 320
     * @example Thank you so much for taking the time to complete the survey. Your feedback really makes a difference.
     */
    feedback?: string;
    /**
     * Information about the meeting survey's questions.
     *
     * @maxItems 100
     * @minItems 1
     */
    questions?: {
      /**
       * The survey question, up to 420 characters.
       *
       * @example How useful was this meeting?
       */
      name?: string;
      /**
       * The survey's question and answer type.
       * * `single` - Single choice.
       * * `multiple` - Multiple choice.
       * * `matching` - Matching.
       * * `rank_order` - Rank order
       * * `short_answer` - Short answer
       * * `long_answer` - Long answer.
       * * `fill_in_the_blank` - Fill in the blank
       * * `rating_scale` - Rating scale.
       *
       * @example single
       */
      type?:
        | "single"
        | "multiple"
        | "matching"
        | "rank_order"
        | "short_answer"
        | "long_answer"
        | "fill_in_the_blank"
        | "rating_scale";
      /**
       * Whether participants must answer the question.
       * * `true` - The participant must answer the question.
       * * `false` - The participant does not need to answer the question.
       *
       *  This value defaults to `false`.
       *
       * @example false
       * @default false
       */
      answer_required?: boolean;
      /**
       * Whether to display the radio selection as a drop-down box.
       * * `true` - Show as a drop-down box.
       * * `false` - Do not show as a drop-down box.
       *
       *  This value defaults to `false`.
       *
       * @example false
       * @default false
       */
      show_as_dropdown?: boolean;
      /**
       * The survey question's available answers. This field requires a **minimum** of two answers.
       *
       * * For `single` and `multiple` questions, you can only provide a maximum of 50 answers.
       * * For `matching` polls, you can only provide a maximum of 16 answers.
       * * For `rank_order` polls, you can only provide a maximum of seven answers.
       *
       * @minItems 2
       */
      answers?: string[];
      /**
       * Information about the prompt questions. This field only applies to `matching` and `rank_order` questions. You **must** provide a minimum of two prompts, up to a maximum of 10 prompts.
       *
       * @maxItems 10
       * @minItems 2
       */
      prompts?: {
        /**
         * The question prompt's title.
         *
         * @maxLength 200
         * @example How are you?
         */
        prompt_question?: string;
      }[];
      /**
       * The allowed minimum number of characters. This field only applies to `short_answer` and `long_answer` questions. You must provide at least a **one** character minimum value.
       *
       * @minimum 1
       * @example 1
       */
      answer_min_character?: number;
      /**
       * The allowed maximum number of characters. This field only applies to `short_answer` and `long_answer` questions.
       * * For `short_answer` question, a maximum of 500 characters.
       * * For `long_answer` question, a maximum of 2,000 characters.
       *
       * @example 200
       */
      answer_max_character?: number;
      /**
       * The rating scale's minimum value. This value cannot be less than zero.
       *
       *  This field only applies to the `rating_scale` survey.
       *
       * @minimum 0
       * @example 1
       */
      rating_min_value?: number;
      /**
       * The rating scale's maximum value, up to a maximum value of 10.
       *
       *  This field only applies to the `rating_scale` survey.
       *
       * @maximum 10
       * @example 4
       */
      rating_max_value?: number;
      /**
       * The low score label used for the `rating_min_value` field, up to 50 characters.
       *
       *  This field only applies to the `rating_scale` survey.
       *
       * @maxLength 50
       * @example Not likely
       */
      rating_min_label?: string;
      /**
       * The high score label used for the `rating_max_value` field, up to 50 characters.
       *
       *  This field only applies to the `rating_scale` survey.
       *
       * @maxLength 50
       * @example Extremely Likely
       */
      rating_max_label?: string;
    }[];
  };
  /**
   * Whether the **Show in the browser when the meeting ends** option is enabled.
   * * `true` - Enabled.
   * * `false` - Disabled.
   *
   *  This value defaults to `true`.
   *
   * @example true
   * @default true
   */
  show_in_the_browser?: boolean;
  /**
   * The link to the third party meeting survey.
   *
   * @maxLength 64
   * @example https://example.com
   */
  third_party_survey?: string;
};

export type MeetingSurveyUpdateVariables = {
  body?: MeetingSurveyUpdateRequestBody;
  pathParams: MeetingSurveyUpdatePathParams;
} & FetcherExtraProps;

/**
 * Update a [meeting survey](https://support.zoom.us/hc/en-us/articles/4404969060621-Post-meeting-survey-and-reporting).  **Prerequisites:** * The host must be a **Pro** user type. * The [**Meeting Survey**](https://support.zoom.us/hc/en-us/articles/4404939095053-Enabling-meeting-surveys) feature is enabled in the host's account. * The meeting must be a scheduled meeting. Instant meetings do not have survey features enabled.
 *
 * **[Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `meeting:write`,`meeting:write:admin`
 *
 * **[Granular Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `meeting:update:survey`,`meeting:update:survey:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
 */
export const meetingSurveyUpdate = (
  variables: MeetingSurveyUpdateVariables,
  signal?: AbortSignal,
) =>
  fetch<
    undefined,
    MeetingSurveyUpdateError,
    MeetingSurveyUpdateRequestBody,
    {},
    {},
    MeetingSurveyUpdatePathParams
  >({
    url: "/meetings/{meetingId}/survey",
    method: "patch",
    ...variables,
    signal,
  });

export type MeetingTokenPathParams = {
  /**
   * The meeting's ID.
   *
   *  When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits.
   *
   * @format int64
   * @example 85746065
   */
  meetingId: number;
};

export type MeetingTokenQueryParams = {
  /**
   * The meeting token type.
   * * `closed_caption_token` - The third-party closed caption API token.
   *
   * This defaults to `closed_caption_token`.
   *
   * @example closed_caption_token
   * @default closed_caption_token
   */
  type?: "closed_caption_token";
};

export type MeetingTokenError = Fetcher.ErrorWrapper<undefined>;

export type MeetingTokenResponse = {
  /**
   * The generated meeting token.
   *
   * @example https://example.com/closedcaption?id=200610693&ns=GZHkEA==&expire=86400&spparams=id%2Cns%2Cexpire&signature=nYtXJqRKCW
   */
  token?: string;
};

export type MeetingTokenVariables = {
  pathParams: MeetingTokenPathParams;
  queryParams?: MeetingTokenQueryParams;
} & FetcherExtraProps;

/**
 * Get a meeting's [closed caption token (caption URL)](https://support.zoom.us/hc/en-us/articles/115002212983-Using-a-third-party-closed-captioning-service). This token lets you use a third-party service to stream text to their closed captioning software to the Zoom meeting.
 *
 * **Prerequisites:**
 * * The **Closed captioning** setting enabled in the Zoom web portal.
 * * The **Allow use of caption API Token to integrate with third-party closed captioning services** setting enabled.
 *
 * **[Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `meeting:read`,`meeting:read:admin`
 *
 * **[Granular Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `meeting:read:token`,`meeting:read:token:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
 */
export const meetingToken = (
  variables: MeetingTokenVariables,
  signal?: AbortSignal,
) =>
  fetch<
    MeetingTokenResponse,
    MeetingTokenError,
    undefined,
    {},
    MeetingTokenQueryParams,
    MeetingTokenPathParams
  >({
    url: "/meetings/{meetingId}/token",
    method: "get",
    ...variables,
    signal,
  });

export type PastMeetingDetailsPathParams = {
  /**
   * The meeting's ID or universally unique ID (UUID).
   * * If you provide a meeting ID, the API will return a response for the latest meeting instance.
   * * If you provide a meeting UUID that begins with a `/` character or contains the `//` characters, you **must** [double encode](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis/#meeting-id-and-uuid) the meeting UUID before making an API request.
   */
  meetingId: string;
};

export type PastMeetingDetailsError = Fetcher.ErrorWrapper<undefined>;

export type PastMeetingDetailsResponse = {
  /**
   * The [meeting ID](https://support.zoom.us/hc/en-us/articles/201362373-What-is-a-Meeting-ID).
   *
   * @format int64
   * @example 5638296721
   */
  id?: number;
  /**
   * The meeting's UUID. You must [double encode](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis/#meeting-id-and-uuid) this value if the meeting UUID begins with a `/` character or contains the `//` character.
   *
   * @example 4444AAAiAAAAAiAiAiiAii==
   */
  uuid?: string;
  /**
   * The meeting's duration, in minutes.
   *
   * @example 60
   */
  duration?: number;
  /**
   * The meeting's start date and time.
   *
   * @format date-time
   * @example 2021-07-13T21:44:51Z
   */
  start_time?: string;
  /**
   * The meeting's end date and time.
   *
   * @format date-time
   * @example 2021-07-13T23:00:51Z
   */
  end_time?: string;
  /**
   * The host's ID.
   *
   * @example x1yCzABCDEfg23HiJKl4mN
   */
  host_id?: string;
  /**
   * The meeting host's department.
   *
   * @example Developers
   */
  dept?: string;
  /**
   * The number of meeting participants.
   *
   * @example 2
   */
  participants_count?: number;
  /**
   * Whether the meeting was created directly through Zoom or via an API request:
   * * If the meeting was created via an OAuth app, this field returns the OAuth app's name.
   * * If the meeting was created via JWT or the Zoom Web Portal, this returns the `Zoom` value.
   *
   * @example Zoom
   */
  source?: string;
  /**
   * The meeting's topic.
   *
   * @example My Meeting
   */
  topic?: string;
  /**
   * The total number of minutes attended by the meeting's host and participants.
   *
   * @example 55
   */
  total_minutes?: number;
  /**
   * The meeting type.
   * * `0` - A prescheduled meeting.
   * * `1` - An instant meeting.
   * * `2` - A scheduled meeting.
   * * `3` - A recurring meeting with no fixed time.
   * * `4` - A [personal meeting room](https://support.zoom.us/hc/en-us/articles/201362843).
   * * `7` - A [PAC (personal audio conference)](https://support.zoom.us/hc/en-us/articles/205172455-Hosting-a-Personal-Audio-Conference-PAC-meeting) meeting.
   * * `8` - A recurring meeting with a fixed time.
   *
   * @example 1
   */
  type?: 0 | 1 | 2 | 3 | 4 | 7 | 8;
  /**
   * The user's email address.
   *
   * @format email
   * @example jchill@example.com
   */
  user_email?: string;
  /**
   * The user's display name.
   *
   * @example Jill Chill
   */
  user_name?: string;
};

export type PastMeetingDetailsVariables = {
  pathParams: PastMeetingDetailsPathParams;
} & FetcherExtraProps;

/**
 * Get information about a past meeting.
 *
 * **Prerequisites**:
 * * The meeting must have ended before you can retrieve the data.
 * * You cannot access a meeting that occurred more than one year ago.
 *
 * **[Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `meeting:read:admin`,`meeting:read`
 *
 * **[Granular Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `meeting:read:past_meeting`,`meeting:read:past_meeting:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
 */
export const pastMeetingDetails = (
  variables: PastMeetingDetailsVariables,
  signal?: AbortSignal,
) =>
  fetch<
    PastMeetingDetailsResponse,
    PastMeetingDetailsError,
    undefined,
    {},
    {},
    PastMeetingDetailsPathParams
  >({ url: "/past_meetings/{meetingId}", method: "get", ...variables, signal });

export type PastMeetingsPathParams = {
  /**
   * The past meeting's ID.
   *
   * @format int64
   * @example 93398114182
   */
  meetingId: number;
};

export type PastMeetingsError = Fetcher.ErrorWrapper<undefined>;

export type PastMeetingsResponse = {
  /**
   * List of ended meeting instances.
   */
  meetings?: {
    /**
     * Start time
     *
     * @format date-time
     * @example 2022-03-26T05:37:59Z
     */
    start_time?: string;
    /**
     * Meeting UUID. Unique meeting ID. Each meeting instance will generate its own Meeting UUID (i.e., after a meeting ends, a new UUID will be generated for the next instance of the meeting). [Double encode](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis/#meeting-id-and-uuid) your UUID when using it for API calls if the UUID begins with a '/'or contains '//' in it.
     *
     * @example Vg8IdgluR5WDeWIkpJlElQ==
     */
    uuid?: string;
  }[];
};

export type PastMeetingsVariables = {
  pathParams: PastMeetingsPathParams;
} & FetcherExtraProps;

/**
 * Return a list of past meeting instances.
 *
 * **Prerequisites**
 * * The meeting must have already occurred at least once. This endpoint only returns instances of meetings that have ended.
 * * You cannot retrieve instances for meetings that occurred more than 15 months ago.
 *
 * **[Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `meeting:read:admin`,`meeting:read`
 *
 * **[Granular Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `meeting:read:list_past_instances`,`meeting:read:list_past_instances:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
 */
export const pastMeetings = (
  variables: PastMeetingsVariables,
  signal?: AbortSignal,
) =>
  fetch<
    PastMeetingsResponse,
    PastMeetingsError,
    undefined,
    {},
    {},
    PastMeetingsPathParams
  >({
    url: "/past_meetings/{meetingId}/instances",
    method: "get",
    ...variables,
    signal,
  });

export type PastMeetingParticipantsPathParams = {
  /**
   * The meeting's ID or universally unique ID (UUID).
   * * If you provide a meeting ID, the API will return a response for the latest meeting instance.
   * * If you provide a meeting UUID that begins with a `/` character or contains the `//` characters, you **must** double-encode the meeting UUID before making an API request.
   *
   * @example ABCDE12345
   */
  meetingId: string;
};

export type PastMeetingParticipantsQueryParams = {
  /**
   * The number of records returned within a single API call.
   *
   * @maximum 300
   * @example 30
   * @default 30
   */
  page_size?: number;
  /**
   * Use the next page token to paginate through large result sets. A next page token is returned whenever the set of available results exceeds the current page size. This token's expiration period is 15 minutes.
   *
   * @example IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2
   */
  next_page_token?: string;
};

export type PastMeetingParticipantsError = Fetcher.ErrorWrapper<undefined>;

export type PastMeetingParticipantsResponse = {
  /**
   * The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
   *
   * @example Tva2CuIdTgsv8wAnhyAdU3m06Y2HuLQtlh3
   */
  next_page_token?: string;
  /**
   * The number of pages returned for the request made.
   *
   * @example 1
   */
  page_count?: number;
  /**
   * The number of records returned within a single API call.
   *
   * @maximum 300
   * @example 30
   * @default 30
   */
  page_size?: number;
  /**
   * The number of all records available across pages.
   *
   * @example 1
   */
  total_records?: number;
  /**
   * Array of meeting participant objects.
   */
  participants?: {
    /**
     * Universally unique identifier of the Participant. It is the same as the User ID of the participant if the participant joins the meeting by logging into Zoom. If the participant joins the meeting without logging in, the value of this field will be blank.
     *
     * @example 30R7kT7bTIKSNUFEuH_Qlg
     */
    id?: string;
    /**
     * Participant display name.
     *
     * @example Jill Chill
     */
    name?: string;
    /**
     * Participant ID. This is a unique ID assigned to the participant joining a meeting and is valid for that meeting only.
     *
     * @example 27423744
     */
    user_id?: string;
    /**
     * The participant's unique registrant ID. This field only returns if you pass the `registrant_id` value for the `include_fields` query parameter.
     *
     * This field does not return if the `type` query parameter is the `live` value.
     *
     * @example _f08HhPJS82MIVLuuFaJPg
     */
    registrant_id?: string;
    /**
     * Email address of the user. If the participant is **not** part of the host's account, this returns an empty string value, with some exceptions. See [Email address display rules](https://developers.zoom.us/docs/api/rest/using-zoom-apis/#email-address-display-rules) for details.
     *
     * @example jchill@example.com
     */
    user_email?: string;
    /**
     * Participant join time.
     *
     * @format date-time
     * @example 2022-03-23T06:58:09Z
     */
    join_time?: string;
    /**
     * Participant leave time.
     *
     * @format date-time
     * @example 2022-03-23T07:02:28Z
     */
    leave_time?: string;
    /**
     * Participant duration, in seconds, calculated by subtracting the `leave_time` from the `join_time` for the `user_id`. If the participant leaves and rejoins the same meeting, they will be assigned a different `user_id` and Zoom displays their new duration in a separate object. Note that because of this, the duration may not reflect the total time the user was in the meeting.
     *
     * @example 259
     */
    duration?: number;
    /**
     * Indicates if failover happened during the meeting.
     *
     * @example false
     */
    failover?: boolean;
    /**
     * The participant's status.
     * * `in_meeting` - In a meeting.
     * * `in_waiting_room` - In a waiting room.
     *
     * @example in_meeting
     */
    status?: "in_meeting" | "in_waiting_room";
    /**
     * Whether the meeting participant is an internal user.
     *
     * @example false
     * @default false
     */
    internal_user?: boolean;
  }[];
};

export type PastMeetingParticipantsVariables = {
  pathParams: PastMeetingParticipantsPathParams;
  queryParams?: PastMeetingParticipantsQueryParams;
} & FetcherExtraProps;

/**
 * Retrieve information on participants from a past meeting. Note the API doesn't return results if there's only one participant in a meeting.
 *
 *
 * **Prerequisites:**
 *
 * * Paid account on a Pro or higher plan.
 *
 *
 *
 *    **Note**: Please double encode your UUID when using this API if the UUID begins with a '/'or contains '//' in it.
 *
 * **NOTE:** After meetings with hundreds of participants, the attendance data takes some time to be generated. If you receive a duration of 0 for users' time in the meeting, you may have called the endpoint before the data is fully processed. Implement a short delay or retry logic before fetching participant data.
 *
 * **[Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `meeting:read:admin`,`meeting:read`
 *
 * **[Granular Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `meeting:read:list_past_participants`,`meeting:read:list_past_participants:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
 */
export const pastMeetingParticipants = (
  variables: PastMeetingParticipantsVariables,
  signal?: AbortSignal,
) =>
  fetch<
    PastMeetingParticipantsResponse,
    PastMeetingParticipantsError,
    undefined,
    {},
    PastMeetingParticipantsQueryParams,
    PastMeetingParticipantsPathParams
  >({
    url: "/past_meetings/{meetingId}/participants",
    method: "get",
    ...variables,
    signal,
  });

export type ListPastMeetingPollsPathParams = {
  /**
   * The meeting's ID or universally unique ID (UUID).
   * * If you provide a meeting ID, the API will return a response for the latest meeting instance.
   * * If you provide a meeting UUID that begins with a `/` character or contains the `//` characters, you **must** double-encode the meeting UUID before making an API request.
   */
  meetingId: string;
};

export type ListPastMeetingPollsError = Fetcher.ErrorWrapper<undefined>;

export type ListPastMeetingPollsResponse = {
  /**
   * [Meeting ID](https://support.zoom.us/hc/en-us/articles/201362373-What-is-a-Meeting-ID-): Unique identifier of the meeting in **long** format(represented as int64 data type in JSON), also known as the meeting number.
   *
   * @format int64
   * @example 93398114182
   */
  id?: number;
  questions?: {
    /**
     * Email address of the user who submitted answers to the poll. If the user is **not** part of the host's account, this returns an empty string value, with some exceptions. See [Email address display rules](https://developers.zoom.us/docs/api/rest/using-zoom-apis/#email-address-display-rules) for details.
     *
     * @example jchill@example.com
     */
    email?: string;
    /**
     * Name of the user who submitted answers to the poll. If `anonymous` option is enabled for a poll, the participant's polling information will be kept anonymous and the value of `name` field will be `Anonymous Attendee`.
     *
     * @example Jill Chill
     */
    name?: string;
    question_details?: {
      /**
       * Answer submitted by the user.
       *
       * @example Good
       */
      answer?: string;
      /**
       * Date and time at which the answer to the poll was submitted.
       *
       * @format date-time
       * @example 2022-03-26T05:37:59Z
       */
      date_time?: string;
      /**
       * Unique identifier of the poll.
       *
       * @example QalIoKWLTJehBJ8e1xRrbQ
       */
      polling_id?: string;
      /**
       * Question asked during the poll.
       *
       * @example How are you?
       */
      question?: string;
    }[];
  }[];
  /**
   * The start time of the meeting.
   *
   * @format date-time
   * @example 2022-03-26T05:37:59Z
   */
  start_time?: string;
  /**
   * Meeting UUID.
   *
   * @example Vg8IdgluR5WDeWIkpJlElQ==
   */
  uuid?: string;
};

export type ListPastMeetingPollsVariables = {
  pathParams: ListPastMeetingPollsPathParams;
} & FetcherExtraProps;

/**
 * [Polls](https://support.zoom.us/hc/en-us/articles/213756303-Polling-for-Meetings) allow the meeting host to survey attendees. List poll results of a meeting.
 *
 *
 *
 * **Prerequisites**:
 *
 * * Host user type must be **Pro**.
 * * Meeting must be a scheduled meeting. Instant meetings do not have polling features enabled.
 *
 * **[Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `meeting:read:admin`,`meeting:read`
 *
 * **[Granular Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `meeting:read:list_poll_results`,`meeting:read:list_poll_results:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
 */
export const listPastMeetingPolls = (
  variables: ListPastMeetingPollsVariables,
  signal?: AbortSignal,
) =>
  fetch<
    ListPastMeetingPollsResponse,
    ListPastMeetingPollsError,
    undefined,
    {},
    {},
    ListPastMeetingPollsPathParams
  >({
    url: "/past_meetings/{meetingId}/polls",
    method: "get",
    ...variables,
    signal,
  });

export type ListPastMeetingQAPathParams = {
  /**
   * The meeting's ID or universally unique ID (UUID).
   * * If you provide a meeting ID, the API will return a response for the latest meeting instance.
   * * If you provide a meeting UUID that begins with a `/` character or contains the `//` characters, you **must** double-encode the meeting UUID before making an API request.
   */
  meetingId: string;
};

export type ListPastMeetingQAError = Fetcher.ErrorWrapper<undefined>;

export type ListPastMeetingQAResponse = {
  /**
   * [Meeting ID](https://support.zoom.us/hc/en-us/articles/201362373-What-is-a-Meeting-ID-): Unique identifier of the meeting in **long** format, represented as int64 data type in JSON, also known as the meeting number.
   *
   * @format int64
   * @example 95204914252
   */
  id?: number;
  questions?: {
    /**
     * The user's email address. If the user is **not** part of the host's account, this returns an empty string value, with some exceptions. See [Email address display rules](https://developers.zoom.us/docs/api/rest/using-zoom-apis/#email-address-display-rules) for details.
     *
     * @example jchill@example.com
     */
    email?: string;
    /**
     * The user's name. If `anonymous` option is enabled for the Q&amp;A, the participant's information is be kept anonymous and the value of `name` field is `Anonymous Attendee`.
     *
     * @example Jill Chill
     */
    name?: string;
    question_details?: {
      /**
       * An answer submitted for the question. The value is 'live answered' if this is a live answer.
       *
       * @example Good
       */
      answer?: string;
      /**
       * A question asked during the Q&amp;A.
       *
       * @example How are you?
       */
      question?: string;
    }[];
  }[];
  /**
   * The meeting's start time.
   *
   * @format date-time
   * @example 2022-03-26T06:44:14Z
   */
  start_time?: string;
  /**
   * Meeting UUID.
   *
   * @example Bznyg8KZTdCVbQxvS/oZ7w==
   */
  uuid?: string;
};

export type ListPastMeetingQAVariables = {
  pathParams: ListPastMeetingQAPathParams;
} & FetcherExtraProps;

/**
 * List Q&amp;A of a specific meeting.
 *
 * The question &amp; answer (Q&amp;A) feature for Zoom Meetings lets attendees ask questions during a meeting and lets the other attendees answer those questions.
 *
 * **Prerequisites**:
 * * Q&A must be enabled for the meeting.
 * * The meeting must have ended before you can retrieve the data.
 * * You cannot retrieve Q&A data for meetings that occurred more than 15 months ago.
 *
 * **[Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `meeting:read:admin`,`meeting:read`
 *
 * **[Granular Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `meeting:read:past_qa`,`meeting:read:past_qa:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
 */
export const listPastMeetingQA = (
  variables: ListPastMeetingQAVariables,
  signal?: AbortSignal,
) =>
  fetch<
    ListPastMeetingQAResponse,
    ListPastMeetingQAError,
    undefined,
    {},
    {},
    ListPastMeetingQAPathParams
  >({
    url: "/past_meetings/{meetingId}/qa",
    method: "get",
    ...variables,
    signal,
  });

export type ListMeetingTemplatesPathParams = {
  /**
   * The user ID retrievable from the [List users](/api-reference/zoom-api/methods#operation/users) API.
   *
   * @example 30R7kT7bTIKSNUFEuH_Qlg
   */
  userId: string;
};

export type ListMeetingTemplatesError = Fetcher.ErrorWrapper<undefined>;

export type ListMeetingTemplatesResponse = {
  templates?: {
    /**
     * The template ID.
     *
     * @example AdxbhxCzKgSiWAw
     */
    id?: string;
    /**
     * The template name.
     *
     * @example My meeting template
     */
    name?: string;
    /**
     * The template type:
     *
     * `1`: Meeting template
     *
     * `2`: Admin meeting template
     *
     * @example 1
     */
    type?: number;
  }[];
  /**
   * Total records found for this request.
   *
   * @example 1
   */
  total_records?: number;
};

export type ListMeetingTemplatesVariables = {
  pathParams: ListMeetingTemplatesPathParams;
} & FetcherExtraProps;

/**
 * List available [meeting templates](https://support.zoom.us/hc/en-us/articles/360036559151-Meeting-templates) for a user. For user-level apps, pass [the `me` value](/docs/api/rest/using-zoom-apis/#the-me-keyword) instead of the `userId` parameter.
 *
 * **Prerequisites**:
 * * Host user must have a Zoom Meetings Basic license or higher.
 *
 * **[Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `meeting:read`,`meeting:read:admin`
 *
 * **[Granular Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `meeting:read:list_templates`,`meeting:read:list_templates:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
 */
export const listMeetingTemplates = (
  variables: ListMeetingTemplatesVariables,
  signal?: AbortSignal,
) =>
  fetch<
    ListMeetingTemplatesResponse,
    ListMeetingTemplatesError,
    undefined,
    {},
    {},
    ListMeetingTemplatesPathParams
  >({
    url: "/users/{userId}/meeting_templates",
    method: "get",
    ...variables,
    signal,
  });

export type MeetingTemplateCreatePathParams = {
  /**
   * The user ID retrievable from the [List users](/docs/api/rest/reference/user/methods/#operation/users) API.
   *
   * @example 30R7kT7bTIKSNUFEuH_Qlg
   */
  userId: string;
};

export type MeetingTemplateCreateError = Fetcher.ErrorWrapper<undefined>;

export type MeetingTemplateCreateResponse = {
  /**
   * The template ID.
   *
   * @example AdxbhxCzKgSiWAw
   */
  id?: string;
  /**
   * The template name.
   *
   * @example My Meeting Template
   */
  name?: string;
};

export type MeetingTemplateCreateRequestBody = {
  /**
   * The meeting ID - the meeting number in long (int64) format.
   *
   * @format int64
   * @example 96172769962
   */
  meeting_id?: number;
  /**
   * The template name.
   *
   * @example My Meeting Template
   */
  name?: string;
  /**
   * If the field is set to `true`, the recurrence meeting template will be saved as the scheduled meeting.
   *
   * @example false
   * @default false
   */
  save_recurrence?: boolean;
  /**
   * Overwrite an existing meeting template if the template is created from same existing meeting.
   *
   * @example false
   * @default false
   */
  overwrite?: boolean;
};

export type MeetingTemplateCreateVariables = {
  body?: MeetingTemplateCreateRequestBody;
  pathParams: MeetingTemplateCreatePathParams;
} & FetcherExtraProps;

/**
 * Create a meeting template from an existing meeting.
 *
 * **Prerequisites**:
 * * Host user must have a Zoom Meetings Basic license or higher.
 * * You can only create up to 40 meeting templates.
 *
 * **[Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `meeting:write:admin`,`meeting:write`
 *
 * **[Granular Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `meeting:write:template`,`meeting:write:template:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
 */
export const meetingTemplateCreate = (
  variables: MeetingTemplateCreateVariables,
  signal?: AbortSignal,
) =>
  fetch<
    MeetingTemplateCreateResponse,
    MeetingTemplateCreateError,
    MeetingTemplateCreateRequestBody,
    {},
    {},
    MeetingTemplateCreatePathParams
  >({
    url: "/users/{userId}/meeting_templates",
    method: "post",
    ...variables,
    signal,
  });

export type MeetingsPathParams = {
  /**
   * The user's user ID or email address. For user-level apps, pass the `me` value.
   */
  userId: string;
};

export type MeetingsQueryParams = {
  /**
   * The type of meeting.
   * * `scheduled` - All valid previous (unexpired) meetings, live meetings, and upcoming scheduled meetings.
   * * `live` - All the ongoing meetings.
   * * `upcoming` - All upcoming meetings, including live meetings.
   * * `upcoming_meetings` - All upcoming meetings, including live meetings.
   * * `previous_meetings` - All the previous meetings.
   *
   * @example scheduled
   * @default scheduled
   */
  type?:
    | "scheduled"
    | "live"
    | "upcoming"
    | "upcoming_meetings"
    | "previous_meetings";
  /**
   * The number of records returned within a single API call.
   *
   * @maximum 300
   * @example 30
   * @default 30
   */
  page_size?: number;
  /**
   * Use the next page token to paginate through large result sets. A next page token is returned whenever the set of available results exceeds the current page size. This token's expiration period is 15 minutes.
   *
   * @example IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2
   */
  next_page_token?: string;
  /**
   * The page number of the current page in the returned records.
   *
   * @example 1
   */
  page_number?: number;
  /**
   * The start date.
   *
   * @format date
   * @example 2023-01-01
   */
  from?: string;
  /**
   * The end date.
   *
   * @format date
   * @example 2023-01-16
   */
  to?: string;
  /**
   * The timezone to assign to the `from` and `to` value. For a list of supported timezones and their formats, see our [timezone list](https://developers.zoom.us/docs/api/rest/other-references/abbreviation-lists/#timezones).
   *
   * @example America/Los_Angeles
   */
  timezone?: string;
};

export type MeetingsError = Fetcher.ErrorWrapper<undefined>;

export type MeetingsResponse = {
  /**
   * Use the next page token to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. This token's expiration period is 15 minutes.
   *
   * @example Tva2CuIdTgsv8wAnhyAdU3m06Y2HuLQtlh3
   */
  next_page_token?: string;
  /**
   * The number of pages returned for the request made.
   *
   * @example 1
   */
  page_count?: number;
  /**
   * The page number of the current results.
   *
   * @example 1
   * @default 1
   */
  page_number?: number;
  /**
   * The number of records returned with a single API call.
   *
   * @maximum 300
   * @example 30
   * @default 30
   */
  page_size?: number;
  /**
   * The total number of all the records available across pages.
   *
   * @example 1
   */
  total_records?: number;
  /**
   * List of meeting objects.
   */
  meetings?: {
    /**
     * Meeting description. The length of agenda gets truncated to 250 characters when you list all of a user's meetings. To view a meeting's complete agenda, or to retrieve details for a single meeting, use the [**Get a meeting**](/docs/api-reference/zoom-api/methods#operation/meeting) API.
     *
     * @example My Meeting
     */
    agenda?: string;
    /**
     * Time of creation.
     *
     * @format date-time
     * @example 2022-03-23T05:31:16Z
     */
    created_at?: string;
    /**
     * Meeting duration.
     *
     * @example 60
     */
    duration?: number;
    /**
     * ID of the user who is set as the meeting's host.
     *
     * @example 30R7kT7bTIKSNUFEuH_Qlg
     */
    host_id?: string;
    /**
     * Meeting ID - also known as the meeting number in long (int64) format.
     *
     * @format int64
     * @example 97763643886
     */
    id?: number;
    /**
     * URL using which participants can join a meeting.
     *
     * @example https://example.com/j/11111
     */
    join_url?: string;
    /**
     * [Personal meeting ID](https://developers.zoom.us/docs/api/rest/using-zoom-apis/#understanding-personal-meeting-id-pmi). This field is only returned if PMI was used to schedule the meeting.
     *
     * @example 97891943927
     */
    pmi?: string;
    /**
     * Meeting start time.
     *
     * @format date-time
     * @example 2022-03-23T06:00:00Z
     */
    start_time?: string;
    /**
     * Timezone to format the meeting start time.
     *
     * @example America/Los_Angeles
     */
    timezone?: string;
    /**
     * Meeting topic.
     *
     * @example My Meeting
     */
    topic?: string;
    /**
     * Meeting types.
     *  `1` - Instant meeting.
     *  `2` - Scheduled meeting.
     *  `3` - Recurring meeting with no fixed time.
     *  `8` - Recurring meeting with fixed time.
     *
     * @example 2
     */
    type?: 1 | 2 | 3 | 8;
    /**
     * Unique Meeting ID. Each meeting instance will generate its own Meeting UUID.
     *
     * @example aDYlohsHRtCd4ii1uC2+hA==
     */
    uuid?: string;
  }[];
};

export type MeetingsVariables = {
  pathParams: MeetingsPathParams;
  queryParams?: MeetingsQueryParams;
} & FetcherExtraProps;

/**
 * List a meeting host user's scheduled meetings. For user-level apps, pass [the `me` value](/docs/api/rest/using-zoom-apis/#the-me-keyword) instead of the `userId` parameter.
 *
 * **Prerequisites:**
 * * This API **only** supports scheduled meetings. This API does not return information about instant meetings.
 * * This API only returns a user's [unexpired meetings](https://support.zoom.us/hc/en-us/articles/201362373-Meeting-ID#h_c73f9b08-c1c0-4a1a-b538-e01ebb98e844).
 * * When `type` is set to `upcoming`, `upcoming_meetings`, or `previous_meetings`, only a maximum of 6 months of meeting data will be returned.
 *
 * **[Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `meeting:read:admin`,`meeting:read`
 *
 * **[Granular Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `meeting:read:list_meetings`,`meeting:read:list_meetings:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
 */
export const meetings = (variables: MeetingsVariables, signal?: AbortSignal) =>
  fetch<
    MeetingsResponse,
    MeetingsError,
    undefined,
    {},
    MeetingsQueryParams,
    MeetingsPathParams
  >({ url: "/users/{userId}/meetings", method: "get", ...variables, signal });

export type MeetingCreatePathParams = {
  /**
   * The user's user ID or email address. For user-level apps, pass the `me` value.
   *
   * @example 30R7kT7bTIKSNUFEuH_Qlg
   */
  userId: string;
};

export type MeetingCreateError = Fetcher.ErrorWrapper<undefined>;

export type MeetingCreateResponse = {
  /**
   * The ID of the user who scheduled this meeting on behalf of the host.
   *
   * @example kFFvsJc-Q1OSxaJQLvaa_A
   */
  assistant_id?: string;
  /**
   * The meeting host's email address.
   *
   * @format email
   * @example jchill@example.com
   */
  host_email?: string;
  /**
   * The [meeting ID](https://support.zoom.us/hc/en-us/articles/201362373-What-is-a-Meeting-ID-): Unique identifier of the meeting in **long** format(represented as int64 data type in JSON), also known as the meeting number.
   *
   * @format int64
   * @example 92674392836
   */
  id?: number;
  /**
   * The URL that registrants can use to register for a meeting. This field is only returned for meetings that have enabled registration.
   *
   * @example https://example.com/meeting/register/7ksAkRCoEpt1Jm0wa-E6lICLur9e7Lde5oW6
   */
  registration_url?: string;
  /**
   * Agenda
   *
   * @example My Meeting
   */
  agenda?: string;
  /**
   * The date and time when this meeting was created.
   *
   * @format date-time
   * @example 2022-03-25T07:29:29Z
   */
  created_at?: string;
  /**
   * The meeting duration.
   *
   * @example 60
   */
  duration?: number;
  /**
   * Encrypted passcode for third party endpoints (H323/SIP).
   *
   * @example 8pEkRweVXPV3Ob2KJYgFTRlDtl1gSn.1
   */
  encrypted_password?: string;
  /**
   * Passcode for participants to join the meeting via [PSTN](https://support.zoom.us/hc/en-us/articles/204517069-Getting-Started-with-Personal-Audio-Conference).
   *
   * @example 123456
   */
  pstn_password?: string;
  /**
   * H.323/SIP room system passcode
   *
   * @example 123456
   */
  h323_password?: string;
  /**
   * URL for participants to join the meeting. This URL should only be shared with users that you would like to invite for the meeting.
   *
   * @example https://example.com/j/11111
   */
  join_url?: string;
  /**
   * The URL to join the chat.
   *
   * @example https://example.com/launch/jc/11111
   */
  chat_join_url?: string;
  /**
   * Array of occurrence objects.
   */
  occurrences?: {
    /**
     * Duration.
     *
     * @example 60
     */
    duration?: number;
    /**
     * Occurrence ID. The unique identifier for an occurrence of a recurring webinar. [Recurring webinars](https://support.zoom.us/hc/en-us/articles/216354763-How-to-Schedule-A-Recurring-Webinar) can have a maximum of 50 occurrences.
     *
     * @example 1648194360000
     */
    occurrence_id?: string;
    /**
     * Start time.
     *
     * @format date-time
     * @example 2022-03-25T07:46:00Z
     */
    start_time?: string;
    /**
     * Occurrence status.
     *  `available` - Available occurrence.
     *  `deleted` -  Deleted occurrence.
     *
     * @example available
     */
    status?: "available" | "deleted";
  }[];
  /**
   * The meeting passcode. By default, it can be up to 10 characters in length and may contain alphanumeric characters as well as special characters such as !, @, #, etc.
   *
   * @example 123456
   */
  password?: string;
  /**
   * [Personal meeting ID (PMI)](/docs/api/using-zoom-apis/#understanding-personal-meeting-id-pmi). Only used for scheduled meetings and recurring meetings with no fixed time.
   *
   * @example 97891943927
   */
  pmi?: string;
  /**
   * Whether the prescheduled meeting was created via the [GSuite app](https://support.zoom.us/hc/en-us/articles/360020187492-Zoom-for-GSuite-add-on). This only supports the meeting `type` value of `2` (scheduled meetings) and `3` (recurring meetings with no fixed time).
   * * `true` - A GSuite prescheduled meeting.
   * * `false` - A regular meeting.
   *
   * @example false
   * @default false
   */
  pre_schedule?: boolean;
  /**
   * Recurrence object. Use this object only for a meeting with type `8`, a recurring meeting with fixed time.
   */
  recurrence?: {
    /**
     * Select the final date when the meeting will recur before it is canceled. Should be in UTC time, such as 2017-11-25T12:00:00Z. Cannot be used with `end_times`.
     *
     * @format date-time
     * @example 2022-04-02T15:59:00Z
     */
    end_date_time?: string;
    /**
     * Select how many times the meeting should recur before it is canceled. If `end_times` is set to 0, it means there is no end time. The maximum number of recurring is 60. Cannot be used with `end_date_time`.
     *
     * @maximum 60
     * @example 7
     * @default 1
     */
    end_times?: number;
    /**
     * Use this field only if you're scheduling a recurring meeting of type `3` to state the day in a month when the meeting should recur. The value range is from 1 to 31.
     *
     * For instance, if you would like the meeting to recur on 23rd of each month, provide `23` as this field's value and `1` as the `repeat_interval` field's value. Instead, to have the meeting recur every three months on 23rd of the month, change the value of the `repeat_interval` field to `3`.
     *
     * @example 1
     * @default 1
     */
    monthly_day?: number;
    /**
     * Use this field **only if you're scheduling a recurring meeting of type** `3` to state the week of the month when the meeting should recur. If you use this field, you must also use the `monthly_week_day` field to state the day of the week when the meeting should recur.
     *  `-1` - Last week of the month.
     *  `1` - First week of the month.
     *  `2` - Second week of the month.
     *  `3` - Third week of the month.
     *  `4` - Fourth week of the month.
     *
     * @example 1
     */
    monthly_week?: -1 | 1 | 2 | 3 | 4;
    /**
     * Use this field **only if you're scheduling a recurring meeting of type** `3` to state a specific day in a week when the monthly meeting should recur. To use this field, you must also use the `monthly_week` field.
     *
     *
     *  `1` - Sunday.
     *  `2` - Monday.
     *  `3` - Tuesday.
     *  `4` -  Wednesday.
     *  `5` - Thursday.
     *  `6` - Friday.
     *  `7` - Saturday.
     *
     * @example 1
     */
    monthly_week_day?: 1 | 2 | 3 | 4 | 5 | 6 | 7;
    /**
     * Define the interval for the meeting to recur. For instance, to schedule a meeting that recurs every two months, set this field's value to `2` and the value of the `type` parameter as `3`.
     *
     * For a daily meeting, the maximum interval you can set is `99` days. For a weekly meeting the maximum interval that you can set is  of `50` weeks. For a monthly meeting, there is a maximum of `10` months.
     *
     * @example 1
     */
    repeat_interval?: number;
    /**
     * Recurrence meeting types.
     *  `1` - Daily.
     *  `2` - Weekly.
     *  `3` - Monthly.
     *
     * @example 1
     */
    type: 1 | 2 | 3;
    /**
     * This field is required **if you're scheduling a recurring meeting of type** `2` to state the days of the week when the meeting should repeat.
     *
     *   This field's value could be a number between `1` to `7` in string format. For instance, if the meeting should recur on Sunday, provide `1` as this field's value.
     *
     *   **Note:** If you would like the meeting to occur on multiple days of a week, provide comma separated values for this field. For instance, if the meeting should recur on Sundays and Tuesdays, provide `1,3` as this field's value.
     *
     *
     *  `1`  - Sunday.
     *  `2` - Monday.
     *  `3` - Tuesday.
     *  `4` -  Wednesday.
     *  `5` -  Thursday.
     *  `6` - Friday.
     *  `7` - Saturday.
     *
     * @example 1
     * @default 1
     */
    weekly_days?: "1" | "2" | "3" | "4" | "5" | "6" | "7";
  };
  /**
   * Meeting settings.
   */
  settings?: {
    /**
     * Allow attendees to join the meeting from multiple devices. This setting only works for meetings that require [registration](https://support.zoom.us/hc/en-us/articles/211579443-Setting-up-registration-for-a-meeting).
     *
     * @example true
     */
    allow_multiple_devices?: boolean;
    /**
     * A semicolon-separated list of the meeting's alternative hosts' email addresses or IDs.
     *
     * @example jchill@example.com;thill@example.com
     */
    alternative_hosts?: string;
    /**
     * Flag to determine whether to send email notifications to alternative hosts, default value is true.
     *
     * @example true
     * @default true
     */
    alternative_hosts_email_notification?: boolean;
    /**
     * Whether the **Allow alternative hosts to add or edit polls** feature is enabled. This requires Zoom version 5.8.0 or higher.
     *
     * @example true
     */
    alternative_host_update_polls?: boolean;
    /**
     * Enable registration and set approval for the registration. Note that this feature requires the host to be of **Licensed** user type. **Registration cannot be enabled for a basic user.**
     *
     *
     *
     * `0` - Automatically approve.
     *  `1` - Manually approve.
     *  `2` - No registration required.
     *
     * @example 0
     * @default 2
     */
    approval_type?: 0 | 1 | 2;
    /**
     * Approve or block users from specific regions or countries from joining this meeting.
     */
    approved_or_denied_countries_or_regions?: {
      /**
       * List of countries or regions from where participants can join this meeting.
       */
      approved_list?: string[];
      /**
       * List of countries or regions from where participants can not join this meeting.
       */
      denied_list?: string[];
      /**
       * `true` - Setting enabled to either allow users or block users from specific regions to join your meetings.
       *
       *
       * `false` - Setting disabled.
       *
       * @example true
       */
      enable?: boolean;
      /**
       * Specify whether to allow users from specific regions to join this meeting; or block users from specific regions from joining this meeting.
       *
       *
       * `approve`: Allow users from specific regions/countries to join this meeting. If this setting is selected, the approved regions/countries must be included in the `approved_list`.
       *
       *
       * `deny`: Block users from specific regions/countries from joining this meeting. If this setting is selected, the approved regions/countries must be included in the `denied_list`
       *
       * @example approve
       */
      method?: "approve" | "deny";
    };
    /**
     * Determine how participants can join the audio portion of the meeting.
     *  `both` - Both Telephony and VoIP.
     *  `telephony` - Telephony only.
     *  `voip` - VoIP only.
     *  `thirdParty` - Third party audio conference.
     *
     * @example telephony
     * @default both
     */
    audio?: "both" | "telephony" | "voip" | "thirdParty";
    /**
     * Third party audio conference info.
     *
     * @maxLength 2048
     * @example test
     */
    audio_conference_info?: string;
    /**
     * If user has configured [Sign Into Zoom with Specified Domains](https://support.zoom.us/hc/en-us/articles/360037117472-Authentication-Profiles-for-Meetings-and-Webinars#h_5c0df2e1-cfd2-469f-bb4a-c77d7c0cca6f) option, this will list the domains that are authenticated.
     *
     * @example example.com
     */
    authentication_domains?: string;
    /**
     * The participants added here will receive unique meeting invite links and bypass authentication.
     */
    authentication_exception?: {
      /**
       * The participant's email address.
       *
       * @format email
       * @example jchill@example.com
       */
      email?: string;
      /**
       * The participant's name.
       *
       * @example Jill Chill
       */
      name?: string;
      /**
       * URL for participants to join the meeting.
       *
       * @example https://example.com/s/11111
       */
      join_url?: string;
    }[];
    /**
     * Authentication name set in the [authentication profile](https://support.zoom.us/hc/en-us/articles/360037117472-Authentication-Profiles-for-Meetings-and-Webinars#h_5c0df2e1-cfd2-469f-bb4a-c77d7c0cca6f).
     *
     * @example Sign in to Zoom
     */
    authentication_name?: string;
    /**
     * Meeting authentication option ID.
     *
     * @example signIn_D8cJuqWVQ623CI4Q8yQK0Q
     */
    authentication_option?: string;
    /**
     * Automatic recording.
     *  `local` - Record on local.
     *  `cloud` -  Record on cloud.
     *  `none` - Disabled.
     *
     * @example cloud
     * @default none
     */
    auto_recording?: "local" | "cloud" | "none";
    /**
     * Setting to [pre-assign breakout rooms](https://support.zoom.us/hc/en-us/articles/360032752671-Pre-assigning-participants-to-breakout-rooms#h_36f71353-4190-48a2-b999-ca129861c1f4).
     */
    breakout_room?: {
      /**
       * Set this field's value to `true` to enable the [breakout room pre-assign](https://support.zoom.us/hc/en-us/articles/360032752671-Pre-assigning-participants-to-breakout-rooms#h_36f71353-4190-48a2-b999-ca129861c1f4) option.
       *
       * @example true
       */
      enable?: boolean;
      /**
       * Create a room or rooms.
       */
      rooms?: {
        /**
         * The breakout room's name.
         *
         * @example room1
         */
        name?: string;
        /**
         * Email addresses of the participants who are to be assigned to the breakout room.
         */
        participants?: string[];
      }[];
    };
    /**
     * The type of calendar integration used to schedule the meeting.
     * * `1` - [Zoom Outlook add-in](https://support.zoom.us/hc/en-us/articles/360031592971-Getting-started-with-Outlook-plugin-and-add-in)
     * * `2` - [Zoom for Google Workspace add-on](https://support.zoom.us/hc/en-us/articles/360020187492-Using-the-Zoom-for-Google-Workspace-add-on)
     *
     * Works with the `private_meeting` field to determine whether to share details of meetings or not.
     *
     * @example 1
     */
    calendar_type?: 1 | 2;
    /**
     * Close registration after event date.
     *
     * @example false
     * @default false
     */
    close_registration?: boolean;
    /**
     * Host meeting in China.
     *
     * @example false
     * @deprecated true
     * @default false
     */
    cn_meeting?: boolean;
    /**
     * Contact email for registration
     *
     * @example jchill@example.com
     */
    contact_email?: string;
    /**
     * Contact name for registration
     *
     * @example Jill Chill
     */
    contact_name?: string;
    /**
     * Custom keys and values assigned to the meeting.
     *
     * @maxItems 10
     */
    custom_keys?: {
      /**
       * Custom key associated with the user.
       *
       * @maxLength 64
       * @example key1
       */
      key?: string;
      /**
       * Value of the custom key associated with the user.
       *
       * @maxLength 256
       * @example value1
       */
      value?: string;
    }[];
    /**
     * Whether to send email notifications to [alternative hosts](https://support.zoom.us/hc/en-us/articles/208220166) and [users with scheduling privileges](https://support.zoom.us/hc/en-us/articles/201362803-Scheduling-privilege). This value defaults to `true`.
     *
     * @example true
     * @default true
     */
    email_notification?: boolean;
    /**
     * Choose between enhanced encryption and [end-to-end encryption](https://support.zoom.us/hc/en-us/articles/360048660871) when starting or a meeting. When using end-to-end encryption, several features (e.g. cloud recording, phone/SIP/H.323 dial-in) will be **automatically disabled**.
     *
     * `enhanced_encryption` - Enhanced encryption. Encryption is stored in the cloud if you enable this option.
     *
     *
     * `e2ee` - [End-to-end encryption](https://support.zoom.us/hc/en-us/articles/360048660871). The encryption key is stored in your local device and can not be obtained by anyone else. Enabling this setting also **disables** the join before host, cloud recording, streaming, live transcription, breakout rooms, polling, 1:1 private chat, and meeting reactions features.
     *
     * @example enhanced_encryption
     */
    encryption_type?: "enhanced_encryption" | "e2ee";
    /**
     * Only signed in users can join this meeting.
     *
     * **This field is deprecated and will not be supported in the future.**
     *
     *  As an alternative, use the `meeting_authentication`, `authentication_option`, and `authentication_domains` fields to understand the [authentication configurations](https://support.zoom.us/hc/en-us/articles/360037117472-Authentication-Profiles-for-Meetings-and-Webinars) set for the meeting.
     *
     * @example true
     * @deprecated true
     */
    enforce_login?: boolean;
    /**
     * Only signed in users with specified domains can join meetings.
     *
     * **This field is deprecated and will not be supported in the future.**
     *
     *  As an alternative, use the `meeting_authentication`, `authentication_option`, and `authentication_domains` fields to understand the [authentication configurations](https://support.zoom.us/hc/en-us/articles/360037117472-Authentication-Profiles-for-Meetings-and-Webinars) set for the meeting.
     *
     * @example example.com
     * @deprecated true
     */
    enforce_login_domains?: string;
    /**
     * Whether the [**Focus Mode** feature](https://support.zoom.us/hc/en-us/articles/360061113751-Using-focus-mode) is enabled when the meeting starts.
     *
     * @example true
     */
    focus_mode?: boolean;
    /**
     * List of global dial-in countries.
     */
    global_dial_in_countries?: string[];
    /**
     * Global dial-in countries or regions.
     */
    global_dial_in_numbers?: {
      /**
       * City of the number, such as Chicago.
       *
       * @example New York
       */
      city?: string;
      /**
       * The country code, such as BR.
       *
       * @example US
       */
      country?: string;
      /**
       * Full name of country, such as Brazil.
       *
       * @example US
       */
      country_name?: string;
      /**
       * A phone number, such as +1 2332357613.
       *
       * @example +1 1000200200
       */
      number?: string;
      /**
       * Type of number.
       *
       * @example toll
       */
      type?: "toll" | "tollfree";
    }[];
    /**
     * Start video when the host joins the meeting.
     *
     * @example true
     */
    host_video?: boolean;
    /**
     * Host meeting in India.
     *
     * @example false
     * @deprecated true
     * @default false
     */
    in_meeting?: boolean;
    /**
     * If the value of `join_before_host` field is set to `true`, use this field to indicate time limits when a participant may join a meeting before a host.
     *
     * *  `0` - Allow participant to join anytime.
     * *  `5`- Allow participant to join 5 minutes before meeting start time.
     *  * `10` - Allow participant to join 10 minutes before meeting start time.
     * * `15` - Allow the participant to join 15 minutes before the meeting's start time.
     *
     * @example 0
     */
    jbh_time?: 0 | 5 | 10 | 15;
    /**
     * Allow participants to join the meeting before the host starts the meeting. Only used for scheduled or recurring meetings.
     *
     * @example true
     * @default false
     */
    join_before_host?: boolean;
    /**
     * [Q&amp;A](https://support.zoom.com/hc/en/article?id=zm_kb&sysparm_article=KB0065237) for meeting.
     */
    question_and_answer?: {
      /**
       * * `true` - Enable [Q&amp;A](https://support.zoom.com/hc/en/article?id=zm_kb&sysparm_article=KB0065237) for meeting.
       *
       * * `false` - Disable Q&amp;A for meeting. If not provided, the default value will be based on the user's setting.
       *
       * @example true
       */
      enable?: boolean;
      /**
       * * `true`: Allow participants to submit questions.
       *
       * * `false`: Do not allow submit questions.
       *
       * @example true
       */
      allow_submit_questions?: boolean;
      /**
       * * `true` - Allow participants to send questions without providing their name to the host, co-host, and panelists..
       *
       * * `false` - Do not allow anonymous questions.(Not supported for simulive meeting.)
       *
       * @example true
       */
      allow_anonymous_questions?: boolean;
      /**
       * Indicate whether you want attendees to be able to view answered questions only or view all questions.
       *
       * * `answered` - Attendees are able to view answered questions only.
       *
       * *  `all` - Attendees are able to view all questions submitted in the Q&amp;A.
       *
       * @example all
       */
      question_visibility?: "answered" | "all";
      /**
       * * `true` - Attendees can answer questions or leave a comment in the question thread.
       *
       * * `false` - Attendees can not answer questions or leave a comment in the question thread
       *
       * @example true
       */
      attendees_can_comment?: boolean;
      /**
       * * `true` - Attendees can click the thumbs up button to bring popular questions to the top of the Q&amp;A window.
       *
       * * `false` - Attendees can not click the thumbs up button on questions.
       *
       * @example true
       */
      attendees_can_upvote?: boolean;
    };
    /**
     * The meeting's [language interpretation settings](https://support.zoom.com/hc/en/article?id=zm_kb&sysparm_article=KB0064768). Make sure to add the language in the web portal in order to use it in the API. See link for details.
     *
     * **Note:** This feature is only available for certain Meeting add-on, Education, and Business and higher plans. If this feature is not enabled on the host's account, this setting will **not** be applied to the meeting.
     */
    language_interpretation?: {
      /**
       * Whether to enable [language interpretation](https://support.zoom.com/hc/en/article?id=zm_kb&sysparm_article=KB0064768) for the meeting. If not provided, the default value will be based on the user's setting.
       *
       * @example true
       */
      enable?: boolean;
      /**
       * Information about the meeting's language interpreters.
       */
      interpreters?: {
        /**
         * The interpreter's email address.
         *
         * @format email
         * @example interpreter@example.com
         */
        email?: string;
        /**
         * A comma-separated list of the interpreter's languages. The string must contain exactly two country IDs.
         *
         * Only system-supported languages are allowed: `US` (English), `CN` (Chinese), `JP` (Japanese), `DE` (German), `FR` (French), `RU` (Russian), `PT` (Portuguese), `ES` (Spanish), and `KR` (Korean).
         *
         * For example, to set an interpreter translating from English to Chinese, use `US,CN`.
         *
         * @example US,FR
         * @deprecated true
         */
        languages?: string;
        /**
         * A comma-separated list of the interpreter's languages. The string must contain exactly two languages.
         *
         * To get this value, use the `language_interpretation` object's `languages` and `custom_languages` values in the [**Get user settings**](/docs/api/users/#tag/users/GET/users/{userId}/settings) API response.
         *
         * **languages**: System-supported languages include `English`, `Chinese`, `Japanese`, `German`, `French`, `Russian`, `Portuguese`, `Spanish`, and `Korean`.
         *
         * **custom_languages**: User-defined languages added by the user.
         *
         * For example, an interpreter translating between English and French should use `English,French`.
         *
         * @example English,French
         */
        interpreter_languages?: string;
      }[];
    };
    /**
     * The meeting's [sign language interpretation settings](https://support.zoom.us/hc/en-us/articles/9644962487309-Using-sign-language-interpretation-in-a-meeting-or-webinar). Make sure to add the language in the web portal in order to use it in the API. See link for details.
     *
     * **Note:** If this feature is not enabled on the host's account, this setting will **not** be applied to the meeting.
     */
    sign_language_interpretation?: {
      /**
       * Whether to enable [sign language interpretation](https://support.zoom.us/hc/en-us/articles/9644962487309-Using-sign-language-interpretation-in-a-meeting-or-webinar) for the meeting. If not provided, the default value will be based on the user's setting.
       *
       * @example true
       */
      enable?: boolean;
      /**
       * Information about the meeting's sign language interpreters.
       *
       * @maximum 20
       */
      interpreters?: {
        /**
         * The interpreter's email address.
         *
         * @format email
         * @example interpreter@example.com
         */
        email?: string;
        /**
         * The interpreter's sign language.
         *
         *  To get this value, use the `sign_language_interpretation` object's `languages` and `custom_languages` values in the [**Get user settings**](/api-reference/zoom-api/methods#operation/userSettings) API response.
         *
         * @example American
         */
        sign_language?: string;
      }[];
    };
    /**
     * `true` - Only authenticated users can join meetings.
     *
     * @example true
     */
    meeting_authentication?: boolean;
    /**
     * Mute participants upon entry.
     *
     * @example false
     * @default false
     */
    mute_upon_entry?: boolean;
    /**
     * Start video when participants join the meeting.
     *
     * @example false
     */
    participant_video?: boolean;
    /**
     * Whether the meeting is set as private.
     *
     * @example false
     */
    private_meeting?: boolean;
    /**
     * Whether to send registrants an email confirmation.
     * * `true` - Send a confirmation email.
     * * `false` - Do not send a confirmation email.
     *
     * @example true
     */
    registrants_confirmation_email?: boolean;
    /**
     * Whether to send registrants email notifications about their registration approval, cancellation, or rejection.
     *
     * * `true` - Send an email notification.
     * * `false` - Do not send an email notification.
     *
     *  Set this value to `true` to also use the `registrants_confirmation_email` parameter.
     *
     * @example true
     */
    registrants_email_notification?: boolean;
    /**
     * Registration type. Used for recurring meeting with fixed time only.
     *  `1` - Attendees register once and can attend any of the occurrences.
     *  `2` - Attendees need to register for each occurrence to attend.
     *  `3` - Attendees register once and can choose one or more occurrences to attend.
     *
     * @example 1
     * @default 1
     */
    registration_type?: 1 | 2 | 3;
    /**
     * Show social share buttons on the meeting registration page.
     * This setting only works for meetings that require [registration](https://support.zoom.us/hc/en-us/articles/211579443-Setting-up-registration-for-a-meeting).
     *
     * @example true
     */
    show_share_button?: boolean;
    /**
     * Use a [personal meeting ID (PMI)](/docs/api/using-zoom-apis/#understanding-personal-meeting-id-pmi). Only used for scheduled meetings and recurring meetings with no fixed time.
     *
     * @example false
     * @default false
     */
    use_pmi?: boolean;
    /**
     * Enable the waiting room.
     *
     * @example false
     * @default false
     */
    waiting_room?: boolean;
    /**
     * Whether to add a watermark when viewing a shared screen. If not provided, the default value will be based on the user's setting.
     *
     * @example false
     */
    watermark?: boolean;
    /**
     * Whether the **Allow host to save video order** feature is enabled.
     *
     * @example true
     */
    host_save_video_order?: boolean;
    /**
     * Whether to set the meeting as an internal meeting.
     *
     * @example false
     * @default false
     */
    internal_meeting?: boolean;
    /**
     * A list of the meeting's invitees.
     */
    meeting_invitees?: {
      /**
       * The invitee's email address.
       *
       * @format email
       * @example jchill@example.com
       */
      email?: string;
    }[];
    /**
     * Information about the **Enable continuous meeting chat** feature. This setting only applies to scheduled and recurring meetings (type `2`, `3`, and `8`). It is **not supported** for type `1` instant meetings or type `10` screen share only meetings.
     */
    continuous_meeting_chat?: {
      /**
       * Whether to enable the **Enable continuous meeting chat** setting. The default value is based on user settings. When the **Enable continuous meeting chat** setting is enabled, the default value is true. When the setting is disabled, the default value is false.
       *
       * @example true
       */
      enable?: boolean;
      /**
       * Whether to enable the **Automatically add invited external users** setting.
       *
       * @example true
       * @deprecated true
       */
      auto_add_invited_external_users?: boolean;
      /**
       * Whether to enable the **Automatically add meeting participants** setting.
       *
       * @example true
       * @deprecated true
       */
      auto_add_meeting_participants?: boolean;
      /**
       * Who is added to the continuous meeting chat. Invitees are users added during scheduling. Participants are users who join the meeting.
       * * `all_users` - For all users, including external invitees and meeting participants.
       * * `org_invitees_and_participants` - Only for meeting invitees and participants in your organization.
       * * `org_invitees` - Only for meeting invitees in your organization.
       *
       * @example all_users
       */
      who_is_added?:
        | "all_users"
        | "org_invitees_and_participants"
        | "org_invitees";
      /**
       * The channel's ID.
       *
       * @example cabc1234567defghijkl01234
       */
      channel_id?: string;
    };
    /**
     * Whether to set the meeting as a participant focused meeting.
     *
     * @example false
     * @default false
     */
    participant_focused_meeting?: boolean;
    /**
     * Whether to push meeting changes to the calendar.
     *
     *  To enable this feature, configure the **Configure Calendar and Contacts Service** in the user's profile page of the Zoom web portal and enable the **Automatically sync Zoom calendar events information bi-directionally between Zoom and integrated calendars.** setting in the **Settings** page of the Zoom web portal.
     * * `true` - Push meeting changes to the calendar.
     * * `false` - Do not push meeting changes to the calendar.
     *
     * @example false
     * @default false
     */
    push_change_to_calendar?: boolean;
    /**
     * The meeting's resources.
     */
    resources?: {
      /**
       * The resource type.
       *
       * @example whiteboard
       */
      resource_type?: "whiteboard";
      /**
       * The resource ID.
       *
       * @example X4Hy02w3QUOdskKofgb9Jg
       */
      resource_id?: string;
      /**
       * The permission levels for users to access the whiteboard.
       * * `editor` - Users with link access can edit the board.
       * * `commenter` - Users with link access can comment on the board.
       * * `viewer` - Users with link access can view the board.
       *
       * @example editor
       * @default editor
       */
      permission_level?: "editor" | "commenter" | "viewer";
    }[];
    /**
     * Whether to automatically start a meeting summary. If not provided, the default value will be based on the user's setting.
     *
     * @example false
     */
    auto_start_meeting_summary?: boolean;
    /**
     * Defines who will receive a summary after this meeting. This field is applicable only when `auto_start_meeting_summary` is set to `true`.
     * * `1` - Only meeting host.
     * * `2` - Only meeting host, co-hosts, and alternative hosts.
     * * `3` - Only meeting host and meeting invitees in our organization.
     * * `4` - All meeting invitees including those outside of our organization. If not provided, the default value will be based on the user's setting.
     *
     * @example 1
     */
    who_will_receive_summary?: 1 | 2 | 3 | 4;
    /**
     * Whether to automatically start AI Companion questions. If not provided, the default value will be based on the user's setting.
     *
     * @example false
     */
    auto_start_ai_companion_questions?: boolean;
    /**
     * Defines who can ask questions about this meeting's transcript. This field is applicable only when `auto_start_ai_companion_questions` is set to `true`.
     * * `1` - All participants and invitees.
     * * `2` - All participants only from when they join.
     * * `3` - Only meeting host.
     * * `4` - Participants and invitees in our organization.
     * * `5` - Participants in our organization only from when they join. If not provided, the default value will be based on the user's setting.
     *
     * @example 1
     */
    who_can_ask_questions?: 1 | 2 | 3 | 4 | 5;
    /**
     * The summary template ID used to generate a meeting summary based on a predefined template. To get available summary templates, use the **Get user summary templates** API. If not provided, the default value will be based on the user's setting. To enable this feature for your account, please [contact Zoom Support](https://support.zoom.com/hc/en).
     *
     * @example 1e1356ad
     */
    summary_template_id?: string;
    /**
     * Enable the device testing.
     *
     * @example false
     * @default false
     */
    device_testing?: boolean;
    /**
     * Whether to allow the host and co-hosts to fully control the mute state of participants. If not provided, the default value will be based on the user's setting.
     *
     * @example false
     */
    allow_host_control_participant_mute_state?: boolean;
    /**
     * Whether to disable the participant video during meeting. To enable this feature for your account, please [contact Zoom Support](https://support.zoom.us/hc/en-us).
     *
     * @example false
     * @default false
     */
    disable_participant_video?: boolean;
    /**
     * Whether to include authenticated guest's email addresses in meetings' attendee reports.
     *
     * @example true
     */
    email_in_attendee_report?: boolean;
  };
  /**
   * Meeting start date-time in UTC/GMT, such as `2020-03-31T12:02:00Z`.
   *
   * @format date-time
   * @example 2022-03-25T07:29:29Z
   */
  start_time?: string;
  /**
   * URL to start the meeting. This URL should only be used by the host of the meeting and **should not be shared with anyone other than the host** of the meeting, since anyone with this URL will be able to log in to the Zoom Client as the host of the meeting.
   *
   * @example https://example.com/s/11111
   */
  start_url?: string;
  /**
   * Timezone to format `start_time`.
   *
   * @example America/Los_Angeles
   */
  timezone?: string;
  /**
   * Meeting topic.
   *
   * @maxLength 200
   * @example My Meeting
   */
  topic?: string;
  /**
   * Tracking fields.
   */
  tracking_fields?: {
    /**
     * The tracking field's label.
     *
     * @example field1
     */
    field?: string;
    /**
     * The tracking field's value.
     *
     * @example value1
     */
    value?: string;
    /**
     * Indicates whether the [tracking field](https://support.zoom.us/hc/en-us/articles/115000293426-Scheduling-Tracking-Fields) is visible in the meeting scheduling options in the Zoom Web Portal or not.
     *
     * `true`: Tracking field is visible.
     *
     *
     * `false`: Tracking field is not visible to the users in the meeting options in the Zoom Web Portal but the field was used while scheduling this meeting via API. An invisible tracking field can be used by users while scheduling meetings via API only.
     *
     * @example true
     */
    visible?: boolean;
  }[];
  /**
   * The meeting type.
   * * `1` - An instant meeting.
   * * `2` - A scheduled meeting.
   * * `3` - A recurring meeting with no fixed time.
   * * `8` - A recurring meeting with fixed time.
   * * `10` - A screen share only meeting.
   *
   * @example 2
   * @default 2
   */
  type?: 1 | 2 | 3 | 8 | 10;
  /**
   * The meeting dynamic host key.
   *
   * @example 123456
   */
  dynamic_host_key?: string;
  /**
   * The platform through which the meeting was created.
   * * `other` - Created through another platform.
   * * `open_api` - Created through Open API.
   * * `web_portal` - Created through the web portal.
   *
   * @example open_api
   */
  creation_source?: "other" | "open_api" | "web_portal";
};

export type MeetingCreateRequestBody = {
  /**
   * The meeting's agenda. This value has a maximum length of 2,000 characters.
   *
   * @maxLength 2000
   * @example My Meeting
   */
  agenda?: string;
  /**
   * Determines whether to automatically generate a passcode for the meeting when no passcode is provided and the user's **Require a passcode when scheduling new meetings** setting is enabled. Defaults to `true`. When set to `false`, meetings will only have a passcode if one is explicitly provided.
   *
   * @example true
   * @default true
   */
  default_password?: boolean;
  /**
   * The meeting's scheduled duration, in minutes. This field is used for `2` scheduled meetings and `8` recurring meetings with a fixed time. The value must be between 1 and 1440 minutes, wuich is equivalent to 24 hours.
   *
   * @maximum 1440
   * @minimum 1
   * @example 60
   * @default 60
   */
  duration?: number;
  /**
   * The meeting passcode. By default, it can be up to 10 characters in length and may contain alphanumeric characters as well as special characters such as !, @, #, etc.
   *
   * **Note**:
   * - If the account owner or administrator has configured [Passcode Requirement](https://support.zoom.com/hc/en/article?id=zm_kb&sysparm_article=KB0063160#h_a427384b-e383-4f80-864d-794bf0a37604), the passcode **must** meet those requirements. You can retrieve the requirements using the [**Get user settings**](/docs/api/users/#tag/users/GET/users/{userId}/settings) API or the [**Get account settings**](/docs/api/accounts/#tag/accounts/GET/accounts/{accountId}/settings) API.
   * - If the **Require a passcode when scheduling new meetings** user setting is enabled and `default_password` is not explicitly set to `false`, a passcode will be automatically generated when one is not provided.
   * - If the **Require a passcode when scheduling new meetings** setting is enabled and [locked](https://support.zoom.us/hc/en-us/articles/115005269866-Using-Tiered-Settings#locked) for the user, a passcode will be automatically generated when one is not provided.
   *
   * @maxLength 10
   * @example 123456
   */
  password?: string;
  /**
   * Whether to create a prescheduled meeting via the [GSuite app](https://support.zoom.us/hc/en-us/articles/360020187492-Zoom-for-GSuite-add-on). This **only** supports the meeting `type` value of `2` scheduled meetings and `3` recurring meetings with no fixed time.
   * * `true` - Create a prescheduled meeting.
   * * `false` - Create a regular meeting.
   *
   * @example false
   * @default false
   */
  pre_schedule?: boolean;
  /**
   * Recurrence object. Use this object only for a meeting with type `8`, a recurring meeting with a fixed time.
   */
  recurrence?: {
    /**
     * Select the final date when the meeting will recur before it is canceled. Should be in UTC time, such as 2017-11-25T12:00:00Z. Cannot be used with `end_times`.
     *
     * @format date-time
     * @example 2022-04-02T15:59:00Z
     */
    end_date_time?: string;
    /**
     * Select how many times the meeting should recur before it is canceled. If `end_times` is set to 0, it means there is no end time. The maximum number of recurring is 60. Cannot be used with `end_date_time`.
     *
     * @maximum 60
     * @example 7
     * @default 1
     */
    end_times?: number;
    /**
     * Use this field **only** if you're scheduling a **recurring meeting of type `3`** to state the day in a month when the meeting should recur. The value range is from `1` to `31`.
     *
     * For the meeting to recur on 23rd of each month, provide `23` as this field's value and `1` as the `repeat_interval` field's value. To have the meeting recur every three months on 23rd of the month, change the `repeat_interval` field value to `3`.
     *
     * @example 1
     * @default 1
     */
    monthly_day?: number;
    /**
     * Use this field **only if** you're scheduling a **recurring meeting of type `3`** to state the week of the month when the meeting should recur. If you use this field, you must also use the `monthly_week_day` field to state the day of the week when the meeting should recur.
     *  `-1` - Last week of the month.
     *  `1` - First week of the month.
     *  `2` - Second week of the month.
     *  `3` - Third week of the month.
     *  `4` - Fourth week of the month.
     *
     * @example 1
     */
    monthly_week?: -1 | 1 | 2 | 3 | 4;
    /**
     * Use this field **only if** you're scheduling a **recurring meeting of type `3`** to state a specific day in a week when the monthly meeting should recur. To use this field, you must also use the `monthly_week` field.
     *
     *
     *  `1` - Sunday.
     *  `2` - Monday.
     *  `3` - Tuesday.
     *  `4` -  Wednesday.
     *  `5` - Thursday.
     *  `6` - Friday.
     *  `7` - Saturday.
     *
     * @example 1
     */
    monthly_week_day?: 1 | 2 | 3 | 4 | 5 | 6 | 7;
    /**
     * Define the interval when the meeting should recur. For instance, to schedule a meeting that recurs every two months, set this field's value as `2` and the value of the `type` parameter as `3`.
     *
     * For a daily meeting, the maximum number of recurrences is `99` days. For a weekly meeting, the maximum is `50` weeks. For a monthly meeting, the maximum is `10` months.
     *
     * @example 1
     */
    repeat_interval?: number;
    /**
     * Recurrence meeting types.
     *  `1` - Daily.
     *  `2` - Weekly.
     *  `3` - Monthly.
     *
     * @example 1
     */
    type: 1 | 2 | 3;
    /**
     * **Required** if you're scheduling a recurring meeting of type `2` to state the days of the week when the meeting should repeat.
     *
     * This field's value could be a number between `1` to `7` in string format. For instance, if the meeting should recur on Sunday, provide `1` as this field's value.
     *
     * **Note:** To set the meeting to occur on multiple days of a week, provide comma separated values for this field. For instance, if the meeting should recur on Sundays and Tuesdays, provide `1,3` as this field's value.
     *
     *
     *  `1` - Sunday.
     *  `2` - Monday.
     *  `3` - Tuesday.
     *  `4` -  Wednesday.
     *  `5` -  Thursday.
     *  `6` - Friday.
     *  `7` - Saturday.
     *
     * @example 1
     * @default 1
     */
    weekly_days?: "1" | "2" | "3" | "4" | "5" | "6" | "7";
  };
  /**
   * The email address or user ID of the user to schedule a meeting for.
   *
   * @example jchill@example.com
   */
  schedule_for?: string;
  /**
   * Information about the meeting's settings.
   */
  settings?: {
    /**
     * Add additional meeting [data center regions](https://support.zoom.us/hc/en-us/articles/360042411451-Selecting-data-center-regions-for-hosted-meetings-and-webinars). Provide this value as an array of [country codes](/docs/api/references/abbreviations/#countries) for the countries available as data center regions in the [**Account Profile**](https://zoom.us/account/setting) interface but have been opted out of in the [user settings](https://zoom.us/profile).
     *
     * For example, the data center regions selected in your [**Account Profile**](https://zoom.us/account) are `Europe`, `Hong Kong SAR`, `Australia`, `India`, `Japan`, `China`, `United States`, and `Canada`. However, in the [**My Profile**](https://zoom.us/profile) settings, you did **not** select `India` and `Japan` for meeting and webinar traffic routing.
     *
     * To include `India` and `Japan` as additional data centers, use the `[IN, TY]` value for this field.
     */
    additional_data_center_regions?: string[];
    /**
     * Whether to allow attendees to join a meeting from multiple devices. This setting is only applied to meetings with registration enabled.
     *
     * @example true
     */
    allow_multiple_devices?: boolean;
    /**
     * A semicolon-separated list of the meeting's alternative hosts' email addresses or IDs.
     *
     * @example jchill@example.com;thill@example.com
     */
    alternative_hosts?: string;
    /**
     * Whether to send email notifications to alternative hosts. This value defaults to `true`.
     *
     * @example true
     * @default true
     */
    alternative_hosts_email_notification?: boolean;
    /**
     * Enable meeting registration approval.
     * * `0` - Automatically approve registration.
     * * `1` - Manually approve registration.
     * * `2` - No registration required.
     *
     * This value defaults to `2`.
     *
     * @example 2
     * @default 2
     */
    approval_type?: 0 | 1 | 2;
    /**
     * The list of approved or blocked users from specific countries or regions who can join the meeting.
     */
    approved_or_denied_countries_or_regions?: {
      /**
       * The list of approved countries or regions.
       */
      approved_list?: string[];
      /**
       * The list of blocked countries or regions.
       */
      denied_list?: string[];
      /**
       * Whether to enable the [**Approve or block entry for users from specific countries/regions**](https://support.zoom.us/hc/en-us/articles/360060086231-Approve-or-block-entry-for-users-from-specific-countries-regions) setting.
       *
       * @example true
       */
      enable?: boolean;
      /**
       * Whether to allow or block users from specific countries or regions.
       * * `approve` - Allow users from specific countries or regions to join the meeting. If you select this setting, include the approved countries or regions in the `approved_list` field.
       * * `deny` - Block users from specific countries or regions from joining the meeting. If you select this setting, include the blocked countries or regions in the `denied_list` field.
       *
       * @example approve
       */
      method?: "approve" | "deny";
    };
    /**
     * How participants join the audio portion of the meeting.
     * * `both` - Both telephony and VoIP.
     * * `telephony` - Telephony only.
     * * `voip` - VoIP only.
     * * `thirdParty` - Third party audio conference.
     *
     * @example telephony
     * @default both
     */
    audio?: "both" | "telephony" | "voip" | "thirdParty";
    /**
     * Third party audio conference information.
     *
     * @maxLength 2048
     * @example test
     */
    audio_conference_info?: string;
    /**
     * The meeting's authenticated domains. Only Zoom users whose email address contains an authenticated domain can join the meeting. Comma-separate multiple domains or use a wildcard for listing domains.
     *
     * @example example.com
     */
    authentication_domains?: string;
    /**
     * A list of participants who can bypass meeting authentication. These participants will receive a unique meeting invite.
     */
    authentication_exception?: {
      /**
       * The participant's email address.
       *
       * @format email
       * @example jchill@example.com
       */
      email?: string;
      /**
       * The participant's name.
       *
       * @example Jill Chill
       */
      name?: string;
    }[];
    /**
     * If the `meeting_authentication` value is `true`, the type of authentication required for users to join a meeting.
     *
     * To get this value, use the `authentication_options` array's `id` value in the [**Get user settings**](/docs/api-reference/zoom-api/methods#operation/userSettings) API response.
     *
     * @example signIn_D8cJuqWVQ623CI4Q8yQK0Q
     */
    authentication_option?: string;
    /**
     * The automatic recording settings.
     * * `local` - Record the meeting locally.
     * * `cloud` - Record the meeting to the cloud.
     * * `none` - Auto-recording disabled.
     *
     * This value defaults to `none`.
     *
     * @example cloud
     * @default none
     */
    auto_recording?: "local" | "cloud" | "none";
    /**
     * The [pre-assigned breakout rooms](https://support.zoom.us/hc/en-us/articles/360032752671-Pre-assigning-participants-to-breakout-rooms) settings.
     */
    breakout_room?: {
      /**
       * Whether to enable the [**Breakout Room pre-assign**](https://support.zoom.us/hc/en-us/articles/360032752671-Pre-assigning-participants-to-breakout-rooms) option.
       *
       * @example true
       */
      enable?: boolean;
      /**
       * Information about the breakout rooms.
       */
      rooms?: {
        /**
         * The breakout room's name.
         *
         * @example room1
         */
        name?: string;
        /**
         * The email addresses of the participants to assign to the breakout room.
         */
        participants?: string[];
      }[];
    };
    /**
     * The type of calendar integration used to schedule the meeting.
     * * `1` - [Zoom Outlook add-in](https://support.zoom.us/hc/en-us/articles/360031592971-Getting-started-with-Outlook-plugin-and-add-in)
     * * `2` - [Zoom for Google Workspace add-on](https://support.zoom.us/hc/en-us/articles/360020187492-Using-the-Zoom-for-Google-Workspace-add-on)
     *
     * Works with the `private_meeting` field to determine whether to share details of meetings or not.
     *
     * @example 1
     */
    calendar_type?: 1 | 2;
    /**
     * Whether to close registration after the event date. This value defaults to `false`.
     *
     * @example false
     * @default false
     */
    close_registration?: boolean;
    /**
     * Whether to host the meeting in China (CN). This value defaults to `false`.
     *
     * @example false
     * @deprecated true
     * @default false
     */
    cn_meeting?: boolean;
    /**
     * The contact email address for meeting registration.
     *
     * @example jchill@example.com
     */
    contact_email?: string;
    /**
     * The contact name for meeting registration.
     *
     * @example Jill Chill
     */
    contact_name?: string;
    /**
     * Whether to send email notifications to [alternative hosts](https://support.zoom.us/hc/en-us/articles/208220166) and [users with scheduling privileges](https://support.zoom.us/hc/en-us/articles/201362803-Scheduling-privilege). This value defaults to `true`.
     *
     * @example true
     * @default true
     */
    email_notification?: boolean;
    /**
     * The type of [end-to-end (E2EE) encryption](https://support.zoom.us/hc/en-us/articles/360048660871) to use for the meeting.
     * * `enhanced_encryption` - Enhanced encryption. Encryption is stored in the cloud when you enable this option.
     * * `e2ee` - End-to-end encryption. The encryption key is stored on your local device and **cannot** be obtained by anyone else. When you use E2EE encryption, [certain features](https://support.zoom.us/hc/en-us/articles/360048660871), such as cloud recording or phone and SIP/H.323 dial-in, are **disabled**.
     *
     * @example enhanced_encryption
     */
    encryption_type?: "enhanced_encryption" | "e2ee";
    /**
     * Whether to enable the [**Focus Mode** feature](https://support.zoom.us/hc/en-us/articles/360061113751-Using-focus-mode) when the meeting starts.
     *
     * @example true
     */
    focus_mode?: boolean;
    /**
     * A list of available global dial-in countries.
     */
    global_dial_in_countries?: string[];
    /**
     * Whether to start meetings with the host video on.
     *
     * @example true
     */
    host_video?: boolean;
    /**
     * Whether to host the meeting in India (IN). This value defaults to `false`.
     *
     * @example false
     * @deprecated true
     * @default false
     */
    in_meeting?: boolean;
    /**
     * If the value of the `join_before_host` field is `true`, this field indicates the time limits when a participant can join a meeting before the meeting's host.
     *
     * * `0` - Allow the participant to join the meeting at anytime.
     * * `5` - Allow the participant to join 5 minutes before the meeting's start time.
     * * `10` - Allow the participant to join 10 minutes before the meeting's start time.
     * * `15` - Allow the participant to join 15 minutes before the meeting's start time.
     *
     * @example 0
     */
    jbh_time?: 0 | 5 | 10 | 15;
    /**
     * Whether participants can join the meeting before its host. This field is only used for scheduled meetings (`2`) or recurring meetings (`3` and `8`). This value defaults to `false`.
     *
     * If the [**Waiting Room** feature](https://support.zoom.us/hc/en-us/articles/115000332726-Waiting-Room) is enabled, this setting is **disabled**.
     *
     * @example false
     * @default false
     */
    join_before_host?: boolean;
    /**
     * [Q&amp;A](https://support.zoom.com/hc/en/article?id=zm_kb&sysparm_article=KB0065237) for meeting.
     */
    question_and_answer?: {
      /**
       * * `true` - Enable [Q&amp;A](https://support.zoom.com/hc/en/article?id=zm_kb&sysparm_article=KB0065237) for meeting.
       *
       * * `false` - Disable Q&amp;A for meeting. If not provided, the default value will be based on the user's setting.
       *
       * @example true
       */
      enable?: boolean;
      /**
       * * `true` - Allow participants to submit questions.
       *
       * * `false` - Don't allow participants to submit questions.
       *
       * @example true
       */
      allow_submit_questions?: boolean;
      /**
       * * `true` - Allow participants to send questions without providing their name to the host, co-host, and panelists.
       *
       * * `false` - Do not allow anonymous questions. Not supported for simulive meeting.
       *
       * @example true
       */
      allow_anonymous_questions?: boolean;
      /**
       * Indicate whether you want to allow attendees to be able to view only answered questions or all questions.
       *
       * * `answered` - Attendees are able to view answered questions only.
       *
       * *  `all` - Attendees are able to view all questions submitted in the Q&amp;A.
       *
       * @example all
       */
      question_visibility?: "answered" | "all";
      /**
       * * `true` - Attendees can answer questions or leave a comment in the question thread.
       *
       * * `false` - Attendees can not answer questions or leave a comment in the question thread
       *
       * @example true
       */
      attendees_can_comment?: boolean;
      /**
       * * `true` - Attendees can select the thumbs up button to bring popular questions to the top of the Q&amp;A window.
       *
       * * `false` - Attendees can't select the thumbs up button on questions.
       *
       * @example true
       */
      attendees_can_upvote?: boolean;
    };
    /**
     * The meeting's [language interpretation settings](https://support.zoom.com/hc/en/article?id=zm_kb&sysparm_article=KB0064768). Make sure to add the language in the web portal in order to use it in the API. See link for details.
     *
     * **Note:** This feature is only available for certain Meeting add-on, Education, and Business and higher plans. If this feature is not enabled on the host's account, this setting will **not** be applied to the meeting.
     */
    language_interpretation?: {
      /**
       * Whether to enable [language interpretation](https://support.zoom.com/hc/en/article?id=zm_kb&sysparm_article=KB0064768) for the meeting. If not provided, the default value will be based on the user's setting.
       *
       * @example true
       */
      enable?: boolean;
      /**
       * Information about the meeting's language interpreters.
       */
      interpreters?: {
        /**
         * The interpreter's email address.
         *
         * @format email
         * @example interpreter@example.com
         */
        email?: string;
        /**
         * A comma-separated list of the interpreter's languages. The string must contain exactly two country IDs.
         *
         * Only system-supported languages are allowed: `US` (English), `CN` (Chinese), `JP` (Japanese), `DE` (German), `FR` (French), `RU` (Russian), `PT` (Portuguese), `ES` (Spanish), and `KR` (Korean).
         *
         * For example, to set an interpreter translating from English to Chinese, use `US,CN`.
         *
         * @example US,FR
         * @deprecated true
         */
        languages?: string;
        /**
         * A comma-separated list of the interpreter's languages. The string must contain exactly two languages.
         *
         * To get this value, use the `language_interpretation` object's `languages` and `custom_languages` values in the [**Get user settings**](/docs/api/users/#tag/users/GET/users/{userId}/settings) API response.
         *
         * **languages**: System-supported languages include `English`, `Chinese`, `Japanese`, `German`, `French`, `Russian`, `Portuguese`, `Spanish`, and `Korean`.
         *
         * **custom_languages**: User-defined languages added by the user.
         *
         * For example, an interpreter translating between English and French should use `English,French`.
         *
         * @example English,French
         */
        interpreter_languages?: string;
      }[];
    };
    /**
     * The meeting's [sign language interpretation settings](https://support.zoom.us/hc/en-us/articles/9644962487309-Using-sign-language-interpretation-in-a-meeting-or-webinar). Make sure to add the language in the web portal in order to use it in the API. See link for details.
     *
     * **Note:** If this feature is not enabled on the host's account, this setting will **not** be applied to the meeting.
     */
    sign_language_interpretation?: {
      /**
       * Whether to enable [sign language interpretation](https://support.zoom.us/hc/en-us/articles/9644962487309-Using-sign-language-interpretation-in-a-meeting-or-webinar) for the meeting. If not provided, the default value will be based on the user's setting.
       *
       * @example true
       */
      enable?: boolean;
      /**
       * Information about the meeting's sign language interpreters.
       *
       * @maximum 20
       */
      interpreters?: {
        /**
         * The interpreter's email address.
         *
         * @format email
         * @example interpreter@example.com
         */
        email?: string;
        /**
         * The interpreter's sign language.
         *
         *  To get this value, use the `sign_language_interpretation` object's `languages` and `custom_languages` values in the [**Get user settings**](/api-reference/zoom-api/methods#operation/userSettings) API response.
         *
         * @example American
         */
        sign_language?: string;
      }[];
    };
    /**
     * If true, only [authenticated](https://support.zoom.us/hc/en-us/articles/360037117472-Authentication-Profiles-for-Meetings-and-Webinars) users can join the meeting.
     *
     * @example true
     */
    meeting_authentication?: boolean;
    /**
     * A list of the meeting's invitees.
     */
    meeting_invitees?: {
      /**
       * The invitee's email address.
       *
       * @format email
       * @example jchill@example.com
       */
      email?: string;
    }[];
    /**
     * Whether to mute participants upon entry.
     *
     * @example false
     * @default false
     */
    mute_upon_entry?: boolean;
    /**
     * Whether to start meetings with the participant video on.
     *
     * @example false
     */
    participant_video?: boolean;
    /**
     * Whether to set the meeting as private.
     *
     * @example false
     */
    private_meeting?: boolean;
    /**
     * Whether to send registrants an email confirmation.
     * * `true` - Send a confirmation email.
     * * `false` - Do not send a confirmation email.
     *
     * @example true
     */
    registrants_confirmation_email?: boolean;
    /**
     * Whether to send registrants email notifications about their registration approval, cancellation, or rejection.
     *
     * * `true` - Send an email notification.
     * * `false` - Do not send an email notification.
     *
     *  Set this value to `true` to also use the `registrants_confirmation_email` parameter.
     *
     * @example true
     */
    registrants_email_notification?: boolean;
    /**
     * The meeting's registration type.
     * * `1` - Attendees register once and can attend any meeting occurrence.
     * * `2` - Attendees must register for each meeting occurrence.
     * * `3` - Attendees register once and can select one or more meeting occurrences to attend.
     *
     * This field is only for recurring meetings with fixed times (`8`). This value defaults to `1`.
     *
     * @example 1
     * @default 1
     */
    registration_type?: 1 | 2 | 3;
    /**
     * Whether to include social media sharing buttons on the meeting's registration page. This setting is only applied to meetings with registration enabled.
     *
     * @example true
     */
    show_share_button?: boolean;
    /**
     * Whether to use a [Personal Meeting ID (PMI)](/docs/api/rest/using-zoom-apis/#understanding-personal-meeting-id-pmi) instead of a generated meeting ID. This field is only used for scheduled meetings (`2`), instant meetings (`1`), or recurring meetings with no fixed time (`3`). This value defaults to `false`.
     *
     * @example false
     * @default false
     */
    use_pmi?: boolean;
    /**
     * Whether to enable the [**Waiting Room** feature](https://support.zoom.us/hc/en-us/articles/115000332726-Waiting-Room). If this value is `true`, this **disables** the `join_before_host` setting.
     *
     * @example false
     */
    waiting_room?: boolean;
    /**
     * Whether to add a watermark when viewing a shared screen. If not provided, the default value will be based on the user's setting.
     *
     * @example false
     */
    watermark?: boolean;
    /**
     * Whether the **Allow host to save video order** feature is enabled.
     *
     * @example true
     */
    host_save_video_order?: boolean;
    /**
     * Whether the **Allow alternative hosts to add or edit polls** feature is enabled. This requires Zoom version 5.8.0 or higher.
     *
     * @example true
     */
    alternative_host_update_polls?: boolean;
    /**
     * Whether to set the meeting as an internal meeting.
     *
     * @example false
     * @default false
     */
    internal_meeting?: boolean;
    /**
     * Information about the **Enable continuous meeting chat** feature. This setting only applies to scheduled and recurring meetings, types `2`, `3`, and `8`. It is **not supported** for type `1` instant meetings or type `10` screen share only meetings.
     */
    continuous_meeting_chat?: {
      /**
       * Whether to enable the **Enable continuous meeting chat** setting. The default value is based on user settings. When the **Enable continuous meeting chat** setting is enabled, the default value is true. When the setting is disabled, the default value is false.
       *
       * @example true
       */
      enable?: boolean;
      /**
       * Whether to enable the **Automatically add invited external users** setting.
       *
       * @example true
       * @deprecated true
       */
      auto_add_invited_external_users?: boolean;
      /**
       * Whether to enable the **Automatically add meeting participants** setting.
       *
       * @example true
       * @deprecated true
       */
      auto_add_meeting_participants?: boolean;
      /**
       * Who is added to the continuous meeting chat. Invitees are users added during scheduling. Participants are users who join the meeting.
       * * `all_users` - For all users, including external invitees and meeting participants.
       * * `org_invitees_and_participants` - Only for meeting invitees and participants in your organization.
       * * `org_invitees` - Only for meeting invitees in your organization.
       *
       * @example all_users
       */
      who_is_added?:
        | "all_users"
        | "org_invitees_and_participants"
        | "org_invitees";
    };
    /**
     * Whether to set the meeting as a participant focused meeting.
     *
     * @example false
     * @default false
     */
    participant_focused_meeting?: boolean;
    /**
     * Whether to push meeting changes to the calendar.
     *
     *  To enable this feature, configure the **Configure Calendar and Contacts Service** in the user's profile page of the Zoom web portal and enable the **Automatically sync Zoom calendar events information bi-directionally between Zoom and integrated calendars.** setting in the **Settings** page of the Zoom web portal.
     * * `true` - Push meeting changes to the calendar.
     * * `false` - Do not push meeting changes to the calendar.
     *
     * @example false
     * @default false
     */
    push_change_to_calendar?: boolean;
    /**
     * The meeting's resources.
     */
    resources?: {
      /**
       * The resource type.
       *
       * @example whiteboard
       */
      resource_type?: "whiteboard";
      /**
       * The resource ID.
       *
       * @example X4Hy02w3QUOdskKofgb9Jg
       */
      resource_id?: string;
      /**
       * The permission levels for users to access the whiteboard.
       * * `editor` - Users with link access can edit the board.
       * * `commenter` - Users with link access can comment on the board.
       * * `viewer` - Users with link access can view the board.
       *
       * @example editor
       * @default editor
       */
      permission_level?: "editor" | "commenter" | "viewer";
    }[];
    /**
     * Whether to automatically start a meeting summary. If not provided, the default value will be based on the user's setting.
     *
     * @example false
     */
    auto_start_meeting_summary?: boolean;
    /**
     * Defines who will receive a summary after this meeting. This field is applicable only when `auto_start_meeting_summary` is set to `true`.
     *
     * * `1` - Only meeting host.
     *
     * * `2` - Only meeting host, co-hosts, and alternative hosts.
     *
     * * `3` - Only meeting host and meeting invitees in our organization.
     *
     * * `4` - All meeting invitees including those outside of our organization. If not provided, the default value will be based on the user's setting.
     *
     * @example 1
     */
    who_will_receive_summary?: 1 | 2 | 3 | 4;
    /**
     * Whether to automatically start AI Companion questions. If not provided, the default value will be based on the user's setting.
     *
     * @example false
     */
    auto_start_ai_companion_questions?: boolean;
    /**
     * Defines who can ask questions about this meeting's transcript. This field is applicable only when `auto_start_ai_companion_questions` is set to `true`.
     *
     * * `1` - All participants and invitees.
     *
     * * `2` - All participants only from when they join.
     *
     * * `3` - Only meeting host.
     *
     * * `4` - Participants and invitees in our organization.
     *
     * * `5` - Participants in our organization only from when they join. If not provided, the default value will be based on the user's setting.
     *
     * @example 1
     */
    who_can_ask_questions?: 1 | 2 | 3 | 4 | 5;
    /**
     * The summary template ID used to generate a meeting summary based on a predefined template. To get available summary templates, use the **Get user summary templates** API. If not provided, the default value will be based on the user's setting. To enable this feature for your account, please [contact Zoom Support](https://support.zoom.com/hc/en).
     *
     * @example 1e1356ad
     */
    summary_template_id?: string;
    /**
     * Enable the device testing.
     *
     * @example false
     * @default false
     */
    device_testing?: boolean;
    /**
     * Whether to allow the host and co-hosts to fully control the mute state of participants. If not provided, the default value will be based on the user's setting.
     *
     * @example false
     */
    allow_host_control_participant_mute_state?: boolean;
    /**
     * Whether to disable the participant video during meeting. To enable this feature for your account, please [contact Zoom Support](https://support.zoom.us/hc/en-us).
     *
     * @example false
     * @default false
     */
    disable_participant_video?: boolean;
    /**
     * Whether to include authenticated guest's email addresses in meetings' attendee reports.
     *
     * @example true
     */
    email_in_attendee_report?: boolean;
  };
  /**
   * The meeting's start time. This field is only used for scheduled or recurring meetings with a fixed time. This supports local time and GMT formats.
   * * To set a meeting's start time in GMT, use the `yyyy-MM-ddTHH:mm:ssZ` date-time format. For example, `2020-03-31T12:02:00Z`.
   * * To set a meeting's start time using a specific timezone, use the `yyyy-MM-ddTHH:mm:ss` date-time format and specify the [timezone ID](/docs/api/references/abbreviations/#timezones) in the `timezone` field. If you do not specify a timezone, the `timezone` value defaults to your Zoom account's timezone. You can also use `UTC` for the `timezone` value.
   * **Note:** If no `start_time` is set for a scheduled meeting, the `start_time` is set at the current time and the meeting type changes to an instant meeting, which expires after 30 days.
   *
   * @format date-time
   * @example 2022-03-25T07:32:55Z
   */
  start_time?: string;
  /**
   * The account admin meeting template ID used to schedule a meeting using a [meeting template](https://support.zoom.us/hc/en-us/articles/360036559151-Meeting-templates). For a list of account admin-provided meeting templates, use the [**List meeting templates**](/docs/api-reference/zoom-api/methods#operation/listMeetingTemplates) API.
   * * At this time, this field **only** accepts account admin meeting template IDs.
   * * To enable the account admin meeting templates feature, [contact Zoom support](https://support.zoom.us/hc/en-us).
   *
   * @example Dv4YdINdTk+Z5RToadh5ug==
   */
  template_id?: string;
  /**
   * The timezone to assign to the `start_time` value. This field is only used for scheduled or recurring meetings with a fixed time.
   *
   * For a list of supported timezones and their formats, see our [timezone list](/docs/api/references/abbreviations/#timezones).
   *
   * @example America/Los_Angeles
   */
  timezone?: string;
  /**
   * The meeting's topic.
   *
   * @maxLength 200
   * @example My Meeting
   */
  topic?: string;
  /**
   * Information about the meeting's tracking fields.
   */
  tracking_fields?: {
    /**
     * The tracking field's label.
     *
     * @example field1
     */
    field: string;
    /**
     * The tracking field's value.
     *
     * @example value1
     */
    value?: string;
  }[];
  /**
   * The type of meeting.
   * * `1` - An instant meeting.
   * * `2` - A scheduled meeting.
   * * `3` - A recurring meeting with no fixed time.
   * * `8` - A recurring meeting with fixed time.
   * * `10` - A screen share only meeting.
   *
   * @example 2
   * @default 2
   */
  type?: 1 | 2 | 3 | 8 | 10;
};

export type MeetingCreateVariables = {
  body?: MeetingCreateRequestBody;
  pathParams: MeetingCreatePathParams;
} & FetcherExtraProps;

/**
 * [Create a meeting](https://support.zoom.us/hc/en-us/articles/201362413-Scheduling-meetings) for a user. For user-level apps, pass [the `me` value](/docs/api/rest/using-zoom-apis/#the-me-keyword) instead of the `userId` parameter.
 *
 * **Prerequisites:**
 * * A meeting's `start_url` value is the URL a host or an alternative host can use to start a meeting. The `start_url` value's expiration time is **two hours** for all regular users.
 * * For `custCreate` meeting hosts - users created with the `custCreate` parameter via the [**Create users**](/docs/api/users/#tag/users/POST/users) API - the expiration time of the `start_url` parameter is **90 days** from the generation of the `start_url`.
 * * For security reasons, the recommended way to programmatically get the updated `start_url` value after expiry is to call the [**Get a meeting**](/docs/api/meetings/#tag/meetings/GET/meetings/{meetingId}) API. Refer to the `start_url` value in the response.
 * * **100 requests per day**. The rate limit is applied against the `userId` of the **meeting host** used to make the request.
 *
 * **[Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `meeting:write:admin`,`meeting:write`
 *
 * **[Granular Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `meeting:write:meeting`,`meeting:write:meeting:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
 */
export const meetingCreate = (
  variables: MeetingCreateVariables,
  signal?: AbortSignal,
) =>
  fetch<
    MeetingCreateResponse,
    MeetingCreateError,
    MeetingCreateRequestBody,
    {},
    {},
    MeetingCreatePathParams
  >({ url: "/users/{userId}/meetings", method: "post", ...variables, signal });

export type ListUpcomingMeetingPathParams = {
  /**
   * The user's user ID or email address. For user-level apps, pass [the `me` value](/docs/api/rest/using-zoom-apis/#the-me-keyword).
   *
   * @example 30R7kT7bTIKSNUFEuH_Qlg
   */
  userId: string;
};

export type ListUpcomingMeetingError = Fetcher.ErrorWrapper<undefined>;

export type ListUpcomingMeetingResponse = {
  /**
   * The total number of all records available across all pages.
   *
   * @example 1
   */
  total_records?: number;
  /**
   * List of upcoming meeting objects.
   */
  meetings?: {
    /**
     * The [meeting ID](https://support.zoom.us/hc/en-us/articles/201362373-What-is-a-Meeting-ID-) - a unique identifier of the meeting in **long** format, represented as int64 data type in JSON. Also known as the meeting number.
     *
     * @format int64
     * @example 97763643886
     */
    id?: number;
    /**
     * The meeting topic.
     *
     * @example My Meeting
     */
    topic?: string;
    /**
     * Meeting types.
     * `1` - Instant meeting.
     * `2` - Scheduled meeting.
     * `3` - Recurring meeting with no fixed time.
     * `8` - Recurring meeting with a fixed time.
     *
     * @example 2
     */
    type?: 1 | 2 | 3 | 8;
    /**
     * The meeting's start time.
     *
     * @format date-time
     * @example 2022-03-23T06:00:00Z
     */
    start_time?: string;
    /**
     * Meeting duration.
     *
     * @example 60
     */
    duration?: number;
    /**
     * The timezone to format the meeting start time.
     *
     * @example America/Los_Angeles
     */
    timezone?: string;
    /**
     * The meeting creation time.
     *
     * @format date-time
     * @example 2022-03-23T05:31:16Z
     */
    created_at?: string;
    /**
     * The URL that participants can use to join a meeting.
     *
     * @example https://example.com/j/11111
     */
    join_url?: string;
    /**
     * The meeting passcode. This passcode may only contain characters `[a-z A-Z 0-9 @ - _ * !]`.
     *
     * @example 123456
     */
    passcode?: string;
    /**
     * Use a [personal meeting ID (PMI)](/docs/api/rest/using-zoom-apis/#understanding-personal-meeting-id-pmi). Only used for scheduled meetings and recurring meetings with no fixed time.
     *
     * @example false
     */
    use_pmi?: boolean;
    /**
     * Whether the current user is the host of the meeting.
     *
     * @example true
     */
    is_host?: boolean;
  }[];
};

export type ListUpcomingMeetingVariables = {
  pathParams: ListUpcomingMeetingPathParams;
} & FetcherExtraProps;

/**
 * List a Zoom user's upcoming meetings. For user-level apps, pass [the `me` value](/docs/api/rest/using-zoom-apis/#the-me-keyword) instead of the `userId` parameter.
 *
 * **Notes**:
 * * This API includes the meetings that Zoom users schedule and the meetings they are invited to join.
 * * This API only includes upcoming meetings within the next 24 hours.
 *
 * **Prerequisites**:
 * * To retrieve data for Zoom meetings that the user has been invited to from a third-party calendar (Google, Exchange, Office 365, Apple iCloud), the [**Calendar and Contacts Integration**](https://support.zoom.com/hc/en/article?id=zm_kb&sysparm_article=KB0069503) must be enabled in the Zoom Web Portal.
 *
 * **[Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `meeting:read`,`meeting:read:admin`
 *
 * **[Granular Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `meeting:read:list_upcoming_meetings`,`meeting:read:list_upcoming_meetings:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
 */
export const listUpcomingMeeting = (
  variables: ListUpcomingMeetingVariables,
  signal?: AbortSignal,
) =>
  fetch<
    ListUpcomingMeetingResponse,
    ListUpcomingMeetingError,
    undefined,
    {},
    {},
    ListUpcomingMeetingPathParams
  >({
    url: "/users/{userId}/upcoming_meetings",
    method: "get",
    ...variables,
    signal,
  });

export type UserPACsPathParams = {
  /**
   * The user's user ID or email address. For user-level apps, pass the `me` value.
   */
  userId: string;
};

export type UserPACsError = Fetcher.ErrorWrapper<undefined>;

export type UserPACsResponse = {
  /**
   * Information about the PAC accounts.
   */
  pac_accounts?: {
    /**
     * The conference ID.
     *
     * @format int64
     * @example 111111
     */
    conference_id?: number;
    /**
     * Information about the account's dedicated dial-in numbers.
     */
    dedicated_dial_in_number?: {
      /**
       * The dial-in country code.
       *
       * @example USA
       */
      country?: string;
      /**
       * The dial-in number.
       *
       * @maxLength 16
       * @example 5550110
       */
      number?: string;
    }[];
    /**
     * Information about the account's global dial-in numbers.
     */
    global_dial_in_numbers?: {
      /**
       * The global dial-in country code.
       *
       * @example USA
       */
      country?: string;
      /**
       * The global dial-in number.
       *
       * @maxLength 16
       * @example 5550100
       */
      number?: string;
    }[];
    /**
     * The listen-only password, up to six characters in length.
     *
     * @maxLength 6
     * @example 3c2b1a
     */
    listen_only_password?: string;
    /**
     * The participant password, up to six characters in length.
     *
     * @maxLength 6
     * @example a1b2c3
     */
    participant_password?: string;
  }[];
};

export type UserPACsVariables = {
  pathParams: UserPACsPathParams;
} & FetcherExtraProps;

/**
 * Retrieve a list of a user's [personal audio conference (PAC)](https://support.zoom.us/hc/en-us/articles/204517069-Getting-Started-with-Personal-Audio-Conference) accounts. For user-level apps, pass [the `me` value](https://developers.zoom.us/docs/api/rest/using-zoom-apis/#the-me-keyword) instead of the `userId` parameter.
 *
 *  PAC allows Pro or higher account holders to host meetings through PSTN (phone dial-in) only.
 *
 *  **Prerequisites**
 * * A Pro or higher plan with an [Audio Conferencing](https://support.zoom.us/hc/en-us/articles/204517069-Getting-Started-with-Personal-Audio-Conference) subscription.
 * * The [**Personal Audio Conference**](https://support.zoom.us/hc/en-us/articles/204517069-Getting-Started-with-Personal-Audio-Conference#h_01F5BPM447M6QDJXX50RSFXKJ3) setting enabled in the user's profile.
 *
 * **[Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `pac:read:admin`,`pac:read`
 *
 * **[Granular Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `pac:read:list_pac_accounts`,`pac:read:list_pac_accounts:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
 */
export const userPACs = (variables: UserPACsVariables, signal?: AbortSignal) =>
  fetch<UserPACsResponse, UserPACsError, undefined, {}, {}, UserPACsPathParams>(
    { url: "/users/{userId}/pac", method: "get", ...variables, signal },
  );

export type ReportSignInSignOutActivitiesQueryParams = {
  /**
   * Start date for which you would like to view the activity logs report. Using the `from` and `to` parameters, specify a monthly date range for the report as the API only provides one month worth of data in one request. The specified date range should fall within the last six months.
   *
   * @format date
   * @example 2019-09-01
   */
  from?: string;
  /**
   * End date up to which you would like to view the activity logs report.
   *
   * @format date
   * @example 2019-09-20
   */
  to?: string;
  /**
   * The number of records to be returned within a single API call
   *
   * @example 30
   */
  page_size?: number;
  /**
   * Next page token is used to paginate through large result sets
   *
   * @example b43YBRLJFg3V4vsSpxvGdKIGtNbxn9h9If2
   */
  next_page_token?: string;
};

export type ReportSignInSignOutActivitiesError =
  Fetcher.ErrorWrapper<undefined>;

export type ReportSignInSignOutActivitiesResponse = {
  /**
   * Array of activity logs.
   */
  activity_logs?: {
    /**
     * The client interface type using which the activity was performed.
     *
     * @example Browser
     */
    client_type?: string;
    /**
     * Email address of the user used for the activity.
     *
     * @format email
     * @example jchill@example.com
     */
    email?: string;
    /**
     * The IP address of the user's device.
     *
     * @example 192.0.2.1
     */
    ip_address?: string;
    /**
     * Time during which the activity occurred.
     *
     * @format date-time
     * @example 2019-09-15T19:13:41Z
     */
    time?: string;
    /**
     * The type of activity.
     * * `Sign in` &mdash; Sign in activity by user.
     * * `Sign out` &mdash; Sign out activity by user.
     *
     * @example Sign out
     */
    type?: "Sign in" | "Sign out";
    /**
     * Zoom client version of the user.
     *
     * @example 5.9.1.2581
     */
    version?: string;
  }[];
  /**
   * Start date from which you want the activity logs report to be generated.
   *
   * @example 2019-09-01T00:00:00Z
   */
  from?: string;
  /**
   * The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
   *
   * @example b43YBRLJFg3V4vsSpxvGdKIGtNbxn9h9If2
   */
  next_page_token?: string;
  /**
   * The number of records returned with a single API call.
   *
   * @example 30
   */
  page_size?: number;
  /**
   * End date until which you want the activity logs report to be generated
   *
   * @example 2019-09-20T00:00:00Z
   */
  to?: string;
};

export type ReportSignInSignOutActivitiesVariables = {
  queryParams?: ReportSignInSignOutActivitiesQueryParams;
} & FetcherExtraProps;

/**
 * Retrieve a list of sign in / sign out activity logs [report](https://support.zoom.us/hc/en-us/articles/201363213-Getting-Started-with-Reports) of users under a Zoom account.
 *
 * **Prerequisites**
 *
 * * Pro or higher plan.
 *
 *
 *
 * **[Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `report:read:admin`
 *
 * **[Granular Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `report:read:user_activities:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`
 */
export const reportSignInSignOutActivities = (
  variables: ReportSignInSignOutActivitiesVariables,
  signal?: AbortSignal,
) =>
  fetch<
    ReportSignInSignOutActivitiesResponse,
    ReportSignInSignOutActivitiesError,
    undefined,
    {},
    ReportSignInSignOutActivitiesQueryParams,
    {}
  >({ url: "/report/activities", method: "get", ...variables, signal });

export type GetBillingReportError = Fetcher.ErrorWrapper<undefined>;

export type GetBillingReportResponse = {
  billing_reports?: {
    /**
     * End date of the billing period.
     *
     * @format date
     * @example 2022-03-25
     */
    end_date?: string;
    /**
     * Unique Identifier of the report. Use this ID to retrieve billing invoice via the &quot;Get Billing Invoices API&quot;.
     *
     * You can also use this ID to export a CSV file of the billing report from this URL: `https://zoom.us/account/report/billing/export?id={id}`.
     *
     * @example indfhgfhfho
     */
    id?: string;
    /**
     * Start date of the billing period.
     *
     * @format date
     * @example 2022-03-25
     */
    start_date?: string;
    /**
     * Total tax amount for this billing period.
     *
     * @example 456
     */
    tax_amount?: string;
    /**
     * Total billing amount for this billing period.
     *
     * @example 456
     */
    total_amount?: string;
    /**
     * Type of the billing report. The value should be either of the following:
     *
     * `0` - Detailed Billing Reports
     * `1` - Custom Billing Reports
     *
     * @example 1
     */
    type?: 0 | 1;
  }[];
  /**
   * Currency of the billed amount.
   *
   * @example USD
   */
  currency?: string;
};

export type GetBillingReportVariables = FetcherExtraProps;

/**
 * Get department billing reports of a Zoom account.
 *
 * **Prerequisites:**
 *
 * * Pro or a higher account with Department Billing option enabled. Contact Zoom Support team for details.
 *
 *
 *
 * **[Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `report:read:admin`
 *
 * **[Granular Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `report:read:billing:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`
 */
export const getBillingReport = (
  variables: GetBillingReportVariables,
  signal?: AbortSignal,
) =>
  fetch<GetBillingReportResponse, GetBillingReportError, undefined, {}, {}, {}>(
    { url: "/report/billing", method: "get", ...variables, signal },
  );

export type GetBillingInvoicesReportsQueryParams = {
  /**
   * The billing report's unique identifier. Retrieve this ID from the response of **Get Billing Reports** API request.
   *
   * @example indfhgfhfho
   */
  billing_id: string;
};

export type GetBillingInvoicesReportsError = Fetcher.ErrorWrapper<undefined>;

export type GetBillingInvoicesReportsResponse = {
  /**
   * Currency of the billed amount in the invoice.
   *
   * @example USD
   */
  currency?: string;
  invoices?: {
    /**
     * End date of the invoice period.
     *
     * @format date
     * @example 2022-03-25
     */
    end_date?: string;
    /**
     * Name of the invoice.
     *
     * @example Audio Conferencing Options
     */
    invoice_charge_name?: string;
    /**
     * Invoice number
     *
     * @example 3
     */
    invoice_number?: string;
    /**
     * Number of licenses bought.
     *
     * @example 45
     */
    quantity?: number;
    /**
     * Start date of the invoice period.
     *
     * @format date
     * @example 2022-03-25
     */
    start_date?: string;
    /**
     * Tax amount in the invoice.
     *
     * @example 34
     */
    tax_amount?: string;
    /**
     * Total billed amount in the invoice.
     *
     * @example 45
     */
    total_amount?: string;
  }[];
};

export type GetBillingInvoicesReportsVariables = {
  queryParams: GetBillingInvoicesReportsQueryParams;
} & FetcherExtraProps;

/**
 * Get department billing invoices reports for a specific billing period. Provide the `billing_id` of the billing period for which you would like to retrieve the invoices. Retrieve this ID from the **Get Billing Reports** API.
 *
 * **Prerequisites:**
 *
 * * Pro or a higher account with Department Billing option enabled. Contact the Zoom Support team to enable this feature.
 *
 *
 *
 * **[Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `report:read:admin`
 *
 * **[Granular Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `report:read:billing_invoice:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `HEAVY`
 */
export const getBillingInvoicesReports = (
  variables: GetBillingInvoicesReportsVariables,
  signal?: AbortSignal,
) =>
  fetch<
    GetBillingInvoicesReportsResponse,
    GetBillingInvoicesReportsError,
    undefined,
    {},
    GetBillingInvoicesReportsQueryParams,
    {}
  >({ url: "/report/billing/invoices", method: "get", ...variables, signal });

export type ReportCloudRecordingQueryParams = {
  /**
   * Start date in 'yyyy-mm-dd' format. The date range defined by the &quot;from&quot; and &quot;to&quot; parameters should only be one month as the report includes only one month worth of data at once.
   *
   * @format date
   * @example 2022-01-01
   */
  from: string;
  /**
   * End date.
   *
   * @format date
   * @example 2022-01-28
   */
  to: string;
  /**
   * The group ID. To get a group ID, use the [**List groups**](/api-reference/zoom-api/methods#operation/groups) API.
   *
   *  **Note:** The API response will only contain users who are members of the queried group ID.
   *
   * @example TaVA8QKik_1233
   */
  group_id?: string;
};

export type ReportCloudRecordingError = Fetcher.ErrorWrapper<undefined>;

export type ReportCloudRecordingResponse = {
  /**
   * Start date for this report
   *
   * @format date
   * @example 2021-12-01
   */
  from?: string;
  /**
   * End date for this report
   *
   * @format date
   * @example 2021-12-30
   */
  to?: string;
  /**
   * Array of cloud usage objects
   */
  cloud_recording_storage?: {
    /**
     * Date of the usage
     *
     * @format date
     * @example 2021-12-05
     */
    date?: string;
    /**
     * Free storage
     *
     * @example Unlimited
     */
    free_usage?: string;
    /**
     * Paid storage
     *
     * @example 3 TB
     */
    plan_usage?: string;
    /**
     * Storage used on the date
     *
     * @example 3 MB
     */
    usage?: string;
  }[];
};

export type ReportCloudRecordingVariables = {
  queryParams: ReportCloudRecordingQueryParams;
} & FetcherExtraProps;

/**
 * Retrieve cloud recording usage report for a specified period. You can only get cloud recording reports that is one day earlier than the current date and for the most recent period of 6 months. The date gap between from and to dates should be smaller or equal to 30 days.
 *
 * **Prerequisites**
 *
 * * Pro or higher plan.
 *
 *
 *
 * **[Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `report:read:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`
 */
export const reportCloudRecording = (
  variables: ReportCloudRecordingVariables,
  signal?: AbortSignal,
) =>
  fetch<
    ReportCloudRecordingResponse,
    ReportCloudRecordingError,
    undefined,
    {},
    ReportCloudRecordingQueryParams,
    {}
  >({ url: "/report/cloud_recording", method: "get", ...variables, signal });

export type ReportDailyQueryParams = {
  /**
   * Year for this report
   *
   * @example 2022
   */
  year?: number;
  /**
   * Month for this report
   *
   * @example 3
   */
  month?: number;
  /**
   * The group ID. To get a group ID, use the [**List groups**](/docs/api/users/#tag/groups/GET/groups) API.
   *
   *  **Note:** The API response will only contain users who are members of the queried group ID.
   *
   * @example TaVA8QKik_1233
   */
  group_id?: string;
};

export type ReportDailyError = Fetcher.ErrorWrapper<undefined>;

export type ReportDailyResponse = {
  /**
   * Array of date objects.
   */
  dates?: {
    /**
     * Date for this object.
     *
     * @format date
     * @example 2022-03-01
     */
    date?: string;
    /**
     * Number of meeting minutes on this date.
     *
     * @example 34
     */
    meeting_minutes?: number;
    /**
     * Number of meetings on this date.
     *
     * @example 2
     */
    meetings?: number;
    /**
     * Number of new users on this date.
     *
     * @example 3
     */
    new_users?: number;
    /**
     * Number of participants on this date.
     *
     * @example 4
     */
    participants?: number;
  }[];
  /**
   * Month for this report.
   *
   * @example 3
   */
  month?: number;
  /**
   * Year for this report.
   *
   * @example 2022
   */
  year?: number;
};

export type ReportDailyVariables = {
  queryParams?: ReportDailyQueryParams;
} & FetcherExtraProps;

/**
 * Retrieve daily report to access the account-wide usage of Zoom services for each day in a given month. It lists the number of new users, meetings, participants, and meeting minutes.
 *
 * **Prerequisites**
 *
 * * Pro or higher plan.
 *
 *
 *
 * **[Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `report:read:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `HEAVY`
 */
export const reportDaily = (
  variables: ReportDailyVariables,
  signal?: AbortSignal,
) =>
  fetch<
    ReportDailyResponse,
    ReportDailyError,
    undefined,
    {},
    ReportDailyQueryParams,
    {}
  >({ url: "/report/daily", method: "get", ...variables, signal });

export type GethistorymeetingandwebinarlistQueryParams = {
  /**
   * The start date in `yyyy-mm-dd` format. The date range defined by the `from` and `to` parameters should only be one month, as the report includes only one month worth of data at once.
   *
   * @example 2024-12-23
   */
  from: string;
  /**
   * The end date `yyyy-MM-dd` format.
   *
   * @example 2024-12-24
   */
  to: string;
  /**
   * The type of date to query.
   * * `start_time` - Query by meeting's start time.
   * * `end_time` - Query by meeting's end time.
   *
   * This value defaults to `start_time`.
   *
   * @example end_time
   */
  date_type?: "start_time" | "end_time";
  /**
   * The meeting type to query.
   * - `all` - rerturn meetings and webinars
   * - `meeting` - only return meetings
   * - `webinar` - only return webinars
   *
   * @example meeting
   */
  meeting_type?: "meeting" | "webinar" | "all";
  /**
   * Query meetings that have this type of report.
   * - `all` - all meetings
   * - `poll` - meetings with poll data
   * - `survey` - meetings with survey data
   * - `qa` - meetings with Q&A data
   * - `resource` - meetings with resource link data
   * - `reaction` - meetings with reaction data
   *
   * @example poll
   */
  report_type?: "all" | "poll" | "survey" | "qa" | "resource" | "reaction";
  /**
   * The keywords of meeting topic or meeting ID.
   *
   * @example my meeting
   */
  search_key?: string;
  /**
   * The number of records to be returned within a single API call.
   *
   * @example 30
   */
  page_size?: number;
  /**
   * Use the next page token to paginate through large result sets. A next page token is returned whenever the set of available results exceeds the current page size. This token's expiration period is 15 minutes.
   *
   * @example IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2
   */
  next_page_token?: string;
  /**
   * The group ID. To get a group ID, use the [**List groups**](/docs/api/rest/reference/user/methods/#operation/groups) API.
   *
   *  **Note:** The API response will only contain users who are members of the queried group ID.
   *
   * @example TaVA8QKik_1233
   */
  group_id?: string;
};

export type GethistorymeetingandwebinarlistError =
  Fetcher.ErrorWrapper<undefined>;

export type GethistorymeetingandwebinarlistResponse = {
  /**
   * Use the next page token to paginate through large result sets. A next page token is returned whenever the set of available results exceeds the current page size. This token's expiration period is 15 minutes.
   *
   * @example b43YBRLJFg3V4vsSpxvGdKIGtNbxn9h9If2
   */
  next_page_token?: string;
  /**
   * The number of records returned with a single API call.
   *
   * @example 30
   */
  page_size?: number;
  /**
   * Array of history meetings.
   *
   * @maxItems 300
   */
  history_meetings?: {
    /**
     * The meeting unique universal identifier (UUID). Double encode your UUID when using it for API calls if the UUID begins with a '/'or contains '//' in it.
     *
     * @example gm8s9L+PTEC+FG3sFbd1Cw==
     */
    meeting_uuid?: string;
    /**
     * The [meeting ID](https://support.zoom.us/hc/en-us/articles/201362373-What-is-a-Meeting-ID-): Unique identifier of the meeting in &quot;**long**&quot; format(represented as int64 data type in JSON), also known as the meeting number.
     *
     * @format int64
     * @example 93201235621
     */
    meeting_id?: number;
    /**
     * The meeting type, either Meeting or Webinar.
     *
     * @example Meeting
     */
    type?: "Meeting" | "Webinar";
    /**
     * The host's display name.
     *
     * @example Jill Chill
     */
    host_display_name?: string;
    /**
     * The host's email address.
     *
     * @example jchill@example.com
     */
    host_email?: string;
    /**
     * The meeting's start date and time.
     *
     * @example 2024-12-23T07:09:03Z
     */
    start_time?: string;
    /**
     * The meeting's end date and time.
     *
     * @example 2024-12-23T08:09:03Z
     */
    end_time?: string;
    /**
     * The meeting's topic.
     *
     * @example My Meeting
     */
    topic?: string;
    /**
     * The number of meeting participants.
     *
     * @example 5
     */
    participants?: number;
    /**
     * The meeting's duration, in minutes.
     *
     * @example 60
     */
    duration?: number;
    /**
     * The total duration of all participants, in minutes.
     *
     * @example 83
     */
    total_participant_minutes?: number;
    /**
     * The host's department.
     *
     * @example Developers
     */
    department?: string;
    /**
     * The host's groups
     *
     * @maxItems 200
     * @example group_01
     */
    group?: string[];
    /**
     * Whether the meeting was created directly through Zoom or via an API request:
     * * If the meeting was created via an OAuth app, this field returns the OAuth app's name.
     * * If the meeting was created via JWT or the Zoom Web Portal, this returns the `Zoom` value.
     *
     * @example Zoom
     */
    source?: string;
    /**
     * This value shows how many people viewed the webinar on their computer. It does not include panelists or attendees who only listened by phone. Viewers who joined the meeting multiple times or from multiple devices are counted only once.
     *
     * @example 4
     */
    unique_viewers?: number;
    /**
     * The maximum number of online viewers at the same time during the webinar, excluding panelists.
     *
     * @example 3
     */
    max_concurrent_views?: number;
    /**
     * The meeting's create date and time.
     *
     * @example 2024-12-23T06:09:03Z
     */
    create_time?: string;
    /**
     * The custom attributes that the host is assigned
     *
     * @maxItems 5
     */
    custom_fields?: {
      /**
       * The custom attribute's name.
       *
       * @example attribute 1
       */
      key?: string;
      /**
       * The custom attribute's value.
       *
       * @example test
       */
      value?: string;
    }[];
    /**
     * The tracking fields and values assigned to the meeting.
     *
     * @maxItems 10
     */
    tracking_fields?: {
      /**
       * The label of the tracking field.
       *
       * @example Meeting purpose.
       */
      field?: string;
      /**
       * The value of the tracking field.
       *
       * @example Support
       */
      value?: string;
    }[];
    /**
     * VFfeatures used in the meeting.
     */
    feature_used?: {
      /**
       * Whether the screen was shared in the meeting.
       *
       * @example true
       */
      screen_sharing?: boolean;
      /**
       * Whether the video was on in the meeting.
       *
       * @example true
       */
      video_on?: boolean;
      /**
       * Whether to use remote control in the meeting.
       *
       * @example true
       */
      remote_control?: boolean;
      /**
       * Whether closed caption was enabled in the meeting.
       *
       * @example false
       */
      closed_caption?: boolean;
      /**
       * Whether breakout room was enabled in the meeting.
       *
       * @example false
       */
      breakout_room?: boolean;
      /**
       * Whether language translation was used in the meeting.
       *
       * @example false
       */
      language_interpretation?: boolean;
      /**
       * Whether anyone has joined the meeting by telephone.
       *
       * @example true
       */
      telephone_usage?: boolean;
      /**
       * Whether anyone in the meeting has sent a message in the meeting chat.
       *
       * @example false
       */
      in_meeting_chat?: boolean;
      /**
       * Whether the meeting has poll data.
       *
       * @example true
       */
      poll?: boolean;
      /**
       * Whether anyone has joined the meeting by Zoom Room.
       *
       * @example false
       */
      join_by_room?: boolean;
      /**
       * Whether to open the waiting room for the meeting.
       *
       * @example false
       */
      waiting_room?: boolean;
      /**
       * Whether live transcription was turned on.
       *
       * @example false
       */
      live_transcription?: boolean;
      /**
       * Whether anyone sent an emoticon.
       *
       * @example true
       */
      reaction?: boolean;
      /**
       * Whether the Zoom app was used in the meeting.
       *
       * @example false
       */
      zoom_apps?: boolean;
      /**
       * Whether annotation was used in the meeting.
       *
       * @example false
       */
      annotation?: boolean;
      /**
       * Whether anyone has raised hand in the meeting.
       *
       * @example true
       */
      raise_hand?: boolean;
      /**
       * Whether anyone used a virtual background in the meeting.
       *
       * @example true
       */
      virtual_background?: boolean;
      /**
       * Whether a whiteboard was used in the meeting.
       *
       * @example true
       */
      whiteboard?: boolean;
      /**
       * Whether immersive scene was enabled in then meeting.
       *
       * @example false
       */
      immersive_scene?: boolean;
      /**
       * Whether anyone used an avatar in the meeting.
       *
       * @example true
       */
      avatar?: boolean;
      /**
       * Whether anyone switched the meeting to their mobile phone.
       *
       * @example false
       */
      switch_to_mobile?: boolean;
      /**
       * Whether anyone sent files in the meeting chat.
       *
       * @example true
       */
      file_sharing?: boolean;
      /**
       * Whether the meeting summary was enabled.
       *
       * @example false
       */
      meeting_summary?: boolean;
      /**
       * Whether the meeting questions was enabled.
       *
       * @example false
       */
      meeting_questions?: boolean;
      /**
       * Whether to record the meeting to the local computer.
       *
       * @example true
       */
      record_to_computer?: boolean;
      /**
       * Whether to record the meeting to the cloud.
       *
       * @example true
       */
      record_to_cloud?: boolean;
      /**
       * Whether live translation was used in the meeting.
       *
       * @example false
       */
      live_translation?: boolean;
      /**
       * Whether registration was enabled for the meeting.
       *
       * @example false
       */
      registration?: boolean;
      /**
       * Whether smart recording was enabled for the meeting.
       *
       * @example true
       */
      smart_recording?: boolean;
    };
  }[];
};

export type GethistorymeetingandwebinarlistVariables = {
  queryParams: GethistorymeetingandwebinarlistQueryParams;
} & FetcherExtraProps;

/**
 * Retrieve a list of history meetings and webinars.
 *
 * **[Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `report:read:admin`
 *
 * **[Granular Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `report:read:list_history_meetings:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `HEAVY`
 */
export const gethistorymeetingandwebinarlist = (
  variables: GethistorymeetingandwebinarlistVariables,
  signal?: AbortSignal,
) =>
  fetch<
    GethistorymeetingandwebinarlistResponse,
    GethistorymeetingandwebinarlistError,
    undefined,
    {},
    GethistorymeetingandwebinarlistQueryParams,
    {}
  >({ url: "/report/history_meetings", method: "get", ...variables, signal });

export type ReportMeetingactivitylogsQueryParams = {
  /**
   * The start date in 'yyyy-MM-dd'format. The date range defined by the `from` and `to` parameters should only be one month, as the report includes only one month's worth of data at once.
   *
   * @format date
   * @example 2024-03-01
   */
  from: string;
  /**
   * The end date 'yyyy-MM-dd' format.
   *
   * @format date
   * @example 2024-03-04
   */
  to: string;
  /**
   * The number of records to be returned within a single API call.
   *
   * @maximum 300
   * @example 30
   * @default 30
   */
  page_size?: number;
  /**
   * Use the next page token to paginate through large result sets. A next page token is returned whenever the set of available results exceeds the current page size. This token's expiration period is 15 minutes.
   *
   * @example b43YBRLJFg3V4vsSpxvGdKIGtNbxn9h9If2
   */
  next_page_token?: string;
  /**
   * The meeting's number.
   *
   * @example 4221901192
   */
  meeting_number?: string;
  /**
   * An operator's name or email.
   *
   * @example Eileen
   */
  search_key?: string;
  /**
   * Activity type.
   * -1 - All activities.
   * 0 - Meeting created.
   * 1 - Meeting started.
   * 2 - User joined.
   * 3 - User left.
   * 4 - Remote control.
   * 5 - In-meeting chat.
   * 9 - Meeting ended.
   *
   * @example All Activities
   * @default All Activities
   */
  activity_type:
    | "All Activities"
    | "Meeting Created"
    | "Meeting Started"
    | "User Join"
    | "User Left"
    | "Remote Control"
    | "In-Meeting Chat"
    | "Meeting Ended";
};

export type ReportMeetingactivitylogsError = Fetcher.ErrorWrapper<undefined>;

export type ReportMeetingactivitylogsResponse = {
  /**
   * Array of meeting activity logs.
   *
   * @maxItems 300
   */
  meeting_activity_logs?: {
    /**
     * The meeting number.
     *
     * @example 982 610 0285
     */
    meeting_number: string;
    /**
     * The operator's activity time.
     *
     * @example 2024-03-21 07:09:03:216
     */
    activity_time: string;
    /**
     * The operator's display name.
     *
     * @example Jill Chill
     */
    operator: string;
    /**
     * The operator's email.
     *
     * @example jillchill@example.com
     */
    operator_email: string;
    /**
     * The operator's activity category.
     * -1 - All Activities.
     * 0 - Meeting created.
     * 1 - Meeting started.
     * 2 - User joined.
     * 3 - User left.
     * 4 - Remote control.
     * 5 - In-meeting chat.
     * 9 - Meeting ended.
     *
     * @example Meeting Started
     */
    activity_category: string;
    /**
     * The operator's activity detail.
     *
     * @example Meeting Started
     */
    activity_detail: string;
  }[];
  /**
   * Use the next page token to paginate through large result sets. A next page token is returned whenever the set of available results exceeds the current page size. This token's expiration period is 15 minutes.
   *
   * @example z5qFlq5cvH7C46k7PT7BQmpnW6izoOUWWt3
   */
  next_page_token?: string;
  /**
   * The number of records returned with a single API call.
   *
   * @example 30
   * @default 30
   */
  page_size?: number;
};

export type ReportMeetingactivitylogsVariables = {
  queryParams: ReportMeetingactivitylogsQueryParams;
} & FetcherExtraProps;

/**
 * Retrieve a list of a meeting activity logs. Contact Zoom Support to enable the meeting audit trail log feature on your account.
 *
 * **[Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `report:read:admin`
 *
 * **[Granular Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `report:read:meeting_activity_log:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `HEAVY`
 */
export const reportMeetingactivitylogs = (
  variables: ReportMeetingactivitylogsVariables,
  signal?: AbortSignal,
) =>
  fetch<
    ReportMeetingactivitylogsResponse,
    ReportMeetingactivitylogsError,
    undefined,
    {},
    ReportMeetingactivitylogsQueryParams,
    {}
  >({ url: "/report/meeting_activities", method: "get", ...variables, signal });

export type ReportMeetingDetailsPathParams = {
  /**
   * The meeting's ID or universally unique ID (UUID).
   * * If you provide a meeting ID, the API will return a response for the latest meeting instance.
   * * If you provide a meeting UUID that begins with a `/` character or contains the `//` characters, you **must** [double encode](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis/#meeting-id-and-uuid) the meeting UUID before making an API request.
   */
  meetingId: number | string;
};

export type ReportMeetingDetailsError = Fetcher.ErrorWrapper<undefined>;

export type ReportMeetingDetailsResponse = {
  /**
   * Custom keys and values assigned to the meeting.
   *
   * @maxItems 10
   */
  custom_keys?: {
    /**
     * Custom key associated with the user.
     *
     * @maxLength 64
     * @example Host Nation
     */
    key?: string;
    /**
     * Value of the custom key associated with the user.
     *
     * @maxLength 256
     * @example US
     */
    value?: string;
  }[];
  /**
   * Department of the host.
   *
   * @example HR
   */
  dept?: string;
  /**
   * Meeting duration.
   *
   * @example 2
   */
  duration?: number;
  /**
   * Meeting end time.
   *
   * @format date-time
   * @example 2022-03-15T07:42:22Z
   */
  end_time?: string;
  /**
   * [Meeting ID](https://support.zoom.us/hc/en-us/articles/201362373-What-is-a-Meeting-ID-): Unique identifier of the meeting in &quot;**long**&quot; format(represented as int64 data type in JSON), also known as the meeting number.
   *
   * @format int64
   * @example 3927350525
   */
  id?: number;
  /**
   * Number of meeting participants.
   *
   * @example 2
   */
  participants_count?: number;
  /**
   * Meeting start time.
   *
   * @format date-time
   * @example 2022-03-15T07:40:46Z
   */
  start_time?: string;
  /**
   * Meeting topic.
   *
   * @example My Meeting
   */
  topic?: string;
  /**
   * Number of meeting minutes. This represents the total amount of meeting minutes attended by each participant including the host, for meetings hosted by the user. For instance if there were one host(named A) and one participant(named B) in a meeting, the value of total_minutes would be calculated as below:
   *
   * **total_minutes** = Total Meeting Attendance Minutes of A + Total Meeting Attendance Minutes of B
   *
   * @example 3
   */
  total_minutes?: number;
  /**
   * Tracking fields.
   */
  tracking_fields?: {
    /**
     * Tracking fields type.
     *
     * @example Host Nation
     */
    field?: string;
    /**
     * Tracking fields value.
     *
     * @example US
     */
    value?: string;
  }[];
  /**
   * Meeting type.
   *
   * @example 2
   */
  type?: number;
  /**
   * User email.
   *
   * @example jchill@example.com
   */
  user_email?: string;
  /**
   * User display name.
   *
   * @example Jill Chill
   */
  user_name?: string;
  /**
   * Meeting UUID. Each meeting instance will generate its own UUID(i.e., after a meeting ends, a new UUID will be generated for the next instance of the meeting). [Double encode](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis/#meeting-id-and-uuid) your UUID when using it for API calls if the UUID begins with a '/' or contains '//' in it.
   *
   * @example iOTQZPmhTUq5a232ETb9eg==
   */
  uuid?: string;
};

export type ReportMeetingDetailsVariables = {
  pathParams: ReportMeetingDetailsPathParams;
} & FetcherExtraProps;

/**
 * Get a detailed report for a past meeting.
 *
 * **Prerequisites:**
 *
 * * Pro or a higher plan.
 *
 *
 *
 * **[Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `report:read:admin`
 *
 * **[Granular Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `report:read:meeting:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`
 */
export const reportMeetingDetails = (
  variables: ReportMeetingDetailsVariables,
  signal?: AbortSignal,
) =>
  fetch<
    ReportMeetingDetailsResponse,
    ReportMeetingDetailsError,
    undefined,
    {},
    {},
    ReportMeetingDetailsPathParams
  >({
    url: "/report/meetings/{meetingId}",
    method: "get",
    ...variables,
    signal,
  });

export type ReportMeetingParticipantsPathParams = {
  /**
   * The meeting's ID or universally unique ID (UUID).
   * * If you provide a meeting ID, the API will return a response for the latest meeting instance.
   * * If you provide a meeting UUID that begins with a `/` character or contains the `//` characters, you **must** double-encode the meeting UUID before making an API request.
   *
   * @example 4444AAAiAAAAAiAiAiiAii==
   */
  meetingId: string;
};

export type ReportMeetingParticipantsQueryParams = {
  /**
   * The number of records returned within a single API call.
   *
   * @maximum 300
   * @example 30
   * @default 30
   */
  page_size?: number;
  /**
   * Use the next page token to paginate through large result sets. A next page token is returned whenever the set of available results exceeds the current page size. This token's expiration period is 15 minutes.
   *
   * @example IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2
   */
  next_page_token?: string;
  /**
   * Provide `registrant_id` as the value for this field if you would like to see the registrant ID attribute in the response of this API call. A registrant ID is a unique identifier of a [meeting registrant](/docs/api-reference/zoom-api/methods#operation/meetingRegistrants).
   *
   * @example registrant_id
   */
  include_fields?: "registrant_id";
};

export type ReportMeetingParticipantsError = Fetcher.ErrorWrapper<undefined>;

export type ReportMeetingParticipantsResponse = {
  /**
   * The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
   *
   * @example Tva2CuIdTgsv8wAnhyAdU3m06Y2HuLQtlh3
   */
  next_page_token?: string;
  /**
   * The number of pages returned for the request made.
   *
   * @example 1
   */
  page_count?: number;
  /**
   * The number of records returned within a single API call.
   *
   * @maximum 300
   * @example 30
   * @default 30
   */
  page_size?: number;
  /**
   * The number of all records available across pages.
   *
   * @example 1
   */
  total_records?: number;
  /**
   * Array of meeting participant objects.
   */
  participants?: {
    /**
     * The participant's SDK identifier. This value can be alphanumeric, up to a maximum length of 35 characters.
     *
     * @maxLength 35
     * @example 349589LkJyeW
     */
    customer_key?: string;
    /**
     * Participant duration, in seconds, calculated by subtracting the `leave_time` from the `join_time` for the `user_id`. If the participant leaves and rejoins the same meeting, they are assigned a different `user_id` and Zoom displays their new duration in a separate object. Because of this, the duration may not reflect the total time the user was in the meeting.
     *
     * @example 259
     */
    duration?: number;
    /**
     * Indicates if failover happened during the meeting.
     *
     * @example false
     */
    failover?: boolean;
    /**
     * The participant's universally unique ID (UUID).
     * * If the participant joins the meeting by logging into Zoom, this value is the `id` value in the [**Get a user**](/docs/api-reference/zoom-api/methods#operation/user) API response.
     * * If the participant joins the meeting **without** logging into Zoom, this returns an empty string value.
     *
     * **Note:** Use the `participant_user_id` value instead of this value. We will remove this response in a future release.
     *
     * @example 30R7kT7bTIKSNUFEuH_Qlg
     */
    id?: string;
    /**
     * Participant join time.
     *
     * @format date-time
     * @example 2022-03-23T06:58:09Z
     */
    join_time?: string;
    /**
     * Participant leave time.
     *
     * @format date-time
     * @example 2022-03-23T07:02:28Z
     */
    leave_time?: string;
    /**
     * Participant display name.
     *
     * This returns an empty string value if the account calling the API is a BAA account.
     *
     * @example example
     */
    name?: string;
    /**
     * Unique identifier of the registrant. This field is only returned if you entered &quot;registrant_id&quot; as the value of `include_fields` query parameter.
     *
     * @example abcdefghij0-klmnopq23456
     */
    registrant_id?: string;
    /**
     * The participant's status.
     * * `in_meeting` - In a meeting.
     * * `in_waiting_room` - In a waiting room.
     *
     * @example in_meeting
     */
    status?: "in_meeting" | "in_waiting_room";
    /**
     * Participant email.
     *
     * If the participant is **not** part of the host's account, this returns an empty string value, with some exceptions. See [Email address display rules](/docs/api-reference/using-zoom-apis#email-address) for details. This returns an empty string value if the account calling the API is a BAA account.
     *
     * @example jchill@example.com
     */
    user_email?: string;
    /**
     * Participant ID. This is a unique ID assigned to the participant joining a meeting and is valid for that meeting only.
     *
     * @example 27423744
     */
    user_id?: string;
    /**
     * The [breakout room](https://support.zoom.us/hc/en-us/articles/206476313-Managing-breakout-rooms) ID. Each breakout room is assigned a unique ID.
     *
     * @example 27423744
     */
    bo_mtg_id?: string;
    /**
     * The participant's universally unique ID (UUID).
     * * If the participant joins the meeting by logging into Zoom, this value is the `id` value in the [**Get a user**](/docs/api-reference/zoom-api/methods#operation/user) API response.
     * * If the participant joins the meeting **without** logging into Zoom, this returns an empty string value.
     *
     * @example DYHrdpjrS3uaOf7dPkkg8w
     */
    participant_user_id?: string;
  }[];
};

export type ReportMeetingParticipantsVariables = {
  pathParams: ReportMeetingParticipantsPathParams;
  queryParams?: ReportMeetingParticipantsQueryParams;
} & FetcherExtraProps;

/**
 * Return a report of a past meeting with two or more participants, including the host. To return a report for past meeting with only **one** participant, use the [**List meeting participants**](/docs/api/accounts/#tag/dashboards/GET/metrics/meetings/{meetingId}/participants) API.
 *
 * **Note:**
 *
 * This API may return empty values for participants' `user_name`, `ip_address`, `location`, and `email` responses when the account calling this API:
 * * Is a [**legacy** HIPAA BAA account](/docs/api/references/legacy-business-associate-agreements/).
 *
 * **Prerequisites:**
 * * A Pro or a higher plan.
 *
 * **[Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `report:read:admin`
 *
 * **[Granular Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `report:read:list_meeting_participants:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `HEAVY`
 */
export const reportMeetingParticipants = (
  variables: ReportMeetingParticipantsVariables,
  signal?: AbortSignal,
) =>
  fetch<
    ReportMeetingParticipantsResponse,
    ReportMeetingParticipantsError,
    undefined,
    {},
    ReportMeetingParticipantsQueryParams,
    ReportMeetingParticipantsPathParams
  >({
    url: "/report/meetings/{meetingId}/participants",
    method: "get",
    ...variables,
    signal,
  });

export type ReportMeetingPollsPathParams = {
  /**
   * The meeting's ID or universally unique ID (UUID).
   * * If you provide a meeting ID, the API will return a response for the latest meeting instance.
   * * If you provide a meeting UUID that begins with a `/` character or contains the `//` characters, you **must** [double encode](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis/#meeting-id-and-uuid) the meeting UUID before making an API request.
   */
  meetingId: number | string;
};

export type ReportMeetingPollsError = Fetcher.ErrorWrapper<undefined>;

export type ReportMeetingPollsResponse = {
  /**
   * The [meeting ID](https://support.zoom.us/hc/en-us/articles/201362373-What-is-a-Meeting-ID).
   *
   * @format int64
   * @example 123456
   */
  id?: number;
  /**
   * The meeting's universally unique identifier (UUID). Each meeting instance generates a meeting UUID.
   *
   * @example 4444AAAiAAAAAiAiAiiAii==
   */
  uuid?: string;
  /**
   * The meeting's start time.
   *
   * @format date-time
   * @example 2022-02-01T12:34:12.66Z
   */
  start_time?: string;
  /**
   * Information about the meeting questions.
   */
  questions?: {
    /**
     * The participant's email address.
     *
     * @format email
     * @example jchill@example.com
     */
    email?: string;
    /**
     * The participant's display name. If the **Allow participants to answer questions anonymously** setting is enabled for a [poll](https://support.zoom.us/hc/en-us/articles/213756303-Polling-for-Meet), the participant's polling information is kept anonymous and the `name` field will return the &quot;Anonymous Attendee&quot; value.
     *
     * @example Jill Chill
     */
    name?: string;
    /**
     * The participant's first name. If the **Allow participants to answer questions anonymously** setting is enabled for a [poll](https://support.zoom.us/hc/en-us/articles/213756303-Polling-for-Meet), the participant's polling information is kept anonymous and the `first_name` field will return the &quot;Anonymous Attendee&quot; value.
     *
     * @example Jill
     */
    first_name?: string;
    /**
     * The participant's last name. If the **Allow participants to answer questions anonymously** setting is enabled for a [poll](https://support.zoom.us/hc/en-us/articles/213756303-Polling-for-Meet), the participant's polling information is kept anonymous and the `last_name` field will return the &quot;Anonymous Attendee&quot; value.
     *
     * @example Chill
     */
    last_name?: string;
    /**
     * Information about the user's questions and answers.
     */
    question_details?: {
      /**
       * The user's given answer.
       *
       * @example I am wonderful.
       */
      answer?: string;
      /**
       * The date and time at which the user answered the poll question.
       *
       * @example 2022-02-01T12:37:12.660Z
       */
      date_time?: string;
      /**
       * The poll's ID.
       *
       * @example 798fGJEWrA
       */
      polling_id?: string;
      /**
       * The poll question.
       *
       * @example How are you?
       */
      question?: string;
    }[];
  }[];
};

export type ReportMeetingPollsVariables = {
  pathParams: ReportMeetingPollsPathParams;
} & FetcherExtraProps;

/**
 * Use this API to get a report of [poll](https://support.zoom.us/hc/en-us/articles/213756303-Polling-for-Meetings) results for a past meeting.
 *
 *  **Prerequisites:**
 * * A Pro or a higher plan.
 *
 * **[Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `report:read:admin`
 *
 * **[Granular Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `report:read:list_meeting_polls:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`
 */
export const reportMeetingPolls = (
  variables: ReportMeetingPollsVariables,
  signal?: AbortSignal,
) =>
  fetch<
    ReportMeetingPollsResponse,
    ReportMeetingPollsError,
    undefined,
    {},
    {},
    ReportMeetingPollsPathParams
  >({
    url: "/report/meetings/{meetingId}/polls",
    method: "get",
    ...variables,
    signal,
  });

export type ReportMeetingQAPathParams = {
  /**
   * The meeting's ID or universally unique ID (UUID).
   * * If you provide a meeting ID, the API will return a response for the latest meeting instance.
   * * If you provide a meeting UUID that begins with a `/` character or contains the `//` characters, you **must** double-encode the meeting UUID before making an API request.
   */
  meetingId: string;
};

export type ReportMeetingQAError = Fetcher.ErrorWrapper<undefined>;

export type ReportMeetingQAResponse = {
  /**
   * The meeting ID in `long` format, represented as int64 data type in JSON. Also known as the meeting number.
   *
   * @format int64
   * @example 245603123123
   */
  id?: number;
  /**
   * Array of meeting question objects.
   */
  questions?: {
    /**
     * The user ID of the user who asked the question. This value returns blank for external users.
     *
     * @example hyROrs0TRCSvwmadI7L13w
     */
    user_id?: string;
    /**
     * Participant's email. If the participant is **not** part of the host's account, this returns an empty string value, with some exceptions. See [Email address display rules](https://developers.zoom.us/docs/api/rest/using-zoom-apis/#email-address-display-rules) for details.
     *
     * @example jchilll@example.com
     */
    email?: string;
    /**
     * Participant's display name.
     *
     *
     * If the anonymous [Q&amp;A](https://support.zoom.us/hc/en-us/articles/203686015-Getting-Started-with-Question-Answer) option is enabled and if a participant submits the Q&amp;A without providing their name, the value of the `name` field is &quot;Anonymous Attendee&quot;.
     *
     * @example Jill Chill
     */
    name?: string;
    /**
     * Array of questions from user.
     */
    question_details?: {
      /**
       * The given answer. If this is a live answer, the value is 'live answered'.
       * **Note:** All answers will be returned together and separated by semicolons. For more detailed answer information, please see the "answer_details" field.
       *
       * @example fine
       * @deprecated true
       */
      answer?: string;
      /**
       * Asked question.
       *
       * @example how are you
       */
      question?: string;
      /**
       * Question UUID.
       *
       * @example zxU4wOwnlxs
       */
      question_id?: string;
      /**
       * Question create time.
       *
       * @example 2022-03-15T07:48:00Z
       */
      create_time?: string;
      /**
       * Question status.
       * If not supported, the value will be `default`.
       *
       * @example open
       */
      question_status?:
        | "default"
        | "open"
        | "dismissed"
        | "answered"
        | "deleted";
      /**
       * Array of answers from the user.
       */
      answer_details?: {
        /**
         * The user ID of the user who answered the question. This value returns blank for external users.
         *
         * @example Cn_5wJ9mRNGyYOmpjVufBQ
         */
        user_id?: string;
        /**
         * User display name, including the host or participant.
         *
         * @example Paul
         */
        name?: string;
        /**
         * Participant's email. If the participant is **not** part of the host's account, this returns an empty string value, with some exceptions. See [Email address display rules](https://developers.zoom.us/docs/api/rest/using-zoom-apis/#email-address-display-rules) for details.
         *
         * @example paul@example.com
         */
        email?: string;
        /**
         * The answer from host or the comment from participant.
         *
         * @maxLength 1024
         * @example fine
         */
        content?: string;
        /**
         * Content submit time.
         *
         * @example 2022-03-15T07:50:00Z
         */
        create_time?: string;
        /**
         * Type of answer.
         *
         * @example default
         * @default default
         */
        type?:
          | "default"
          | "host_answered_publicly"
          | "host_answered_privately"
          | "participant_commented"
          | "host_answered";
      }[];
    }[];
  }[];
  /**
   * Meeting start time.
   *
   * @format date-time
   * @example 2022-03-15T07:40:46Z
   */
  start_time?: string;
  /**
   * The meeting UUID. Each meeting instance will generate its own UUID - for example, after a meeting ends, a new UUID will be generated for the next instance of the meeting. Double-encode your UUID when using it for API calls if the UUID begins with a '/' or contains '//'.
   *
   * @example 4444AAAiAAAAAiAiAiiAii==
   */
  uuid?: string;
};

export type ReportMeetingQAVariables = {
  pathParams: ReportMeetingQAPathParams;
} & FetcherExtraProps;

/**
 * Retrieve a report on questions asked and answered by participants from past meetings.
 *
 *
 *
 *
 * **Prerequisites:**
 *
 * * Pro plan or higher.
 *
 * **[Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `report:read:admin`
 *
 * **[Granular Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `report:read:meeting_qna:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `HEAVY`
 */
export const reportMeetingQA = (
  variables: ReportMeetingQAVariables,
  signal?: AbortSignal,
) =>
  fetch<
    ReportMeetingQAResponse,
    ReportMeetingQAError,
    undefined,
    {},
    {},
    ReportMeetingQAPathParams
  >({
    url: "/report/meetings/{meetingId}/qa",
    method: "get",
    ...variables,
    signal,
  });

export type ReportMeetingSurveyPathParams = {
  /**
   * The meeting's ID or universally unique ID (UUID).
   * * If you provide a meeting ID, the API will return a response for the latest meeting instance.
   * * If you provide a meeting UUID that begins with a `/` character or contains the `//` characters, you **must** double-encode the meeting UUID before making an API request.
   */
  meetingId: string;
};

export type ReportMeetingSurveyError = Fetcher.ErrorWrapper<undefined>;

export type ReportMeetingSurveyResponse = {
  /**
   * The meeting ID.
   *
   * @format int64
   * @example 123456
   */
  meeting_id?: number;
  /**
   * The meeting's universally unique identifier (UUID). Each meeting instance generates a meeting UUID.
   *
   * @example 4444AAAiAAAAAiAiAiiAii==
   */
  meeting_uuid?: string;
  /**
   * The meeting's start time.
   *
   * @format date-time
   * @example 2022-02-01T12:34:12.66Z
   */
  start_time?: string;
  /**
   * The survey's ID
   *
   * @example 8SFHRTGHAAAiAAAAAiAiAiiAii==
   */
  survey_id?: string;
  /**
   * The name of survey
   *
   * @example Survey of this meeting
   */
  survey_name?: string;
  /**
   * Information about the survey questions and answers.
   */
  survey_answers?: {
    /**
     * The participant's email address.
     *
     * @format email
     * @example jchill@example.com
     */
    email?: string;
    /**
     * The participant's display name. **Allow participants to answer questions anonymously** setting is enabled for a [survey](https://support.zoom.com/hc/en/article?id=zm_kb&sysparm_article=KB0057559), the participant's survey information is kept anonymous and the `name` field will return the &quot;Anonymous Attendee&quot; value.
     *
     * @example Jill Chill
     */
    name?: string;
    /**
     * The participant's first name. If the **Allow participants to answer questions anonymously** setting is enabled for a [survey](https://support.zoom.com/hc/en/article?id=zm_kb&sysparm_article=KB0057559), the participant's survey information is kept anonymous and the `first_name` field will return the &quot;Anonymous Attendee&quot; value.
     *
     * @example Jill
     */
    first_name?: string;
    /**
     * The participant's last name. If the **Allow participants to answer questions anonymously** setting is enabled for a [survey](https://support.zoom.com/hc/en/article?id=zm_kb&sysparm_article=KB0057559), the participant's survey information is kept anonymous and the `last_name` field will return the &quot;Anonymous Attendee&quot; value.
     *
     * @example Chill
     */
    last_name?: string;
    /**
     * Information about the user's questions and answers.
     */
    answer_details?: {
      /**
       * The survey question.
       *
       * @example How are you?
       */
      question?: string;
      /**
       * The question's ID
       *
       * @example 798fGJEWrA
       */
      question_id?: string;
      /**
       * The user's given answer.
       *
       * @example I am wonderful.
       */
      answer?: string;
      /**
       * The date and time at which the user answered the survey question.
       *
       * @example 2022-02-01T12:37:12.660Z
       */
      date_time?: string;
    }[];
  }[];
};

export type ReportMeetingSurveyVariables = {
  pathParams: ReportMeetingSurveyPathParams;
} & FetcherExtraProps;

/**
 * Retrieve a report on past [meeting survey](https://support.zoom.com/hc/en/article?id=zm_kb&sysparm_article=KB0057559).
 *
 *
 * **Prerequisites:**
 *
 * * Pro or a higher plan.
 *
 * **[Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `report:read:admin`
 *
 * **[Granular Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `report:read:meeting_survey:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `HEAVY`
 */
export const reportMeetingSurvey = (
  variables: ReportMeetingSurveyVariables,
  signal?: AbortSignal,
) =>
  fetch<
    ReportMeetingSurveyResponse,
    ReportMeetingSurveyError,
    undefined,
    {},
    {},
    ReportMeetingSurveyPathParams
  >({
    url: "/report/meetings/{meetingId}/survey",
    method: "get",
    ...variables,
    signal,
  });

export type ReportOperationLogsQueryParams = {
  /**
   * Start date in 'yyyy-mm-dd' or 'yyyy-MM-dd HH:mm' format. The date range defined by the `from` and `to` parameters should only be one month as the report includes only one month worth of data at once.
   *
   * @format date
   * @example 2022-01-01
   */
  from: string;
  /**
   * End date in 'yyyy-mm-dd' or 'yyyy-MM-dd HH:mm' format.
   *
   * @format date
   * @example 2022-01-28
   */
  to: string;
  /**
   * The number of records returned within a single API call.
   *
   * @maximum 300
   * @example 30
   * @default 30
   */
  page_size?: number;
  /**
   * Use the next page token to paginate through large result sets. A next page token is returned whenever the set of available results exceeds the current page size. This token's expiration period is 15 minutes.
   *
   * @example IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2
   */
  next_page_token?: string;
  /**
   * **Optional**
   *
   * Filter your response by a category type to see reports for a specific category.
   * The value for this field can be one of the following:
   *   `all`
   *  `user`
   *  `user_settings`
   *  `account`
   *  `billing`
   *  `im`
   *  `recording`
   *  `phone_contacts`
   *  `webinar`
   *  `sub_account`
   *  `role`
   *  `zoom_rooms`
   *
   * @example user
   */
  category_type?:
    | "all"
    | "user"
    | "user_settings"
    | "account"
    | "billing"
    | "im"
    | "recording"
    | "phone_contacts"
    | "webinar"
    | "sub_account"
    | "role"
    | "zoom_rooms";
};

export type ReportOperationLogsError = Fetcher.ErrorWrapper<undefined>;

export type ReportOperationLogsResponse = {
  /**
   * The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of the available result list exceeds the page size. The expiration period is 15 minutes.
   *
   * @example uBTK3NzNksdkuCUAQaFVFd86kyOr59zg4U2
   */
  next_page_token?: string;
  /**
   * The amount of records returns within a single API call.
   *
   * @maximum 300
   * @example 30
   * @default 30
   */
  page_size?: number;
  /**
   * Array of operation log objects
   */
  operation_logs?: {
    /**
     * Action
     *
     * @example delete
     */
    action?: string;
    /**
     * Category type
     *
     * @example user
     */
    category_type?: string;
    /**
     * Operation detail
     *
     * @example delete user - user2@example.com
     */
    operation_detail?: string;
    /**
     * The user who performed the operation.
     *
     * @example admin@example.com
     */
    operator?: string;
    /**
     * The time at which the operation was performed.
     *
     * @format date-time
     * @example 2022-01-25T17:52:16Z
     */
    time?: string;
  }[];
};

export type ReportOperationLogsVariables = {
  queryParams: ReportOperationLogsQueryParams;
} & FetcherExtraProps;

/**
 * The [Operations Logs](https://support.zoom.us/hc/en-us/articles/360032748331-Operation-Logs) report allows you to audit admin and user activity, such as adding a new user, changing account settings, and deleting recordings.
 *
 * Use this API to retrieve operation logs report for a specified period of time.
 *
 * **Prerequisites:**
 *
 * * Pro or higher plan.
 *
 * **[Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `report:read:admin`
 *
 * **[Granular Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `report:read:operation_logs:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `HEAVY`
 */
export const reportOperationLogs = (
  variables: ReportOperationLogsVariables,
  signal?: AbortSignal,
) =>
  fetch<
    ReportOperationLogsResponse,
    ReportOperationLogsError,
    undefined,
    {},
    ReportOperationLogsQueryParams,
    {}
  >({ url: "/report/operationlogs", method: "get", ...variables, signal });

export type ReportTelephoneQueryParams = {
  /**
   * Audio types:
   *  `1` - Toll-free Call-in &amp; Call-out.
   *  `2` - Toll
   *
   * `3` - SIP Connected Audio
   *
   * @example 3
   * @default 1
   */
  type?: "1" | "2" | "3";
  /**
   * The type of date to query.
   * * `start_time` &mdash; Query by call start time.
   * * `end_time` &mdash; Query by call end time.
   * * `meeting_start_time` &mdash; Query by meeting start time.
   * * `meeting_end_time` &mdash; Query by meeting end time.
   *
   * This value defaults to `start_time`.
   *
   * @example start_time
   * @default start_time
   */
  query_date_type?:
    | "start_time"
    | "end_time"
    | "meeting_start_time"
    | "meeting_end_time";
  /**
   * Start date in 'yyyy-mm-dd' format. The date range defined by the &quot;from&quot; and &quot;to&quot; parameters should only be one month as the report includes only one month worth of data at once.
   *
   * @format date
   * @example 2022-01-01
   */
  from: string;
  /**
   * End date.
   *
   * @format date
   * @example 2022-01-28
   */
  to: string;
  /**
   * The number of records returned within a single API call.
   *
   * @maximum 300
   * @example 30
   * @default 30
   */
  page_size?: number;
  /**
   * The page number of the current page in the returned records. This field is **not** available if the `query_date_type` parameter is the `meeting_start_time` or `meeting_end_time` value.
   *
   * This field is deprecated. Use the `next_page_token` query parameter for pagination.
   *
   * @example 1
   * @default 1
   */
  page_number?: number;
  /**
   * Use the next page token to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. This token's expiration period is 15 minutes.
   *
   * @example b43YBRLJFg3V4vsSpxvGdKIGtNbxn9h9If2
   */
  next_page_token?: string;
};

export type ReportTelephoneError = Fetcher.ErrorWrapper<undefined>;

export type ReportTelephoneResponse = {
  /**
   * Start date for this report.
   *
   * @format date
   * @example 2019-06-20
   */
  from?: string;
  /**
   * The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
   *
   * @example w7587w4eiyfsudgk
   */
  next_page_token?: string;
  /**
   * The number of pages returned for the request made. This field does **not** return if the `query_date_type` parameter is the `meeting_start_time` or `meeting_end_time` value.
   *
   * @example 1
   */
  page_count?: number;
  /**
   * The number of records returned with a single API call.
   *
   * @example 30
   */
  page_size?: number;
  /**
   * End date for this report.
   *
   * @format date
   * @example 2019-07-20
   */
  to?: string;
  /**
   * The total number of all the records available across pages. This field does **not** return if the `query_date_type` parameter is the `meeting_start_time` or `meeting_end_time` value.
   *
   * @example 1
   */
  total_records?: number;
  /**
   * Array of telephony objects.
   *
   * @maxItems 300
   */
  telephony_usage?: {
    /**
     * Caller's call-in number.
     *
     * @example ZoomGW
     */
    call_in_number?: string;
    /**
     * Country name.
     *
     * @example US
     */
    country_name?: string;
    /**
     * User department.
     *
     * @example HR
     */
    dept?: string;
    /**
     * Call leg duration
     *
     * @example 2
     */
    duration?: number;
    /**
     * Call leg end time
     *
     * @format date-time
     * @example 2022-03-15T07:42:22Z
     */
    end_time?: string;
    /**
     * User email.
     *
     * @example jchill@example.com
     */
    host_email?: string;
    /**
     * The user ID of the meeting host.
     *
     * @example _Rn_hal7ToG5p0AWwIIsjQ
     */
    host_id?: string;
    /**
     * User display name.
     *
     * @example Jill Chill
     */
    host_name?: string;
    /**
     * [Meeting ID](https://support.zoom.us/hc/en-us/articles/201362373-What-is-a-Meeting-ID-): Unique identifier of the meeting in &quot;**long**&quot; format(represented as int64 data type in JSON), also known as the meeting number.
     *
     * @format int64
     * @example 94908911701
     */
    meeting_id?: number;
    /**
     * Meeting type.
     *
     * @example Meeting
     */
    meeting_type?: string;
    /**
     * Toll-free telephone number.
     *
     * @example +1 8243
     */
    phone_number?: string;
    /**
     * Calling rate for the telephone call.
     *
     * @example 0.03
     */
    rate?: number;
    /**
     * The number that is signaled to Zoom.
     *
     * @example +1 8243
     */
    signaled_number?: string;
    /**
     * Call leg start time
     *
     * @format date-time
     * @example 2022-03-15T07:40:46Z
     */
    start_time?: string;
    /**
     * Total cost (USD) for Call Out. Calculated as plan rate by duration.
     *
     * @example 0.03
     */
    total?: number;
    /**
     * Call type.
     *
     * @example call-out
     */
    type?:
      | "toll-free"
      | "call-out"
      | "call-in"
      | "US toll-number"
      | "global toll-number"
      | "premium"
      | "premium call-in"
      | "Toll";
    /**
     * Meeting UUID.
     *
     * @example 4444AAAiAAAAAiAiAiiAii==
     */
    uuid?: string;
  }[];
};

export type ReportTelephoneVariables = {
  queryParams: ReportTelephoneQueryParams;
} & FetcherExtraProps;

/**
 * The [telephone report](https://support.zoom.us/hc/en-us/articles/206514816-Telephone-reports) allows you to view who dialed into meetings via phone (Audio Conferencing or SIP Connected Audio) and which number they dialed into and other details. Use this API to get telephone report for a specified period of time.
 *
 * **Prerequisites:**
 *
 * * Pro or higher plan.
 *
 * **[Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `report:read:admin`
 *
 * **[Granular Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `report:read:telephone:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `HEAVY`
 */
export const reportTelephone = (
  variables: ReportTelephoneVariables,
  signal?: AbortSignal,
) =>
  fetch<
    ReportTelephoneResponse,
    ReportTelephoneError,
    undefined,
    {},
    ReportTelephoneQueryParams,
    {}
  >({ url: "/report/telephone", method: "get", ...variables, signal });

export type ReportUpcomingEventsQueryParams = {
  /**
   * Start date in 'yyyy-mm-dd' format. The date range defined by the &quot;from&quot; and &quot;to&quot; parameters should only be one month as the report includes only one month worth of data at once.
   *
   * @format date
   * @example 2022-01-01
   */
  from: string;
  /**
   * End date.
   *
   * @format date
   * @example 2022-01-28
   */
  to: string;
  /**
   * The number of records returned within a single API call.
   *
   * @maximum 300
   * @example 30
   * @default 30
   */
  page_size?: number;
  /**
   * Use the next page token to paginate through large result sets. A next page token is returned whenever the set of available results exceeds the current page size. This token's expiration period is 15 minutes.
   *
   * @example IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2
   */
  next_page_token?: string;
  /**
   * The type of event to query.
   * * `meeting` &mdash; A meeting event.
   * * `webinar` &mdash; A webinar event.
   * * `all` &mdash; Both meeting and webinar events.
   *
   * This value defaults to `all`.
   *
   * @example meeting
   * @default all
   */
  type?: "meeting" | "webinar" | "all";
  /**
   * The group ID. To get a group ID, use the [**List groups**](/api-reference/zoom-api/methods#operation/groups) API.
   *
   *  **Note:** The API response will only contain meetings where the host is a member of the queried group ID.
   *
   * @example TaVA8QKik_1233
   */
  group_id?: string;
};

export type ReportUpcomingEventsError = Fetcher.ErrorWrapper<undefined>;

export type ReportUpcomingEventsResponse = {
  /**
   * The report's start date. This value must be within the past six months.
   *
   * @format date
   * @example 2022-03-01
   */
  from?: string;
  /**
   * The next page token is used to paginate through large result sets. A next page token returns when the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
   *
   * @example b43YBRLJFg3V4vsSpxvGdKIGtNbxn9h9If2
   */
  next_page_token?: string;
  /**
   * The number of records returned in a single API call.
   *
   * @maximum 300
   * @example 30
   * @default 30
   */
  page_size?: number;
  /**
   * The report's end date. This value must be within the past six months and cannot exceed a month from the `from` value.
   *
   * @format date
   * @example 2022-03-25
   */
  to?: string;
  /**
   * Information about the upcoming event.
   */
  upcoming_events?: {
    /**
     * The event host's department.
     *
     * @example HR
     */
    dept?: string;
    /**
     * The event host's ID.
     *
     * @example Or4-ZeV_SHCOfWRC71O1Fg
     */
    host_id?: string;
    /**
     * The event host's name.
     *
     * @example chi chi
     */
    host_name?: string;
    /**
     * The event's unique ID.
     *
     * @example vawMH9zAQLytjCnQiQXSUg==
     */
    id?: string;
    /**
     * The event's start time.
     *
     * @example 2022-03-15T07:40:46Z
     */
    start_time?: string;
    /**
     * The event's topic.
     *
     * @example My Meeting
     */
    topic?: string;
  }[];
};

export type ReportUpcomingEventsVariables = {
  queryParams: ReportUpcomingEventsQueryParams;
} & FetcherExtraProps;

/**
 * Use this API to list upcoming meeting and/or webinar events within a specified period of time. The report's time range is limited to one month.
 *
 * **Prerequisites:**
 * * A Pro or higher plan
 *
 * **[Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `report:read:admin`
 *
 * **[Granular Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `report:read:upcoming_meetings_webinars:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`
 */
export const reportUpcomingEvents = (
  variables: ReportUpcomingEventsVariables,
  signal?: AbortSignal,
) =>
  fetch<
    ReportUpcomingEventsResponse,
    ReportUpcomingEventsError,
    undefined,
    {},
    ReportUpcomingEventsQueryParams,
    {}
  >({ url: "/report/upcoming_events", method: "get", ...variables, signal });

export type ReportUsersQueryParams = {
  /**
   * Active or inactive hosts.
   *  `active` - Active hosts.
   *  `inactive` - Inactive hosts.
   *
   * @example active
   */
  type?: "active" | "inactive";
  /**
   * Start date in 'yyyy-mm-dd' format. The date range defined by the `from` and `to` parameters should only be one month as the report includes only one month worth of data at once.
   *
   * @format date
   * @example 2022-01-01
   */
  from: string;
  /**
   * End date.
   *
   * @format date
   * @example 2022-01-28
   */
  to: string;
  /**
   * The number of records returned within a single API call.
   *
   * @maximum 300
   * @example 30
   * @default 30
   */
  page_size?: number;
  /**
   * The page number of the current page in the returned records.
   *
   * @example 1
   * @default 1
   */
  page_number?: number;
  /**
   * The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
   *
   * @example b43YBRLJFg3V4vsSpxvGdKIGtNbxn9h9If2
   */
  next_page_token?: string;
  /**
   * The group ID. To get a group ID, use the [**List groups**](/docs/api/rest/reference/user/methods/#operation/groups) API.
   *
   *  **Note:** The API response will only contain users who are members of the queried group ID.
   *
   * @example TaVA8QKik_1233
   */
  group_id?: string;
};

export type ReportUsersError = Fetcher.ErrorWrapper<undefined>;

export type ReportUsersResponse = {
  /**
   * Start date for this report.
   *
   * @format date
   * @example 2022-03-01
   */
  from?: string;
  /**
   * The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
   *
   * @example b43YBRLJFg3V4vsSpxvGdKIGtNbxn9h9If2
   */
  next_page_token?: string;
  /**
   * The number of pages returned for the request made.
   *
   * @example 30
   */
  page_count?: number;
  /**
   * The page number of the current results.
   *
   * @example 1
   * @default 1
   */
  page_number?: number;
  /**
   * The number of records returned with a single API call.
   *
   * @maximum 300
   * @example 30
   * @default 30
   */
  page_size?: number;
  /**
   * End date for this report.
   *
   * @format date
   * @example 2022-03-25
   */
  to?: string;
  /**
   * The total number of all the records available across pages.
   *
   * @example 850
   */
  total_records?: number;
  /**
   * Number of meeting minutes for this range.
   *
   * @example 345
   */
  total_meeting_minutes?: number;
  /**
   * Number of meetings for this range.
   *
   * @example 34
   */
  total_meetings?: number;
  /**
   * Number of participants for this range.
   *
   * @example 56
   */
  total_participants?: number;
  /**
   * Array of user objects.
   */
  users?: {
    /**
     * Custom attributes that have been assigned to the user.
     */
    custom_attributes?: {
      /**
       * Identifier for the custom attribute.
       *
       * @example 4444AAAiAAAAAiAiAiiAii==
       */
      key?: string;
      /**
       * Name of the custom attribute.
       *
       * @example age
       */
      name?: string;
      /**
       * Value of the custom attribute.
       *
       * @example 18
       */
      value?: string;
    }[];
    /**
     * User department.
     *
     * @example HR
     */
    dept?: string;
    /**
     * User email.
     *
     * @example jchill@example.com
     */
    email?: string;
    /**
     * User ID.
     *
     * @example 2pyjK5VNQHadb2BY6Z4GbA
     */
    id?: string;
    /**
     * Number of meeting minutes for user.
     *
     * @example 342
     */
    meeting_minutes?: number;
    /**
     * Number of meetings for user.
     *
     * @example 45
     */
    meetings?: number;
    /**
     * Number of participants in meetings for user.
     *
     * @example 56
     */
    participants?: number;
    /**
     * User type.
     *
     * @example 1
     */
    type?: number;
    /**
     * User display name.
     *
     * @example Jill Chill
     */
    user_name?: string;
  }[];
};

export type ReportUsersVariables = {
  queryParams: ReportUsersQueryParams;
} & FetcherExtraProps;

/**
 * Retrieve a host report for a specified period of time within the last six months.
 * The report time range is limited to a month.
 *
 * You can specify the type of report and date range using the query parameters.
 *
 *
 * * The **Active Hosts** report displays a list of meetings, participants, and meeting minutes.
 * An **active host** is defined as any user who has hosted at least one meeting during the during the month specified in the `from` and `to` range.
 *
 *
 * * The **Inactive Hosts** report pulls a list of users who were not active during a specific period of time.
 * An **inactive host** is defined as any user who has not hosted any meetings during the specified period of time for the report. to be inactive.
 *
 *
 *
 *
 *
 *
 *
 * **Prerequisites:**
 *
 * * Pro or higher plan.
 *
 * **[Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `report:read:admin`
 *
 * **[Granular Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `report:read:list_users:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `HEAVY`
 */
export const reportUsers = (
  variables: ReportUsersVariables,
  signal?: AbortSignal,
) =>
  fetch<
    ReportUsersResponse,
    ReportUsersError,
    undefined,
    {},
    ReportUsersQueryParams,
    {}
  >({ url: "/report/users", method: "get", ...variables, signal });

export type ReportMeetingsPathParams = {
  /**
   * The user's user ID or email address. For user-level apps, pass the `me` value.
   */
  userId: string;
};

export type ReportMeetingsQueryParams = {
  /**
   * Start date in 'yyyy-mm-dd' format. The date range defined by the `from` and `to` parameters should only be one month as the report includes only one month worth of data at once.
   *
   * @format date
   * @example 2022-01-01
   */
  from: string;
  /**
   * End date.
   *
   * @format date
   * @example 2022-01-28
   */
  to: string;
  /**
   * The number of records returned within a single API call.
   *
   * @maximum 300
   * @example 30
   * @default 30
   */
  page_size?: number;
  /**
   * Use the next page token to paginate through large result sets. A next page token is returned whenever the set of available results exceeds the current page size. This token's expiration period is 15 minutes.
   *
   * @example IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2
   */
  next_page_token?: string;
  /**
   * The meeting type to query for:
   * * `past` &mdash; All past meetings.
   * * `pastOne` &mdash; A single past user meeting.
   * * `pastJoined` &mdash; All past meetings the account's users hosted or joined.
   *
   * @example past
   * @default past
   */
  type?: "past" | "pastOne" | "pastJoined";
};

export type ReportMeetingsError = Fetcher.ErrorWrapper<undefined>;

export type ReportMeetingsResponse = {
  /**
   * The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
   *
   * @example b43YBRLJFg3V4vsSpxvGdKIGtNbxn9h9If2
   */
  next_page_token?: string;
  /**
   * The number of pages returned for the request made.
   *
   * @example 1
   */
  page_count?: number;
  /**
   * **Deprecated.** We will no longer support this field in a future release. Instead, use the `next_page_token` for pagination.
   *
   * @example 1
   * @deprecated true
   * @default 1
   */
  page_number?: number;
  /**
   * The number of records returned with a single API call.
   *
   * @maximum 300
   * @example 30
   * @default 30
   */
  page_size?: number;
  /**
   * The total number of all the records available across pages.
   *
   * @example 20
   */
  total_records?: number;
  /**
   * The report's start date.
   *
   * @format date
   * @example 2020-07-14
   */
  from?: string;
  /**
   * Information about the meeting.
   */
  meetings?: {
    /**
     * Information about the meeting's assigned custom keys and values. This returns a maximum of 10 items.
     *
     * @maxItems 10
     */
    custom_keys?: {
      /**
       * The custom key name.
       *
       * @maxLength 64
       * @example Host Nation
       */
      key?: string;
      /**
       * The custom key's value.
       *
       * @maxLength 256
       * @example US
       */
      value?: string;
    }[];
    /**
     * The meeting's duration.
     *
     * @example 6
     */
    duration?: number;
    /**
     * The meeting's end date and time.
     *
     * @format date-time
     * @example 2020-07-15T23:30:19Z
     */
    end_time?: string;
    /**
     * The [meeting ID](https://support.zoom.us/hc/en-us/articles/201362373-What-is-a-Meeting-ID).
     *
     * @example 12345
     */
    id?: number;
    /**
     * The number of meeting participants.
     *
     * @example 2
     */
    participants_count?: number;
    /**
     * The Video SDK custom session ID.
     *
     * @example ABC36jaBI145
     */
    session_key?: string;
    /**
     * Whether the meeting was created directly through Zoom or via an API request:
     * * If the meeting was created via an OAuth app, this field returns the OAuth app's name.
     * * If the meeting was created via the Zoom Web Portal, this returns the `Zoom` value.
     *
     * @example Zoom
     */
    source?: string;
    /**
     * The meeting's start date and time.
     *
     * @format date-time
     * @example 2019-07-15T23:24:52Z
     */
    start_time?: string;
    /**
     * The meeting's topic.
     *
     * @example My Meeting
     */
    topic?: string;
    /**
     * The sum of meeting minutes from all meeting participants in the meeting.
     *
     * @example 11
     */
    total_minutes?: number;
    /**
     * The type of meeting or webinar.
     *
     * meeting:
     * * `1` &mdash; Instant meeting.
     * * `2` &mdash; Scheduled meeting.
     * * `3` &mdash; A recurring meeting with no fixed time.
     * * `4` &mdash; A meeting created via PMI (Personal Meeting ID).
     * * `7` &mdash; A [Personal Audio Conference](https://support.zoom.us/hc/en-us/articles/204517069-Getting-Started-with-Personal-Audio-Conference) (PAC).
     * * `8` - Recurring meeting with a fixed time.
     *
     * webinar:
     * * `5` &mdash; A webinar.
     * * `6` &mdash; A recurring webinar without a fixed time
     * * `9` &mdash; A recurring webinar with a fixed time.
     *
     * @example 2
     */
    type?: 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9;
    /**
     * The user's email address.
     *
     * @format email
     * @example jchill@example.com
     */
    user_email?: string;
    /**
     * The user's display name.
     *
     * @example Jill Chill
     */
    user_name?: string;
    /**
     * The meeting's universally unique identifier (UUID). Each meeting instance generates a meeting UUID.
     *
     * @example 4444AAAiAAAAAiAiAiiAii==
     */
    uuid?: string;
    /**
     * The meeting's scheduled date and time.
     *
     * @example 12/22/2021 16:20
     */
    schedule_time?: string;
    /**
     * The date and time when the attendee joined the waiting room.
     *
     * @example 02/11/2022 16:15
     */
    join_waiting_room_time?: string;
    /**
     * The date and time when the attendee joined the meeting.
     *
     * @example 12/22/2021 16:20
     */
    join_time?: string;
    /**
     * The date and time when the attendee left the meeting.
     *
     * @example 12/22/2021 17:13
     */
    leave_time?: string;
    /**
     * Host account name of hosting organization.
     *
     * @example org
     */
    host_organization?: string;
    /**
     * Host's name.
     *
     * @example Jill
     */
    host_name?: string;
    /**
     * Indicates whether or not the screenshare feature was used in the meeting.
     *
     * @example false
     */
    has_screen_share?: boolean;
    /**
     * Indicates whether or not the recording feature was used in the meeting.
     *
     * @example false
     */
    has_recording?: boolean;
    /**
     * Indicates whether or not the chat feature was used in the meeting.
     *
     * @example false
     */
    has_chat?: boolean;
    /**
     * The meeting's encryption status.
     * * `1` &mdash; E2E encryption.
     * * `2` &mdash; Enhanced encryption.
     *
     * @example 1
     */
    meeting_encryption_status?: 1 | 2;
    /**
     * The number of meeting participants from my account.
     *
     * @example 2
     */
    participants_count_my_account?: number;
  }[];
  /**
   * The report's end date.
   *
   * @format date
   * @example 2020-08-14
   */
  to?: string;
};

export type ReportMeetingsVariables = {
  pathParams: ReportMeetingsPathParams;
  queryParams: ReportMeetingsQueryParams;
} & FetcherExtraProps;

/**
 * Retrieve [report](https://support.zoom.us/hc/en-us/articles/216378603-Meeting-Reporting) on past meetings and webinars for a specified time period. The time range for the report is limited to a month and the month must fall within the past six months.
 *
 * Meetings and webinars are returned only if they have two or more unique participants.
 *
 *
 * **Prerequisites:**
 *
 * * Pro or higher plan.
 *
 * **[Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `report:read:admin`
 *
 * **[Granular Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `report:read:user:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `HEAVY`
 */
export const reportMeetings = (
  variables: ReportMeetingsVariables,
  signal?: AbortSignal,
) =>
  fetch<
    ReportMeetingsResponse,
    ReportMeetingsError,
    undefined,
    {},
    ReportMeetingsQueryParams,
    ReportMeetingsPathParams
  >({
    url: "/report/users/{userId}/meetings",
    method: "get",
    ...variables,
    signal,
  });

export type ReportWebinarDetailsPathParams = {
  /**
   * The webinar's ID or universally unique ID (UUID).
   * * If you provide a webinar ID, the API will return a response for the latest webinar instance.
   * * If you provide a webinar UUID that begins with a `/` character or contains the `//` characters, you **must** [double encode](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis/#meeting-id-and-uuid) the webinar UUID before making an API request.
   *
   * @example ABCDE12345
   */
  webinarId: string;
};

export type ReportWebinarDetailsError = Fetcher.ErrorWrapper<undefined>;

export type ReportWebinarDetailsResponse = {
  /**
   * Custom keys and values assigned to the meeting.
   *
   * @maxItems 10
   */
  custom_keys?: {
    /**
     * Custom key associated with the user.
     *
     * @maxLength 64
     * @example Host Nation
     */
    key?: string;
    /**
     * Value of the custom key associated with the user.
     *
     * @maxLength 256
     * @example US
     */
    value?: string;
  }[];
  /**
   * Department of the host.
   *
   * @example HR
   */
  dept?: string;
  /**
   * Meeting duration.
   *
   * @example 2
   */
  duration?: number;
  /**
   * Meeting end time.
   *
   * @format date-time
   * @example 2022-03-15T07:42:22Z
   */
  end_time?: string;
  /**
   * [Meeting ID](https://support.zoom.us/hc/en-us/articles/201362373-What-is-a-Meeting-ID-): Unique identifier of the meeting in &quot;**long**&quot; format(represented as int64 data type in JSON), also known as the meeting number.
   *
   * @format int64
   * @example 345678902224
   */
  id?: number;
  /**
   * Number of meeting participants.
   *
   * @example 4
   */
  participants_count?: number;
  /**
   * Meeting start time.
   *
   * @format date-time
   * @example 2022-03-15T07:40:46Z
   */
  start_time?: string;
  /**
   * Meeting topic.
   *
   * @example My Meeting
   */
  topic?: string;
  /**
   * Number of Webinar minutes. This represents the total amount of Webinar minutes attended by each participant including the host, for a Webinar hosted by the user. For instance if there were one host(named A) and one participant(named B) in a Webinar, the value of total_minutes would be calculated as below:
   *
   * **total_minutes** = Total Webinar Attendance Minutes of A + Total Webinar Attendance Minutes of B
   *
   * @example 3
   */
  total_minutes?: number;
  /**
   * Tracking fields.
   */
  tracking_fields?: {
    /**
     * Tracking fields type.
     *
     * @example Host Nation
     */
    field?: string;
    /**
     * Tracking fields value.
     *
     * @example US
     */
    value?: string;
  }[];
  /**
   * Meeting type.
   *
   * @example 4
   */
  type?: number;
  /**
   * User email.
   *
   * @example jchill@example.com
   */
  user_email?: string;
  /**
   * User display name.
   *
   * @example Jill Chill
   */
  user_name?: string;
  /**
   * Webinar UUID. Each webinar instance will generate its own UUID(i.e., after a meeting ends, a new UUID will be generated when the next instance of the webinar starts). [double encode](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis/#meeting-id-and-uuid) the UUID when using it for API calls if the UUID begins with a '/' or contains '//' in it.
   *
   * @example 4444AAAiAAAAAiAiAiiAii==
   */
  uuid?: string;
};

export type ReportWebinarDetailsVariables = {
  pathParams: ReportWebinarDetailsPathParams;
} & FetcherExtraProps;

/**
 * Retrieve a [report](https://support.zoom.us/hc/en-us/articles/201393719-Webinar-Reporting) containing past webinar details.
 *
 *
 * **Prerequisites:**
 *
 * * Pro or higher plan with Webinar add-on.
 *
 * **[Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `report:read:admin`
 *
 * **[Granular Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `report:read:webinar:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`
 */
export const reportWebinarDetails = (
  variables: ReportWebinarDetailsVariables,
  signal?: AbortSignal,
) =>
  fetch<
    ReportWebinarDetailsResponse,
    ReportWebinarDetailsError,
    undefined,
    {},
    {},
    ReportWebinarDetailsPathParams
  >({
    url: "/report/webinars/{webinarId}",
    method: "get",
    ...variables,
    signal,
  });

export type ReportWebinarParticipantsPathParams = {
  /**
   * The webinar's ID or universally unique ID (UUID).
   * * If you provide a webinar ID, the API will return a response for the latest webinar instance.
   * * If you provide a webinar UUID that begins with a `/` character or contains the `//` characters, you **must** double-encode the webinar UUID before making an API request.
   *
   * @example ABCDE12345
   */
  webinarId: string;
};

export type ReportWebinarParticipantsQueryParams = {
  /**
   * The number of records returned within a single API call.
   *
   * @maximum 300
   * @example 30
   * @default 30
   */
  page_size?: number;
  /**
   * Use the next page token to paginate through large result sets. A next page token is returned whenever the set of available results exceeds the current page size. This token's expiration period is 15 minutes.
   *
   * @example IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2
   */
  next_page_token?: string;
  /**
   * The additional query parameters to include.
   * * `registrant_id` - Include the registrant's ID in the API response. The registrant ID is the webinar participant's unique ID.
   *
   * @example registrant_id
   */
  include_fields?: "registrant_id";
};

export type ReportWebinarParticipantsError = Fetcher.ErrorWrapper<undefined>;

export type ReportWebinarParticipantsResponse = {
  /**
   * Use the next page token to paginate through large result sets. A next page token is returned whenever the set of available results exceeds the current page size. This token's expiration period is 15 minutes.
   *
   * @example Tva2CuIdTgsv8wAnhyAdU3m06Y2HuLQtlh3
   */
  next_page_token?: string;
  /**
   * The number of pages returned for the request made.
   *
   * @example 1
   */
  page_count?: number;
  /**
   * The number of records returned within a single API call.
   *
   * @maximum 300
   * @example 30
   * @default 30
   */
  page_size?: number;
  /**
   * The number of all records available across pages.
   *
   * @example 1
   */
  total_records?: number;
  /**
   * Information about the webinar participant.
   */
  participants?: {
    /**
     * The participant's SDK identifier. This value can be alphanumeric, up to a maximum length of 35 characters.
     *
     * @maxLength 35
     * @example 349589LkJyeW
     */
    customer_key?: string;
    /**
     * Participant duration, in seconds, calculated by subtracting the `leave_time` from the `join_time` for the `user_id`. If the participant leaves and rejoins the same meeting, they will be assigned a different `user_id` and Zoom displays their new duration in a separate object. Note that because of this, the duration may not reflect the total time the user was in the meeting.
     *
     * @example 20
     */
    duration?: number;
    /**
     * Whether failover occurred during the webinar.
     *
     * @example false
     */
    failover?: boolean;
    /**
     * The participant's universally unique ID (UUID).
     * * If the participant joins the meeting by logging into Zoom, this value is the `id` value in the [**Get a user**](/docs/api-reference/zoom-api/methods#operation/user) API response.
     * * If the participant joins the meeting **without** logging into Zoom, this returns an empty string value.
     *
     * **Note:** Use the `participant_user_id` value instead of this value. We will remove this response in a future release.
     *
     * @example ABCDEF123456
     */
    id?: string;
    /**
     * The participant's join time.
     *
     * @format date-time
     * @example 2019-02-01T12:34:12.66Z
     */
    join_time?: string;
    /**
     * The participant's leave time.
     *
     * @format date-time
     * @example 2019-02-01T12:54:12.66Z
     */
    leave_time?: string;
    /**
     * The participant's display name. This returns an empty string value if the account calling the API is a BAA account.
     *
     * @example jchill
     */
    name?: string;
    /**
     * The registrant's ID. This field only returns if you provide the `registrant_id` value for the `include_fields` query parameter.
     *
     * @example 123456FEDCBA
     */
    registrant_id?: string;
    /**
     * The participant's status.
     * * `in_meeting` - In a meeting.
     * * `in_waiting_room` - In a waiting room.
     *
     * @example in_meeting
     */
    status?: "in_meeting" | "in_waiting_room";
    /**
     * The participant's email address. If the participant is **not** part of the host's account, this returns an empty string value, with some exceptions. See [Email address display rules](/docs/api-reference/using-zoom-apis#email-address) for details. This returns an empty string value if the account calling the API is a BAA account.
     *
     * @pattern (^\s*$|^[A-Za-z0-9!#$%&''*+/=?^_`{|}~-]+(\.[A-Za-z0-9!#$%&''*+/=?^_`{|}~-]+)*@[A-Za-z0-9-]+(\.[A-Za-z0-9-]+)*(\.[A-Za-z]{2,})$)
     * @example jchill@example.com
     */
    user_email?: string;
    /**
     * The participant's ID. This ID is assigned to the participant upon joining the webinar and is only valid for that webinar.
     *
     * @example ABCDEF123456
     */
    user_id?: string;
    /**
     * The participant's universally unique ID (UUID).
     * * If the participant joins the meeting by logging into Zoom, this value is the `id` value in the [**Get a user**](/docs/api-reference/zoom-api/methods#operation/user) API response.
     * * If the participant joins the meeting **without** logging into Zoom, this returns an empty string value.
     *
     * @example DYHrdpjrS3uaOf7dPkkg8w
     */
    participant_user_id?: string;
    /**
     * The [breakout room](https://support.zoom.us/hc/en-us/articles/206476313-Managing-breakout-rooms) ID. Each breakout room is assigned a unique ID.
     *
     * @example Dkgwu8nm/ExG1vM+GhLRhA==
     */
    bo_mtg_id?: string;
  }[];
};

export type ReportWebinarParticipantsVariables = {
  pathParams: ReportWebinarParticipantsPathParams;
  queryParams?: ReportWebinarParticipantsQueryParams;
} & FetcherExtraProps;

/**
 * Get a detailed report on each webinar attendee. You can get webinar participant reports for the last 6 months.
 *
 *  **Prerequisites:**
 * * A Pro or a higher plan with Webinar add-on enabled.
 *
 * **[Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `report:read:admin`
 *
 * **[Granular Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `report:read:list_webinar_participants:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `HEAVY`
 */
export const reportWebinarParticipants = (
  variables: ReportWebinarParticipantsVariables,
  signal?: AbortSignal,
) =>
  fetch<
    ReportWebinarParticipantsResponse,
    ReportWebinarParticipantsError,
    undefined,
    {},
    ReportWebinarParticipantsQueryParams,
    ReportWebinarParticipantsPathParams
  >({
    url: "/report/webinars/{webinarId}/participants",
    method: "get",
    ...variables,
    signal,
  });

export type ReportWebinarPollsPathParams = {
  /**
   * The webinar's ID or universally unique ID (UUID).
   * * If you provide a webinar ID, the API will return a response for the latest webinar instance.
   * * If you provide a webinar UUID that begins with a `/` character or contains the `//` characters, you **must** double-encode the webinar UUID before making an API request.
   *
   * @example ABCDE12345
   */
  webinarId: string;
};

export type ReportWebinarPollsError = Fetcher.ErrorWrapper<undefined>;

export type ReportWebinarPollsResponse = {
  /**
   * The webinar ID.
   *
   * @format int64
   * @example 123456
   */
  id?: number;
  /**
   * Information about the webinar questions.
   */
  questions?: {
    /**
     * The participant's email address.
     *
     * @format email
     * @example jchill@example.com
     */
    email?: string;
    /**
     * The participant's display name. **Allow participants to answer questions anonymously** setting is enabled for a [poll](https://support.zoom.us/hc/en-us/articles/213756303-Polling-for-Meet), the participant's polling information is kept anonymous and the `name` field will return the &quot;Anonymous Attendee&quot; value.
     *
     * @example Jill Chill
     */
    name?: string;
    /**
     * The participant's first name. If the **Allow participants to answer questions anonymously** setting is enabled for a [poll](https://support.zoom.us/hc/en-us/articles/213756303-Polling-for-Meet), the participant's polling information is kept anonymous and the `first_name` field will return the &quot;Anonymous Attendee&quot; value.
     *
     * @example Jill
     */
    first_name?: string;
    /**
     * The participant's last name. If the **Allow participants to answer questions anonymously** setting is enabled for a [poll](https://support.zoom.us/hc/en-us/articles/213756303-Polling-for-Meet), the participant's polling information is kept anonymous and the `last_name` field will return the &quot;Anonymous Attendee&quot; value.
     *
     * @example Chill
     */
    last_name?: string;
    /**
     * Information about the user's questions and answers.
     */
    question_details?: {
      /**
       * The user's given answer.
       *
       * @example I am wonderful.
       */
      answer?: string;
      /**
       * The date and time at which the user answered the poll question.
       *
       * @example 2022-02-01T12:37:12.660Z
       */
      date_time?: string;
      /**
       * The poll's ID.
       *
       * @example 798fGJEWrA
       */
      polling_id?: string;
      /**
       * The poll question.
       *
       * @example How are you?
       */
      question?: string;
    }[];
  }[];
  /**
   * The webinar's start time.
   *
   * @format date-time
   * @example 2022-02-01T12:34:12.66Z
   */
  start_time?: string;
  /**
   * The webinar's universally unique identifier (UUID). Each webinar instance generates a webinar UUID.
   *
   * @example 4444AAAiAAAAAiAiAiiAii==
   */
  uuid?: string;
};

export type ReportWebinarPollsVariables = {
  pathParams: ReportWebinarPollsPathParams;
} & FetcherExtraProps;

/**
 * Retrieve a report on past [webinar polls](https://support.zoom.us/hc/en-us/articles/203749865-Polling-for-Webinars).
 *
 *
 * **Prerequisites:**
 *
 * * Pro or a higher plan with Webinar add-on enabled.
 *
 * **[Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `report:read:admin`
 *
 * **[Granular Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `report:read:list_webinar_polls:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`
 */
export const reportWebinarPolls = (
  variables: ReportWebinarPollsVariables,
  signal?: AbortSignal,
) =>
  fetch<
    ReportWebinarPollsResponse,
    ReportWebinarPollsError,
    undefined,
    {},
    {},
    ReportWebinarPollsPathParams
  >({
    url: "/report/webinars/{webinarId}/polls",
    method: "get",
    ...variables,
    signal,
  });

export type ReportWebinarQAPathParams = {
  /**
   * The webinar's ID or universally unique ID (UUID).
   * * If you provide a webinar ID, the API will return a response for the latest webinar instance.
   * * If you provide a webinar UUID that begins with a `/` character or contains the `//` characters, you **must** double-encode the webinar UUID before making an API request.
   *
   * @example ABCDE12345
   */
  webinarId: string;
};

export type ReportWebinarQAError = Fetcher.ErrorWrapper<undefined>;

export type ReportWebinarQAResponse = {
  /**
   * Webinar ID in `long` format, represented as int64 data type in JSON. Also known as the webinar number.
   *
   * @format int64
   * @example 245603123123
   */
  id?: number;
  /**
   * Array of webinar question objects.
   */
  questions?: {
    /**
     * The user ID of the user who asked the question. This value returns blank for external users.
     *
     * @example hyROrs0TRCSvwmadI7L13w
     */
    user_id?: string;
    /**
     * Participant's email. If the participant is **not** part of the host's account, this returns an empty string value, with some exceptions. See [Email address display rules](https://developers.zoom.us/docs/api/rest/using-zoom-apis/#email-address-display-rules) for details.
     *
     * @example jchilll@example.com
     */
    email?: string;
    /**
     * Participant's display name.
     *
     *
     * If anonymous [Q&amp;A](https://support.zoom.us/hc/en-us/articles/203686015-Getting-Started-with-Question-Answer) option is enabled and if a participant submits the Q&amp;A without providing their name, the value of the `name` field will be &quot;Anonymous Attendee&quot;.
     *
     * @example Jill Chill
     */
    name?: string;
    /**
     * Array of questions from the user.
     */
    question_details?: {
      /**
       * The given answer. If this is a live answer, the value is 'live answered'.
       * **Note:** All answers will be returned together and separated by semicolons. For more detailed answer information, please see the "answer_details" field.
       *
       * @example fine
       * @deprecated true
       */
      answer?: string;
      /**
       * Asked question.
       *
       * @example how are you
       */
      question?: string;
      /**
       * Question UUID.
       *
       * @example zxU4wOwnlxs
       */
      question_id?: string;
      /**
       * Question creation time.
       *
       * @example 2022-03-15T07:48:00Z
       */
      create_time?: string;
      /**
       * Question status.
       * If not supported, the value will be `default`.
       *
       * @example open
       */
      question_status?:
        | "default"
        | "open"
        | "dismissed"
        | "answered"
        | "deleted";
      /**
       * Array of answers from user.
       */
      answer_details?: {
        /**
         * The user ID of the user who answered the question. This value returns blank for external users.
         *
         * @example Cn_5wJ9mRNGyYOmpjVufBQ
         */
        user_id?: string;
        /**
         * User display name, including the host or participant.
         *
         * @example Paul
         */
        name?: string;
        /**
         * Participant's email. If the participant is **not** part of the host's account, this returns an empty string value, with some exceptions. See [Email address display rules](https://developers.zoom.us/docs/api/rest/using-zoom-apis/#email-address-display-rules) for details.
         *
         * @example paul@example.com
         */
        email?: string;
        /**
         * The answer from the host or the comment from a participant.
         *
         * @maxLength 1024
         * @example fine
         */
        content?: string;
        /**
         * Content submission time.
         *
         * @example 2022-03-15T07:50:00Z
         */
        create_time?: string;
        /**
         * Type of answer.
         *
         * @example default
         * @default default
         */
        type?:
          | "default"
          | "host_answered_publicly"
          | "host_answered_privately"
          | "participant_commented"
          | "host_answered";
      }[];
    }[];
  }[];
  /**
   * Webinar start time.
   *
   * @format date-time
   * @example 2022-03-15T07:40:46Z
   */
  start_time?: string;
  /**
   * Webinar UUID. Each webinar instance will generate its own UUID - after a webinar ends, a new UUID will be generated for the next instance of the webinar. Double-encode your UUID when using it for API calls if the UUID begins with a '/' or contains '//' in it.
   *
   * @example 4444AAAiAAAAAiAiAiiAii==
   */
  uuid?: string;
};

export type ReportWebinarQAVariables = {
  pathParams: ReportWebinarQAPathParams;
} & FetcherExtraProps;

/**
 * Retrieve a report on questions asked by participants and answered by panelists, co-hosts and hosts from past webinars.
 *
 *
 *
 *
 * **Prerequisites:**
 *
 * * Pro or a higher plan with the Webinar add-on enabled.
 *
 * **[Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `report:read:admin`
 *
 * **[Granular Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `report:read:webinar_qna:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `HEAVY`
 */
export const reportWebinarQA = (
  variables: ReportWebinarQAVariables,
  signal?: AbortSignal,
) =>
  fetch<
    ReportWebinarQAResponse,
    ReportWebinarQAError,
    undefined,
    {},
    {},
    ReportWebinarQAPathParams
  >({
    url: "/report/webinars/{webinarId}/qa",
    method: "get",
    ...variables,
    signal,
  });

export type ReportWebinarSurveyPathParams = {
  /**
   * The webinar's ID or universally unique ID (UUID).
   * * If you provide a webinar ID, the API returns a response for the latest webinar instance.
   * * If you provide a webinar UUID that begins with a `/` character or contains the `//` characters, you **must** double-encode the webinar UUID before making an API request.
   *
   * @example ABCDE12345
   */
  webinarId: string;
};

export type ReportWebinarSurveyError = Fetcher.ErrorWrapper<undefined>;

export type ReportWebinarSurveyResponse = {
  /**
   * The webinar ID.
   *
   * @format int64
   * @example 123456
   */
  webinar_id?: number;
  /**
   * The webinar's universally unique identifier (UUID). Each webinar instance generates a webinar UUID.
   *
   * @example 4444AAAiAAAAAiAiAiiAii==
   */
  webinar_uuid?: string;
  /**
   * The webinar's start time.
   *
   * @format date-time
   * @example 2022-02-01T12:34:12.66Z
   */
  start_time?: string;
  /**
   * The survey's ID
   *
   * @example 8SFHRTGHAAAiAAAAAiAiAiiAii==
   */
  survey_id?: string;
  /**
   * The name of survey
   *
   * @example Survey of this meeting
   */
  survey_name?: string;
  /**
   * Information about the survey questions and answers.
   */
  survey_answers?: {
    /**
     * The participant's email address.
     *
     * @format email
     * @example jchill@example.com
     */
    email?: string;
    /**
     * The participant's display name. **Allow participants to answer questions anonymously** setting is enabled for a [survey](https://support.zoom.com/hc/en/article?id=zm_kb&sysparm_article=KB0057559), the participant's survey information is kept anonymous and the `name` field will return the &quot;Anonymous Attendee&quot; value.
     *
     * @example Jill Chill
     */
    name?: string;
    /**
     * The participant's first name. If the **Allow participants to answer questions anonymously** setting is enabled for a [survey](https://support.zoom.com/hc/en/article?id=zm_kb&sysparm_article=KB0057559), the participant's survey information is kept anonymous and the `first_name` field will return the &quot;Anonymous Attendee&quot; value.
     *
     * @example Jill
     */
    first_name?: string;
    /**
     * The participant's last name. If the **Allow participants to answer questions anonymously** setting is enabled for a [survey](https://support.zoom.com/hc/en/article?id=zm_kb&sysparm_article=KB0057559), the participant's survey information is kept anonymous and the `last_name` field will return the &quot;Anonymous Attendee&quot; value.
     *
     * @example Chill
     */
    last_name?: string;
    /**
     * Information about the user's questions and answers.
     */
    answer_details?: {
      /**
       * The survey question.
       *
       * @example How are you?
       */
      question?: string;
      /**
       * The question's ID
       *
       * @example 798fGJEWrA
       */
      question_id?: string;
      /**
       * The user's given answer.
       *
       * @example I am wonderful.
       */
      answer?: string;
      /**
       * The date and time at which the user answered the survey question.
       *
       * @example 2022-02-01T12:37:12.660Z
       */
      date_time?: string;
    }[];
  }[];
};

export type ReportWebinarSurveyVariables = {
  pathParams: ReportWebinarSurveyPathParams;
} & FetcherExtraProps;

/**
 * Retrieve a report on past [webinar survey](https://support.zoom.com/hc/en/article?id=zm_kb&sysparm_article=KB0057559).
 *
 *
 * **Prerequisites:**
 *
 * * Pro or a higher plan with Webinar add-on enabled.
 *
 * **[Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `report:read:admin`
 *
 * **[Granular Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `report:read:webinar_survey:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `HEAVY`
 */
export const reportWebinarSurvey = (
  variables: ReportWebinarSurveyVariables,
  signal?: AbortSignal,
) =>
  fetch<
    ReportWebinarSurveyResponse,
    ReportWebinarSurveyError,
    undefined,
    {},
    {},
    ReportWebinarSurveyPathParams
  >({
    url: "/report/webinars/{webinarId}/survey",
    method: "get",
    ...variables,
    signal,
  });

export type ListSipPhonesQueryParams = {
  /**
   * **Deprecated.** We will no longer support this field in a future release. Instead, use the `next_page_token` for pagination.
   *
   * @example 1
   * @default 1
   */
  page_number?: number;
  /**
   * A user's user name or email address. If this parameter is provided, only the SIP phone system integration enabled for that specific user will be returned. Otherwise, all SIP phones on an account will be returned.
   *
   * @example jchill@example.com
   */
  search_key?: string;
  /**
   * The number of records returned within a single API call.
   *
   * @example 30
   */
  page_size?: number;
  /**
   * The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
   *
   * @example Tva2CuIdTgsv8wAnhyAdU3m06Y2HuLQtlh3
   */
  next_page_token?: string;
};

export type ListSipPhonesError = Fetcher.ErrorWrapper<undefined>;

export type ListSipPhonesResponse = {
  /**
   * @example Tva2CuIdTgsv8wAnhyAdU3m06Y2HuLQtlh3
   */
  next_page_token?: string;
  /**
   * The number of pages returned for the request made.
   *
   * @example 1
   */
  page_count?: number;
  /**
   * The page number of the current results.
   *
   * @example 1
   */
  page_number?: number;
  /**
   * The number of records returned within a single API call.
   *
   * @example 30
   */
  page_size?: number;
  /**
   * SIP phones object.
   */
  phones?: {
    /**
     * The authorization name of the user that is registered for SIP phone.
     *
     * @example testname
     */
    authorization_name?: string;
    /**
     * The name or IP address of your provider's SIP domain.
     *
     * @example example.com
     */
    domain?: string;
    /**
     * The SIP phone ID.
     *
     * @example 123456
     */
    id?: string;
    /**
     * The password generated for the user in the SIP account.
     *
     * @example apassword1
     */
    password?: string;
    /**
     * The IP address of the proxy server for SIP requests. Note that if you are using the UDP transport protocol, the default port is 5060. If you are using UDP with a different port number, that port number must be included with the IP address. If you are not using a proxy server, this value can be the same as the Register Server, or empty.
     *
     * @example 192.0.2.2
     */
    proxy_server?: string;
    /**
     * The IP address of the proxy server for SIP requests. Note that if you are using the UDP transport protocol, the default port is 5060. If you are using UDP with a different port number, that port number must be included with the IP address. If you are not using a proxy server, this value can be the same as the Register Server, or empty.
     *
     * @example 192.0.2.4
     */
    proxy_server2?: string;
    /**
     * The IP address of the proxy server for SIP requests. Note that if you are using the UDP transport protocol, the default port is 5060. If you are using UDP with a different port number, that port number must be included with the IP address. If you are not using a proxy server, this value can be the same as the Register Server, or empty.
     *
     * @example 192.0.2.6
     */
    proxy_server3?: string;
    /**
     * The IP address of the server that accepts REGISTER requests. Note that if you are using the UDP transport protocol, the default port is 5060. If you are using UDP with a different port number, that port number must be included with the IP address.
     *
     * @example 192.0.2.1
     */
    register_server?: string;
    /**
     * The IP address of the server that accepts REGISTER requests. Note that if you are using the UDP transport protocol, the default port is 5060. If you are using UDP with a different port number, that port number must be included with the IP address.
     *
     * @example 192.0.2.3
     */
    register_server2?: string;
    /**
     * The IP address of the server that accepts REGISTER requests. Note that if you are using the UDP transport protocol, the default port is 5060. If you are using UDP with a different port number, that port number must be included with the IP address.
     *
     * @example 192.0.2.5
     */
    register_server3?: string;
    /**
     * The number of minutes after which the SIP registration of the Zoom client user will expire, and the client will auto register to the SIP server.
     *
     * @example 60
     */
    registration_expire_time?: number;
    /**
     * Protocols supported by the SIP provider.
     *   The value must be either `UDP`, `TCP`, `TLS`, `AUTO`.
     *
     * @example UDP
     */
    transport_protocol?: "UDP" | "TCP" | "TLS" | "AUTO";
    /**
     * Protocols supported by the SIP provider.
     *   The value must be either `UDP`, `TCP`, `TLS`, `AUTO`.
     *
     * @example UDP
     */
    transport_protocol2?: "UDP" | "TCP" | "TLS" | "AUTO";
    /**
     * Protocols supported by the SIP provider.
     *   The value must be either `UDP`, `TCP`, `TLS`, `AUTO`.
     *
     * @example UDP
     */
    transport_protocol3?: "UDP" | "TCP" | "TLS" | "AUTO";
    /**
     * The email address of the user to associate with the SIP Phone. Can add `.win`, `.mac`, `.android`, `.ipad`, `.iphone`, `.linux`, `.pc`, `.mobile`, `.pad` at the end of the email (for example, `user@example.com.mac`) to add accounts for different platforms for the same user.
     *
     * @format email
     * @example jchill@example.com
     */
    user_email?: string;
    /**
     * The phone number associated with the user in the SIP account.
     *
     * @example Jill Chill
     */
    user_name?: string;
    /**
     * The number to dial for checking voicemail.
     *
     * @example 4000
     */
    voice_mail?: string;
  }[];
  /**
   * The total number of all the records available across pages.
   *
   * @example 20
   */
  total_records?: number;
};

export type ListSipPhonesVariables = {
  queryParams?: ListSipPhonesQueryParams;
} & FetcherExtraProps;

/**
 * List SIP phones on an account.
 *
 * Zoom's Phone System Integration (PSI), also referred as SIP phones, enables an organization to leverage the Zoom client to complete a Softphone registration to supported premise based PBX system. End users will have the ability to have Softphone functionality within a single client while maintaining a comparable interface to Zoom Phone.
 *
 * **Prerequisites**:
 * * Currently only supported on Cisco and Avaya PBX systems.
 * * User must enable SIP Phone Integration by contacting the [Sales](https://zoom.us/contactsales) team.
 *
 *
 * **[Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `sip_phone:read:admin`
 *
 * **[Granular Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `sip_phone:read:list_sip_phones:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
 */
export const listSipPhones = (
  variables: ListSipPhonesVariables,
  signal?: AbortSignal,
) =>
  fetch<
    ListSipPhonesResponse,
    ListSipPhonesError,
    undefined,
    {},
    ListSipPhonesQueryParams,
    {}
  >({ url: "/sip_phones", method: "get", ...variables, signal });

export type CreateSIPPhoneError = Fetcher.ErrorWrapper<undefined>;

export type CreateSIPPhoneResponse = {
  /**
   * The SIP phone ID.
   *
   * @example 123456
   */
  id?: string;
  /**
   * The authorization name of the user that is registered for SIP phone.
   *
   * @maxLength 64
   * @example testname
   */
  authorization_name?: string;
  /**
   * The name or IP address of your provider's SIP domain (example: CDC.WEB).
   *
   * @maxLength 64
   * @example example.com
   */
  domain?: string;
  /**
   * The password generated for the user in the SIP account.
   *
   * @example 123456
   */
  password?: string;
  /**
   * The IP address of the proxy server for SIP requests. Note that if you are using the UDP transport protocol, the default port is 5060. If you are using UDP with a different port number, that port number must be included with the IP address. If you are not using a proxy server, this value can be the same as the Register Server.
   *
   * @example 192.0.2.2
   */
  proxy_server?: string;
  /**
   * The IP address of the proxy server for SIP requests. Note that if you are using the UDP transport protocol, the default port is 5060. If you are using UDP with a different port number, that port number must be included with the IP address. If you are not using a proxy server, this value can be the same as the Register Server, or empty.
   *
   * @example 192.0.2.4
   */
  proxy_server2?: string;
  /**
   * The IP address of the proxy server for SIP requests. Note that if you are using the UDP transport protocol, the default port is 5060. If you are using UDP with a different port number, that port number must be included with the IP address. If you are not using a proxy server, this value can be the same as the Register Server, or empty.
   *
   * @example 192.0.2.6
   */
  proxy_server3?: string;
  /**
   * The IP address of the server that accepts REGISTER requests. Note that if you are using the UDP transport protocol, the default port is 5060. If you are using UDP with a different port number, that port number must be included with the IP address.
   *
   * @example 192.0.2.1
   */
  register_server?: string;
  /**
   * The IP address of the server that accepts REGISTER requests. Note that if you are using the UDP transport protocol, the default port is 5060. If you are using UDP with a different port number, that port number must be included with the IP address.
   *
   * @example 192.0.2.3
   */
  register_server2?: string;
  /**
   * The IP address of the server that accepts REGISTER requests. Note that if you are using the UDP transport protocol, the default port is 5060. If you are using UDP with a different port number, that port number must be included with the IP address.
   *
   * @example 192.0.2.5
   */
  register_server3?: string;
  /**
   * The number of minutes after which the SIP registration of the Zoom client user will expire, and the client will auto register to the SIP server.
   *
   * @maximum 127
   * @minimum 1
   * @example 60
   * @default 60
   */
  registration_expire_time?: number;
  /**
   * Protocols supported by the SIP provider.
   *   The value must be either `UDP`, `TCP`, `TLS`, `AUTO`.
   *
   * @example UDP
   */
  transport_protocol?: "UDP" | "TCP" | "TLS" | "AUTO";
  /**
   * Protocols supported by the SIP provider.
   *   The value must be either `UDP`, `TCP`, `TLS`, `AUTO`.
   *
   * @example UDP
   */
  transport_protocol2?: "UDP" | "TCP" | "TLS" | "AUTO";
  /**
   * Protocols supported by the SIP provider.
   *   The value must be either `UDP`, `TCP`, `TLS`, `AUTO`.
   *
   * @example UDP
   */
  transport_protocol3?: "UDP" | "TCP" | "TLS" | "AUTO";
  /**
   * The email address of the user to associate with the SIP Phone. Can add `.win`, `.mac`, `.android`, `.ipad`, `.iphone`, `.linux`, `.pc`, `.mobile`, `.pad` at the end of the email (for example, `user@example.com.mac`) to add accounts for different platforms for the same user.
   *
   * @maxLength 64
   * @format email
   * @example jchill@example.com
   */
  user_email?: string;
  /**
   * The phone number associated with the user in the SIP account.
   *
   * @maxLength 64
   * @example Jill Chill
   */
  user_name?: string;
  /**
   * The number to dial for checking voicemail.
   *
   * @maxLength 255
   * @example 4000
   */
  voice_mail?: string;
};

export type CreateSIPPhoneRequestBody = {
  /**
   * The authorization name of the user that is registered for SIP phone.
   *
   * @maxLength 64
   * @example testname
   */
  authorization_name: string;
  /**
   * The name or IP address of your provider's SIP domain (example: CDC.WEB).
   *
   * @maxLength 64
   * @example example.com
   */
  domain: string;
  /**
   * The password generated for the user in the SIP account.
   *
   * @example 123456
   */
  password: string;
  /**
   * The IP address of the proxy server for SIP requests. Note that if you are using the UDP transport protocol, the default port is 5060. If you are using UDP with a different port number, that port number must be included with the IP address. If you are not using a proxy server, this value can be the same as the Register Server.
   *
   * @example 192.0.2.2
   */
  proxy_server: string;
  /**
   * The IP address of the proxy server for SIP requests. Note that if you are using the UDP transport protocol, the default port is 5060. If you are using UDP with a different port number, that port number must be included with the IP address. If you are not using a proxy server, this value can be the same as the Register Server, or empty.
   *
   * @example 192.0.2.4
   */
  proxy_server2?: string;
  /**
   * The IP address of the proxy server for SIP requests. Note that if you are using the UDP transport protocol, the default port is 5060. If you are using UDP with a different port number, that port number must be included with the IP address. If you are not using a proxy server, this value can be the same as the Register Server, or empty.
   *
   * @example 192.0.2.6
   */
  proxy_server3?: string;
  /**
   * The IP address of the server that accepts REGISTER requests. Note that if you are using the UDP transport protocol, the default port is 5060. If you are using UDP with a different port number, that port number must be included with the IP address.
   *
   * @example 192.0.2.1
   */
  register_server: string;
  /**
   * The IP address of the server that accepts REGISTER requests. Note that if you are using the UDP transport protocol, the default port is 5060. If you are using UDP with a different port number, that port number must be included with the IP address.
   *
   * @example 192.0.2.3
   */
  register_server2?: string;
  /**
   * The IP address of the server that accepts REGISTER requests. Note that if you are using the UDP transport protocol, the default port is 5060. If you are using UDP with a different port number, that port number must be included with the IP address.
   *
   * @example 192.0.2.5
   */
  register_server3?: string;
  /**
   * The number of minutes after which the SIP registration of the Zoom client user will expire, and the client will auto register to the SIP server.
   *
   * @maximum 127
   * @minimum 1
   * @example 60
   * @default 60
   */
  registration_expire_time?: number;
  /**
   * Protocols supported by the SIP provider.
   *   The value must be either `UDP`, `TCP`, `TLS`, `AUTO`.
   *
   * @example UDP
   */
  transport_protocol?: "UDP" | "TCP" | "TLS" | "AUTO";
  /**
   * Protocols supported by the SIP provider.
   *   The value must be either `UDP`, `TCP`, `TLS`, `AUTO`.
   *
   * @example UDP
   */
  transport_protocol2?: "UDP" | "TCP" | "TLS" | "AUTO";
  /**
   * Protocols supported by the SIP provider.
   *   The value must be either `UDP`, `TCP`, `TLS`, `AUTO`.
   *
   * @example UDP
   */
  transport_protocol3?: "UDP" | "TCP" | "TLS" | "AUTO";
  /**
   * The email address of the user to associate with the SIP Phone. Can add `.win`, `.mac`, `.android`, `.ipad`, `.iphone`, `.linux`, `.pc`, `.mobile`, `.pad` at the end of the email (for example, `user@example.com.mac`) to add accounts for different platforms for the same user.
   *
   * @maxLength 64
   * @format email
   * @example jchill@example.com
   */
  user_email: string;
  /**
   * The phone number associated with the user in the SIP account.
   *
   * @maxLength 64
   * @example Jill Chill
   */
  user_name: string;
  /**
   * The number to dial for checking voicemail.
   *
   * @maxLength 255
   * @example 4000
   */
  voice_mail?: string;
};

export type CreateSIPPhoneVariables = {
  body: CreateSIPPhoneRequestBody;
} & FetcherExtraProps;

/**
 * Enable a user to use SIP phone.
 *
 * Zoom's Phone System Integration (PSI), also referred as SIP phones, enables an organization to leverage the Zoom client to complete a softphone registration to supported premise based PBX system. End users will have the ability to have softphone functionality within a single client while maintaining a comparable interface to Zoom Phone.
 *
 *
 * **Prerequisites**:
 * * Currently only supported on Cisco and Avaya PBX systems.
 * * The account owner or account admin must first enable SIP Phone Integration by contacting the [Sales](https://zoom.us/contactsales) team.
 *
 *
 * **[Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `sip_phone:write:admin`
 *
 * **[Granular Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `sip_phone:write:sip_phone:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
 */
export const createSIPPhone = (
  variables: CreateSIPPhoneVariables,
  signal?: AbortSignal,
) =>
  fetch<
    CreateSIPPhoneResponse,
    CreateSIPPhoneError,
    CreateSIPPhoneRequestBody,
    {},
    {},
    {}
  >({ url: "/sip_phones", method: "post", ...variables, signal });

export type ListSIPPhonePhonesQueryParams = {
  /**
   * A user's user name or email address. If this parameter is provided, only the SIP phone system integration enabled for that specific user will be returned. Otherwise, all SIP phones on an account will be returned.
   *
   * @example jchill@example.com
   */
  search_key?: string;
  /**
   * The number of records returned within a single API call.
   *
   * @maximum 300
   * @example 30
   * @default 30
   */
  page_size?: number;
  /**
   * Use the next page token to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. This tokan's expiration period is 15 minutes.
   *
   * @example Tva2CuIdTgsv8wAnhyAdU3m06Y2HuLQtlh3
   */
  next_page_token?: string;
};

export type ListSIPPhonePhonesError = Fetcher.ErrorWrapper<undefined>;

export type ListSIPPhonePhonesResponse = {
  /**
   * @example Tva2CuIdTgsv8wAnhyAdU3m06Y2HuLQtlh3
   */
  next_page_token?: string;
  /**
   * The number of records returned within a single API call.
   *
   * @maximum 300
   * @example 30
   * @default 30
   */
  page_size?: number;
  /**
   * SIP phones object.
   *
   * @maxItems 300
   */
  phones?: {
    /**
     * The authorization name of the user that is registered for SIP phone.
     *
     * @example testname
     */
    authorization_name?: string;
    /**
     * The name or IP address of your provider's SIP domain.
     *
     * @example example.com
     */
    domain?: string;
    /**
     * The SIP phone ID.
     *
     * @example 123456
     */
    phone_id?: string;
    /**
     * The password generated for the user in the SIP account.
     *
     * @example apassword1
     */
    password?: string;
    /**
     * The number of minutes after which the SIP registration of the Zoom client user will expire, and the client will auto register to the SIP server.
     *
     * @example 60
     */
    registration_expire_time?: number;
    /**
     * The email address of the user to associate with the SIP Phone. Can add `.pc`, `.mobile`, `.pad` at the end of the email (for example, `user@example.com.pc`) to add accounts for different platforms for the same user.
     *
     * @format email
     * @example jchill@example.com
     */
    user_email?: string;
    /**
     * The phone number associated with the user in the SIP account.
     *
     * @example Jill Chill
     */
    user_name?: string;
    /**
     * The number to dial for checking voicemail.
     *
     * @example 4000
     */
    voice_mail?: string;
    /**
     * The displayed phone number associated with the user can be either in extension format or E.164 format. You can specify the displayed number when the dialable number differs from the SIP username.
     *
     * @maxLength 64
     * @example 5551110105
     */
    display_number?: string;
    /**
     * Defined a set of basic components of SIP network architecture, including proxy_server, register_server and transport_protocol.
     */
    server?: {
      /**
       * The IP address of the proxy server for SIP requests. Note that if you are using the UDP transport protocol, the default port is 5060. If you are using UDP with a different port number, that port number must be included with the IP address. If you are not using a proxy server, this value can be the same as the Register Server.
       *
       * @example 192.0.2.2
       */
      proxy_server?: string;
      /**
       * The IP address of the server that accepts REGISTER requests. Note that if you are using the UDP transport protocol, the default port is 5060. If you are using UDP with a different port number, that port number must be included with the IP address.
       *
       * @example 192.0.2.2
       */
      register_server?: string;
      /**
       * Protocols supported by the SIP provider.
       *   The value must be either `UDP`, `TCP`, `TLS`, `AUTO`.
       *
       * @example UDP
       */
      transport_protocol?: "UDP" | "TCP" | "TLS" | "AUTO";
    };
    /**
     * Defined a set of basic components of SIP network architecture, including proxy_server, register_server and transport_protocol.
     */
    server_2?: {
      /**
       * The IP address of the proxy server for SIP requests. Note that if you are using the UDP transport protocol, the default port is 5060. If you are using UDP with a different port number, that port number must be included with the IP address. If you are not using a proxy server, this value can be the same as the Register Server.
       *
       * @example 192.0.2.2
       */
      proxy_server?: string;
      /**
       * The IP address of the server that accepts REGISTER requests. Note that if you are using the UDP transport protocol, the default port is 5060. If you are using UDP with a different port number, that port number must be included with the IP address.
       *
       * @example 192.0.2.2
       */
      register_server?: string;
      /**
       * Protocols supported by the SIP provider.
       *   The value must be either `UDP`, `TCP`, `TLS`, `AUTO`.
       *
       * @example UDP
       */
      transport_protocol?: "UDP" | "TCP" | "TLS" | "AUTO";
    };
    /**
     * Defined a set of basic components of SIP network architecture, including proxy_server, register_server and transport_protocol.
     */
    server_3?: {
      /**
       * The IP address of the proxy server for SIP requests. Note that if you are using the UDP transport protocol, the default port is 5060. If you are using UDP with a different port number, that port number must be included with the IP address. If you are not using a proxy server, this value can be the same as the Register Server.
       *
       * @example 192.0.2.2
       */
      proxy_server?: string;
      /**
       * The IP address of the server that accepts REGISTER requests. Note that if you are using the UDP transport protocol, the default port is 5060. If you are using UDP with a different port number, that port number must be included with the IP address.
       *
       * @example 192.0.2.2
       */
      register_server?: string;
      /**
       * Protocols supported by the SIP provider.
       *   The value must be either `UDP`, `TCP`, `TLS`, `AUTO`.
       *
       * @example UDP
       */
      transport_protocol?: "UDP" | "TCP" | "TLS" | "AUTO";
    };
  }[];
};

export type ListSIPPhonePhonesVariables = {
  queryParams?: ListSIPPhonePhonesQueryParams;
} & FetcherExtraProps;

/**
 * List SIP phones on an account.
 *
 * Zoom's Phone System Integration (PSI), also referred as SIP phones, enables an organization to leverage the Zoom client to complete a Softphone registration to supported premise based PBX system. End users will have the ability to have Softphone functionality within a single client while maintaining a comparable interface to Zoom Phone.
 *
 * **Prerequisites**:
 * * Currently only supported on Cisco and Avaya PBX systems.
 * * User must enable SIP Phone Integration by contacting the [Sales](https://zoom.us/contactsales) team.
 *
 *
 * **[Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `sip_phone:read:admin`
 *
 * **[Granular Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `sip_phone:read:list_sip_phones:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
 */
export const listSIPPhonePhones = (
  variables: ListSIPPhonePhonesVariables,
  signal?: AbortSignal,
) =>
  fetch<
    ListSIPPhonePhonesResponse,
    ListSIPPhonePhonesError,
    undefined,
    {},
    ListSIPPhonePhonesQueryParams,
    {}
  >({ url: "/sip_phones/phones", method: "get", ...variables, signal });

export type EnableSIPPhonePhonesError = Fetcher.ErrorWrapper<undefined>;

export type EnableSIPPhonePhonesResponse = {
  /**
   * The SIP phone ID.
   *
   * @example 123456
   */
  phone_id?: string;
  /**
   * The authorization name of the user that is registered for SIP phone.
   *
   * @maxLength 64
   * @example testname
   */
  authorization_name?: string;
  /**
   * The name or IP address of your provider's SIP domain (example: CDC.WEB).
   *
   * @maxLength 64
   * @example example.com
   */
  domain?: string;
  /**
   * The password generated for the user in the SIP account.
   *
   * @example 123456
   */
  password?: string;
  /**
   * The number of minutes after which the SIP registration of the Zoom client user will expire, and the client will auto register to the SIP server.
   *
   * @maximum 127
   * @minimum 1
   * @example 60
   * @default 60
   */
  registration_expire_time?: number;
  /**
   * The email address of the user to associate with the SIP Phone. Can add `.pc`, `.mobile`, `.pad` at the end of the email (for example, `user@example.com.mac`) to add accounts for different platforms for the same user.
   *
   * @maxLength 64
   * @format email
   * @example jchill@example.com
   */
  user_email?: string;
  /**
   * The phone number associated with the user in the SIP account.
   *
   * @maxLength 64
   * @example Jill Chill
   */
  user_name?: string;
  /**
   * The number to dial for checking voicemail.
   *
   * @maxLength 255
   * @example 4000
   */
  voice_mail?: string;
  /**
   * The displayed phone number associated with the user can be either in extension format or E.164 format. You can specify the displayed number when the dialable number differs from the SIP username.
   *
   * @maxLength 64
   * @example 5551110105
   */
  display_number?: string;
  /**
   * Defined a set of basic components of SIP network architecture, including proxy_server, register_server and transport_protocol.
   */
  server?: {
    /**
     * The IP address of the proxy server for SIP requests. Note that if you are using the UDP transport protocol, the default port is 5060. If you are using UDP with a different port number, that port number must be included with the IP address. If you are not using a proxy server, this value can be the same as the Register Server.
     *
     * @example 192.0.2.2
     */
    proxy_server?: string;
    /**
     * The IP address of the server that accepts REGISTER requests. Note that if you are using the UDP transport protocol, the default port is 5060. If you are using UDP with a different port number, that port number must be included with the IP address.
     *
     * @example 192.0.2.2
     */
    register_server?: string;
    /**
     * Protocols supported by the SIP provider.
     *   The value must be either `UDP`, `TCP`, `TLS`, `AUTO`.
     *
     * @example UDP
     */
    transport_protocol?: "UDP" | "TCP" | "TLS" | "AUTO";
  };
  /**
   * Defined a set of basic components of SIP network architecture, including proxy_server, register_server and transport_protocol.
   */
  server_2?: {
    /**
     * The IP address of the proxy server for SIP requests. Note that if you are using the UDP transport protocol, the default port is 5060. If you are using UDP with a different port number, that port number must be included with the IP address. If you are not using a proxy server, this value can be the same as the Register Server.
     *
     * @example 192.0.2.2
     */
    proxy_server?: string;
    /**
     * The IP address of the server that accepts REGISTER requests. Note that if you are using the UDP transport protocol, the default port is 5060. If you are using UDP with a different port number, that port number must be included with the IP address.
     *
     * @example 192.0.2.2
     */
    register_server?: string;
    /**
     * Protocols supported by the SIP provider.
     *   The value must be either `UDP`, `TCP`, `TLS`, `AUTO`.
     *
     * @example UDP
     */
    transport_protocol?: "UDP" | "TCP" | "TLS" | "AUTO";
  };
  /**
   * Defined a set of basic components of SIP network architecture, including proxy_server, register_server and transport_protocol.
   */
  server_3?: {
    /**
     * The IP address of the proxy server for SIP requests. Note that if you are using the UDP transport protocol, the default port is 5060. If you are using UDP with a different port number, that port number must be included with the IP address. If you are not using a proxy server, this value can be the same as the Register Server.
     *
     * @example 192.0.2.2
     */
    proxy_server?: string;
    /**
     * The IP address of the server that accepts REGISTER requests. Note that if you are using the UDP transport protocol, the default port is 5060. If you are using UDP with a different port number, that port number must be included with the IP address.
     *
     * @example 192.0.2.2
     */
    register_server?: string;
    /**
     * Protocols supported by the SIP provider.
     *   The value must be either `UDP`, `TCP`, `TLS`, `AUTO`.
     *
     * @example UDP
     */
    transport_protocol?: "UDP" | "TCP" | "TLS" | "AUTO";
  };
};

export type EnableSIPPhonePhonesRequestBody = {
  /**
   * The authorization name of the user that is registered for SIP phone.
   *
   * @maxLength 64
   * @example testname
   */
  authorization_name: string;
  /**
   * The name or IP address of your provider's SIP domain, such as example.com.
   *
   * @maxLength 64
   * @example example.com
   */
  domain: string;
  /**
   * The password generated for the user in the SIP account.
   *
   * @example 123456
   */
  password: string;
  /**
   * The number of minutes after which the SIP registration of the Zoom client user expires, and the client will auto register to the SIP server.
   *
   * @maximum 127
   * @minimum 1
   * @example 60
   * @default 60
   */
  registration_expire_time?: number;
  /**
   * The email address of the user to associate with the SIP Phone. Can add `.pc`, `.mobile`, `.pad` at the end of the email, such as `user@example.com.pc`, to add accounts for different platforms for the same user.
   *
   * @maxLength 64
   * @format email
   * @example jchill@example.com
   */
  user_email: string;
  /**
   * The phone number associated with the user in the SIP account.
   *
   * @maxLength 64
   * @example Jill Chill
   */
  user_name: string;
  /**
   * The number to dial for checking voicemail.
   *
   * @maxLength 255
   * @example 4000
   */
  voice_mail?: string;
  /**
   * The displayed phone number associated with the user can be either in extension format or E.164 format. You can specify the displayed number when the dialable number differs from the SIP username.
   *
   * @maxLength 64
   * @example 5551110105
   */
  display_number?: string;
  /**
   * Defined a set of basic components of SIP network architecture, including proxy_server, register_server and transport_protocol.
   */
  server: {
    /**
     * The IP address of the proxy server for SIP requests. Note that if you are using the UDP transport protocol, the default port is 5060. If you are using UDP with a different port number, that port number must be included with the IP address. If you are not using a proxy server, this value can be the same as the Register Server.
     *
     * @example 192.0.2.2
     */
    proxy_server?: string;
    /**
     * The IP address of the server that accepts REGISTER requests. Note that if you are using the UDP transport protocol, the default port is 5060. If you are using UDP with a different port number, that port number must be included with the IP address.
     *
     * @example 192.0.2.2
     */
    register_server?: string;
    /**
     * Protocols supported by the SIP provider.
     *   The value must be either `UDP`, `TCP`, `TLS`, `AUTO`.
     *
     * @example UDP
     */
    transport_protocol?: "UDP" | "TCP" | "TLS" | "AUTO";
  };
  /**
   * Defined a set of basic components of SIP network architecture, including proxy_server, register_server and transport_protocol.
   */
  server_2?: {
    /**
     * The IP address of the proxy server for SIP requests. Note that if you are using the UDP transport protocol, the default port is 5060. If you are using UDP with a different port number, that port number must be included with the IP address. If you are not using a proxy server, this value can be the same as the Register Server.
     *
     * @example 192.0.2.2
     */
    proxy_server?: string;
    /**
     * The IP address of the server that accepts REGISTER requests. Note that if you are using the UDP transport protocol, the default port is 5060. If you are using UDP with a different port number, that port number must be included with the IP address.
     *
     * @example 192.0.2.2
     */
    register_server?: string;
    /**
     * Protocols supported by the SIP provider.
     *   The value must be either `UDP`, `TCP`, `TLS`, `AUTO`.
     *
     * @example UDP
     */
    transport_protocol?: "UDP" | "TCP" | "TLS" | "AUTO";
  };
  /**
   * Defined a set of basic components of SIP network architecture, including proxy_server, register_server and transport_protocol.
   */
  server_3?: {
    /**
     * The IP address of the proxy server for SIP requests. Note that if you are using the UDP transport protocol, the default port is 5060. If you are using UDP with a different port number, that port number must be included with the IP address. If you are not using a proxy server, this value can be the same as the Register Server.
     *
     * @example 192.0.2.2
     */
    proxy_server?: string;
    /**
     * The IP address of the server that accepts REGISTER requests. Note that if you are using the UDP transport protocol, the default port is 5060. If you are using UDP with a different port number, that port number must be included with the IP address.
     *
     * @example 192.0.2.2
     */
    register_server?: string;
    /**
     * Protocols supported by the SIP provider.
     *   The value must be either `UDP`, `TCP`, `TLS`, `AUTO`.
     *
     * @example UDP
     */
    transport_protocol?: "UDP" | "TCP" | "TLS" | "AUTO";
  };
};

export type EnableSIPPhonePhonesVariables = {
  body: EnableSIPPhonePhonesRequestBody;
} & FetcherExtraProps;

/**
 * Enable a user to use a SIP phone.
 *
 * Zoom's Phone System Integration (PSI), also referred as SIP phones, enables an organization to leverage the Zoom client to complete a softphone registration to supported premise based PBX system. End users will have the ability to have softphone functionality within a single client while maintaining a comparable interface to Zoom Phone.
 *
 *
 * **Prerequisites**:
 * * Currently only supported on Cisco and Avaya PBX systems.
 * * The account owner or account admin must first enable SIP Phone Integration by contacting the [Sales](https://zoom.us/contactsales) team.
 *
 *
 * **[Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `sip_phone:write:admin`
 *
 * **[Granular Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `sip_phone:write:sip_phone:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
 */
export const enableSIPPhonePhones = (
  variables: EnableSIPPhonePhonesVariables,
  signal?: AbortSignal,
) =>
  fetch<
    EnableSIPPhonePhonesResponse,
    EnableSIPPhonePhonesError,
    EnableSIPPhonePhonesRequestBody,
    {},
    {},
    {}
  >({ url: "/sip_phones/phones", method: "post", ...variables, signal });

export type DeleteSIPPhonePhonesPathParams = {
  /**
   * The SIP phone ID. It can be retrieved from the **List SIP phones** API.
   *
   * @example 123456
   */
  phoneId: string;
};

export type DeleteSIPPhonePhonesError = Fetcher.ErrorWrapper<undefined>;

export type DeleteSIPPhonePhonesVariables = {
  pathParams: DeleteSIPPhonePhonesPathParams;
} & FetcherExtraProps;

/**
 * Delete a Zoom account's SIP phone.
 *
 *  **Prerequisites**:
 * * Currently only supported on Cisco and Avaya PBX systems.
 * * The user must enable **SIP Phone Integration** by contacting the [Zoom Sales](https://zoom.us/contactsales) team.
 *
 * **[Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `sip_phone:write:admin`
 *
 * **[Granular Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `sip_phone:delete:sip_phone:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
 */
export const deleteSIPPhonePhones = (
  variables: DeleteSIPPhonePhonesVariables,
  signal?: AbortSignal,
) =>
  fetch<
    undefined,
    DeleteSIPPhonePhonesError,
    undefined,
    {},
    {},
    DeleteSIPPhonePhonesPathParams
  >({
    url: "/sip_phones/phones/{phoneId}",
    method: "delete",
    ...variables,
    signal,
  });

export type UpdateSIPPhonePhonesPathParams = {
  /**
   * The SIP phone ID. Retrieve this with the **List SIP phones** API.
   *
   * @example 123456
   */
  phoneId: string;
};

export type UpdateSIPPhonePhonesError = Fetcher.ErrorWrapper<undefined>;

export type UpdateSIPPhonePhonesRequestBody = {
  /**
   * The authorization name of the user that is registered for SIP phone.
   *
   * @maxLength 64
   * @example testname
   */
  authorization_name?: string;
  /**
   * The name or IP address of your provider's SIP domain, such as example.com.
   *
   * @maxLength 64
   * @example example.com
   */
  domain?: string;
  /**
   * The password generated for the user in the SIP account.
   *
   * @example 123456
   */
  password?: string;
  /**
   * The number of minutes after which the SIP registration of the Zoom client user will expire, and the client will auto register to the SIP server.
   *
   * @maximum 127
   * @minimum 1
   * @example 60
   * @default 60
   */
  registration_expire_time?: number;
  /**
   * The phone number associated with the user in the SIP account.
   *
   * @maxLength 64
   * @example Jill Chill
   */
  user_name?: string;
  /**
   * The number to dial for checking voicemail.
   *
   * @maxLength 255
   * @example 4000
   */
  voice_mail?: string;
  /**
   * The displayed phone number associated with the user can be either in extension format or E.164 format. You can specify the displayed number when the dialable number differs from the SIP username.
   *
   * @maxLength 64
   * @example 5551110105
   */
  display_number?: string;
  /**
   * Defined a set of basic components of SIP network architecture, including proxy_server, register_server and transport_protocol.
   */
  server?: {
    /**
     * The IP address of the proxy server for SIP requests. Note that if you are using the UDP transport protocol, the default port is 5060. If you are using UDP with a different port number, that port number must be included with the IP address. If you are not using a proxy server, this value can be the same as the Register Server.
     *
     * @example 192.0.2.2
     */
    proxy_server?: string;
    /**
     * The IP address of the server that accepts REGISTER requests. Note that if you are using the UDP transport protocol, the default port is 5060. If you are using UDP with a different port number, that port number must be included with the IP address.
     *
     * @example 192.0.2.2
     */
    register_server?: string;
    /**
     * Protocols supported by the SIP provider.
     *   The value must be either `UDP`, `TCP`, `TLS`, `AUTO`.
     *
     * @example UDP
     */
    transport_protocol?: "UDP" | "TCP" | "TLS" | "AUTO";
  };
  /**
   * Defined a set of basic components of SIP network architecture, including proxy_server, register_server and transport_protocol.
   */
  server_2?: {
    /**
     * The IP address of the proxy server for SIP requests. Note that if you are using the UDP transport protocol, the default port is 5060. If you are using UDP with a different port number, that port number must be included with the IP address. If you are not using a proxy server, this value can be the same as the Register Server.
     *
     * @example 192.0.2.2
     */
    proxy_server?: string;
    /**
     * The IP address of the server that accepts REGISTER requests. Note that if you are using the UDP transport protocol, the default port is 5060. If you are using UDP with a different port number, that port number must be included with the IP address.
     *
     * @example 192.0.2.2
     */
    register_server?: string;
    /**
     * Protocols supported by the SIP provider.
     *   The value must be either `UDP`, `TCP`, `TLS`, `AUTO`.
     *
     * @example UDP
     */
    transport_protocol?: "UDP" | "TCP" | "TLS" | "AUTO";
  };
  /**
   * Defined a set of basic components of SIP network architecture, including proxy_server, register_server and transport_protocol.
   */
  server_3?: {
    /**
     * The IP address of the proxy server for SIP requests. Note that if you are using the UDP transport protocol, the default port is 5060. If you are using UDP with a different port number, that port number must be included with the IP address. If you are not using a proxy server, this value can be the same as the Register Server.
     *
     * @example 192.0.2.2
     */
    proxy_server?: string;
    /**
     * The IP address of the server that accepts REGISTER requests. Note that if you are using the UDP transport protocol, the default port is 5060. If you are using UDP with a different port number, that port number must be included with the IP address.
     *
     * @example 192.0.2.2
     */
    register_server?: string;
    /**
     * Protocols supported by the SIP provider.
     *   The value must be either `UDP`, `TCP`, `TLS`, `AUTO`.
     *
     * @example UDP
     */
    transport_protocol?: "UDP" | "TCP" | "TLS" | "AUTO";
  };
};

export type UpdateSIPPhonePhonesVariables = {
  body?: UpdateSIPPhonePhonesRequestBody;
  pathParams: UpdateSIPPhonePhonesPathParams;
} & FetcherExtraProps;

/**
 * Update the information of a specific SIP phone on a Zoom account.
 *
 * Zoom's Phone System Integration (PSI), also referred as SIP phones, lets an organization leverage the Zoom client to complete a softphone registration to supported premise based PBX system. End users can have softphone functionality within a single client while maintaining a comparable interface to a Zoom Phone.
 *
 *
 * **Prerequisites**:
 * * Currently only supported on Cisco and Avaya PBX systems.
 * * The account owner or account admin must first enable SIP Phone Integration by contacting the [Sales](https://zoom.us/contactsales) team.
 *
 *
 * **[Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `sip_phone:write:admin`
 *
 * **[Granular Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `sip_phone:update:sip_phone:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
 */
export const updateSIPPhonePhones = (
  variables: UpdateSIPPhonePhonesVariables,
  signal?: AbortSignal,
) =>
  fetch<
    undefined,
    UpdateSIPPhonePhonesError,
    UpdateSIPPhonePhonesRequestBody,
    {},
    {},
    UpdateSIPPhonePhonesPathParams
  >({
    url: "/sip_phones/phones/{phoneId}",
    method: "patch",
    ...variables,
    signal,
  });

export type DeleteSIPPhonePathParams = {
  /**
   * The SIP phone ID. It can be retrieved from the List SIP phones API.
   *
   * @example 123456
   */
  phoneId: string;
};

export type DeleteSIPPhoneError = Fetcher.ErrorWrapper<undefined>;

export type DeleteSIPPhoneVariables = {
  pathParams: DeleteSIPPhonePathParams;
} & FetcherExtraProps;

/**
 * Delete a Zoom account's SIP phone.
 *
 *  **Prerequisites**:
 * * Currently only supported on Cisco and Avaya PBX systems.
 * * The user must enable **SIP Phone Integration** by contacting the [Zoom Sales](https://zoom.us/contactsales) team.
 *
 * **[Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `sip_phone:write:admin`
 *
 * **[Granular Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `sip_phone:delete:sip_phone:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
 */
export const deleteSIPPhone = (
  variables: DeleteSIPPhoneVariables,
  signal?: AbortSignal,
) =>
  fetch<
    undefined,
    DeleteSIPPhoneError,
    undefined,
    {},
    {},
    DeleteSIPPhonePathParams
  >({ url: "/sip_phones/{phoneId}", method: "delete", ...variables, signal });

export type UpdateSIPPhonePathParams = {
  /**
   * The SIP phone ID. This can be retrieved from the List SIP phones API.
   *
   * @example 123456
   */
  phoneId: string;
};

export type UpdateSIPPhoneError = Fetcher.ErrorWrapper<undefined>;

export type UpdateSIPPhoneRequestBody = {
  /**
   * The authorization name of the user that is registered for SIP phone.
   *
   * @maxLength 64
   * @example testname
   */
  authorization_name: string;
  /**
   * The name or IP address of your provider's SIP domain (example: CDC.WEB).
   *
   * @maxLength 64
   * @example example.com
   */
  domain: string;
  /**
   * The password generated for the user in the SIP account.
   *
   * @example 123456
   */
  password: string;
  /**
   * The IP address of the proxy server for SIP requests. Note that if you are using the UDP transport protocol, the default port is 5060. If you are using UDP with a different port number, that port number must be included with the IP address. If you are not using a proxy server, this value can be the same as the Register Server.
   *
   * @example 192.0.2.2
   */
  proxy_server: string;
  /**
   * The IP address of the proxy server for SIP requests. Note that if you are using the UDP transport protocol, the default port is 5060. If you are using UDP with a different port number, that port number must be included with the IP address. If you are not using a proxy server, this value can be the same as the Register Server.
   *
   * @example 192.0.2.4
   */
  proxy_server2: string;
  /**
   * The IP address of the proxy server for SIP requests. Note that if you are using the UDP transport protocol, the default port is 5060. If you are using UDP with a different port number, that port number must be included with the IP address. If you are not using a proxy server, this value can be the same as the Register Server.
   *
   * @example 192.0.2.6
   */
  proxy_server3: string;
  /**
   * The IP address of the server that accepts REGISTER requests. Note that if you are using the UDP transport protocol, the default port is 5060. If you are using UDP with a different port number, that port number must be included with the IP address.
   *
   * @example 192.0.2.1
   */
  register_server: string;
  /**
   * The IP address of the server that accepts REGISTER requests. Note that if you are using the UDP transport protocol, the default port is 5060. If you are using UDP with a different port number, that port number must be included with the IP address.
   *
   * @example 192.0.2.3
   */
  register_server2: string;
  /**
   * The IP address of the server that accepts REGISTER requests. Note that if you are using the UDP transport protocol, the default port is 5060. If you are using UDP with a different port number, that port number must be included with the IP address.
   *
   * @example 192.0.2.5
   */
  register_server3: string;
  /**
   * The number of minutes after which the SIP registration of the Zoom client user will expire, and the client will auto register to the SIP server.
   *
   * @maximum 127
   * @minimum 1
   * @example 60
   * @default 60
   */
  registration_expire_time?: number;
  /**
   * Protocols supported by the SIP provider.
   *   The value must be either `UDP`, `TCP`, `TLS`, `AUTO`.
   *
   * @example UDP
   */
  transport_protocol?: "UDP" | "TCP" | "TLS" | "AUTO";
  /**
   * Protocols supported by the SIP provider.
   *   The value must be either `UDP`, `TCP`, `TLS`, `AUTO`.
   *
   * @example UDP
   */
  transport_protocol2?: "UDP" | "TCP" | "TLS" | "AUTO";
  /**
   * Protocols supported by the SIP provider.
   *   The value must be either `UDP`, `TCP`, `TLS`, `AUTO`.
   *
   * @example UDP
   */
  transport_protocol3?: "UDP" | "TCP" | "TLS" | "AUTO";
  /**
   * The phone number associated with the user in the SIP account.
   *
   * @maxLength 64
   * @example Jill Chill
   */
  user_name: string;
  /**
   * The number to dial for checking voicemail.
   *
   * @maxLength 255
   * @example 4000
   */
  voice_mail: string;
};

export type UpdateSIPPhoneVariables = {
  body: UpdateSIPPhoneRequestBody;
  pathParams: UpdateSIPPhonePathParams;
} & FetcherExtraProps;

/**
 * Update information of a specific SIP phone on a Zoom account.  n Zoom's Phone System Integration (PSI), also referred as SIP phones, enables an organization to leverage the Zoom client to complete a Softphone registration to supported premise based PBX system. End users will have the ability to have Softphone functionality within a single client while maintaining a comparable interface to Zoom Phone.   **Prerequisites**:* Currently only supported on Cisco and Avaya PBX systems. * The account owner or account admin must first enable SIP Phone Integration by contacting the [Sales](https://zoom.us/contactsales) team.
 *
 * **[Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `sip_phone:write:admin`
 *
 * **[Granular Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `sip_phone:update:sip_phone:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
 */
export const updateSIPPhone = (
  variables: UpdateSIPPhoneVariables,
  signal?: AbortSignal,
) =>
  fetch<
    undefined,
    UpdateSIPPhoneError,
    UpdateSIPPhoneRequestBody,
    {},
    {},
    UpdateSIPPhonePathParams
  >({ url: "/sip_phones/{phoneId}", method: "patch", ...variables, signal });

export type TspError = Fetcher.ErrorWrapper<undefined>;

export type TspResponse = {
  /**
   * Control restriction on account users adding a TSP number outside of account's dial in numbers.
   *
   * @example false
   */
  dial_in_number_unrestricted?: boolean;
  /**
   * List of dial in numbers.
   */
  dial_in_numbers?: {
    /**
     * Country code.
     *
     * @example 1
     */
    code?: string;
    /**
     * Dial-in number. Length is less than 16.
     *
     * @maxLength 16
     * @example +1 1000200200
     */
    number?: string;
    /**
     * Dial-in number type.
     *
     * @example toll
     */
    type?: string;
  }[];
  /**
   * Enable Telephony Service Provider for account users.
   *
   * @example true
   */
  enable?: boolean;
  /**
   * For master account, extend its TSP setting to all sub accounts. For sub account, extend TSP setting from master account.
   *
   * @example true
   */
  master_account_setting_extended?: boolean;
  /**
   * Control restriction on account users being able to modify their TSP credentials.
   *
   * @example true
   */
  modify_credential_forbidden?: boolean;
  /**
   * Telephony bridge zone
   *
   * @example US_TSP_TB
   */
  tsp_bridge?: "US_TSP_TB" | "EU_TSP_TB";
  /**
   * Enable TSP feature for account. This has to be enabled to use any other tsp settings/features.
   *
   * @example true
   */
  tsp_enabled?: boolean;
  /**
   * Telephony service provider.
   *
   * @example someprovidername
   */
  tsp_provider?: string;
};

export type TspVariables = FetcherExtraProps;

/**
 * Get information on Telephony Service Provider (TSP) on an account level.
 *
 * **Prerequisites**
 * * TSP audio must be enabled on the Zoom account before using this API.
 * * The Zoom account must have a Pro or higher subscription plan to enable TSP.
 *
 * **[Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `tsp:read:admin`
 *
 * **[Granular Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `tsp:read:tsp:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
 */
export const tsp = (variables: TspVariables, signal?: AbortSignal) =>
  fetch<TspResponse, TspError, undefined, {}, {}, {}>({
    url: "/tsp",
    method: "get",
    ...variables,
    signal,
  });

export type TspUpdateError = Fetcher.ErrorWrapper<undefined>;

export type TspUpdateRequestBody = {
  /**
   * Control restriction on account users adding a TSP number outside of account's dial in numbers.
   *
   * @example true
   */
  dial_in_number_unrestricted?: boolean;
  /**
   * Enable 3rd party audio conferencing for account users
   *
   * @example true
   */
  enable?: boolean;
  /**
   * For master account, extend its TSP setting to all sub accounts. For sub account, extend TSP setting from master account.
   *
   * @example true
   */
  master_account_setting_extended?: boolean;
  /**
   * Control restriction on account users being able to modify their TSP credentials.
   *
   * @example true
   */
  modify_credential_forbidden?: boolean;
  /**
   * Telephony bridge
   *
   * @example US_TSP_TB
   */
  tsp_bridge?: "US_TSP_TB" | "EU_TSP_TB";
  /**
   * Enable TSP feature for account. This has to be enabled to use any other tsp settings/features.
   *
   * @example true
   */
  tsp_enabled?: boolean;
  /**
   * 3rd party audio conferencing provider
   *
   * @example someprovidername
   */
  tsp_provider?: string;
};

export type TspUpdateVariables = {
  body?: TspUpdateRequestBody;
} & FetcherExtraProps;

/**
 * Update information of the Telephony Service Provider (TSP) set up on an account.
 *
 * **Prerequisites**
 * * Enable TSP on the Zoom account before using this API.
 * * A Pro or higher subscription plan to enable TSP.
 *
 * **[Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `tsp:write:admin`
 *
 * **[Granular Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `tsp:update:tsp:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
 */
export const tspUpdate = (
  variables: TspUpdateVariables,
  signal?: AbortSignal,
) =>
  fetch<undefined, TspUpdateError, TspUpdateRequestBody, {}, {}, {}>({
    url: "/tsp",
    method: "patch",
    ...variables,
    signal,
  });

export type UserTSPsPathParams = {
  /**
   * The user ID or email address of the user. For user-level apps, pass the `me` value.
   *
   * @example 30R7kT7bTIKSNUFEuH_Qlg
   */
  userId: string;
};

export type UserTSPsError = Fetcher.ErrorWrapper<undefined>;

export type UserTSPsResponse = {
  /**
   * List of the user's TSP accounts.
   */
  tsp_accounts?: {
    /**
     * Conference code: numeric value, length is less than 16.
     *
     * @maxLength 16
     * @minLength 1
     * @example 0125
     */
    conference_code: string;
    /**
     * List of dial in numbers.
     */
    dial_in_numbers?: {
      /**
       * Country code.
       *
       * @maxLength 6
       * @example 1
       */
      code?: string;
      /**
       * Country label, if passed, will display in place of code.
       *
       * @maxLength 10
       * @example America
       */
      country_label?: string;
      /**
       * Dial-in number. Length is less than 16.
       *
       * @maxLength 16
       * @minLength 1
       * @example +1 1000200200
       */
      number?: string;
      /**
       * Dial-in number types.
       *  `toll` - Toll number.
       *  `tollfree` - Toll free number.
       *
       * `media_link` - Media link.
       *
       * @example toll
       */
      type?: "toll" | "tollfree" | "media_link";
    }[];
    /**
     * The TSP account's ID.
     *
     * @example 1
     */
    id?: "1" | "2";
    /**
     * Leader PIN. Mumeric value, length is less than 16.
     *
     * @maxLength 16
     * @minLength 1
     * @example 11189898
     */
    leader_pin: string;
    /**
     * Telephony bridge
     *
     * @example US_TSP_TB
     */
    tsp_bridge?: "US_TSP_TB" | "EU_TSP_TB";
  }[];
};

export type UserTSPsVariables = {
  pathParams: UserTSPsPathParams;
} & FetcherExtraProps;

/**
 * List all of a user's TSP accounts. A user can have a maximum of two TSP accounts.
 *
 * **Prerequisites**
 * * TSP (Telephony Service Provider) audio must be enabled on the Zoom account before using this API.
 * * The Zoom account must have a Pro or higher subscription plan to enable TSP.
 *
 * **[Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `tsp:read:admin`,`tsp:read`
 *
 * **[Granular Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `tsp:read:list_tsp_accounts`,`tsp:read:list_tsp_accounts:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
 */
export const userTSPs = (variables: UserTSPsVariables, signal?: AbortSignal) =>
  fetch<UserTSPsResponse, UserTSPsError, undefined, {}, {}, UserTSPsPathParams>(
    { url: "/users/{userId}/tsp", method: "get", ...variables, signal },
  );

export type UserTSPCreatePathParams = {
  /**
   * The user's user ID or email address. For user-level apps, pass the `me` value.
   *
   * @example 30R7kT7bTIKSNUFEuH_Qlg
   */
  userId: string;
};

export type UserTSPCreateError = Fetcher.ErrorWrapper<undefined>;

export type UserTSPCreateResponse = {
  /**
   * The ID of the TSP account.
   *
   * @example 1
   */
  id?: string;
  /**
   * Conference code: numeric value, length is less than 16.
   *
   * @maxLength 16
   * @minLength 1
   * @example 0125
   */
  conference_code: string;
  /**
   * List of dial in numbers.
   */
  dial_in_numbers?: {
    /**
     * Country code.
     *
     * @maxLength 6
     * @example 1
     */
    code?: string;
    /**
     * Country Label, if passed, will display in place of code.
     *
     * @maxLength 10
     * @example America
     */
    country_label?: string;
    /**
     * Dial-in number: length is less than 16.
     *
     * @maxLength 16
     * @minLength 1
     * @example +1 1000200200
     */
    number?: string;
    /**
     * Dial-in number types:
     *  `toll` - Toll number.
     *  `tollfree` -Toll free number.
     *
     * `media_link` - Media link.
     *
     * @example toll
     */
    type?: "toll" | "tollfree" | "media_link";
  }[];
  /**
   * Leader PIN: numeric value, length is less than 16.
   *
   * @maxLength 16
   * @minLength 1
   * @example US_TSP_TB
   */
  leader_pin: string;
  /**
   * Telephony bridge
   *
   * @example US_TSP_TB
   */
  tsp_bridge?: "US_TSP_TB" | "EU_TSP_TB";
};

export type UserTSPCreateRequestBody = {
  /**
   * Conference code. A numeric value, with a length less than 16.
   *
   * @maxLength 16
   * @minLength 1
   * @example 0125
   */
  conference_code: string;
  /**
   * List of dial in numbers.
   */
  dial_in_numbers?: {
    /**
     * Country code.
     *
     * @maxLength 6
     * @example 1
     */
    code?: string;
    /**
     * Country Label, if passed, will display in place of code.
     *
     * @maxLength 10
     * @example America
     */
    country_label?: string;
    /**
     * Dial-in number: length is less than 16.
     *
     * @maxLength 16
     * @minLength 1
     * @example +1 1000200200
     */
    number?: string;
    /**
     * Dial-in number types:
     *  `toll` - Toll number.
     *  `tollfree` -Toll free number.
     *
     * `media_link` - Media link.
     *
     * @example toll
     */
    type?: "toll" | "tollfree" | "media_link";
  }[];
  /**
   * Leader PIN: numeric value, length is less than 16.
   *
   * @maxLength 16
   * @minLength 1
   * @example US_TSP_TB
   */
  leader_pin: string;
  /**
   * Telephony bridge
   *
   * @example US_TSP_TB
   */
  tsp_bridge?: "US_TSP_TB" | "EU_TSP_TB";
};

export type UserTSPCreateVariables = {
  body: UserTSPCreateRequestBody;
  pathParams: UserTSPCreatePathParams;
} & FetcherExtraProps;

/**
 * Add a user's TSP account.
 *
 * **Prerequisites**
 * * TSP (Telephony Service Provider) audio must be enabled on the Zoom account before using this API.
 * * The Zoom account must have a Pro or higher subscription plan to enable TSP.
 *
 * **[Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `tsp:write:admin`,`tsp:write`
 *
 * **[Granular Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `tsp:write:tsp_account`,`tsp:write:tsp_account:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
 */
export const userTSPCreate = (
  variables: UserTSPCreateVariables,
  signal?: AbortSignal,
) =>
  fetch<
    UserTSPCreateResponse,
    UserTSPCreateError,
    UserTSPCreateRequestBody,
    {},
    {},
    UserTSPCreatePathParams
  >({ url: "/users/{userId}/tsp", method: "post", ...variables, signal });

export type TspUrlUpdatePathParams = {
  /**
   * The user's user ID or email address.
   *
   * @example 6dfgdfgdg444447b0egga
   */
  userId: string;
};

export type TspUrlUpdateError = Fetcher.ErrorWrapper<undefined>;

export type TspUrlUpdateRequestBody = {
  /**
   * The global dial-in URL for a TSP enabled account. The URL must be valid, with a maximum length of 512 characters.
   *
   * @maxLength 512
   * @example https://example.com
   */
  audio_url?: string;
};

export type TspUrlUpdateVariables = {
  body?: TspUrlUpdateRequestBody;
  pathParams: TspUrlUpdatePathParams;
} & FetcherExtraProps;

/**
 * Set the URL for a global dial-in page of a user whose Zoom account has TSP and special TSP with third-party audio conferencing options enabled. A global dial-in page can provide a list of global access numbers to use to conduct audio conferencing.
 *
 * **Prerequisites**
 * * TSP (Telephony Service Provider) audio must be enabled on the Zoom account before using this API.
 * * The Zoom account must have a Pro or higher subscription plan to enable TSP.
 *
 * **[Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `tsp:write:admin`,`tsp:write`
 *
 * **[Granular Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `tsp:update:tsp_settings`,`tsp:update:tsp_settings:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
 */
export const tspUrlUpdate = (
  variables: TspUrlUpdateVariables,
  signal?: AbortSignal,
) =>
  fetch<
    undefined,
    TspUrlUpdateError,
    TspUrlUpdateRequestBody,
    {},
    {},
    TspUrlUpdatePathParams
  >({
    url: "/users/{userId}/tsp/settings",
    method: "patch",
    ...variables,
    signal,
  });

export type UserTSPPathParams = {
  /**
   * The user ID or email address of the user. For user-level apps, pass the `me` value.
   *
   * @example 30R7kT7bTIKSNUFEuH_Qlg
   */
  userId: string;
  /**
   * TSP account ID.
   *
   * @example 1
   */
  tspId: "1" | "2";
};

export type UserTSPError = Fetcher.ErrorWrapper<undefined>;

export type UserTSPResponse = {
  /**
   * Conference code: numeric value, length is less than 16.
   *
   * @maxLength 16
   * @minLength 1
   * @example 0125
   */
  conference_code: string;
  /**
   * List of dial in numbers.
   */
  dial_in_numbers?: {
    /**
     * Country code.
     *
     * @maxLength 6
     * @example 1
     */
    code?: string;
    /**
     * Country Label, if passed, will display in place of code.
     *
     * @maxLength 10
     * @example America
     */
    country_label?: string;
    /**
     * Dial-in number: length is less than 16.
     *
     * @maxLength 16
     * @minLength 1
     * @example +1 1000200200
     */
    number?: string;
    /**
     * Dial-in number types:
     *  `toll` - Toll number.
     *  `tollfree` -Toll free number.
     *   `media_link` - Media link phone number. This is used for PSTN integration instead of a paid bridge number.
     *
     * @example toll
     */
    type?: "toll" | "tollfree" | "media_link";
  }[];
  /**
   * The TSP account's ID.
   *
   * @example 1
   */
  id?: string;
  /**
   * Leader PIN. A numeric value, with a length of less than 16.
   *
   * @maxLength 16
   * @minLength 1
   * @example 11189898
   */
  leader_pin: string;
  /**
   * Telephony bridge
   *
   * @example US_TSP_TB
   */
  tsp_bridge?: "US_TSP_TB" | "EU_TSP_TB";
};

export type UserTSPVariables = {
  pathParams: UserTSPPathParams;
} & FetcherExtraProps;

/**
 * Retrieve details of a specific TSP account enabled for a specific user. Each user can have a maximum of two TSP accounts.
 *
 * **Prerequisites**
 * * TSP (Telephony Service Provider) audio must be enabled on the Zoom account before using this API.
 * * The Zoom account must have a Pro or higher subscription plan to enable TSP.
 *
 * **[Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `tsp:read:admin`,`tsp:read`
 *
 * **[Granular Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `tsp:read:tsp_account`,`tsp:read:tsp_account:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
 */
export const userTSP = (variables: UserTSPVariables, signal?: AbortSignal) =>
  fetch<UserTSPResponse, UserTSPError, undefined, {}, {}, UserTSPPathParams>({
    url: "/users/{userId}/tsp/{tspId}",
    method: "get",
    ...variables,
    signal,
  });

export type UserTSPDeletePathParams = {
  /**
   * The user's user ID or email address. For user-level apps, pass the `me` value.
   *
   * @example 30R7kT7bTIKSNUFEuH_Qlg
   */
  userId: string;
  /**
   * TSP account ID.
   *
   * @example 1
   */
  tspId: "1" | "2";
};

export type UserTSPDeleteError = Fetcher.ErrorWrapper<undefined>;

export type UserTSPDeleteVariables = {
  pathParams: UserTSPDeletePathParams;
} & FetcherExtraProps;

/**
 * Delete a user's TSP account.
 *
 * **Prerequisites**
 * * TSP (Telephony Service Provider) audio must be enabled on the Zoom account before using this API.
 * * The Zoom account must have a Pro or higher subscription plan to enable TSP.
 *
 * **[Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `tsp:write:admin`,`tsp:write`
 *
 * **[Granular Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `tsp:delete:tsp_account`,`tsp:delete:tsp_account:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
 */
export const userTSPDelete = (
  variables: UserTSPDeleteVariables,
  signal?: AbortSignal,
) =>
  fetch<
    undefined,
    UserTSPDeleteError,
    undefined,
    {},
    {},
    UserTSPDeletePathParams
  >({
    url: "/users/{userId}/tsp/{tspId}",
    method: "delete",
    ...variables,
    signal,
  });

export type UserTSPUpdatePathParams = {
  /**
   * The user ID or email address of the user. For user-level apps, pass the `me` value.
   *
   * @example 30R7kT7bTIKSNUFEuH_Qlg
   */
  userId: string;
  /**
   * TSP account ID.
   *
   * @example 1
   */
  tspId: "1" | "2";
};

export type UserTSPUpdateError = Fetcher.ErrorWrapper<undefined>;

export type UserTSPUpdateRequestBody = {
  /**
   * Conference code. Numeric value. Length is less than 16.
   *
   * @maxLength 16
   * @minLength 1
   * @example 0125
   */
  conference_code: string;
  /**
   * List of dial in numbers.
   */
  dial_in_numbers?: {
    /**
     * Country code.
     *
     * @maxLength 6
     * @example 1
     */
    code?: string;
    /**
     * Country label, if passed, will display in place of code.
     *
     * @maxLength 10
     * @example America
     */
    country_label?: string;
    /**
     * Dial-in number. Length is less than 16.
     *
     * @maxLength 16
     * @minLength 1
     * @example +1 1000200200
     */
    number?: string;
    /**
     * Dial-in number types.
     *  `toll` - Toll number.
     *  `tollfree` -Toll free number.
     *  `media_link` - Media Link Phone Number. It is used for PSTN integration instead of paid bridge number.
     *
     * @example toll
     */
    type?: "toll" | "tollfree" | "media_link";
  }[];
  /**
   * Leader PIN. Numeric value. Length is less than 16.
   *
   * @maxLength 16
   * @minLength 1
   * @example 11189898
   */
  leader_pin: string;
  /**
   * Telephony bridge.
   *
   * @example US_TSP_TB
   */
  tsp_bridge?: "US_TSP_TB" | "EU_TSP_TB";
};

export type UserTSPUpdateVariables = {
  body: UserTSPUpdateRequestBody;
  pathParams: UserTSPUpdatePathParams;
} & FetcherExtraProps;

/**
 * Update a user's Telephony Service Provider (TSP) account.
 *
 * **Prerequisites**
 * * TSP audio enabled on the Zoom account before using this API.
 * * A Pro or higher subscription plan to enable TSP.
 *
 * **[Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `tsp:write:admin`,`tsp:write`
 *
 * **[Granular Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `tsp:update:tsp_account`,`tsp:update:tsp_account:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
 */
export const userTSPUpdate = (
  variables: UserTSPUpdateVariables,
  signal?: AbortSignal,
) =>
  fetch<
    undefined,
    UserTSPUpdateError,
    UserTSPUpdateRequestBody,
    {},
    {},
    UserTSPUpdatePathParams
  >({
    url: "/users/{userId}/tsp/{tspId}",
    method: "patch",
    ...variables,
    signal,
  });

export type TrackingfieldListError = Fetcher.ErrorWrapper<undefined>;

export type TrackingfieldListResponse = {
  /**
   * The number of all records available across pages.
   *
   * @example 1
   */
  total_records?: number;
  /**
   * Array of tracking fields.
   */
  tracking_fields?: {
    /**
     * Tracking field's ID.
     *
     * @example a32CJji-weJ92
     */
    id?: string;
    /**
     * Label or name for the tracking field.
     *
     * @example field1
     */
    field?: string;
    /**
     * Array of recommended values
     */
    recommended_values?: string[];
    /**
     * Tracking field required.
     *
     * @example false
     */
    required?: boolean;
    /**
     * Tracking field visible.
     *
     * @example true
     */
    visible?: boolean;
  }[];
};

export type TrackingfieldListVariables = FetcherExtraProps;

/**
 * List all the [tracking fields](https://support.zoom.us/hc/en-us/articles/115000293426-Scheduling-Tracking-Fields) on your Zoom account. Tracking fields let you analyze usage by various fields within an organization.
 *
 * **Prerequisites:**
 * * A Business, Education, API or higher plan.
 *
 * **[Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `tracking_fields:read:admin`
 *
 * **[Granular Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `tracking_field:read:list_tracking_fields:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
 */
export const trackingfieldList = (
  variables: TrackingfieldListVariables,
  signal?: AbortSignal,
) =>
  fetch<
    TrackingfieldListResponse,
    TrackingfieldListError,
    undefined,
    {},
    {},
    {}
  >({ url: "/tracking_fields", method: "get", ...variables, signal });

export type TrackingfieldCreateError = Fetcher.ErrorWrapper<undefined>;

export type TrackingfieldCreateResponse = {
  /**
   * Tracking Field ID
   *
   * @example a32CJji-weJ92
   */
  id?: string;
  /**
   * Label/ Name for the tracking field.
   *
   * @example field1
   */
  field?: string;
  /**
   * Array of recommended values
   */
  recommended_values?: string[];
  /**
   * Tracking Field Required
   *
   * @example false
   */
  required?: boolean;
  /**
   * Tracking Field Visible
   *
   * @example true
   */
  visible?: boolean;
};

export type TrackingfieldCreateRequestBody = {
  /**
   * Label/ Name for the tracking field.
   *
   * @example field1
   */
  field?: string;
  /**
   * Array of recommended values
   */
  recommended_values?: string[];
  /**
   * Tracking Field Required
   *
   * @example false
   */
  required?: boolean;
  /**
   * Tracking Field Visible
   *
   * @example true
   */
  visible?: boolean;
};

export type TrackingfieldCreateVariables = {
  body?: TrackingfieldCreateRequestBody;
} & FetcherExtraProps;

/**
 * Use this API to create a new [tracking field](https://support.zoom.us/hc/en-us/articles/115000293426-Scheduling-Tracking-Fields). Tracking fields let you analyze usage by various fields within an organization. When scheduling a meeting, tracking fields will be included in the meeting options.
 *
 * **Prerequisites:**
 * * A Business, Education, API or higher plan.
 *
 * **[Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `tracking_fields:write:admin`
 *
 * **[Granular Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `tracking_field:write:tracking_field:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
 */
export const trackingfieldCreate = (
  variables: TrackingfieldCreateVariables,
  signal?: AbortSignal,
) =>
  fetch<
    TrackingfieldCreateResponse,
    TrackingfieldCreateError,
    TrackingfieldCreateRequestBody,
    {},
    {},
    {}
  >({ url: "/tracking_fields", method: "post", ...variables, signal });

export type TrackingfieldGetPathParams = {
  /**
   * The tracking field ID.
   *
   * @example a32CJji-weJ92
   */
  fieldId: string;
};

export type TrackingfieldGetError = Fetcher.ErrorWrapper<undefined>;

export type TrackingfieldGetResponse = {
  /**
   * Tracking field ID.
   *
   * @example a32CJji-weJ92
   */
  id?: string;
  /**
   * Label or name for the tracking field.
   *
   * @example field1
   */
  field?: string;
  /**
   * Array of recommended values.
   */
  recommended_values?: string[];
  /**
   * Tracking field required.
   *
   * @example false
   */
  required?: boolean;
  /**
   * Tracking field visible.
   *
   * @example true
   */
  visible?: boolean;
};

export type TrackingfieldGetVariables = {
  pathParams: TrackingfieldGetPathParams;
} & FetcherExtraProps;

/**
 * Use this API to return information about a [tracking field](https://support.zoom.us/hc/en-us/articles/115000293426-Scheduling-Tracking-Fields).
 *
 * **Prerequisites:**
 * * A Business, Education, API or higher plan.
 *
 * **[Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `tracking_fields:read:admin`
 *
 * **[Granular Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `tracking_field:read:tracking_field:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
 */
export const trackingfieldGet = (
  variables: TrackingfieldGetVariables,
  signal?: AbortSignal,
) =>
  fetch<
    TrackingfieldGetResponse,
    TrackingfieldGetError,
    undefined,
    {},
    {},
    TrackingfieldGetPathParams
  >({ url: "/tracking_fields/{fieldId}", method: "get", ...variables, signal });

export type TrackingfieldDeletePathParams = {
  /**
   * The tracking field ID.
   *
   * @example a32CJji-weJ92
   */
  fieldId: string;
};

export type TrackingfieldDeleteError = Fetcher.ErrorWrapper<undefined>;

export type TrackingfieldDeleteVariables = {
  pathParams: TrackingfieldDeletePathParams;
} & FetcherExtraProps;

/**
 * Delete a [tracking field](https://support.zoom.us/hc/en-us/articles/115000293426-Scheduling-Tracking-Fields).
 *
 * **Prerequisites:**
 * * A Business, Education, API or higher plan.
 *
 * **[Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `tracking_fields:write:admin`
 *
 * **[Granular Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `tracking_field:delete:tracking_field:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
 */
export const trackingfieldDelete = (
  variables: TrackingfieldDeleteVariables,
  signal?: AbortSignal,
) =>
  fetch<
    undefined,
    TrackingfieldDeleteError,
    undefined,
    {},
    {},
    TrackingfieldDeletePathParams
  >({
    url: "/tracking_fields/{fieldId}",
    method: "delete",
    ...variables,
    signal,
  });

export type TrackingfieldUpdatePathParams = {
  /**
   * The tracking field ID.
   *
   * @example a32CJji-weJ92
   */
  fieldId: string;
};

export type TrackingfieldUpdateError = Fetcher.ErrorWrapper<undefined>;

export type TrackingfieldUpdateRequestBody = {
  /**
   * Label or name for the tracking field.
   *
   * @example field1
   */
  field?: string;
  /**
   * Array of recommended values.
   */
  recommended_values?: string[];
  /**
   * Tracking field required.
   *
   * @example false
   */
  required?: boolean;
  /**
   * Tracking field visible.
   *
   * @example true
   */
  visible?: boolean;
};

export type TrackingfieldUpdateVariables = {
  body?: TrackingfieldUpdateRequestBody;
  pathParams: TrackingfieldUpdatePathParams;
} & FetcherExtraProps;

/**
 * Update a [tracking field](https://support.zoom.us/hc/en-us/articles/115000293426-Scheduling-Tracking-Fields).
 *
 * **Prerequisites:**
 * * A Business, Education, API or higher plan.
 *
 * **[Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `tracking_fields:write:admin`
 *
 * **[Granular Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `tracking_field:update:tracking_field:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
 */
export const trackingfieldUpdate = (
  variables: TrackingfieldUpdateVariables,
  signal?: AbortSignal,
) =>
  fetch<
    undefined,
    TrackingfieldUpdateError,
    TrackingfieldUpdateRequestBody,
    {},
    {},
    TrackingfieldUpdatePathParams
  >({
    url: "/tracking_fields/{fieldId}",
    method: "patch",
    ...variables,
    signal,
  });

export type DeleteWebinarChatMessageByIdPathParams = {
  /**
   * The webinar's ID.
   *
   * @format int64
   * @example 99289110036
   */
  webinarId: number;
  /**
   * The live webinar chat message's unique identifier (UUID), in base64-encoded format.
   *
   * @example MS17MDQ5NjE4QjYtRjk4Ny00REEwLUFBQUItMTg3QTY0RjU2MzhFfQ==
   */
  messageId: string;
};

export type DeleteWebinarChatMessageByIdQueryParams = {
  /**
   * The live webinar chat file's universally unique identifier (UUID), in base64-encoded format. Separate multiple values with commas.
   *
   * @example MS17RDk0QTY3QUQtQkFGQy04QTJFLTI2RUEtNkYxQjRBRTU1MTk5fQ==,MS17NDQ0OEU5MjMtM0JFOS1CMDA1LTQ0NDAtQjdGOTU0Rjk5MTkyfQ==
   */
  file_ids?: string;
};

export type DeleteWebinarChatMessageByIdError = Fetcher.ErrorWrapper<undefined>;

export type DeleteWebinarChatMessageByIdVariables = {
  pathParams: DeleteWebinarChatMessageByIdPathParams;
  queryParams?: DeleteWebinarChatMessageByIdQueryParams;
} & FetcherExtraProps;

/**
 * Deletes a message in a live webinar based on ID.
 *
 * **Prerequisites:**
 * * Have Zoom enable the DLP for the in-meeting chat feature to use this API.
 *
 * **[Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `webinar:write`,`webinar:write:admin`
 *
 * **[Granular Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `webinar:delete:live_webinar_chat_message`,`webinar:delete:live_webinar_chat_message:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
 */
export const deleteWebinarChatMessageById = (
  variables: DeleteWebinarChatMessageByIdVariables,
  signal?: AbortSignal,
) =>
  fetch<
    undefined,
    DeleteWebinarChatMessageByIdError,
    undefined,
    {},
    DeleteWebinarChatMessageByIdQueryParams,
    DeleteWebinarChatMessageByIdPathParams
  >({
    url: "/live_webinars/{webinarId}/chat/messages/{messageId}",
    method: "delete",
    ...variables,
    signal,
  });

export type WebinarAbsenteesPathParams = {
  /**
   * The webinar's ID or universally unique ID (UUID).
   * * If you provide a webinar ID, the API will return a response for the latest webinar instance.
   * * If you provide a webinar UUID that begins with a `/` character or contains the `//` characters, you **must** [double encode](https://developers.zoom.us/docs/api/rest/using-zoom-apis/#meeting-id-and-uuid) the webinar UUID before making an API request.
   *
   * @example ABCDE12345
   */
  webinarId: string;
};

export type WebinarAbsenteesQueryParams = {
  /**
   * The meeting or webinar occurrence ID.
   *
   * @example 1648194360000
   */
  occurrence_id?: string;
  /**
   * The number of records returned within a single API call.
   *
   * @maximum 300
   * @example 30
   * @default 30
   */
  page_size?: number;
  /**
   * Use the next page token to paginate through large result sets. A next page token is returned whenever the set of available results exceeds the current page size. This token's expiration period is 15 minutes.
   *
   * @example IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2
   */
  next_page_token?: string;
};

export type WebinarAbsenteesError = Fetcher.ErrorWrapper<undefined>;

export type WebinarAbsenteesResponse = {
  /**
   * Use the next page token to paginate through large result sets. A next page token is returned whenever the set of available results exceeds the current page size. This token's expiration period is 15 minutes.
   *
   * @example w7587w4eiyfsudgf
   */
  next_page_token?: string;
  /**
   * The number of pages returned for the request made.
   *
   * @example 1
   */
  page_count?: number;
  /**
   * **Deprecated.** This field is deprecated. We will no longer support this field in a future release. Instead, use the `next_page_token` for pagination.
   *
   * @example 1
   * @deprecated true
   * @default 1
   */
  page_number?: number;
  /**
   * The number of records returned with a single API call.
   *
   * @maximum 300
   * @example 30
   * @default 30
   */
  page_size?: number;
  /**
   * The total number of all the records available across pages.
   *
   * @example 20
   */
  total_records?: number;
  /**
   * List of registrant objects.
   */
  registrants?: {
    /**
     * The registrant's address.
     *
     * @example 1800 Amphibious Blvd.
     */
    address?: string;
    /**
     * The registrant's city.
     *
     * @example Mountain View
     */
    city?: string;
    /**
     * The registrant's questions and comments.
     *
     * @example Looking forward to the discussion.
     */
    comments?: string;
    /**
     * The registrant's two-letter ISO [country code](https://developers.zoom.us/docs/api/rest/other-references/abbreviation-lists/#countries).
     *
     * @example US
     */
    country?: string;
    /**
     * Information about custom questions.
     */
    custom_questions?: {
      /**
       * The title of the custom question.
       *
       * @example What do you hope to learn from this?
       */
      title?: string;
      /**
       * The custom question's response value. This has a limit of 128 characters.
       *
       * @maxLength 128
       * @example Look forward to learning how you come up with new recipes and what other services you offer.
       */
      value?: string;
    }[];
    /**
     * The registrant's email address. See [Email address display rules](https://developers.zoom.us/docs/api/rest/using-zoom-apis/#email-address-display-rules) for return value details.
     *
     * @maxLength 128
     * @format email
     * @example jchill@example.com
     */
    email: string;
    /**
     * The registrant's first name.
     *
     * @maxLength 64
     * @example Jill
     */
    first_name: string;
    /**
     * The registrant's industry.
     *
     * @example Food
     */
    industry?: string;
    /**
     * The registrant's job title.
     *
     * @example Chef
     */
    job_title?: string;
    /**
     * The registrant's last name.
     *
     * @maxLength 64
     * @example Chill
     */
    last_name?: string;
    /**
     * The registrant's number of employees.
     * * `1-20`
     * * `21-50`
     * * `51-100`
     * * `101-250`
     * * `251-500`
     * * `501-1,000`
     * * `1,001-5,000`
     * * `5,001-10,000`
     * * `More than 10,000`
     *
     * @example 1-20
     */
    no_of_employees?:
      | ""
      | "1-20"
      | "21-50"
      | "51-100"
      | "101-250"
      | "251-500"
      | "501-1,000"
      | "1,001-5,000"
      | "5,001-10,000"
      | "More than 10,000";
    /**
     * The registrant's organization.
     *
     * @example Cooking Org
     */
    org?: string;
    /**
     * The registrant's phone number.
     *
     * @example 5550100
     */
    phone?: string;
    /**
     * The registrant's purchasing time frame.
     * * `Within a month`
     * * `1-3 months`
     * * `4-6 months`
     * * `More than 6 months`
     * * `No timeframe`
     *
     * @example 1-3 months
     */
    purchasing_time_frame?:
      | ""
      | "Within a month"
      | "1-3 months"
      | "4-6 months"
      | "More than 6 months"
      | "No timeframe";
    /**
     * The registrant's role in the purchase process.
     * * `Decision Maker`
     * * `Evaluator/Recommender`
     * * `Influencer`
     * * `Not involved`
     *
     * @example Influencer
     */
    role_in_purchase_process?:
      | ""
      | "Decision Maker"
      | "Evaluator/Recommender"
      | "Influencer"
      | "Not involved";
    /**
     * The registrant's state or province.
     *
     * @example CA
     */
    state?: string;
    /**
     * The status of the registrant's registration.
     *   `approved` - User has been successfully approved for the webinar.
     *   `pending` -  The registration is still pending.
     *   `denied` - User has been denied from joining the webinar.
     *
     * @example approved
     */
    status?: "approved" | "denied" | "pending";
    /**
     * The registrant's ZIP or postal code.
     *
     * @example 94045
     */
    zip?: string;
    /**
     * Registrant ID.
     *
     * @example 9tboDiHUQAeOnbmudzWa5g
     */
    id?: string;
    /**
     * The time when the registrant registered.
     *
     * @format date-time
     * @example 2022-03-22T05:59:09Z
     */
    create_time?: string;
    /**
     * The URL that an approved registrant can use to join the meeting or webinar.
     *
     * @format string
     * @example https://example.com/j/11111
     */
    join_url?: string;
  }[];
};

export type WebinarAbsenteesVariables = {
  pathParams: WebinarAbsenteesPathParams;
  queryParams?: WebinarAbsenteesQueryParams;
} & FetcherExtraProps;

/**
 * List absentees of a webinar.
 *
 * **Prerequisites**
 * * A Pro or higher plan with a [Webinar plan](https://zoom.us/webinar) add-on.
 *
 * **[Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `webinar:read:admin`,`webinar:read`
 *
 * **[Granular Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `webinar:read:list_absentees`,`webinar:read:list_absentees:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `HEAVY`
 */
export const webinarAbsentees = (
  variables: WebinarAbsenteesVariables,
  signal?: AbortSignal,
) =>
  fetch<
    WebinarAbsenteesResponse,
    WebinarAbsenteesError,
    undefined,
    {},
    WebinarAbsenteesQueryParams,
    WebinarAbsenteesPathParams
  >({
    url: "/past_webinars/{webinarId}/absentees",
    method: "get",
    ...variables,
    signal,
  });

export type PastWebinarsPathParams = {
  /**
   * The webinar's ID.
   *
   * @format int64
   * @example 99289110036
   */
  webinarId: number;
};

export type PastWebinarsError = Fetcher.ErrorWrapper<undefined>;

export type PastWebinarsResponse = {
  /**
   * List of ended webinar instances.
   */
  webinars?: {
    /**
     * Start time.
     *
     * @format date-time
     * @example 2022-03-26T06:44:14Z
     */
    start_time?: string;
    /**
     * Webinar UUID.
     *
     * @example Bznyg8KZTdCVbQxvS/oZ7w==
     */
    uuid?: string;
  }[];
};

export type PastWebinarsVariables = {
  pathParams: PastWebinarsPathParams;
} & FetcherExtraProps;

/**
 * List past webinar instances.
 *
 * **Prerequisites**
 * * A Pro or higher plan with a [Webinar plan](https://zoom.us/webinar) add-on.
 *
 * **[Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `webinar:read:admin`,`webinar:read`
 *
 * **[Granular Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `webinar:read:list_past_instances`,`webinar:read:list_past_instances:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
 */
export const pastWebinars = (
  variables: PastWebinarsVariables,
  signal?: AbortSignal,
) =>
  fetch<
    PastWebinarsResponse,
    PastWebinarsError,
    undefined,
    {},
    {},
    PastWebinarsPathParams
  >({
    url: "/past_webinars/{webinarId}/instances",
    method: "get",
    ...variables,
    signal,
  });

export type ListWebinarParticipantsPathParams = {
  /**
   * The webinar's ID or universally unique ID (UUID).
   * * If you provide a webinar ID, the API returns a response for the latest webinar instance.
   * * If you provide a webinar UUID that begins with a `/` character or contains the `//` characters, you **must** [double encode](https://developers.zoom.us/docs/api/rest/using-zoom-apis/#meeting-id-and-uuid) the webinar UUID before making an API request.
   *
   * @example ABCDE12345
   */
  webinarId: string;
};

export type ListWebinarParticipantsQueryParams = {
  /**
   * The number of records returned within a single API call.
   *
   * @maximum 300
   * @example 30
   * @default 30
   */
  page_size?: number;
  /**
   * Use the next page token to paginate through large result sets. A next page token is returned whenever the set of available results exceeds the current page size. This token's expiration period is 15 minutes.
   *
   * @example IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2
   */
  next_page_token?: string;
};

export type ListWebinarParticipantsError = Fetcher.ErrorWrapper<undefined>;

export type ListWebinarParticipantsResponse = {
  /**
   * Use the next page token to paginate through large result sets. A next page token is returned whenever the set of available results exceeds the current page size. This token's expiration period is 15 minutes.
   *
   * @example Tva2CuIdTgsv8wAnhyAdU3m06Y2HuLQtlh3
   */
  next_page_token?: string;
  /**
   * The number of pages returned for this request.
   *
   * @example 1
   */
  page_count?: number;
  /**
   * The total number of records returned from a single API call.
   *
   * @maximum 300
   * @example 30
   * @default 30
   */
  page_size?: number;
  /**
   * Array of webinar participant objects.
   */
  participants?: {
    /**
     * The participant's unique identifier.
     *
     * @example 30R7kT7bTIKSNUFEuH_Qlg
     */
    id?: string;
    /**
     * The participant's name.
     *
     * @example Jill Chill
     */
    name?: string;
    /**
     * The participant's ID. This ID is assigned to the participant upon joining the webinar and is only valid for that webinar.
     *
     * @example ABCDEF123456
     */
    user_id?: string;
    /**
     * The participant's unique registrant ID. This field only returns if you pass the `registrant_id` value for the `include_fields` query parameter.
     *
     * This field does not return if the `type` query parameter is the `live` value.
     *
     * @example _f08HhPJS82MIVLuuFaJPg
     */
    registrant_id?: string;
    /**
     * Email address of the participant. If the participant is **not** part of the host's account, this returns an empty string value, with some exceptions. See [Email address display rules](https://developers.zoom.us/docs/api/rest/using-zoom-apis/#email-address-display-rules) for details.
     *
     * @format email
     * @example jchill@example.com
     */
    user_email?: string;
    /**
     * The participant's join time.
     *
     * @format date-time
     * @example 2019-02-01T12:34:12.66Z
     */
    join_time?: string;
    /**
     * The participant's leave time.
     *
     * @format date-time
     * @example 2019-02-01T12:54:12.66Z
     */
    leave_time?: string;
    /**
     * Participant duration, in seconds, calculated by subtracting the `leave_time` from the `join_time` for the `user_id`. If the participant leaves and rejoins the same meeting, they will be assigned a different `user_id` and Zoom displays their new duration in a separate object. Note that because of this, the duration may not reflect the total time the user was in the meeting.
     *
     * @example 20
     */
    duration?: number;
    /**
     * Whether failover occurred during the webinar.
     *
     * @example false
     */
    failover?: boolean;
    /**
     * The participant's status.
     * * `in_meeting` - In a meeting.
     * * `in_waiting_room` - In a waiting room.
     *
     * @example in_meeting
     */
    status?: "in_meeting" | "in_waiting_room";
    /**
     * Whether the webinar participant is an internal user.
     *
     * @example false
     * @default false
     */
    internal_user?: boolean;
  }[];
  /**
   * The total number of records available across all pages.
   *
   * @example 1
   */
  total_records?: number;
};

export type ListWebinarParticipantsVariables = {
  pathParams: ListWebinarParticipantsPathParams;
  queryParams?: ListWebinarParticipantsQueryParams;
} & FetcherExtraProps;

/**
 * Retrieve a list of all the participants who attended a webinar hosted in the past.
 *
 * **Prerequisites:**
 * * A Pro or higher plan with a webinar add-on.
 *
 * **NOTE:** After meetings with hundreds of participants, the attendance data takes some time to be generated. If you receive a duration of 0 for users' time in the meeting, you may have called the endpoint before the data is fully processed. Implement a short delay or retry logic before fetching participant data.
 *
 * **[Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `webinar:read:admin`,`webinar:read`
 *
 * **[Granular Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `webinar:read:list_past_participants:admin`,`webinar:read:list_past_participants`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
 */
export const listWebinarParticipants = (
  variables: ListWebinarParticipantsVariables,
  signal?: AbortSignal,
) =>
  fetch<
    ListWebinarParticipantsResponse,
    ListWebinarParticipantsError,
    undefined,
    {},
    ListWebinarParticipantsQueryParams,
    ListWebinarParticipantsPathParams
  >({
    url: "/past_webinars/{webinarId}/participants",
    method: "get",
    ...variables,
    signal,
  });

export type ListPastWebinarPollResultsPathParams = {
  /**
   * The webinar's ID or universally unique ID (UUID).
   * * If you provide a webinar ID, the API returns a response for the latest webinar instance.
   * * If you provide a webinar UUID that begins with a `/` character or contains the `//` characters, you **must** [double encode](https://developers.zoom.us/docs/api/rest/using-zoom-apis/#meeting-id-and-uuid) the webinar UUID before making an API request.
   *
   * @example ABCDE12345
   */
  webinarId: string;
};

export type ListPastWebinarPollResultsError = Fetcher.ErrorWrapper<undefined>;

export type ListPastWebinarPollResultsResponse = {
  /**
   * Webinar ID in **long** format, represented as int64 data type in JSON, also known as the webinar number.
   *
   * @format int64
   * @example 95204914252
   */
  id?: number;
  questions?: {
    /**
     * Email address of the user who submitted answers to the poll. If the participant is **not** part of the host's account, this returns an empty string value, with some exceptions. See [Email address display rules](https://developers.zoom.us/docs/api/rest/using-zoom-apis/#email-address-display-rules) for details.
     *
     * @example jchill@example.com
     */
    email?: string;
    /**
     * Name of the user who submitted answers to the poll. If the `anonymous` option is enabled for a poll, the participant's polling information will be kept anonymous and the value of `name` field will be `Anonymous Attendee`.
     *
     * @example Jill Chill
     */
    name?: string;
    question_details?: {
      /**
       * Answer submitted by the user.
       *
       * @example Good
       */
      answer?: string;
      /**
       * Date and time when the answer to the poll was submitted.
       *
       * @format date-time
       * @example 2022-03-26T05:37:59Z
       */
      date_time?: string;
      /**
       * Unique identifier of the poll.
       *
       * @example QalIoKWLTJehBJ8e1xRrbQ
       */
      polling_id?: string;
      /**
       * Question asked during the poll.
       *
       * @example How are you?
       */
      question?: string;
    }[];
  }[];
  /**
   * The webinar's start time.
   *
   * @format date-time
   * @example 2022-03-26T05:37:59Z
   */
  start_time?: string;
  /**
   * Webinar UUID.
   *
   * @example Bznyg8KZTdCVbQxvS/oZ7w==
   */
  uuid?: string;
};

export type ListPastWebinarPollResultsVariables = {
  pathParams: ListPastWebinarPollResultsPathParams;
} & FetcherExtraProps;

/**
 * The polling feature for webinar lets you create single-choice or multiple-choice polling questions for your webinars. This API endpoint retrieves the results for webinar polls of a specific webinar.
 *
 * **Prerequisites:**
 *
 * * [Webinar license](https://zoom.us/webinar)
 *
 *
 *
 * **[Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `webinar:read:admin`,`webinar:read`
 *
 * **[Granular Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `webinar:read:list_past_polls`,`webinar:read:list_past_polls:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
 */
export const listPastWebinarPollResults = (
  variables: ListPastWebinarPollResultsVariables,
  signal?: AbortSignal,
) =>
  fetch<
    ListPastWebinarPollResultsResponse,
    ListPastWebinarPollResultsError,
    undefined,
    {},
    {},
    ListPastWebinarPollResultsPathParams
  >({
    url: "/past_webinars/{webinarId}/polls",
    method: "get",
    ...variables,
    signal,
  });

export type ListPastWebinarQAPathParams = {
  /**
   * The webinar's ID or universally unique ID (UUID).
   * * If you provide a webinar ID, the API returns a response for the latest webinar instance.
   * * If you provide a webinar UUID that begins with a `/` character or contains the `//` characters, you **must** [double encode](https://developers.zoom.us/docs/api/rest/using-zoom-apis/#meeting-id-and-uuid) the webinar UUID before making an API request.
   *
   * @example ABCDE12345
   */
  webinarId: string;
};

export type ListPastWebinarQAError = Fetcher.ErrorWrapper<undefined>;

export type ListPastWebinarQAResponse = {
  /**
   * Webinar ID in **long** format, represented as int64 data type in JSON, also known as the webinar number.
   *
   * @format int64
   * @example 95204914252
   */
  id?: number;
  questions?: {
    /**
     * Email address of the user. If the participant is **not** part of the host's account, this returns an empty string value, with some exceptions. See [Email address display rules](https://developers.zoom.us/docs/api/rest/using-zoom-apis/#email-address-display-rules) for details.
     *
     * @example jchill@example.com
     */
    email?: string;
    /**
     * Name of the user. If `anonymous` option is enabled for the Q&amp;A, the participant's information will be kept anonymous and the value of `name` field will be `Anonymous Attendee`.
     *
     * @example Jill Chill
     */
    name?: string;
    question_details?: {
      /**
       * Answer submitted for the question. The value will be 'live answered' if this is a live answer.
       *
       * @example Good
       */
      answer?: string;
      /**
       * Question asked during the Q&amp;A.
       *
       * @example How are you?
       */
      question?: string;
    }[];
  }[];
  /**
   * The webinar's start time.
   *
   * @format date-time
   * @example 2022-03-26T06:44:14Z
   */
  start_time?: string;
  /**
   * Webinar UUID.
   *
   * @example Bznyg8KZTdCVbQxvS/oZ7w==
   */
  uuid?: string;
};

export type ListPastWebinarQAVariables = {
  pathParams: ListPastWebinarQAPathParams;
} & FetcherExtraProps;

/**
 * List the Q&amp;A of a specific past webinar.
 *
 * The [question and answer (Q&amp;A)](https://support.zoom.us/hc/en-us/articles/203686015-Getting-Started-with-Question-Answer) feature for webinars lets attendees ask questions during the webinar and for the panelists, co-hosts and host to answer their questions.
 *
 * **Prerequisites**
 *
 * * [Webinar license](https://zoom.us/webinar)
 *
 *
 *
 * **[Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `webinar:read:admin`,`webinar:read`
 *
 * **[Granular Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `webinar:read:past_qa`,`webinar:read:past_qa:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
 */
export const listPastWebinarQA = (
  variables: ListPastWebinarQAVariables,
  signal?: AbortSignal,
) =>
  fetch<
    ListPastWebinarQAResponse,
    ListPastWebinarQAError,
    undefined,
    {},
    {},
    ListPastWebinarQAPathParams
  >({
    url: "/past_webinars/{webinarId}/qa",
    method: "get",
    ...variables,
    signal,
  });

export type ListWebinarTemplatesPathParams = {
  /**
   * The user's ID. To get a user's ID, use the [**List users**](/docs/api-reference/zoom-api/ma#operation/users) API. For user-level apps, pass the `me` value instead of the user ID value.
   *
   * @example abcD3ojfdbjfg
   */
  userId: string;
};

export type ListWebinarTemplatesError = Fetcher.ErrorWrapper<undefined>;

export type ListWebinarTemplatesResponse = {
  /**
   * Information about the webinar templates.
   */
  templates?: {
    /**
     * The webinar template's ID.
     *
     * @example ull6574eur
     */
    id?: string;
    /**
     * The webinar template's name.
     *
     * @example Weekly Meeting Template
     */
    name?: string;
    /**
     * The webinar template type.  `1`: Webinar template    `2`: Admin webinar template
     *
     * @example 1
     */
    type?: number;
  }[];
  /**
   * The total number of records returned.
   *
   * @example 1
   */
  total_records?: number;
};

export type ListWebinarTemplatesVariables = {
  pathParams: ListWebinarTemplatesPathParams;
} & FetcherExtraProps;

/**
 * Display a list of a user's [webinar templates](https://support.zoom.us/hc/en-us/articles/115001079746-Webinar-Templates). For user-level apps, pass [the `me` value](/docs/api-reference/using-zoom-apis#mekeyword) instead of the `userId` parameter. When you schedule a webinar, save the settings for that webinar as a template for scheduling future webinars.  To use a template when scheduling a webinar, use the `id` value in this API response in the `template_id` field of the [**Create a webinar**](/docs/api-reference/zoom-api/methods#operation/webinarCreate) API. **Prerequisites:** * A Pro or a higher account with the [Zoom Webinar plan](https://zoom.us/pricing/webinar).
 *
 * **[Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `webinar:read`,`webinar:read:admin`
 *
 * **[Granular Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `webinar:read:list_templates`,`webinar:read:list_templates:admin`
 */
export const listWebinarTemplates = (
  variables: ListWebinarTemplatesVariables,
  signal?: AbortSignal,
) =>
  fetch<
    ListWebinarTemplatesResponse,
    ListWebinarTemplatesError,
    undefined,
    {},
    {},
    ListWebinarTemplatesPathParams
  >({
    url: "/users/{userId}/webinar_templates",
    method: "get",
    ...variables,
    signal,
  });

export type WebinarTemplateCreatePathParams = {
  /**
   * The user ID retrievable from the [List users](/api-reference/zoom-api/methods#operation/users) API.
   *
   * @example 30R7kT7bTIKSNUFEuH_Qlg
   */
  userId: string;
};

export type WebinarTemplateCreateError = Fetcher.ErrorWrapper<undefined>;

export type WebinarTemplateCreateResponse = {
  /**
   * The webinar template's ID.
   *
   * @example ull6574eur
   */
  id?: string;
  /**
   * The webinar template's name.
   *
   * @example Weekly Meeting Template
   */
  name?: string;
};

export type WebinarTemplateCreateRequestBody = {
  /**
   * The webinar ID in long (int64) format.
   *
   * @format int64
   * @example 96172769962
   */
  webinar_id?: number;
  /**
   * The webinar template's name.
   *
   * @example Weekly Meeting Template
   */
  name?: string;
  /**
   * If the field is set to true, the recurrence webinar template will be saved as the scheduled webinar.
   *
   * @example false
   * @default false
   */
  save_recurrence?: boolean;
  /**
   * Overwrite an existing webinar template if the template is created from same existing webinar.
   *
   * @example false
   * @default false
   */
  overwrite?: boolean;
};

export type WebinarTemplateCreateVariables = {
  body?: WebinarTemplateCreateRequestBody;
  pathParams: WebinarTemplateCreatePathParams;
} & FetcherExtraProps;

/**
 * Create a webinar template from an existing webinar.
 *
 * **Prerequisites**
 * * A Pro or higher plan with a [Webinar plan](https://zoom.us/webinar) add-on.
 *
 * **[Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `webinar:write:admin`,`webinar:write`
 *
 * **[Granular Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `webinar:write:template`,`webinar:write:template:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
 */
export const webinarTemplateCreate = (
  variables: WebinarTemplateCreateVariables,
  signal?: AbortSignal,
) =>
  fetch<
    WebinarTemplateCreateResponse,
    WebinarTemplateCreateError,
    WebinarTemplateCreateRequestBody,
    {},
    {},
    WebinarTemplateCreatePathParams
  >({
    url: "/users/{userId}/webinar_templates",
    method: "post",
    ...variables,
    signal,
  });

export type WebinarsPathParams = {
  /**
   * The user's user ID or email address. For user-level apps, pass the `me` value.
   */
  userId: string;
};

export type WebinarsQueryParams = {
  /**
   * The type of webinar.
   * * `scheduled` - All valid previous (unexpired) webinars, live webinars, and upcoming scheduled webinars.
   * * `upcoming` - All upcoming webinars, including live webinars.
   *
   * @example scheduled
   * @default scheduled
   */
  type?: "scheduled" | "upcoming";
  /**
   * The number of records returned within a single API call.
   *
   * @maximum 300
   * @example 30
   * @default 30
   */
  page_size?: number;
  /**
   * **Deprecated** We will no longer support this field in a future release. Instead, use the `next_page_token` for pagination.
   *
   * @example 1
   * @default 1
   */
  page_number?: number;
};

export type WebinarsError = Fetcher.ErrorWrapper<undefined>;

export type WebinarsResponse = {
  /**
   * Use the next page token to paginate through large result sets. A next page token is returned whenever the set of available results exceeds the current page size. This token's expiration period is 15 minutes.
   *
   * @example w7587w4eiyfsudgf
   */
  next_page_token?: string;
  /**
   * The number of pages returned for the request made.
   *
   * @example 1
   */
  page_count?: number;
  /**
   * **Deprecated** We will no longer support this field in a future release. Instead, use the `next_page_token` for pagination.
   *
   * @example 1
   * @deprecated true
   * @default 1
   */
  page_number?: number;
  /**
   * The number of records returned with a single API call.
   *
   * @maximum 300
   * @example 30
   * @default 30
   */
  page_size?: number;
  /**
   * The total number of all the records available across pages.
   *
   * @example 20
   */
  total_records?: number;
  /**
   * List of webinar objects.
   */
  webinars?: {
    /**
     * Webinar description. The agenda length gets truncated to 250 characters when you list all webinars for a user. To view the complete agenda, retrieve details for a single webinar, use the [**Get a webinar**](/docs/api-reference/zoom-api/methods#operation/webinar) API.
     *
     * @example Learn more about Zoom APIs
     */
    agenda?: string;
    /**
     * The webinar's creation time.
     *
     * @format date-time
     * @example 2021-07-01T22:00:00Z
     */
    created_at?: string;
    /**
     * The webinar's duration, in minutes.
     *
     * @example 60
     */
    duration?: number;
    /**
     * The host's ID.
     *
     * @example x1yCzABCDEfg23HiJKl4mN
     */
    host_id?: string;
    /**
     * The webinar ID.
     *
     * @format int64
     * @example 1234567890
     */
    id?: number;
    /**
     * The URL to join the webinar.
     *
     * @example https://example.com/j/11111
     */
    join_url?: string;
    /**
     * The webinar's start time.
     *
     * @format date-time
     * @example 2021-07-13T21:00:00Z
     */
    start_time?: string;
    /**
     * The webinar's [timezone](https://developers.zoom.us/docs/api/rest/other-references/abbreviation-lists/#timezones).
     *
     * @example America/Los_Angeles
     */
    timezone?: string;
    /**
     * The webinar's topic.
     *
     * @example My Webinar
     */
    topic?: string;
    /**
     * The webinar type.
     * * `5` - A webinar.
     * * `6` - A recurring webinar without a fixed time.
     * * `9` - A recurring webinar with a fixed time.
     *
     * @example 9
     * @default 5
     */
    type?: 5 | 6 | 9;
    /**
     * The webinar's universally unique identifier (UUID). Each webinar instance generates a webinar UUID.
     *
     * @example 4444AAAiAAAAAiAiAiiAii==
     */
    uuid?: string;
    /**
     * Whether the webinar is `simulive`.
     *
     * @example true
     */
    is_simulive?: boolean;
  }[];
};

export type WebinarsVariables = {
  pathParams: WebinarsPathParams;
  queryParams?: WebinarsQueryParams;
} & FetcherExtraProps;

/**
 * List all the webinars scheduled by or on behalf a webinar host. For user-level apps, pass [the `me` value](https://developers.zoom.us/docs/api/rest/using-zoom-apis/#the-me-keyword) instead of the `userId` parameter.
 *
 *  Zoom users with a [webinar plan](https://zoom.us/webinar) have access to creating and managing webinars. Webinars let a host broadcast a Zoom meeting to up to 10,000 attendees.
 *
 * **Note** This API only returns a user's [unexpired webinars](https://support.zoom.us/hc/en-us/articles/201362373-Meeting-ID#h_c73f9b08-c1c0-4a1a-b538-e01ebb98e844).
 *
 *  **Prerequisites**
 * * A Pro or higher plan with the webinar add-on.
 *
 * **[Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `webinar:read:admin`,`webinar:read`
 *
 * **[Granular Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `webinar:read:list_webinars`,`webinar:read:list_webinars:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
 */
export const webinars = (variables: WebinarsVariables, signal?: AbortSignal) =>
  fetch<
    WebinarsResponse,
    WebinarsError,
    undefined,
    {},
    WebinarsQueryParams,
    WebinarsPathParams
  >({ url: "/users/{userId}/webinars", method: "get", ...variables, signal });

export type WebinarCreatePathParams = {
  /**
   * The user ID or email address of the user. For user-level apps, pass the `me` value.
   *
   * @example 30R7kT7bTIKSNUFEuH_Qlg
   */
  userId: string;
};

export type WebinarCreateError = Fetcher.ErrorWrapper<undefined>;

export type WebinarCreateResponse = {
  /**
   * Email address of the meeting host.
   *
   * @format email
   * @example jchill@example.com
   */
  host_email?: string;
  /**
   * ID of the user set as host of the webinar.
   *
   * @example 30R7kT7bTIKSNUFEuH_Qlg
   */
  host_id?: string;
  /**
   * Webinar ID in **long** format, represented as int64 data type in JSON. Also known as the webinar number.
   *
   * @format int64
   * @example 95204914252
   */
  id?: number;
  /**
   * Specify whether or not registrants of this webinar should receive confirmation emails.
   *
   * @example true
   */
  registrants_confirmation_email?: boolean;
  /**
   * Unique identifier of the webinar template. Use this field only if you would like to [schedule the webinar using an existing template](https://support.zoom.us/hc/en-us/articles/115001079746-Webinar-Templates#schedule). The value of this field can be retrieved from [**List webinar templates**](/docs/api/rest/reference/zoom-api/methods#operation/listWebinarTemplates) API.
   * You must provide the user ID of the host instead of the email address in the `userId` path parameter in order to use a template for scheduling a Webinar.
   *
   * @example ull6574eur
   */
  template_id?: string;
  /**
   * Unique identifier of a webinar. Each webinar instance will generate its own UUID. Ror example, after a webinar ends, a new UUID will be generated for the next instance of the Webinar). Once a Webinar ends, the value of the UUID for the same webinar will be different from when it was scheduled.
   *
   * @example Bznyg8KZTdCVbQxvS/oZ7w==
   */
  uuid?: string;
  /**
   * The webinar's agenda.
   *
   * @example My Webinar
   */
  agenda?: string;
  /**
   * Create time.
   *
   * @format date-time
   * @example 2022-03-26T07:18:32Z
   */
  created_at?: string;
  /**
   * The webinar's duration.
   *
   * @example 60
   */
  duration?: number;
  /**
   * URL to join the webinar. Only share this URL with the users who should be invited to the Webinar.
   *
   * @example https://example.com/j/11111
   */
  join_url?: string;
  /**
   * Array of occurrence objects.
   */
  occurrences?: {
    /**
     * Duration.
     *
     * @example 60
     */
    duration?: number;
    /**
     * Occurrence ID: Unique Identifier that identifies an occurrence of a recurring webinar. [Recurring webinars](https://support.zoom.us/hc/en-us/articles/216354763-How-to-Schedule-A-Recurring-Webinar) can have a maximum of 50 occurrences.
     *
     * @example 1648194360000
     */
    occurrence_id?: string;
    /**
     * Start time.
     *
     * @format date-time
     * @example 2022-03-25T07:46:00Z
     */
    start_time?: string;
    /**
     * Occurrence status.
     *  `available` - Available occurrence.
     *  `deleted` -  Deleted occurrence.
     *
     * @example available
     */
    status?: "available" | "deleted";
  }[];
  /**
   * The webinar passcode. By default, it can be up to 10 characters in length and may contain alphanumeric characters as well as special characters such as !, @, #, etc.
   *
   * @maxLength 10
   * @example 123456
   */
  password?: string;
  /**
   * Encrypted passcode for third party endpoints (H323/SIP).
   *
   * @example 8pEkRweVXPV3Ob2KJYgFTRlDtl1gSn.1
   */
  encrypted_passcode?: string;
  /**
   * H.323/SIP room system passcode.
   *
   * @example 123456
   */
  h323_passcode?: string;
  /**
   * Recurrence object. Use this object only for a webinar of type `9` i.e., a recurring webinar with fixed time.
   */
  recurrence?: {
    /**
     * Select a date when the webinar will recur before it is canceled. Should be in UTC time, such as 2017-11-25T12:00:00Z. Can't be used with `end_times`.
     *
     * @format date-time
     * @example 2022-04-02T15:59:00Z
     */
    end_date_time?: string;
    /**
     * Select how many times the webinar will recur before it is canceled. The maximum number of recurring is 60. Can't be used with `end_date_time`.
     *
     * @maximum 60
     * @example 7
     * @default 1
     */
    end_times?: number;
    /**
     * Use this field **only if you're scheduling a recurring webinar of type** `3` to state which day in a month the webinar should recur. The value range is from 1 to 31.
     *
     * For instance, if you would like the webinar to recur on 23rd of each month, provide `23` as the value of this field and `1` as the value of the `repeat_interval` field. Instead, if you would like the webinar to recur once every three months, on 23rd of the month, change the value of the `repeat_interval` field to `3`.
     *
     * @example 1
     */
    monthly_day?: number;
    /**
     * Use this field **only if you're scheduling a recurring webinar of type** `3` to state the week of the month when the webinar should recur. If you use this field, **you must also use the `monthly_week_day` field to state the day of the week when the webinar should recur.**
     *  `-1` - Last week of the month.
     *  `1` - First week of the month.
     *  `2` - Second week of the month.
     *  `3` - Third week of the month.
     *  `4` - Fourth week of the month.
     *
     * @example 1
     */
    monthly_week?: -1 | 1 | 2 | 3 | 4;
    /**
     * Use this field **only if you're scheduling a recurring webinar of type** `3` to state a specific day in a week when the monthly webinar should recur. To use this field, you must also use the `monthly_week` field.
     *  `1` - Sunday.
     *  `2` - Monday.
     *  `3` - Tuesday.
     *  `4` -  Wednesday.
     *  `5` - Thursday.
     *  `6` - Friday.
     *  `7` - Saturday.
     *
     * @example 1
     */
    monthly_week_day?: 1 | 2 | 3 | 4 | 5 | 6 | 7;
    /**
     * Define the interval when the webinar should recur. For instance, if you would like to schedule a Webinar that recurs every two months, you must set the value of this field as `2` and the value of the `type` parameter as `3`.
     *
     * For a daily webinar, the maximum interval you can set is `90` days. For a weekly webinar, the maximum interval that you can set is `12` weeks. For a monthly webinar, the maximum interval that you can set is `3` months.
     *
     * @example 1
     */
    repeat_interval?: number;
    /**
     * Recurrence webinar types.
     *  `1` - Daily.
     *  `2` - Weekly.
     *  `3` - Monthly.
     *
     * @example 1
     */
    type: 1 | 2 | 3;
    /**
     * Use this field **only if you're scheduling a recurring webinar of type** `2` to state which day(s) of the week the webinar should repeat.
     *   The value for this field could be a number between `1` to `7` in string format. For instance, if the Webinar should recur on Sunday, provide `1` as the value of this field.
     *
     * **Note:** If you would like the webinar to occur on multiple days of a week, you should provide comma separated values for this field. For instance, if the webinar should recur on Sundays and Tuesdays, provide `1,3` as the value of this field.
     *
     *
     *  `1` - Sunday.
     *  `2` - Monday.
     *  `3` - Tuesday.
     *  `4` -  Wednesday.
     *  `5` -  Thursday.
     *  `6` - Friday.
     *  `7` - Saturday.
     *
     * @example 1
     */
    weekly_days?: string;
  };
  /**
   * Webinar settings.
   */
  settings?: {
    /**
     * Allow attendees to join from multiple devices.
     *
     * @example true
     */
    allow_multiple_devices?: boolean;
    /**
     * Alternative host emails or IDs. Multiple values separated by comma.
     *
     * @example jchill@example.com
     */
    alternative_hosts?: string;
    /**
     * Whether the **Allow alternative hosts to add or edit polls** feature is enabled. This requires Zoom version 5.8.0 or higher.
     *
     * @example true
     */
    alternative_host_update_polls?: boolean;
    /**
     * `0` - Automatically approve.
     *  `1` - Manually approve.
     *  `2` - No registration required.
     *
     * @example 0
     * @default 2
     */
    approval_type?: 0 | 1 | 2;
    /**
     * Send reminder email to attendees and panelists.
     */
    attendees_and_panelists_reminder_email_notification?: {
      /**
       * * `true` - Send reminder email to attendees and panelists.
       *
       * * `false` - Do not send reminder email to attendees and panelists.
       *
       * @example true
       */
      enable?: boolean;
      /**
       * `0` - No plan.
       *  `1` - Send 1 hour before webinar.
       *  `2` - Send 1 day before webinar.
       *  `3` - Send 1 hour and 1 day before webinar.
       *  `4` - Send 1 week before webinar.
       *  `5` - Send 1 hour and 1 week before webinar.
       *  `6` - Send 1 day and 1 week before webinar.
       *  `7` - Send 1 hour, 1 day and 1 week before webinar.
       *
       * @example 0
       */
      type?: 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7;
    };
    /**
     * Determine how participants can join the audio portion of the webinar.
     *
     * @example telephony
     * @default both
     */
    audio?: "both" | "telephony" | "voip" | "thirdParty";
    /**
     * Third party audio conference info.
     *
     * @maxLength 2048
     * @example test
     */
    audio_conference_info?: string;
    /**
     * If user has configured [**Sign Into Zoom with Specified Domains**](https://support.zoom.us/hc/en-us/articles/360037117472-Authentication-Profiles-for-Meetings-and-Webinars#h_5c0df2e1-cfd2-469f-bb4a-c77d7c0cca6f) option, this will list the domains that are authenticated.
     *
     * @example example.com
     */
    authentication_domains?: string;
    /**
     * Authentication name set in the [authentication profile](https://support.zoom.us/hc/en-us/articles/360037117472-Authentication-Profiles-for-Meetings-and-Webinars#h_5c0df2e1-cfd2-469f-bb4a-c77d7c0cca6f).
     *
     * @example Sign in to Zoom
     */
    authentication_name?: string;
    /**
     * Webinar authentication option ID.
     *
     * @example signIn_D8cJuqWVQ623CI4Q8yQK0Q
     */
    authentication_option?: string;
    /**
     * Automatic recording.
     *  `local` - Record on local.
     *  `cloud` -  Record on cloud.
     *  `none` - Disabled.
     *
     * @example cloud
     * @default none
     */
    auto_recording?: "local" | "cloud" | "none";
    /**
     * Close registration after event date.
     *
     * @example true
     * @deprecated true
     */
    close_registration?: boolean;
    /**
     * Contact email for registration
     *
     * @example jchill@example.com
     */
    contact_email?: string;
    /**
     * Contact name for registration
     *
     * @example Jill Chill
     */
    contact_name?: string;
    /**
     * Set the email language.
     * `en-US`,`de-DE`,`es-ES`,`fr-FR`,`jp-JP`,`pt-PT`,`ru-RU`,`zh-CN`, `zh-TW`, `ko-KO`, `it-IT`, `vi-VN`.
     *
     * @example en-US
     */
    email_language?: string;
    /**
     * Only signed in users can join this meeting.
     *
     * **This field is deprecated and will not be supported in the future.**
     *
     *  As an alternative, use the `meeting_authentication`, `authentication_option` and `authentication_domains` fields to understand the [authentication configurations](https://support.zoom.us/hc/en-us/articles/360037117472-Authentication-Profiles-for-Meetings-and-Webinars) set for the webinar.
     *
     * @example true
     * @deprecated true
     */
    enforce_login?: boolean;
    /**
     * Only signed in users with specified domains can join meetings.
     *
     * **This field is deprecated and will not be supported in the future.**
     *
     *  As an alternative, use the `meeting_authentication`, `authentication_option` and `authentication_domains` fields to understand the [authentication configurations](https://support.zoom.us/hc/en-us/articles/360037117472-Authentication-Profiles-for-Meetings-and-Webinars) set for the webinar.
     *
     * @example example.com
     * @deprecated true
     */
    enforce_login_domains?: string;
    /**
     * Send follow-up email to absentees.
     */
    follow_up_absentees_email_notification?: {
      /**
       * * `true` - Send follow-up email to absentees.
       *
       * * `false` - Do not send follow-up email to absentees.
       *
       * @example true
       */
      enable?: boolean;
      /**
       * `0` - No plan.
       *  `1` - Send 1 days after the scheduled end date.
       *  `2` - Send 2 days after the scheduled end date.
       *  `3` - Send 3 days after the scheduled end date.
       *  `4` - Send 4 days after the scheduled end date.
       *  `5` - Send 5 days after the scheduled end date.
       *  `6` - Send 6 days after the scheduled end date.
       *  `7` - Send 7 days after the scheduled end date.
       *
       * @example 0
       */
      type?: 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7;
    };
    /**
     * Send follow-up email to attendees.
     */
    follow_up_attendees_email_notification?: {
      /**
       * * `true` - Send follow-up email to attendees.
       *
       * * `false` - Do not send follow-up email to attendees.
       *
       * @example true
       */
      enable?: boolean;
      /**
       * `0` - No plan.
       *  `1` - Send 1 day after the scheduled end date.
       *  `2` - Send 2 days after the scheduled end date.
       *  `3` - Send 3 days after the scheduled end date.
       *  `4` - Send 4 days after the scheduled end date.
       *  `5` - Send 5 days after the scheduled end date.
       *  `6` - Send 6 days after the scheduled end date.
       *  `7` - Send 7 days after the scheduled end date.
       *
       * @example 0
       */
      type?: 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7;
    };
    /**
     * List of global dial-in countries
     */
    global_dial_in_countries?: string[];
    /**
     * A list of available dial-in numbers for different countries or regions.
     */
    global_dial_in_numbers?: {
      /**
       * City of the number.
       *
       * @example New York
       */
      city?: string;
      /**
       * The country code.
       *
       * @example US
       */
      country?: string;
      /**
       * Full name of country.
       *
       * @example US
       */
      country_name?: string;
      /**
       * Dial-in phone number.
       *
       * @example +1 1000200200
       */
      number?: string;
      /**
       * Dial-in number type.
       *
       * @example toll
       */
      type?: "toll" | "tollfree" | "premium";
    }[];
    /**
     * Default to HD video.
     *
     * @example false
     * @default false
     */
    hd_video?: boolean;
    /**
     * Whether HD video for attendees is enabled.
     *
     * @example false
     * @default false
     */
    hd_video_for_attendees?: boolean;
    /**
     * Start video when host joins webinar.
     *
     * @example true
     */
    host_video?: boolean;
    /**
     * The webinar's [language interpretation settings](https://support.zoom.com/hc/en/article?id=zm_kb&sysparm_article=KB0064768). Make sure to add the language in the web portal in order to use it in the API. See link for details.
     *
     * **Note:** This feature is only available for certain Webinar add-on, Education, and Business and higher plans. If this feature is not enabled on the host's account, this setting will **not** be applied to the webinar. This is not supported for simulive webinars.
     */
    language_interpretation?: {
      /**
       * Whether to enable [language interpretation](https://support.zoom.com/hc/en/article?id=zm_kb&sysparm_article=KB0064768) for the webinar. If not provided, the default value will be based on the user's setting.
       *
       * @example true
       */
      enable?: boolean;
      /**
       * Information about the webinar's language interpreters.
       */
      interpreters?: {
        /**
         * The interpreter's email address.
         *
         * @format email
         * @example interpreter@example.com
         */
        email?: string;
        /**
         * A comma-separated list of the interpreter's languages. The string must contain exactly two country IDs.
         *
         * Only system-supported languages are allowed: `US` (English), `CN` (Chinese), `JP` (Japanese), `DE` (German), `FR` (French), `RU` (Russian), `PT` (Portuguese), `ES` (Spanish), and `KR` (Korean).
         *
         * For example, to set an interpreter translating from English to Chinese, use `US,CN`.
         *
         * @example US,FR
         * @deprecated true
         */
        languages?: string;
        /**
         * A comma-separated list of the interpreter's languages. The string must contain exactly two languages.
         *
         * To get this value, use the `language_interpretation` object's `languages` and `custom_languages` values in the [**Get user settings**](/docs/api/users/#tag/users/GET/users/{userId}/settings) API response.
         *
         * **languages**: System-supported languages include `English`, `Chinese`, `Japanese`, `German`, `French`, `Russian`, `Portuguese`, `Spanish`, and `Korean`.
         *
         * **custom_languages**: User-defined languages added by the user.
         *
         * For example, an interpreter translating between English and French should use `English,French`.
         *
         * @example English,French
         */
        interpreter_languages?: string;
      }[];
    };
    /**
     * The webinar's [sign language interpretation settings](https://support.zoom.us/hc/en-us/articles/9644962487309-Using-sign-language-interpretation-in-a-meeting-or-webinar). Make sure to add the language in the web portal in order to use it in the API. See link for details.
     *
     * **Note:** If this feature is not enabled on the host's account, this setting will **not** be applied to the webinar.
     */
    sign_language_interpretation?: {
      /**
       * Whether to enable [sign language interpretation](https://support.zoom.us/hc/en-us/articles/9644962487309-Using-sign-language-interpretation-in-a-meeting-or-webinar) for the webinar. If not provided, the default value will be based on the user's setting.
       *
       * @example true
       */
      enable?: boolean;
      /**
       * Information about the webinar's sign language interpreters.
       *
       * @maximum 20
       */
      interpreters?: {
        /**
         * The interpreter's email address.
         *
         * @format email
         * @example interpreter@example.com
         */
        email?: string;
        /**
         * The interpreter's sign language.
         *
         *  To get this value, use the `sign_language_interpretation` object's `languages` and `custom_languages` values in the [**Get user settings**](/docs/api/rest/reference/zoom-api/methods#operation/userSettings) API response.
         *
         * @example American
         */
        sign_language?: string;
      }[];
    };
    /**
     * Require panelists to authenticate to join. If not provided, the default value will be based on the user's setting.
     *
     * @example true
     */
    panelist_authentication?: boolean;
    /**
     * Only authenticated users can join Webinar.
     *
     * @example true
     */
    meeting_authentication?: boolean;
    /**
     * Add watermark that identifies the viewing participant. If not provided, the default value will be based on the user's setting.
     *
     * @example true
     */
    add_watermark?: boolean;
    /**
     * Add audio watermark that identifies the participants. If not provided, the default value will be based on the user's setting.
     *
     * @example true
     */
    add_audio_watermark?: boolean;
    /**
     * Make the webinar on demand.
     *
     * @example false
     * @default false
     */
    on_demand?: boolean;
    /**
     * Send invitation email to panelists. If `false`, do not send invitation email to panelists.
     *
     * @example true
     */
    panelists_invitation_email_notification?: boolean;
    /**
     * Start video when panelists join the webinar.
     *
     * @example true
     */
    panelists_video?: boolean;
    /**
     * Zoom will open a survey page in attendees' browsers after leaving the webinar.
     *
     * @example true
     */
    post_webinar_survey?: boolean;
    /**
     * Enable practice session.
     *
     * @example false
     * @default false
     */
    practice_session?: boolean;
    /**
     * [Q&amp;A](https://support.zoom.us/hc/en-us/articles/203686015-Using-Q-A-as-the-webinar-host#:~:text=Overview,and%20upvote%20each%20other's%20questions.) for webinar.
     */
    question_and_answer?: {
      /**
       * * `true` - Allow participants to submit questions.
       *
       * * `false` - Do not allow submit questions.
       *
       * @example true
       */
      allow_submit_questions?: boolean;
      /**
       * * `true` - Allow participants to send questions without providing their name to the host, co-host, and panelists.
       *
       * * `false` - Do not allow anonymous questions.
       *
       * @example true
       */
      allow_anonymous_questions?: boolean;
      /**
       * Indicate whether you want attendees to be able to view only answered questions, or view all questions.
       *
       * * `only` - Attendees are able to view answered questions only.
       *
       * * `all` - Attendees are able to view all questions submitted in the Q&amp;A.
       *
       * @example all
       */
      answer_questions?: "only" | "all";
      /**
       * * `true` - Attendees can answer questions or leave a comment in the question thread.
       *
       * * `false` - Attendees can not answer questions or leave a comment in the question thread
       *
       * @example true
       */
      attendees_can_comment?: boolean;
      /**
       * * `true` - Attendees can click the thumbs up button to bring popular questions to the top of the Q&amp;A window.
       *
       * * `false` - Attendees can not click the thumbs up button on questions.
       *
       * @example true
       */
      attendees_can_upvote?: boolean;
      /**
       * If simulive webinar,
       *
       * * `true` - allow auto-reply to attendees.
       *
       * * `false` - don't allow auto-reply to the attendees.
       *
       * @example true
       */
      allow_auto_reply?: boolean;
      /**
       * If `allow_auto_reply` = true, the text to be included in the automatic response.
       *
       * @example Thank you for your question. We will get back to you shortly.
       */
      auto_reply_text?: string;
      /**
       * * `true`: Enable [Q&amp;A](https://support.zoom.us/hc/en-us/articles/203686015-Using-Q-A-as-the-webinar-host#:~:text=Overview,and%20upvote%20each%20other's%20questions.) for webinar.
       *
       * * `false`: Disable Q&amp;A for webinar. If not provided, the default value will be based on the user's setting.
       *
       * @example true
       */
      enable?: boolean;
    };
    /**
     * Send confirmation email to registrants.
     *
     * @example true
     */
    registrants_confirmation_email?: boolean;
    /**
     * Send email notifications to registrants about approval, cancellation, denial of the registration. The value of this field must be set to true in order to use the `registrants_confirmation_email` field.
     *
     * @example true
     */
    registrants_email_notification?: boolean;
    /**
     * Restrict number of registrants for a webinar. By default, it is set to `0`. A `0` value means that the restriction option is disabled. Provide a number higher than 0 to restrict the webinar registrants by the that number.
     *
     * @maximum 20000
     * @minimum 0
     * @example 100
     * @default 0
     */
    registrants_restrict_number?: number;
    /**
     * Registration types. Only used for recurring webinars with a fixed time.
     *  `1` - Attendees register once and can attend any of the webinar sessions.
     *  `2` - Attendees need to register for each session in order to attend.
     *  `3` - Attendees register once and can choose one or more sessions to attend.
     *
     * @example 1
     * @default 1
     */
    registration_type?: 1 | 2 | 3;
    /**
     * Always send 1080p video to attendees.
     *
     * @example false
     * @default false
     */
    send_1080p_video_to_attendees?: boolean;
    /**
     * Show social share buttons on the registration page.
     *
     * @example true
     */
    show_share_button?: boolean;
    /**
     * Survey url for post webinar survey.
     *
     * @example https://example.com
     */
    survey_url?: string;
    /**
     * Whether the **Webinar Session Branding** setting is enabled. This setting lets hosts visually customize a webinar by setting a session background. This also lets hosts use [Webinar Session Branding](https://support.zoom.us/hc/en-us/articles/4836268732045-Using-Webinar-Session-Branding) to set the Virtual Background for and apply name tags to hosts, alternative hosts, panelists, interpreters, and speakers.
     *
     * @example true
     */
    enable_session_branding?: boolean;
    /**
     * Whether to allow host and co-hosts to fully control the mute state of participants. Not supported for simulive webinar. If not provided, the default value will be based on the user's setting.
     *
     * @example false
     */
    allow_host_control_participant_mute_state?: boolean;
    /**
     * Whether to include guest's email addresses in attendee reports for webinars.
     *
     * @example true
     */
    email_in_attendee_report?: boolean;
  };
  /**
   * Webinar start time in GMT/UTC.
   *
   * @format date-time
   * @example 2022-03-26T07:18:32Z
   */
  start_time?: string;
  /**
   * The `start_url` of a webinar is a URL using which a host or an alternative host can start the webinar. This URL should only be used by the host of the meeting and should not be shared with anyone other than the host of the webinar.
   *
   * The expiration time for the `start_url` field listed in the response of the [**Create a webinar**](/docs/api/rest/reference/zoom-api/methods#operation/webinarCreate) API is two hours for all regular users.
   *
   * For users created using the `custCreate` option via the [**Create users**](/docs/api/rest/reference/zoom-api/methods#operation/userCreate) API, the expiration time of the `start_url` field is 90 days.
   *
   * For security reasons, to retrieve the latest value for the `start_url` field programmatically after expiry, call the [**Get a webinar**](/docs/api/rest/reference/zoom-api/methods#operation/webinar) API and refer to the value of the `start_url` field in the response.
   *
   * @example https://example.com/s/11111
   */
  start_url?: string;
  /**
   * Time zone to format `start_time`.
   *
   * @example America/Los_Angeles
   */
  timezone?: string;
  /**
   * The webinar's topic.
   *
   * @maxLength 200
   * @example My Webinar
   */
  topic?: string;
  /**
   * Tracking fields.
   */
  tracking_fields?: {
    /**
     * Tracking fields type.
     *
     * @example field1
     */
    field?: string;
    /**
     * Tracking fields value.
     *
     * @example value1
     */
    value?: string;
  }[];
  /**
   * Webinar types.
   *  `5` - Webinar.
   *  `6` - Recurring webinar with no fixed time.
   *  `9` - Recurring webinar with a fixed time.
   *
   * @example 5
   * @default 5
   */
  type?: 5 | 6 | 9;
  /**
   * Whether the webinar is `simulive`.
   *
   * @example true
   */
  is_simulive?: boolean;
  /**
   * The previously recorded file's ID for `simulive`.
   *
   * @example f09340e1-cdc3-4eae-9a74-98f9777ed908
   */
  record_file_id?: string;
  /**
   * Whether to transition a simulive webinar to live. The host must be present at the time of transition.
   *
   * @example false
   */
  transition_to_live?: boolean;
  /**
   * {"enable":false,"time":0,"timeunit":"second"}
   */
  simulive_delay_start?: {
    /**
     * Whether simulive need delay playback.
     *
     * @example true
     */
    enable?: boolean;
    /**
     * The time for delayed playback.
     *
     * @example 10
     */
    time?: number;
    /**
     * The time unit for delayed playback.
     *
     * @example second or minute
     */
    timeunit?: string;
  };
  /**
   * The platform through which the meeting was created.
   * * `other` - Created through another platform.
   * * `open_api` - Created through Open API.
   * * `web_portal` - Created through the web portal.
   *
   * @example open_api
   */
  creation_source?: "other" | "open_api" | "web_portal";
};

export type WebinarCreateRequestBody = {
  /**
   * Webinar description.
   *
   * @example My Webinar
   */
  agenda?: string;
  /**
   * Webinar duration, in minutes. Used for scheduled webinars only.
   *
   * @example 60
   */
  duration?: number;
  /**
   * The webinar passcode. By default, it can be up to 10 characters in length and may contain alphanumeric characters as well as special characters like !, @, #, and others.
   *
   * **Note**
   * - If the account owner or administrator has configured [Passcode Requirement](https://support.zoom.com/hc/en/article?id=zm_kb&sysparm_article=KB0063160#h_a427384b-e383-4f80-864d-794bf0a37604), the passcode **must** meet those requirements. You can retrieve the requirements using the [**Get user settings**](/docs/api/users/#tag/users/GET/users/{userId}/settings) API or the [**Get account settings**](/docs/api/accounts/#tag/accounts/GET/accounts/{accountId}/settings) API.
   * - If the **Passcode** user setting is enabled and `default_passcode` is not explicitly set to `false`, a passcode will be automatically generated when one is not provided.
   * - If the **Passcode** setting is enabled and [locked](https://support.zoom.us/hc/en-us/articles/115005269866-Using-Tiered-Settings#locked) for the user, a passcode will be automatically generated when one is not provided.
   *
   * @maxLength 10
   * @example 123456
   */
  password?: string;
  /**
   * Determines whether to automatically generate a passcode for the webinar when no passcode is provided and the user's **Passcode** setting is enabled. Defaults to `true`. When set to `false`, webinars will only have a passcode if one is explicitly provided.
   *
   * @example true
   * @default true
   */
  default_passcode?: boolean;
  /**
   * Recurrence object. Use this object only for a webinar of type `9`, a recurring webinar with fixed time.
   */
  recurrence?: {
    /**
     * Select a date when the webinar will recur before it is canceled. Should be in UTC time, such as `2017-11-25T12:00:00Z`. Cannot be used with `end_times`.
     *
     * @format date-time
     * @example 2022-04-02T15:59:00Z
     */
    end_date_time?: string;
    /**
     * Select how many times the webinar will recur before it is canceled. The maximum number of recurring is 60. Cannot be used with `end_date_time`.
     *
     * @maximum 60
     * @example 7
     * @default 1
     */
    end_times?: number;
    /**
     * Use this field **only if you're scheduling a recurring webinar of type `3`** to state which day in a month the webinar should recur. The value range is from 1 to 31.
     *
     * For instance, if you would like the webinar to recur on 23rd of each month, provide `23` as the value of this field and `1` as the value of the `repeat_interval` field. Instead, if you would like the webinar to recur once every three months, on 23rd of the month, change the value of the `repeat_interval` field to `3`.
     *
     * @example 1
     */
    monthly_day?: number;
    /**
     * Use this field **only if you're scheduling a recurring webinar of type `3`** to state the week of the month when the webinar should recur. If you use this field, **you must also use the `monthly_week_day` field to state the day of the week when the webinar should recur.**
     *  `-1` - Last week of the month.
     *  `1` - First week of the month.
     *  `2` - Second week of the month.
     *  `3` - Third week of the month.
     *  `4` - Fourth week of the month.
     *
     * @example 1
     */
    monthly_week?: -1 | 1 | 2 | 3 | 4;
    /**
     * Use this field **only if you're scheduling a recurring webinar of type `3`** to state a specific day in a week when the monthly webinar should recur. To use this field, you must also use the `monthly_week` field.
     *  `1` - Sunday.
     *  `2` - Monday.
     *  `3` - Tuesday.
     *  `4` -  Wednesday.
     *  `5` - Thursday.
     *  `6` - Friday.
     *  `7` - Saturday.
     *
     * @example 1
     */
    monthly_week_day?: 1 | 2 | 3 | 4 | 5 | 6 | 7;
    /**
     * Define the interval when the webinar should recur. For instance, to schedule a webinar that recurs every two months, you must set the value of this field as `2` and the value of the `type` parameter as `3`.
     *
     * For a daily webinar, the maximum interval you can set is `90` days. For a weekly webinar, the maximum interval that you can set is `12` weeks. For a monthly webinar, the maximum interval that you can set is `3` months.
     *
     * @example 1
     */
    repeat_interval?: number;
    /**
     * Recurrence webinar types.
     *  `1` - Daily.
     *  `2` - Weekly.
     *  `3` - Monthly.
     *
     * @example 1
     */
    type: 1 | 2 | 3;
    /**
     * Use this field **only if you're scheduling a recurring webinar of type** `2` to state which day(s) of the week the webinar should repeat.
     * The value for this field could be a number between `1` to `7` in string format. For instance, if the webinar should recur on Sunday, provide `1` as the value of this field.
     *
     *   **Note:** If you would like the webinar to occur on multiple days of a week, you should provide comma separated values for this field. For instance, if the webinar should recur on Sundays and Tuesdays, provide `1,3` as the value of this field.
     *
     *
     *  `1`  - Sunday.
     *  `2` - Monday.
     *  `3` - Tuesday.
     *  `4` -  Wednesday.
     *  `5` -  Thursday.
     *  `6` - Friday.
     *  `7` - Saturday.
     *
     * @example 1
     */
    weekly_days?: string;
  };
  /**
   * The email address or user ID of the user to schedule a webinar for.
   *
   * @example jchill@example.com
   */
  schedule_for?: string;
  /**
   * Create webinar settings.
   */
  settings?: {
    /**
     * Allow attendees to join from multiple devices.
     *
     * @example true
     */
    allow_multiple_devices?: boolean;
    /**
     * Alternative host emails or IDs. Multiple values separated by comma.
     *
     * @example jchill@example.com;thill@example.com
     */
    alternative_hosts?: string;
    /**
     * Whether the **Allow alternative hosts to add or edit polls** feature is enabled. This requires Zoom version 5.8.0 or higher.
     *
     * @example true
     */
    alternative_host_update_polls?: boolean;
    /**
     * The default value is `2`. To enable registration required, set the approval type to `0` or `1`.  Values include:
     *
     *
     * `0` - Automatically approve.
     *  `1` - Manually approve.
     *  `2` - No registration required.
     *
     * @example 0
     * @default 2
     */
    approval_type?: 0 | 1 | 2;
    /**
     * Send reminder email to attendees and panelists.
     */
    attendees_and_panelists_reminder_email_notification?: {
      /**
       * * `true` -  Send reminder email to attendees and panelists.
       *
       * * `false` - Do not send reminder email to attendees and panelists.
       *
       * @example true
       */
      enable?: boolean;
      /**
       * `0` - No plan.
       *  `1` - Send 1 hour before webinar.
       *  `2` - Send 1 day before webinar.
       *  `3` - Send 1 hour and 1 day before webinar.
       *  `4` - Send 1 week before webinar.
       *  `5` - Send 1 hour and 1 week before webinar.
       *  `6` - Send 1 day and 1 week before webinar.
       *  `7` - Send 1 hour, 1 day and 1 week before webinar.
       *
       * @example 0
       */
      type?: 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7;
    };
    /**
     * Determine how participants can join the audio portion of the meeting.(Not supported for simulive webinar.)
     *
     * @example telephony
     * @default both
     */
    audio?: "both" | "telephony" | "voip" | "thirdParty";
    /**
     * Third party audio conference information.
     *
     * @maxLength 2048
     * @example test
     */
    audio_conference_info?: string;
    /**
     * Meeting authentication domains. This option allows you to specify the rule so that Zoom users whose email address contains a certain domain can join the webinar. You can either provide multiple comma-separated domains, use a wildcard for listing domains, or use both methods.
     *
     * @example example.com
     */
    authentication_domains?: string;
    /**
     * Specify the authentication type for users to join a webinar with `meeting_authentication` setting set to `true`. The value of this field can be retrieved from the `id` field within `authentication_options` array in the response of [**Get user settings**](/docs/api/rest/reference/zoom-api/methods#operation/userSettings) API.
     *
     * @example signIn_D8cJuqWVQ623CI4Q8yQK0Q
     */
    authentication_option?: string;
    /**
     * Automatic recording. Not supported for simulive webinar.
     *  `local` - Record on local.
     *  `cloud` -  Record on cloud.
     *  `none` - Disabled.
     *
     * @example cloud
     * @default none
     */
    auto_recording?: "local" | "cloud" | "none";
    /**
     * Close registration after event date.
     *
     * @example true
     * @deprecated true
     */
    close_registration?: boolean;
    /**
     * Contact email for registration
     *
     * @example jchill@example.com
     */
    contact_email?: string;
    /**
     * Contact name for registration
     *
     * @example Jill Chill
     */
    contact_name?: string;
    /**
     * Set the email language.
     * `en-US`,`de-DE`,`es-ES`,`fr-FR`,`id-ID`,`jp-JP`,`nl-NL`,`pl-PL`,`pt-PT`,`ru-RU`,`tr-TR`,`zh-CN`, `zh-TW`, `ko-KO`, `it-IT`, `vi-VN`.
     *
     * @example en-US
     */
    email_language?: string;
    /**
     * Only signed-in users can join this meeting.
     *
     * **This field is deprecated and will not be supported in future.**
     *
     *   Instead of this field, use the `meeting_authentication`, `authentication_option`, or `authentication_domains` fields to establish the authentication mechanism for this Webinar.
     *
     * @example true
     * @deprecated true
     */
    enforce_login?: boolean;
    /**
     * Only signed-in users with specified domains can join meetings.
     *
     * **This field is deprecated and will not be supported in future.**
     *
     *   Instead of this field, use the `authentication_domains` field for this webinar.
     *
     * @example example.com
     * @deprecated true
     */
    enforce_login_domains?: string;
    /**
     * Send follow-up email to absentees.
     */
    follow_up_absentees_email_notification?: {
      /**
       * * `true` - Send follow-up email to absentees.
       *
       * * `false` - Do not send follow-up email to absentees.
       *
       * @example true
       */
      enable?: boolean;
      /**
       * `0` - No plan.
       *  `1` - Send 1 days after the scheduled end date.
       *  `2` - Send 2 days after the scheduled end date.
       *  `3` - Send 3 days after the scheduled end date.
       *  `4` - Send 4 days after the scheduled end date.
       *  `5` - Send 5 days after the scheduled end date.
       *  `6` - Send 6 days after the scheduled end date.
       *  `7` - Send 7 days after the scheduled end date.
       *
       * @example 0
       */
      type?: 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7;
    };
    /**
     * Send follow-up email to attendees.
     */
    follow_up_attendees_email_notification?: {
      /**
       * * `true`: Send follow-up email to attendees.
       *
       * * `false`: Do not send follow-up email to attendees.
       *
       * @example true
       */
      enable?: boolean;
      /**
       * `0` - No plan.
       *  `1` - Send 1 day after the scheduled end date.
       *  `2` - Send 2 days after the scheduled end date.
       *  `3` - Send 3 days after the scheduled end date.
       *  `4` - Send 4 days after the scheduled end date.
       *  `5` - Send 5 days after the scheduled end date.
       *  `6` - Send 6 days after the scheduled end date.
       *  `7` - Send 7 days after the scheduled end date.
       *
       * @example 0
       */
      type?: 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7;
    };
    /**
     * List of global dial-in countries
     */
    global_dial_in_countries?: string[];
    /**
     * Default to HD video. Not supported for simulive webinar.
     *
     * @example false
     * @default false
     */
    hd_video?: boolean;
    /**
     * Whether HD video for attendees is enabled. This value defaults to `false`. Not supported for simulive webinar.
     *
     * @example false
     * @default false
     */
    hd_video_for_attendees?: boolean;
    /**
     * Start video when host joins webinar. Not supported for simulive webinar.
     *
     * @example true
     */
    host_video?: boolean;
    /**
     * The webinar's [language interpretation settings](https://support.zoom.com/hc/en/article?id=zm_kb&sysparm_article=KB0064768). Make sure to add the language in the web portal in order to use it in the API. See link for details.
     *
     * **Note:** This feature is only available for certain Webinar add-on, Education, and Business and higher plans. If this feature is not enabled on the host's account, this setting will **not** be applied to the webinar. This is not supported for simulive webinars.
     */
    language_interpretation?: {
      /**
       * Whether to enable [language interpretation](https://support.zoom.com/hc/en/article?id=zm_kb&sysparm_article=KB0064768) for the webinar. If not provided, the default value will be based on the user's setting.
       *
       * @example true
       */
      enable?: boolean;
      /**
       * Information about the webinar's language interpreters.
       */
      interpreters?: {
        /**
         * The interpreter's email address.
         *
         * @format email
         * @example interpreter@example.com
         */
        email?: string;
        /**
         * A comma-separated list of the interpreter's languages. The string must contain exactly two country IDs.
         *
         * Only system-supported languages are allowed: `US` (English), `CN` (Chinese), `JP` (Japanese), `DE` (German), `FR` (French), `RU` (Russian), `PT` (Portuguese), `ES` (Spanish), and `KR` (Korean).
         *
         * For example, to set an interpreter translating from English to Chinese, use `US,CN`.
         *
         * @example US,FR
         * @deprecated true
         */
        languages?: string;
        /**
         * A comma-separated list of the interpreter's languages. The string must contain exactly two languages.
         *
         * To get this value, use the `language_interpretation` object's `languages` and `custom_languages` values in the [**Get user settings**](/docs/api/users/#tag/users/GET/users/{userId}/settings) API response.
         *
         * **languages**: System-supported languages include `English`, `Chinese`, `Japanese`, `German`, `French`, `Russian`, `Portuguese`, `Spanish`, and `Korean`.
         *
         * **custom_languages**: User-defined languages added by the user.
         *
         * For example, an interpreter translating between English and French should use `English,French`.
         *
         * @example English,French
         */
        interpreter_languages?: string;
      }[];
    };
    /**
     * The webinar's [sign language interpretation settings](https://support.zoom.us/hc/en-us/articles/9644962487309-Using-sign-language-interpretation-in-a-meeting-or-webinar). Make sure to add the language in the web portal in order to use it in the API. See link for details.
     *
     * **Note:** If this feature is not enabled on the host's account, this setting will **not** be applied to the webinar.
     */
    sign_language_interpretation?: {
      /**
       * Whether to enable [sign language interpretation](https://support.zoom.us/hc/en-us/articles/9644962487309-Using-sign-language-interpretation-in-a-meeting-or-webinar) for the webinar. If not provided, the default value will be based on the user's setting.
       *
       * @example true
       */
      enable?: boolean;
      /**
       * Information about the webinar's sign language interpreters.
       *
       * @maximum 20
       */
      interpreters?: {
        /**
         * The interpreter's email address.
         *
         * @format email
         * @example interpreter@example.com
         */
        email?: string;
        /**
         * The interpreter's sign language.
         *
         *  To get this value, use the `sign_language_interpretation` object's `languages` and `custom_languages` values in the [**Get user settings**](/docs/api/rest/reference/zoom-api/methods#operation/userSettings) API response.
         *
         * @example American
         */
        sign_language?: string;
      }[];
    };
    /**
     * Require panelists to authenticate to join. If not provided, the default value will be based on the user's setting.
     *
     * @example true
     */
    panelist_authentication?: boolean;
    /**
     * Only [authenticated](https://support.zoom.us/hc/en-us/articles/360037117472-Authentication-Profiles-for-Meetings-and-Webinars) users can join meeting if the value of this field is set to `true`.
     *
     * @example true
     */
    meeting_authentication?: boolean;
    /**
     * Add watermark that identifies the viewing participant. Not supported for simulive webinar. If not provided, the default value will be based on the user's setting.
     *
     * @example true
     */
    add_watermark?: boolean;
    /**
     * Add audio watermark that identifies the participants. Not supported for simulive webinar. If not provided, the default value will be based on the user's setting.
     *
     * @example true
     */
    add_audio_watermark?: boolean;
    /**
     * Make the webinar on-demand. Not supported for simulive webinar.
     *
     * @example false
     * @default false
     */
    on_demand?: boolean;
    /**
     * Send invitation email to panelists. If `false`, do not send invitation email to panelists.
     *
     * @example true
     */
    panelists_invitation_email_notification?: boolean;
    /**
     * Start video when panelists join webinar. Not supported for simulive webinar.
     *
     * @example true
     */
    panelists_video?: boolean;
    /**
     * Zoom will open a survey page in attendees' browsers after leaving the webinar
     *
     * @example true
     */
    post_webinar_survey?: boolean;
    /**
     * Enable practice session.
     *
     * @example false
     * @default false
     */
    practice_session?: boolean;
    /**
     * [Q&amp;A](https://support.zoom.us/hc/en-us/articles/203686015-Using-Q-A-as-the-webinar-host#:~:text=Overview,and%20upvote%20each%20other's%20questions.) for webinar.
     */
    question_and_answer?: {
      /**
       * * `true` - Allow participants to submit questions.
       *
       * * `false` - Do not allow submit questions.
       *
       * @example true
       */
      allow_submit_questions?: boolean;
      /**
       * * `true` - Allow participants to send questions without providing their name to the host, co-host, and panelists..
       *
       * * `false` - Do not allow anonymous questions.(Not supported for simulive webinar.)
       *
       * @example true
       */
      allow_anonymous_questions?: boolean;
      /**
       * Indicate whether you want attendees to be able to view answered questions only or view all questions.
       *
       * * `only` - Attendees are able to view answered questions only.
       *
       * *  `all` - Attendees are able to view all questions submitted in the Q&amp;A.
       *
       * @example all
       */
      answer_questions?: "only" | "all";
      /**
       * * `true` - Attendees can answer questions or leave a comment in the question thread.
       *
       * * `false` - Attendees can not answer questions or leave a comment in the question thread
       *
       * @example true
       */
      attendees_can_comment?: boolean;
      /**
       * * `true` - Attendees can click the thumbs up button to bring popular questions to the top of the Q&amp;A window.
       *
       * * `false` - Attendees can not click the thumbs up button on questions.
       *
       * @example true
       */
      attendees_can_upvote?: boolean;
      /**
       * If simulive webinar,
       *
       * * `true` - allow auto-reply to attendees.
       *
       * * `false` - don't allow auto-reply to the attendees.
       *
       * @example true
       */
      allow_auto_reply?: boolean;
      /**
       * If `allow_auto_reply` = true, the text to be included in the automatic response.
       *
       * @example Thank you for your question. We will get back to you shortly.
       */
      auto_reply_text?: string;
      /**
       * * `true` - Enable [Q&amp;A](https://support.zoom.us/hc/en-us/articles/203686015-Using-Q-A-as-the-webinar-host#:~:text=Overview,and%20upvote%20each%20other's%20questions.) for webinar.
       *
       * * `false` - Disable Q&amp;A for webinar. If not provided, the default value will be based on the user's setting.
       *
       * @example true
       */
      enable?: boolean;
    };
    /**
     * Send email notifications to registrants about approval, cancellation, denial of the registration. The value of this field must be set to true in order to use the `registrants_confirmation_email` field.
     *
     * @example true
     */
    registrants_email_notification?: boolean;
    /**
     * Restrict number of registrants for a webinar. By default, it is set to `0`. A `0` value means that the restriction option is disabled. Provide a number higher than 0 to restrict the webinar registrants by the that number.
     *
     * @maximum 20000
     * @minimum 0
     * @example 100
     * @default 0
     */
    registrants_restrict_number?: number;
    /**
     * Registration types. Only used for recurring webinars with a fixed time.
     *  `1` - Attendees register once and can attend any of the webinar sessions.
     *  `2` - Attendees need to register for each session in order to attend.
     *  `3` - Attendees register once and can choose one or more sessions to attend.
     *
     * @example 1
     * @default 1
     */
    registration_type?: 1 | 2 | 3;
    /**
     * Whether to always send 1080p video to attendees. This value defaults to `false`.(Not supported for simulive webinar.)
     *
     * @example false
     * @default false
     */
    send_1080p_video_to_attendees?: boolean;
    /**
     * Show social share buttons on the registration page.
     *
     * @example true
     */
    show_share_button?: boolean;
    /**
     * Survey URL for post webinar survey.
     *
     * @example https://example.com
     */
    survey_url?: string;
    /**
     * Whether the **Webinar Session Branding** setting is enabled. This setting lets hosts visually customize a webinar by setting a session background. This also lets hosts set Virtual Background and apply name tags to hosts, alternative hosts, panelists, interpreters, and speakers.
     *
     * @example true
     */
    enable_session_branding?: boolean;
    /**
     * Whether to allow the host and cohosts to fully control the mute state of participants. Not supported for simulive webinar. If not provided, the default value will be based on the user's setting.
     *
     * @example false
     */
    allow_host_control_participant_mute_state?: boolean;
    /**
     * Whether to include guest's email addresses in webinars' attendee reports.
     *
     * @example true
     */
    email_in_attendee_report?: boolean;
  };
  /**
   * Webinar start time. We support two formats for `start_time` - local time and GMT.
   *
   *
   * To set time as GMT the format should be `yyyy-MM-dd`T`HH:mm:ssZ`.
   *
   * To set time using a specific timezone, use `yyyy-MM-dd`T`HH:mm:ss` format and specify the timezone [ID](/docs/api/references/abbreviations/#timezones) in the `timezone` field OR leave it blank and the timezone set on your Zoom account will be used. You can also set the time as UTC as the timezone field.
   *
   * The `start_time` should only be used for scheduled and / or recurring webinars with fixed time.
   *
   * @format date-time
   * @example 2022-03-26T06:44:14Z
   */
  start_time?: string;
  /**
   * The webinar template ID to schedule a webinar using a [webinar template](https://support.zoom.us/hc/en-us/articles/115001079746-Webinar-Templates) or a [admin webinar template](https://support.zoom.us/hc/en-us/articles/8137753618957-Configuring-admin-webinar-templates). For a list of webinar templates, use the [**List webinar templates**](/docs/api/rest/reference/zoom-api/methods#operation/listWebinarTemplates) API.
   *
   * @example 5Cj3ceXoStO6TGOVvIOVPA==
   */
  template_id?: string;
  /**
   * The timezone to assign to the `start_time` value. This field is only used for scheduled or recurring webinars with a fixed time.
   *
   * For a list of supported timezones and their formats, see our [timezone list](/docs/api/references/abbreviations/#timezones).
   *
   * @example America/Los_Angeles
   */
  timezone?: string;
  /**
   * The webinar's topic.
   *
   * @example My Webinar
   */
  topic?: string;
  /**
   * Tracking fields.
   */
  tracking_fields?: {
    /**
     * Tracking fields type.
     *
     * @example field1
     */
    field: string;
    /**
     * Tracking fields value.
     *
     * @example value1
     */
    value?: string;
  }[];
  /**
   * Webinar types.
   *  `5` - Webinar.
   *  `6` - Recurring webinar with no fixed time.
   *  `9` - Recurring webinar with a fixed time.
   *
   * @example 5
   * @default 5
   */
  type?: 5 | 6 | 9;
  /**
   * Whether to set the webinar to simulive.
   *
   * @example true
   */
  is_simulive?: boolean;
  /**
   * The previously recorded file's ID for `simulive`.
   *
   * @example f09340e1-cdc3-4eae-9a74-98f9777ed908
   */
  record_file_id?: string;
  /**
   * Whether to transition a simulive webinar to live. The host must be present at the time of transition.
   *
   * @example false
   */
  transition_to_live?: boolean;
  /**
   * {"enable":false,"time":0,"timeunit":"second"}
   */
  simulive_delay_start?: {
    /**
     * Whether simulive need delay playback.
     *
     * @example true
     */
    enable?: boolean;
    /**
     * The time for delayed playback
     * If the time unit is seconds, then the maximum value is 60 and the minimum value is 1.
     * If the time unit is minutes, then the maximum value is 10 and the minimum value is 1.
     *
     * @example 10
     */
    time?: number;
    /**
     * The time unit for delayed playback
     * `second` - The time unit for delayed playback is seconds.
     * `minute` - The time unit for delayed playback is minutes.
     *
     * @example second
     * @default second
     */
    timeunit?: "second" | "minute";
  };
};

export type WebinarCreateVariables = {
  body?: WebinarCreateRequestBody;
  pathParams: WebinarCreatePathParams;
} & FetcherExtraProps;

/**
 * Schedule a webinar for a user who is a webinar host. For user-level apps, pass [the `me` value](/docs/api/using-zoom-apis/#the-me-keyword) instead of the `userId` parameter.
 *
 *  Webinars allow a host to broadcast a Zoom meeting to up to 10,000 attendees.
 *
 * **Rate limit**
 * Up to a maximum of **100 requests per day**. The rate limit is applied to the `userId` of the **webinar host** used to make the request.
 *
 * **Prerequisites**
 * * A Pro or higher plan with a [Webinar plan](https://zoom.us/webinar) add-on.
 *
 * **[Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `webinar:write`,`webinar:write:admin`
 *
 * **[Granular Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `webinar:write:webinar`,`webinar:write:webinar:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
 */
export const webinarCreate = (
  variables: WebinarCreateVariables,
  signal?: AbortSignal,
) =>
  fetch<
    WebinarCreateResponse,
    WebinarCreateError,
    WebinarCreateRequestBody,
    {},
    {},
    WebinarCreatePathParams
  >({ url: "/users/{userId}/webinars", method: "post", ...variables, signal });

export type WebinarPathParams = {
  /**
   * The webinar's ID or universally unique ID (UUID).
   *
   * @example 95204914252
   */
  webinarId: string;
};

export type WebinarQueryParams = {
  /**
   * Unique identifier for an occurrence of a recurring webinar. [Recurring webinars](https://support.zoom.us/hc/en-us/articles/216354763-How-to-Schedule-A-Recurring-Webinar) can have a maximum of 50 occurrences. When you create a recurring Webinar using [**Create a webinar**](/docs/api-reference/zoom-api/methods#operation/webinarCreate) API, you can retrieve the Occurrence ID from the response of the API call.
   *
   * @example 1648538280000
   */
  occurrence_id?: string;
  /**
   * Set the value of this field to `true` to view webinar details of all previous occurrences of a recurring webinar.
   *
   * @example true
   */
  show_previous_occurrences?: boolean;
};

export type WebinarError = Fetcher.ErrorWrapper<undefined>;

export type WebinarResponse = {
  /**
   * The meeting host's email address.
   *
   * @format email
   * @example jchill@example.com
   */
  host_email?: string;
  /**
   * ID of the user set as host of webinar.
   *
   * @example 30R7kT7bTIKSNUFEuH_Qlg
   */
  host_id?: string;
  /**
   * The webinar ID in **long** format, represented as int64 data type in JSON, also known as the webinar number.
   *
   * @format int64
   * @example 97871060099
   */
  id?: number;
  /**
   * Unique webinar ID. Each webinar instance generates its own webinar UUID. After a webinar ends, a new UUID is generated for the next instance of the webinar. Retrieve a list of UUIDs from past webinar instances using the [**List past webinar instances**](/docs/api-reference/zoom-api/methods#operation/pastWebinars) API. [Double encode](/docs/api/using-zoom-apis/#meeting-id-and-uuid) your UUID when using it for API calls if the UUID begins with a `/` or contains `//` in it.
   *
   * @example m3WqMkvuRXyYqH+eKWhk9w==
   */
  uuid?: string;
  /**
   * Webinar agenda.
   *
   * @example My webinar
   */
  agenda?: string;
  /**
   * Create time.
   *
   * @format date-time
   * @example 2022-03-26T07:18:32Z
   */
  created_at?: string;
  /**
   * Webinar duration.
   *
   * @example 60
   */
  duration?: number;
  /**
   * URL to join the webinar. Only share this URL with the users who should be invited to the webinar.
   *
   * @example https://example.com/j/11111
   */
  join_url?: string;
  /**
   * Array of occurrence objects.
   */
  occurrences?: {
    /**
     * Duration.
     *
     * @example 60
     */
    duration?: number;
    /**
     * The occurrence ID, a unique identifier that identifies an occurrence of a recurring webinar. [Recurring webinars](https://support.zoom.us/hc/en-us/articles/216354763-How-to-Schedule-A-Recurring-Webinar) can have a maximum of 50 occurrences.
     *
     * @example 1648194360000
     */
    occurrence_id?: string;
    /**
     * Start time.
     *
     * @format date-time
     * @example 2022-03-25T07:46:00Z
     */
    start_time?: string;
    /**
     * Occurrence status.
     *  `available` - Available occurrence.
     *  `deleted` -  Deleted occurrence.
     *
     * @example available
     */
    status?: "available" | "deleted";
  }[];
  /**
   * Webinar passcode. Passcode may only contain the characters [a-z A-Z 0-9 @ - _ * !]. Maximum of 10 characters.
   *
   * If **Webinar Passcode** setting has been **enabled** **and** [locked](https://support.zoom.us/hc/en-us/articles/115005269866-Using-Tiered-Settings#locked) for the user, the passcode field will be autogenerated for the Webinar in the response even if it is not provided in the API request.
   *
   *  **Note:** If the account owner or the admin has configured [minimum passcode requirement settings](https://support.zoom.us/hc/en-us/articles/360033559832-Meeting-and-webinar-passwords#h_a427384b-e383-4f80-864d-794bf0a37604), the passcode value provided here must meet those requirements.
   *
   *  If the requirements are enabled, you can view those requirements by calling the [**Get account settings**](/docs/api/rest/reference/account/methods/#operation/accountSettings) API.
   *
   * @maxLength 10
   * @example 123456
   */
  password?: string;
  /**
   * Encrypted passcode for third party endpoints (H323/SIP).
   *
   * @example 8pEkRweVXPV3Ob2KJYgFTRlDtl1gSn.1
   */
  encrypted_passcode?: string;
  /**
   * H.323/SIP room system passcode.
   *
   * @example 123456
   */
  h323_passcode?: string;
  /**
   * Recurrence object. Use this object only for a webinar of type `9` - a recurring webinar with fixed time.
   */
  recurrence?: {
    /**
     * Select a date when the webinar will recur before it is canceled. Should be in UTC time, such as 2017-11-25T12:00:00Z. Cannot be used with `end_times`.
     *
     * @format date-time
     * @example 2022-04-02T15:59:00Z
     */
    end_date_time?: string;
    /**
     * Select how many times the webinar will recur before it is canceled. The maximum number of recurring is 60. Cannot be used with `end_date_time`.
     *
     * @maximum 60
     * @example 7
     * @default 1
     */
    end_times?: number;
    /**
     * Use this field **only if you're scheduling a recurring webinar of type** `3` to state which day in a month, the webinar should recur. The value range is from 1 to 31.
     *
     * For instance, if you would like the webinar to recur on 23rd of each month, provide `23` as the value of this field and `1` as the value of the `repeat_interval` field. Instead, if you would like the webinar to recur once every three months, on 23rd of the month, change the value of the `repeat_interval` field to `3`.
     *
     * @example 1
     */
    monthly_day?: number;
    /**
     * Use this field **only if you're scheduling a recurring webinar of type** `3` to state the week of the month when the webinar should recur. If you use this field, **you must also use the `monthly_week_day` field to state the day of the week when the webinar should recur.**
     *  `-1` - Last week of the month.
     *  `1` - First week of the month.
     *  `2` - Second week of the month.
     *  `3` - Third week of the month.
     *  `4` - Fourth week of the month.
     *
     * @example 1
     */
    monthly_week?: -1 | 1 | 2 | 3 | 4;
    /**
     * Use this field **only if you're scheduling a recurring webinar of type** `3` to state a specific day in a week when the monthly webinar should recur. To use this field, you must also use the `monthly_week` field.
     *  `1` - Sunday.
     *  `2` - Monday.
     *  `3` - Tuesday.
     *  `4` -  Wednesday.
     *  `5` - Thursday.
     *  `6` - Friday.
     *  `7` - Saturday.
     *
     * @example 1
     */
    monthly_week_day?: 1 | 2 | 3 | 4 | 5 | 6 | 7;
    /**
     * Define the interval when the webinar should recur. For instance, to schedule a webinar that recurs every two months, you must set the value of this field as `2` and the value of the `type` parameter as `3`.
     *
     * For a daily webinar, the maximum interval you can set is `90` days. For a weekly webinar, the maximum interval that you can set is `12` weeks. For a monthly webinar, the maximum interval that you can set is `3` months.
     *
     * @example 1
     */
    repeat_interval?: number;
    /**
     * Recurrence webinar types.
     *  `1` - Daily.
     *  `2` - Weekly.
     *  `3` - Monthly.
     *
     * @example 1
     */
    type: 1 | 2 | 3;
    /**
     * Use this field **only if you're scheduling a recurring webinar of type** `2` to state which days of the week the webinar should repeat.
     *   The value for this field could be a number between `1` to `7` in string format. For instance, if the Webinar should recur on Sunday, provide `1` as the value of this field.
     *
     *   **Note:** If you would like the webinar to occur on multiple days of a week, you should provide comma separated values for this field. For instance, if the Webinar should recur on Sundays and Tuesdays provide `1,3` as the value of this field.
     *
     *
     *  `1`  - Sunday.
     *  `2` - Monday.
     *  `3` - Tuesday.
     *  `4` -  Wednesday.
     *  `5` -  Thursday.
     *  `6` - Friday.
     *  `7` - Saturday.
     *
     * @example 1
     */
    weekly_days?: string;
  };
  /**
   * Webinar settings.
   */
  settings?: {
    /**
     * Allow attendees to join from multiple devices.
     *
     * @example true
     */
    allow_multiple_devices?: boolean;
    /**
     * Alternative host emails or IDs. Multiple values separated by comma.
     *
     * @example jchill@example.com
     */
    alternative_hosts?: string;
    /**
     * Whether the **Allow alternative hosts to add or edit polls** feature is enabled. This requires Zoom version 5.8.0 or higher.
     *
     * @example true
     */
    alternative_host_update_polls?: boolean;
    /**
     * `0` - Automatically approve.
     *  `1` - Manually approve.
     *  `2` - No registration required.
     *
     * @example 0
     * @default 2
     */
    approval_type?: 0 | 1 | 2;
    /**
     * Send reminder email to attendees and panelists.
     */
    attendees_and_panelists_reminder_email_notification?: {
      /**
       * * `true` - Send reminder email to attendees and panelists.
       *
       * * `false` - Do not send reminder email to attendees and panelists.
       *
       * @example true
       */
      enable?: boolean;
      /**
       * `0` - No plan.
       *  `1` - Send 1 hour before webinar.
       *  `2` - Send 1 day before webinar.
       *  `3` - Send 1 hour and 1 day before webinar.
       *  `4` - Send 1 week before webinar.
       *  `5` - Send 1 hour and 1 week before webinar.
       *  `6` - Send 1 day and 1 week before webinar.
       *  `7` - Send 1 hour, 1 day and 1 week before webinar.
       *
       * @example 0
       */
      type?: 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7;
    };
    /**
     * Determine how participants can join the audio portion of the webinar.
     *
     * @example telephony
     * @default both
     */
    audio?: "both" | "telephony" | "voip" | "thirdParty";
    /**
     * Third party audio conference info.
     *
     * @maxLength 2048
     * @example test
     */
    audio_conference_info?: string;
    /**
     * If user has configured [**Sign Into Zoom with Specified Domains**](https://support.zoom.us/hc/en-us/articles/360037117472-Authentication-Profiles-for-Meetings-and-Webinars#h_5c0df2e1-cfd2-469f-bb4a-c77d7c0cca6f) option, this will list the domains that are authenticated.
     *
     * @example example.com
     */
    authentication_domains?: string;
    /**
     * Authentication name set in the [authentication profile](https://support.zoom.us/hc/en-us/articles/360037117472-Authentication-Profiles-for-Meetings-and-Webinars#h_5c0df2e1-cfd2-469f-bb4a-c77d7c0cca6f).
     *
     * @example Sign in to Zoom
     */
    authentication_name?: string;
    /**
     * Webinar authentication option ID.
     *
     * @example signIn_D8cJuqWVQ623CI4Q8yQK0Q
     */
    authentication_option?: string;
    /**
     * Automatic recording.
     *  `local` - Record on local.
     *  `cloud` -  Record on cloud.
     *  `none` - Disabled.
     *
     * @example cloud
     * @default none
     */
    auto_recording?: "local" | "cloud" | "none";
    /**
     * Close registration after event date.
     *
     * @example true
     * @deprecated true
     */
    close_registration?: boolean;
    /**
     * Contact email for registration.
     *
     * @example jchill@example.com
     */
    contact_email?: string;
    /**
     * Contact name for registration.
     *
     * @example Jill Chill
     */
    contact_name?: string;
    /**
     * Set the email language.
     * `en-US`, `de-DE`, `es-ES`, `fr-FR`, `jp-JP`, `pt-PT`, `ru-RU`,`zh-CN`, `zh-TW`, `ko-KO`, `it-IT`, or `vi-VN`.
     *
     * @example en-US
     */
    email_language?: string;
    /**
     * Only signed in users can join this meeting.
     *
     * **This field is deprecated and will not be supported in the future.**
     *
     *  As an alternative, use the `meeting_authentication`, `authentication_option` and `authentication_domains` fields to understand the [authentication configurations](https://support.zoom.us/hc/en-us/articles/360037117472-Authentication-Profiles-for-Meetings-and-Webinars) set for the webinar.
     *
     * @example true
     * @deprecated true
     */
    enforce_login?: boolean;
    /**
     * Only signed in users with specified domains can join meetings.
     *
     * **This field is deprecated and will not be supported in the future.**
     *
     *  As an alternative, use the `meeting_authentication`, `authentication_option`, and `authentication_domains` fields to understand the [authentication configurations](https://support.zoom.us/hc/en-us/articles/360037117472-Authentication-Profiles-for-Meetings-and-Webinars) set for the webinar.
     *
     * @example example.com
     * @deprecated true
     */
    enforce_login_domains?: string;
    /**
     * Send follow-up email to absentees.
     */
    follow_up_absentees_email_notification?: {
      /**
       * * `true` - Send follow-up email to absentees.
       *
       * * `false` - Do not send follow-up email to absentees.
       *
       * @example true
       */
      enable?: boolean;
      /**
       * `0` - No plan.
       *  `1` - Send 1 days after the scheduled end date.
       *  `2` - Send 2 days after the scheduled end date.
       *  `3` - Send 3 days after the scheduled end date.
       *  `4` - Send 4 days after the scheduled end date.
       *  `5` - Send 5 days after the scheduled end date.
       *  `6` - Send 6 days after the scheduled end date.
       *  `7` - Send 7 days after the scheduled end date.
       *
       * @example 0
       */
      type?: 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7;
    };
    /**
     * Send follow-up email to attendees.
     */
    follow_up_attendees_email_notification?: {
      /**
       * * `true` - Send follow-up email to attendees.
       *
       * * `false` - Do not send follow-up email to attendees.
       *
       * @example true
       */
      enable?: boolean;
      /**
       * `0` - No plan.
       *  `1` - Send 1 day after the scheduled end date.
       *  `2` - Send 2 days after the scheduled end date.
       *  `3` - Send 3 days after the scheduled end date.
       *  `4` - Send 4 days after the scheduled end date.
       *  `5` - Send 5 days after the scheduled end date.
       *  `6` - Send 6 days after the scheduled end date.
       *  `7` - Send 7 days after the scheduled end date.
       *
       * @example 0
       */
      type?: 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7;
    };
    /**
     * List of global dial-in countries.
     */
    global_dial_in_countries?: string[];
    /**
     * A list of available dial-in numbers for different countries or regions.
     */
    global_dial_in_numbers?: {
      /**
       * The number's city.
       *
       * @example New York
       */
      city?: string;
      /**
       * The country code.
       *
       * @example US
       */
      country?: string;
      /**
       * Full name of country.
       *
       * @example US
       */
      country_name?: string;
      /**
       * Dial-in phone number.
       *
       * @example +1 1000200200
       */
      number?: string;
      /**
       * Dial-in number type.
       *
       * @example toll
       */
      type?: "toll" | "tollfree" | "premium";
    }[];
    /**
     * Default to HD video.
     *
     * @example false
     * @default false
     */
    hd_video?: boolean;
    /**
     * Whether HD video for attendees is enabled.
     *
     * @example false
     * @default false
     */
    hd_video_for_attendees?: boolean;
    /**
     * Start video when the host joins the webinar.
     *
     * @example true
     */
    host_video?: boolean;
    /**
     * The webinar's [language interpretation settings](https://support.zoom.com/hc/en/article?id=zm_kb&sysparm_article=KB0064768). Make sure to add the language in the web portal in order to use it in the API. See link for details.
     *
     * **Note:** This feature is only available for certain Webinar add-on, Education, and Business and higher plans. If this feature is not enabled on the host's account, this setting will **not** be applied to the webinar. This is not supported for simulive webinars.
     */
    language_interpretation?: {
      /**
       * Whether to enable [language interpretation](https://support.zoom.com/hc/en/article?id=zm_kb&sysparm_article=KB0064768) for the webinar.
       *
       * @example true
       */
      enable?: boolean;
      /**
       * Information about the webinar's language interpreters.
       */
      interpreters?: {
        /**
         * The interpreter's email address.
         *
         * @format email
         * @example interpreter@example.com
         */
        email?: string;
        /**
         * A comma-separated list of the interpreter's languages. The string must contain exactly two country IDs.
         *
         * Only system-supported languages are allowed: `US` (English), `CN` (Chinese), `JP` (Japanese), `DE` (German), `FR` (French), `RU` (Russian), `PT` (Portuguese), `ES` (Spanish), and `KR` (Korean).
         *
         * For example, to set an interpreter translating from English to Chinese, use `US,CN`.
         *
         * @example US,FR
         * @deprecated true
         */
        languages?: string;
        /**
         * A comma-separated list of the interpreter's languages. The string must contain exactly two languages.
         *
         * To get this value, use the `language_interpretation` object's `languages` and `custom_languages` values in the [**Get user settings**](/docs/api/users/#tag/users/GET/users/{userId}/settings) API response.
         *
         * **languages**: System-supported languages include `English`, `Chinese`, `Japanese`, `German`, `French`, `Russian`, `Portuguese`, `Spanish`, and `Korean`.
         *
         * **custom_languages**: User-defined languages added by the user.
         *
         * For example, an interpreter translating between English and French should use `English,French`.
         *
         * @example English,French
         */
        interpreter_languages?: string;
      }[];
    };
    /**
     * The webinar's [sign language interpretation settings](https://support.zoom.us/hc/en-us/articles/9644962487309-Using-sign-language-interpretation-in-a-meeting-or-webinar). Make sure to add the language in the web portal in order to use it in the API. See link for details.
     *
     * **Note:** If this feature is not enabled on the host's account, this setting will **not** be applied to the webinar.
     */
    sign_language_interpretation?: {
      /**
       * Whether to enable [sign language interpretation](https://support.zoom.us/hc/en-us/articles/9644962487309-Using-sign-language-interpretation-in-a-meeting-or-webinar) for the webinar.
       *
       * @example true
       */
      enable?: boolean;
      /**
       * Information about the webinar's sign language interpreters.
       *
       * @maximum 20
       */
      interpreters?: {
        /**
         * The interpreter's email address.
         *
         * @format email
         * @example interpreter@example.com
         */
        email?: string;
        /**
         * The interpreter's sign language.
         *
         *  To get this value, use the `sign_language_interpretation` object's `languages` and `custom_languages` values in the [**Get user settings**](/api-reference/zoom-api/methods#operation/userSettings) API response.
         *
         * @example American
         */
        sign_language?: string;
      }[];
    };
    /**
     * Require panelists to authenticate to join.
     *
     * @example true
     */
    panelist_authentication?: boolean;
    /**
     * Only authenticated users can join the webinar.
     *
     * @example true
     */
    meeting_authentication?: boolean;
    /**
     * Add watermark that identifies the viewing participant.
     *
     * @example true
     */
    add_watermark?: boolean;
    /**
     * Add audio watermark that identifies the participants.
     *
     * @example true
     */
    add_audio_watermark?: boolean;
    /**
     * Make the webinar on-demand.
     *
     * @example false
     * @default false
     */
    on_demand?: boolean;
    /**
     * Send invitation email to panelists. If `false`, do not send invitation email to panelists.
     *
     * @example true
     */
    panelists_invitation_email_notification?: boolean;
    /**
     * Start video when panelists join webinar.
     *
     * @example true
     */
    panelists_video?: boolean;
    /**
     * Zoom will open a survey page in attendees' browsers after leaving the webinar.
     *
     * @example true
     */
    post_webinar_survey?: boolean;
    /**
     * Enable practice session.
     *
     * @example false
     * @default false
     */
    practice_session?: boolean;
    /**
     * [Q&amp;A](https://support.zoom.us/hc/en-us/articles/203686015-Using-Q-A-as-the-webinar-host#:~:text=Overview,and%20upvote%20each%20other's%20questions.) for webinar.
     */
    question_and_answer?: {
      /**
       * * `true` - Allow participants to submit questions.
       *
       * * `false` - Do not allow submit questions.
       *
       * @example true
       */
      allow_submit_questions?: boolean;
      /**
       * * `true` - Allow participants to send questions without providing their name to the host, co-host, and panelists.
       *
       * * `false` - Do not allow anonymous questions.
       *
       * @example true
       */
      allow_anonymous_questions?: boolean;
      /**
       * Indicate whether you want attendees to be able to view answered questions only or view all questions.
       *
       * * `only` - Attendees are able to view answered questions only.
       *
       * *  `all` - Attendees are able to view all questions submitted in the Q&amp;A.
       *
       * @example all
       */
      answer_questions?: "only" | "all";
      /**
       * * `true` - Attendees can answer questions or leave a comment in the question thread.
       *
       * * `false` - Attendees can not answer questions or leave a comment in the question thread
       *
       * @example true
       */
      attendees_can_comment?: boolean;
      /**
       * * `true` - Attendees can click the thumbs up button to bring popular questions to the top of the Q&amp;A window.
       *
       * * `false` - Attendees can not click the thumbs up button on questions.
       *
       * @example true
       */
      attendees_can_upvote?: boolean;
      /**
       * If simulive webinar,
       *
       * * `true` - allow auto-reply to attendees.
       *
       * * `false` - don't allow auto-reply to the attendees.
       *
       * @example true
       */
      allow_auto_reply?: boolean;
      /**
       * If `allow_auto_reply` = true, the text to be included in the automatic response.
       *
       * @example Thank you for your question. We will get back to you shortly.
       */
      auto_reply_text?: string;
      /**
       * * `true` - Enable [Q&amp;A](https://support.zoom.us/hc/en-us/articles/203686015-Using-Q-A-as-the-webinar-host#:~:text=Overview,and%20upvote%20each%20other's%20questions.) for webinar.
       *
       * * `false` - Disable Q&amp;A for webinar.
       *
       * @example true
       */
      enable?: boolean;
    };
    /**
     * Send confirmation email to registrants
     *
     * @example true
     */
    registrants_confirmation_email?: boolean;
    /**
     * Send email notifications to registrants about approval, cancellation, denial of the registration. The value of this field must be set to true in order to use the `registrants_confirmation_email` field.
     *
     * @example true
     */
    registrants_email_notification?: boolean;
    /**
     * Restrict number of registrants for a webinar. By default, it is set to `0`. A `0` value means that the restriction option is disabled. Provide a number higher than 0 to restrict the webinar registrants by the that number.
     *
     * @maximum 20000
     * @minimum 0
     * @example 100
     * @default 0
     */
    registrants_restrict_number?: number;
    /**
     * Registration types. Only used for recurring webinars with a fixed time.
     *  `1` - Attendees register once and can attend any of the webinar sessions.
     *  `2` - Attendees need to register for each session in order to attend.
     *  `3` - Attendees register once and can choose one or more sessions to attend.
     *
     * @example 1
     * @default 1
     */
    registration_type?: 1 | 2 | 3;
    /**
     * Always send 1080p video to attendees.
     *
     * @example false
     * @default false
     */
    send_1080p_video_to_attendees?: boolean;
    /**
     * Show social share buttons on the registration page.
     *
     * @example true
     */
    show_share_button?: boolean;
    /**
     * Survey URL for post webinar survey.
     *
     * @example https://example.com
     */
    survey_url?: string;
    /**
     * Whether the **Webinar Session Branding** setting is enabled. This setting lets hosts visually customize a webinar by setting a session background. This also lets hosts use [webinar session branding](https://support.zoom.us/hc/en-us/articles/4836268732045-Using-Webinar-Session-Branding) to set the Virtual Background for and apply name tags to hosts, alternative hosts, panelists, interpreters, and speakers.
     *
     * @example true
     */
    enable_session_branding?: boolean;
    /**
     * Whether to allow the host and co-hosts to fully control the mute state of participants.
     *
     * @example false
     * @default false
     */
    allow_host_control_participant_mute_state?: boolean;
    /**
     * Whether to include guest's email addresses in webinars' attendee reports.
     *
     * @example true
     */
    email_in_attendee_report?: boolean;
  };
  /**
   * Webinar start time in GMT/UTC.
   *
   * @format date-time
   * @example 2022-03-26T07:18:32Z
   */
  start_time?: string;
  /**
   * The `start_url` of a webinar is a URL using which a host or an alternative host can start the webinar. This URL should only be used by the host of the meeting and should not be shared with anyone other than the host of the webinar.
   *
   * The expiration time for the `start_url` field listed in the response of the [**Create a webinar**](/docs/api-reference/zoom-api/methods#operation/webinarCreate) API is two hours for all regular users.
   *
   * For users created using the `custCreate` option via the [**Create users**](/docs/api-reference/zoom-api/methods#operation/userCreate) API, the expiration time of the `start_url` field is 90 days.
   *
   * For security reasons, to retrieve the latest value for the `start_url` field programmatically (after expiry), you must call the [**Get a webinar**](/docs/api-reference/zoom-api/methods#operation/webinar) API and refer to the value of the `start_url` field in the response.
   *
   * @example https://example.com/s/11111
   */
  start_url?: string;
  /**
   * Time zone to format `start_time`.
   *
   * @example America/Los_Angeles
   */
  timezone?: string;
  /**
   * Webinar topic.
   *
   * @maxLength 200
   * @example My Webinar
   */
  topic?: string;
  /**
   * Tracking fields.
   */
  tracking_fields?: {
    /**
     * Tracking fields type.
     *
     * @example field1
     */
    field?: string;
    /**
     * Tracking fields value.
     *
     * @example value1
     */
    value?: string;
  }[];
  /**
   * Webinar types.
   *  `5` - Webinar.
   *  `6` - Recurring webinar with no fixed time.
   *  `9` - Recurring webinar with a fixed time.
   *
   * @example 5
   * @default 5
   */
  type?: 5 | 6 | 9;
  /**
   * Whether the webinar is `simulive`.
   *
   * @example true
   */
  is_simulive?: boolean;
  /**
   * The previously recorded file's ID for `simulive`.
   *
   * @example f09340e1-cdc3-4eae-9a74-98f9777ed908
   */
  record_file_id?: string;
  /**
   * Whether to transition a simulive webinar to live. The host must be present at the time of transition.
   *
   * @example false
   */
  transition_to_live?: boolean;
  /**
   * {"enable":false,"time":0,"timeunit":"second"}
   */
  simulive_delay_start?: {
    /**
     * Whether simulive needs to delay playback.
     *
     * @example true
     */
    enable?: boolean;
    /**
     * The time for delayed playback.
     * If the time unit is seconds, then the maximum value is 60 and the minimum value is 1.
     * If the time unit is minutes, then the maximum value is 10 and the minimum value is 1.
     *
     * @example 10
     */
    time?: number;
    /**
     * The time unit for delayed playback.
     * `second` - The time unit for delayed playback is seconds.
     * `minute` - The time unit for delayed playback is minutes.
     *
     * @example second
     * @default second
     */
    timeunit?: "second" | "minute";
  };
  /**
   * The platform used when creating the meeting.
   * * `other` - Created through another platform.
   * * `open_api` - Created through Open API.
   * * `web_portal` - Created through the web portal.
   *
   * @example open_api
   */
  creation_source?: "other" | "open_api" | "web_portal";
};

export type WebinarVariables = {
  pathParams: WebinarPathParams;
  queryParams?: WebinarQueryParams;
} & FetcherExtraProps;

/**
 * Get details for a scheduled Zoom webinar.
 *
 * **Prerequisites**
 * * Pro or higher plan with a Webinar add-on.
 *
 * **[Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `webinar:read:admin`,`webinar:read`
 *
 * **[Granular Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `webinar:read:webinar`,`webinar:read:webinar:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
 */
export const webinar = (variables: WebinarVariables, signal?: AbortSignal) =>
  fetch<
    WebinarResponse,
    WebinarError,
    undefined,
    {},
    WebinarQueryParams,
    WebinarPathParams
  >({ url: "/webinars/{webinarId}", method: "get", ...variables, signal });

export type WebinarDeletePathParams = {
  /**
   * The webinar's ID.
   *
   * @format int64
   * @example 99289110036
   */
  webinarId: number;
};

export type WebinarDeleteQueryParams = {
  /**
   * The meeting or webinar occurrence ID.
   *
   * @example 1648194360000
   */
  occurrence_id?: string;
  /**
   * `true` - Notify panelists and registrants about the webinar cancellation via email.
   *
   * `false` - Do not send any email notification to webinar registrants and panelists.
   *
   * The default value of this field is `false`.
   *
   * @example true
   */
  cancel_webinar_reminder?: boolean;
};

export type WebinarDeleteError = Fetcher.ErrorWrapper<undefined>;

export type WebinarDeleteVariables = {
  pathParams: WebinarDeletePathParams;
  queryParams?: WebinarDeleteQueryParams;
} & FetcherExtraProps;

/**
 * Delete a webinar.
 *
 *
 * **Prerequisites:**
 *
 * * Pro or higher plan with the webinar add-on.
 *
 * **[Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `webinar:write:admin`,`webinar:write`
 *
 * **[Granular Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `webinar:delete:webinar`,`webinar:delete:webinar:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
 */
export const webinarDelete = (
  variables: WebinarDeleteVariables,
  signal?: AbortSignal,
) =>
  fetch<
    undefined,
    WebinarDeleteError,
    undefined,
    {},
    WebinarDeleteQueryParams,
    WebinarDeletePathParams
  >({ url: "/webinars/{webinarId}", method: "delete", ...variables, signal });

export type WebinarUpdatePathParams = {
  /**
   * The webinar's ID.
   *
   * @format int64
   * @example 99289110036
   */
  webinarId: number;
};

export type WebinarUpdateQueryParams = {
  /**
   * Webinar occurrence ID. Support change of agenda, start time, duration, and settings `host_video`, `panelist_video`, `hd_video, watermark`, `auto_recording`.
   *
   * @example 1648538280000
   */
  occurrence_id?: string;
};

export type WebinarUpdateError = Fetcher.ErrorWrapper<undefined>;

export type WebinarUpdateRequestBody = {
  /**
   * Webinar description.
   *
   * @example My Webinar
   */
  agenda?: string;
  /**
   * Webinar duration, in minutes. Used for scheduled webinar only.
   *
   * @example 60
   */
  duration?: number;
  /**
   * Webinar passcode. Passcode may only contain the characters [a-z A-Z 0-9 @ - _ * !]. Maximum of 10 characters.
   *
   * If **Webinar Passcode** setting has been **enabled** **and** [locked](https://support.zoom.us/hc/en-us/articles/115005269866-Using-Tiered-Settings#locked) for the user, the passcode field will be autogenerated for the Webinar in the response even if it is not provided in the API request.
   *
   *  **Note:** If the account owner or the admin has configured [minimum passcode requirement settings](https://support.zoom.us/hc/en-us/articles/360033559832-Meeting-and-webinar-passwords#h_a427384b-e383-4f80-864d-794bf0a37604), the passcode value provided here must meet those requirements.
   *
   *  If the requirements are enabled, you can view those requirements by calling the [**Get account settings**](/docs/api/rest/reference/account/methods/#operation/accountSettings) API.
   *
   * @maxLength 10
   * @example 123456
   */
  password?: string;
  /**
   * The user's email address or `userId` to schedule a webinar for.
   *
   * @example jchill@example.com
   */
  schedule_for?: string;
  /**
   * Recurrence object. Use this object only for a meeting with type `8`, a recurring meeting with fixed time.
   */
  recurrence?: {
    /**
     * Select the final date when the meeting will recur before it is canceled. Should be in UTC time, such as 2017-11-25T12:00:00Z. Cannot be used with `end_times`.
     *
     * @format date-time
     * @example 2022-04-02T15:59:00Z
     */
    end_date_time?: string;
    /**
     * Select how many times the webinar will recur before it is canceled. The maximum number of recurring is 60. Cannot be used with `end_date_time`.
     *
     * @maximum 60
     * @example 7
     * @default 1
     */
    end_times?: number;
    /**
     * Use this field **only if you're scheduling a recurring meeting of type** `3` to state which day in a month, the meeting should recur. The value range is from 1 to 31.
     *
     * If you would like the meeting to recur on 23rd of each month, provide `23` as the value of this field and `1` as the value of the `repeat_interval` field. If you would like the meeting to recur every three months, on 23rd of the month, change the value of the `repeat_interval` field to `3`.
     *
     * @example 1
     * @default 1
     */
    monthly_day?: number;
    /**
     * Use this field **only if you're scheduling a recurring meeting of type** `3` to state the week of the month when the meeting should recur. If you use this field, **you must also use the `monthly_week_day` field to state the day of the week when the meeting should recur.**
     *  `-1` - Last week of the month.
     *  `1` - First week of the month.
     *  `2` - Second week of the month.
     *  `3` - Third week of the month.
     *  `4` - Fourth week of the month.
     *
     * @example 1
     */
    monthly_week?: -1 | 1 | 2 | 3 | 4;
    /**
     * Use this field **only if you're scheduling a recurring meeting of type** `3` to state a specific day in a week when the monthly meeting should recur. To use this field, you must also use the `monthly_week` field.
     *
     *
     *  `1` - Sunday.
     *  `2` - Monday.
     *  `3` - Tuesday.
     *  `4` -  Wednesday.
     *  `5` - Thursday.
     *  `6` - Friday.
     *  `7` - Saturday.
     *
     * @example 1
     */
    monthly_week_day?: 1 | 2 | 3 | 4 | 5 | 6 | 7;
    /**
     * Define the interval when the meeting should recur. If you would like to schedule a meeting that recurs every two months, set the value of this field as `2` and the value of the `type` parameter as `3`.
     *
     * For a daily meeting, the maximum interval you can set is `90` days. For a weekly meeting the maximum interval that you can set is  of `12` weeks. For a monthly meeting, there is a maximum of `3` months.
     *
     * @example 1
     */
    repeat_interval?: number;
    /**
     * Recurrence meeting types.
     *  `1` - Daily.
     *  `2` - Weekly.
     *  `3` - Monthly.
     *
     * @example 1
     */
    type: 1 | 2 | 3;
    /**
     * This field is required **if you're scheduling a recurring meeting of type** `2` to state which day(s) of the week the meeting should repeat.
     *
     *   The value for this field could be a number between `1` to `7` in string format. For instance, if the meeting should recur on Sunday, provide `1` as the value of this field.
     *
     *   **Note:** If you would like the meeting to occur on multiple days of a week, you should provide comma separated values for this field. For instance, if the meeting should recur on Sundays and Tuesdays provide `1,3` as the value of this field.
     *
     *
     *  `1`  - Sunday.
     *  `2` - Monday.
     *  `3` - Tuesday.
     *  `4` -  Wednesday.
     *  `5` -  Thursday.
     *  `6` - Friday.
     *  `7` - Saturday.
     *
     * @example 1
     * @default 1
     */
    weekly_days?: "1" | "2" | "3" | "4" | "5" | "6" | "7";
  };
  /**
   * Webinar settings.
   */
  settings?: {
    /**
     * Allow attendees to join from multiple devices.
     *
     * @example true
     */
    allow_multiple_devices?: boolean;
    /**
     * Alternative host emails or IDs. Separate multiple values by commas.
     *
     * @example jchill@example.com
     */
    alternative_hosts?: string;
    /**
     * Whether the **Allow alternative hosts to add or edit polls** feature is enabled. This requires Zoom version 5.8.0 or higher.
     *
     * @example true
     */
    alternative_host_update_polls?: boolean;
    /**
     * `0` - Automatically approve.
     *  `1` - Manually approve.
     *  `2` - No registration required.
     *
     * @example 0
     * @default 2
     */
    approval_type?: 0 | 1 | 2;
    /**
     * Send reminder email to attendees and panelists.
     */
    attendees_and_panelists_reminder_email_notification?: {
      /**
       * * `true` - Send reminder email to attendees and panelists.
       *
       * * `false` - Do not send reminder email to attendees and panelists.
       *
       * @example true
       */
      enable?: boolean;
      /**
       * `0` - No plan.
       *  `1` - Send 1 hour before webinar.
       *  `2` - Send 1 day before webinar.
       *  `3` - Send 1 hour and 1 day before webinar.
       *  `4` - Send 1 week before webinar.
       *  `5` - Send 1 hour and 1 week before webinar.
       *  `6` - Send 1 day and 1 week before webinar.
       *  `7` - Send 1 hour, 1 day and 1 week before webinar.
       *
       * @example 0
       */
      type?: 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7;
    };
    /**
     * Determine how participants can join the audio portion of the webinar.
     *
     * @example telephony
     * @default both
     */
    audio?: "both" | "telephony" | "voip" | "thirdParty";
    /**
     * Third party audio conference info.
     *
     * @maxLength 2048
     * @example test
     */
    audio_conference_info?: string;
    /**
     * If user has configured [**Sign Into Zoom with Specified Domains**](https://support.zoom.us/hc/en-us/articles/360037117472-Authentication-Profiles-for-Meetings-and-Webinars#h_5c0df2e1-cfd2-469f-bb4a-c77d7c0cca6f) option, this will list the domains that are authenticated.
     *
     * @example example.com
     */
    authentication_domains?: string;
    /**
     * Authentication name set in the [authentication profile](https://support.zoom.us/hc/en-us/articles/360037117472-Authentication-Profiles-for-Meetings-and-Webinars#h_5c0df2e1-cfd2-469f-bb4a-c77d7c0cca6f).
     *
     * @example Sign in to Zoom
     */
    authentication_name?: string;
    /**
     * Webinar authentication option ID.
     *
     * @example signIn_D8cJuqWVQ623CI4Q8yQK0Q
     */
    authentication_option?: string;
    /**
     * Automatic recording.
     *  `local` - Record on local.
     *  `cloud` -  Record on cloud.
     *  `none` - Disabled.
     *
     * @example cloud
     * @default none
     */
    auto_recording?: "local" | "cloud" | "none";
    /**
     * Close registration after event date.
     *
     * @example true
     * @deprecated true
     */
    close_registration?: boolean;
    /**
     * Contact email for registration
     *
     * @example jchill@example.com
     */
    contact_email?: string;
    /**
     * Contact name for registration
     *
     * @example Jill Chill
     */
    contact_name?: string;
    /**
     * Set the email language to one of the following.
     * `en-US`,`de-DE`,`es-ES`,`fr-FR`,`jp-JP`,`pt-PT`,`ru-RU`,`zh-CN`, `zh-TW`, `ko-KO`, `it-IT`, `vi-VN`.
     *
     * @example en-US
     */
    email_language?: string;
    /**
     * Only signed in users can join this meeting.
     *
     * **This field is deprecated and will not be supported in the future.**
     *
     *  As an alternative, use the ``meeting_authentication`, `authentication_option`, and `authentication_domains` fields to understand the [authentication configurations](https://support.zoom.us/hc/en-us/articles/360037117472-Authentication-Profiles-for-Meetings-and-Webinars) set for the webinar.
     *
     * @example true
     * @deprecated true
     */
    enforce_login?: boolean;
    /**
     * Only signed in users with specified domains can join meetings.
     *
     * **This field is deprecated and will not be supported in the future.**
     *
     *  As an alternative, use the `meeting_authentication`, `authentication_option`, and `authentication_domains` fields to understand the [authentication configurations](https://support.zoom.us/hc/en-us/articles/360037117472-Authentication-Profiles-for-Meetings-and-Webinars) set for the webinar.
     *
     * @example example.com
     * @deprecated true
     */
    enforce_login_domains?: string;
    /**
     * Send follow-up email to absentees.
     */
    follow_up_absentees_email_notification?: {
      /**
       * * `true` - Send follow-up email to absentees.
       *
       * * `false` - Do not send follow-up email to absentees.
       *
       * @example true
       */
      enable?: boolean;
      /**
       * `0` - No plan.
       *  `1` - Send 1 days after the scheduled end date.
       *  `2` - Send 2 days after the scheduled end date.
       *  `3` - Send 3 days after the scheduled end date.
       *  `4` - Send 4 days after the scheduled end date.
       *  `5` - Send 5 days after the scheduled end date.
       *  `6` - Send 6 days after the scheduled end date.
       *  `7` - Send 7 days after the scheduled end date.
       *
       * @example 0
       */
      type?: 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7;
    };
    /**
     * Send follow-up email to attendees.
     */
    follow_up_attendees_email_notification?: {
      /**
       * * `true` - Send follow-up email to attendees.
       *
       * * `false` - Do not send follow-up email to attendees.
       *
       * @example true
       */
      enable?: boolean;
      /**
       * `0` - No plan.
       *  `1` - Send 1 day after the scheduled end date.
       *  `2` - Send 2 days after the scheduled end date.
       *  `3` - Send 3 days after the scheduled end date.
       *  `4` - Send 4 days after the scheduled end date.
       *  `5` - Send 5 days after the scheduled end date.
       *  `6` - Send 6 days after the scheduled end date.
       *  `7` - Send 7 days after the scheduled end date.
       *
       * @example 0
       */
      type?: 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7;
    };
    /**
     * List of global dial-in countries
     */
    global_dial_in_countries?: string[];
    /**
     * Default to HD video.
     *
     * @example false
     * @default false
     */
    hd_video?: boolean;
    /**
     * Whether HD video for attendees is enabled.
     *
     * @example false
     * @default false
     */
    hd_video_for_attendees?: boolean;
    /**
     * Start video when host joins the webinar.
     *
     * @example true
     */
    host_video?: boolean;
    /**
     * The webinar's [language interpretation settings](https://support.zoom.com/hc/en/article?id=zm_kb&sysparm_article=KB0064768). Make sure to add the language in the web portal in order to use it in the API. See link for details.
     *
     * **Note:** This feature is only available for certain Webinar add-on, Education, and Business and higher plans. If this feature is not enabled on the host's account, this setting will **not** be applied to the webinar. This is not supported for simulive webinars.
     */
    language_interpretation?: {
      /**
       * Whether to enable [language interpretation](https://support.zoom.com/hc/en/article?id=zm_kb&sysparm_article=KB0064768) for the webinar.
       *
       * @example true
       */
      enable?: boolean;
      /**
       * Information about the webinar's language interpreters.
       */
      interpreters?: {
        /**
         * The interpreter's email address.
         *
         * @format email
         * @example interpreter@example.com
         */
        email?: string;
        /**
         * A comma-separated list of the interpreter's languages. The string must contain exactly two country IDs.
         *
         * Only system-supported languages are allowed: `US` (English), `CN` (Chinese), `JP` (Japanese), `DE` (German), `FR` (French), `RU` (Russian), `PT` (Portuguese), `ES` (Spanish), and `KR` (Korean).
         *
         * For example, to set an interpreter translating from English to Chinese, use `US,CN`.
         *
         * @example US,FR
         * @deprecated true
         */
        languages?: string;
        /**
         * A comma-separated list of the interpreter's languages. The string must contain exactly two languages.
         *
         * To get this value, use the `language_interpretation` object's `languages` and `custom_languages` values in the [**Get user settings**](/docs/api/users/#tag/users/GET/users/{userId}/settings) API response.
         *
         * **languages**: System-supported languages include `English`, `Chinese`, `Japanese`, `German`, `French`, `Russian`, `Portuguese`, `Spanish`, and `Korean`.
         *
         * **custom_languages**: User-defined languages added by the user.
         *
         * For example, an interpreter translating between English and French should use `English,French`.
         *
         * @example English,French
         */
        interpreter_languages?: string;
      }[];
    };
    /**
     * The webinar's [sign language interpretation settings](https://support.zoom.us/hc/en-us/articles/9644962487309-Using-sign-language-interpretation-in-a-meeting-or-webinar). Make sure to add the language in the web portal in order to use it in the API. See link for details.
     *
     * **Note:** If this feature is not enabled on the host's account, this setting will **not** be applied to the webinar.
     */
    sign_language_interpretation?: {
      /**
       * Whether to enable [sign language interpretation](https://support.zoom.us/hc/en-us/articles/9644962487309-Using-sign-language-interpretation-in-a-meeting-or-webinar) for the webinar.
       *
       * @example true
       */
      enable?: boolean;
      /**
       * Information about the webinar's sign language interpreters.
       *
       * @maximum 20
       */
      interpreters?: {
        /**
         * The interpreter's email address.
         *
         * @format email
         * @example interpreter@example.com
         */
        email?: string;
        /**
         * The interpreter's sign language.
         *
         *  To get this value, use the `sign_language_interpretation` object's `languages` and `custom_languages` values in the [**Get user settings**](/api-reference/zoom-api/methods#operation/userSettings) API response.
         *
         * @example American
         */
        sign_language?: string;
      }[];
    };
    /**
     * Require panelists to authenticate to join.
     *
     * @example true
     */
    panelist_authentication?: boolean;
    /**
     * Only authenticated users can join the webinar.
     *
     * @example true
     */
    meeting_authentication?: boolean;
    /**
     * Add watermark that identifies the viewing participant.
     *
     * @example true
     */
    add_watermark?: boolean;
    /**
     * Add audio watermark that identifies the participants.
     *
     * @example true
     */
    add_audio_watermark?: boolean;
    /**
     * Send notification email to registrants when the host updates a webinar.
     *
     * @example true
     */
    notify_registrants?: boolean;
    /**
     * Make the webinar on-demand.
     *
     * @example false
     * @default false
     */
    on_demand?: boolean;
    /**
     * Send invitation email to panelists. If `false`, do not send invitation email to panelists.
     *
     * @example true
     */
    panelists_invitation_email_notification?: boolean;
    /**
     * Start video when panelists join the webinar.
     *
     * @example true
     */
    panelists_video?: boolean;
    /**
     * Zoom will open a survey page in attendees' browsers after leaving the webinar.
     *
     * @example true
     */
    post_webinar_survey?: boolean;
    /**
     * Enable practice session.
     *
     * @example false
     * @default false
     */
    practice_session?: boolean;
    /**
     * [Q&amp;A](https://support.zoom.us/hc/en-us/articles/203686015-Using-Q-A-as-the-webinar-host#:~:text=Overview,and%20upvote%20each%20other's%20questions.) for webinar.
     */
    question_and_answer?: {
      /**
       * * `true` - Allow participants to submit questions.
       *
       * * `false` - Do not allow submit questions.
       *
       * @example true
       */
      allow_submit_questions?: boolean;
      /**
       * * `true` - Allow participants to send questions without providing their name to the host, co-host, and panelists..
       *
       * * `false` - Do not allow anonymous questions.
       *
       * @example true
       */
      allow_anonymous_questions?: boolean;
      /**
       * Indicate whether you want attendees to be able to view answered questions only or view all questions.
       *
       * * `only` - Attendees are able to view answered questions only.
       *
       * *  `all` - Attendees are able to view all questions submitted in the Q&amp;A.
       *
       * @example all
       */
      answer_questions?: "only" | "all";
      /**
       * * `true` - Attendees can answer questions or leave a comment in the question thread.
       *
       * * `false` - Attendees can't answer questions or leave a comment in the question thread.
       *
       * @example true
       */
      attendees_can_comment?: boolean;
      /**
       * * `true` - Attendees can click the thumbs up button to bring popular questions to the top of the Q&amp;A window.
       *
       * * `false` - Attendees can't click the thumbs up button on questions.
       *
       * @example true
       */
      attendees_can_upvote?: boolean;
      /**
       * If simulive webinar,
       *
       * * `true` - allow auto-reply to attendees.
       *
       * * `false` - don't allow auto-reply to the attendees.
       *
       * @example true
       */
      allow_auto_reply?: boolean;
      /**
       * If `allow_auto_reply` = true, the text to be included in the automatic response.
       *
       * @example Thank you for your question. We will get back to you shortly.
       */
      auto_reply_text?: string;
      /**
       * * `true` - Enable [Q&amp;A](https://support.zoom.us/hc/en-us/articles/203686015-Using-Q-A-as-the-webinar-host#:~:text=Overview,and%20upvote%20each%20other's%20questions.) for webinar.
       *
       * * `false` - Disable Q&amp;A for webinar.
       *
       * @example true
       */
      enable?: boolean;
    };
    /**
     * Send confirmation email to registrants
     *
     * @example true
     */
    registrants_confirmation_email?: boolean;
    /**
     * Send email notifications to registrants about approval, cancellation, denial of the registration. The value of this field must be set to true in order to use the `registrants_confirmation_email` field.
     *
     * @example true
     */
    registrants_email_notification?: boolean;
    /**
     * Restrict number of registrants for a webinar. By default, it is set to `0`. A `0` value means that the restriction option is disabled. Provide a number higher than 0 to restrict the webinar registrants by the that number.
     *
     * @maximum 20000
     * @minimum 0
     * @example 100
     * @default 0
     */
    registrants_restrict_number?: number;
    /**
     * Registration types. Only used for recurring webinars with a fixed time.
     *  `1` - Attendees register once and can attend any of the webinar sessions.
     *  `2` - Attendees need to register for each session in order to attend.
     *  `3` - Attendees register once and can choose one or more sessions to attend.
     *
     * @example 1
     * @default 1
     */
    registration_type?: 1 | 2 | 3;
    /**
     * Always send 1080p video to attendees.
     *
     * @example false
     * @default false
     */
    send_1080p_video_to_attendees?: boolean;
    /**
     * Show social share buttons on the registration page.
     *
     * @example true
     */
    show_share_button?: boolean;
    /**
     * Survey url for post webinar survey
     *
     * @example https://example.com
     */
    survey_url?: string;
    /**
     * Whether the **Webinar Session Branding** setting is enabled. This setting lets hosts visually customize a webinar by setting a session background. This also lets hosts use [Webinar Session Branding](https://support.zoom.us/hc/en-us/articles/4836268732045-Using-Webinar-Session-Branding) to set the virtual background for and apply name tags to hosts, alternative hosts, panelists, interpreters, and speakers.
     *
     * @example true
     */
    enable_session_branding?: boolean;
    /**
     * Whether to allow host and co-hosts to fully control the mute state of participants.
     *
     * @example false
     * @default false
     */
    allow_host_control_participant_mute_state?: boolean;
    /**
     * Whether to include guest's email addresses in webinars' attendee reports.
     *
     * @example true
     */
    email_in_attendee_report?: boolean;
  };
  /**
   * Webinar start time, in the format `yyyy-MM-dd'T'HH:mm:ss'Z'`. Should be in GMT time. In the format `yyyy-MM-dd'T'HH:mm:ss`. This should be in local time and the timezone should be specified. Only used for scheduled webinars and recurring webinars with a fixed time.
   *
   * @format date-time
   * @example 2022-03-26T07:18:32Z
   */
  start_time?: string;
  /**
   * The timezone to assign to the `start_time` value. This field is only used for scheduled or recurring webinars with a fixed time.
   *
   * For a list of supported timezones and their formats, see our [timezone list](/docs/api/references/abbreviations/#timezones).
   *
   * @example America/Los_Angeles
   */
  timezone?: string;
  /**
   * The webinar topic.
   *
   * @example My webinar
   */
  topic?: string;
  /**
   * Tracking fields.
   */
  tracking_fields?: {
    /**
     * Tracking fields type.
     *
     * @example field1
     */
    field?: string;
    /**
     * Tracking fields value.
     *
     * @example value1
     */
    value?: string;
  }[];
  /**
   * Webinar types.
   *  `5` - webinar.
   *  `6` - Recurring webinar with no fixed time.
   *  `9` - Recurring webinar with a fixed time.
   *
   * @example 5
   * @default 5
   */
  type?: 5 | 6 | 9;
  /**
   * Whether to set the webinar to simulive.
   *
   * @example true
   */
  is_simulive?: boolean;
  /**
   * The previously recorded file's ID for `simulive`.
   *
   * @example f09340e1-cdc3-4eae-9a74-98f9777ed908
   */
  record_file_id?: string;
  /**
   * Whether to transition a simulive webinar to live. The host must be present at the time of transition.
   *
   * @example false
   */
  transition_to_live?: boolean;
  /**
   * {"enable":false,"time":0,"timeunit":"second"}
   */
  simulive_delay_start?: {
    /**
     * Whether simulive need delay playback.
     *
     * @example true
     */
    enable?: boolean;
    /**
     * The time for delayed playback.
     * If the time unit is seconds, then the maximum value is 60 and the minimum value is 1.
     * If the time unit is minutes, then the maximum value is 10 and the minimum value is 1.
     *
     * @example 10
     */
    time?: number;
    /**
     * The time unit for delayed playback.
     * `second` - The time unit for delayed playback is seconds.
     * `minute` - The time unit for delayed playback is minutes.
     *
     * @example second
     * @default second
     */
    timeunit?: "second" | "minute";
  };
};

export type WebinarUpdateVariables = {
  body?: WebinarUpdateRequestBody;
  pathParams: WebinarUpdatePathParams;
  queryParams?: WebinarUpdateQueryParams;
} & FetcherExtraProps;

/**
 * Make updates to a scheduled webinar.
 *
 * **100 requests per day**. The rate limit is applied to the `userId` of the **webinar host** used to make the request.
 *
 * **Prerequisites**
 * * A Pro or higher plan with a webinar add-on.
 *
 * **[Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `webinar:write`,`webinar:write:admin`
 *
 * **[Granular Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `webinar:update:webinar`,`webinar:update:webinar:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
 */
export const webinarUpdate = (
  variables: WebinarUpdateVariables,
  signal?: AbortSignal,
) =>
  fetch<
    undefined,
    WebinarUpdateError,
    WebinarUpdateRequestBody,
    {},
    WebinarUpdateQueryParams,
    WebinarUpdatePathParams
  >({ url: "/webinars/{webinarId}", method: "patch", ...variables, signal });

export type AddBatchWebinarRegistrantsPathParams = {
  /**
   * The webinar's unique identifier.
   *
   * @example 97871060099
   */
  webinarId: string;
};

export type AddBatchWebinarRegistrantsError = Fetcher.ErrorWrapper<undefined>;

export type AddBatchWebinarRegistrantsResponse = {
  registrants?: {
    /**
     * The registrant's email address.
     *
     * @example jchill@example.com
     */
    email?: string;
    /**
     * Unique URL using which registrant can join the webinar.
     *
     * @example https://example.com/j/11111
     */
    join_url?: string;
    /**
     * The registrant's unique identifier.
     *
     * @example -rOym-zdTHOdbT3A7u7u5g
     */
    registrant_id?: string;
  }[];
};

export type AddBatchWebinarRegistrantsRequestBody = {
  /**
   * If a meeting was scheduled with approval_type `1` (manual approval), but you want to automatically approve registrants added via this API, set the value of this field to `true`.
   *
   * You **cannot** use this field to change approval setting for a meeting that was originally scheduled with approval_type `0` (automatic approval).
   *
   * @example true
   */
  auto_approve?: boolean;
  registrants?: {
    /**
     * The registrant's email address.
     *
     * @format email
     * @example jchill@example.com
     */
    email: string;
    /**
     * The registrant's first name.
     *
     * @example Jill
     */
    first_name: string;
    /**
     * The registrant's last name.
     *
     * @example Chill
     */
    last_name?: string;
  }[];
};

export type AddBatchWebinarRegistrantsVariables = {
  body?: AddBatchWebinarRegistrantsRequestBody;
  pathParams: AddBatchWebinarRegistrantsPathParams;
} & FetcherExtraProps;

/**
 * Register up to 30 registrants at once for a scheduled webinar that requires [registration](https://support.zoom.us/hc/en-us/articles/204619915-Scheduling-a-webinar-with-registration).
 *
 *
 * **Prerequisites:**
 *
 * * The webinar host must be a licensed user.
 * * The webinar should be type `5`, a scheduled webinar. Other types of webinars are not supported by this API.
 *
 *
 *
 *
 * **[Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `webinar:write`,`webinar:write:admin`
 *
 * **[Granular Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `webinar:write:batch_registrants`,`webinar:write:batch_registrants:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `HEAVY`
 */
export const addBatchWebinarRegistrants = (
  variables: AddBatchWebinarRegistrantsVariables,
  signal?: AbortSignal,
) =>
  fetch<
    AddBatchWebinarRegistrantsResponse,
    AddBatchWebinarRegistrantsError,
    AddBatchWebinarRegistrantsRequestBody,
    {},
    {},
    AddBatchWebinarRegistrantsPathParams
  >({
    url: "/webinars/{webinarId}/batch_registrants",
    method: "post",
    ...variables,
    signal,
  });

export type GetWebinarBrandingPathParams = {
  /**
   * The webinar's ID.
   *
   * @format int64
   * @example 99289110036
   */
  webinarId: number;
};

export type GetWebinarBrandingError = Fetcher.ErrorWrapper<undefined>;

export type GetWebinarBrandingResponse = {
  /**
   * Information about the webinar's [wallpaper] file.
   */
  wallpaper?: {
    /**
     * The wallpaper's file ID.
     *
     * @example zazQjwDuQkS3Q2EprNd7jQ
     */
    id?: string;
  };
  /**
   * Information about the webinar's [virtual background](https://support.zoom.us/hc/en-us/articles/210707503-Virtual-Background) files.
   */
  virtual_backgrounds?: {
    /**
     * The virtual background's file ID.
     *
     * @example zazQjwDuQkS3Q2EprNd7jQ
     */
    id?: string;
    /**
     * The virtual background's file name.
     *
     * @example beach.jpg
     */
    name?: string;
    /**
     * Whether the file is the default virtual background file.
     *
     * @example true
     */
    is_default?: boolean;
  }[];
  /**
   * Information about the webinar's name tag.
   */
  name_tags?: {
    /**
     * The name tag's ID.
     *
     * @example zazQjwDuQkS3Q2EprNd7jQ
     */
    id?: string;
    /**
     * The name tag's name.
     *
     * @example name
     */
    name?: string;
    /**
     * The name tag's text color.
     *
     * @example 0e72ed
     */
    text_color?: string;
    /**
     * The name tag's accent color.
     *
     * @example 0e72ed
     */
    accent_color?: string;
    /**
     * The name tag's background color.
     *
     * @example 0e72ed
     */
    background_color?: string;
    /**
     * Whether the file is the default name tag or not.
     *
     * @example true
     */
    is_default?: boolean;
  }[];
};

export type GetWebinarBrandingVariables = {
  pathParams: GetWebinarBrandingPathParams;
} & FetcherExtraProps;

/**
 * Get the webinar's [session branding](https://support.zoom.us/hc/en-us/articles/4836268732045-Using-Webinar-Session-Branding) information. Session branding lets hosts visually customize a webinar by setting a webinar wallpaper that displays behind video tiles. Session branding also lets hosts set the virtual background for and apply name tags to hosts, alternative hosts, panelists, interpreters, and speakers.
 *
 * **Prerequisites**
 * * A Pro or higher plan with a [Webinar plan](https://zoom.us/webinar) add-on.
 * * Enable the **Webinar Session Branding** setting.
 *
 * **[Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `webinar:read`,`webinar:read:admin`
 *
 * **[Granular Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `webinar:read:branding`,`webinar:read:branding:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
 */
export const getWebinarBranding = (
  variables: GetWebinarBrandingVariables,
  signal?: AbortSignal,
) =>
  fetch<
    GetWebinarBrandingResponse,
    GetWebinarBrandingError,
    undefined,
    {},
    {},
    GetWebinarBrandingPathParams
  >({
    url: "/webinars/{webinarId}/branding",
    method: "get",
    ...variables,
    signal,
  });

export type CreateWebinarBrandingNameTagPathParams = {
  /**
   * The webinar's ID.
   *
   * @format int64
   * @example 99289110036
   */
  webinarId: number;
};

export type CreateWebinarBrandingNameTagError = Fetcher.ErrorWrapper<undefined>;

export type CreateWebinarBrandingNameTagResponse = {
  /**
   * The name tag's ID.
   *
   * @example J0sFXN2PSOCGrqTqLRwgAQ
   */
  id?: string;
  /**
   * The name tag's name.
   *
   * @example name
   */
  name?: string;
  /**
   * The name tag's text color.
   *
   * @example 0e72ed
   */
  text_color?: string;
  /**
   * The name tag's accent color.
   *
   * @example 0e72ed
   */
  accent_color?: string;
  /**
   * The name tag's background_color color.
   *
   * @example 0e72ed
   */
  background_color?: string;
  /**
   * Whether the name tag is the default name tag or not.
   *
   * @example true
   */
  is_default?: boolean;
};

export type CreateWebinarBrandingNameTagRequestBody = {
  /**
   * The name tag's name.
   *
   * **Note:** This value cannot exceed more than 50 characters.
   *
   * @example name
   */
  name: string;
  /**
   * The name tag's text color.
   *
   * @format Hex color code
   * @example 0e72ed
   */
  text_color: string;
  /**
   * The name tag's accent color.
   *
   * @format Hex color code
   * @example 0e72ed
   */
  accent_color: string;
  /**
   * The name tag's background color.
   *
   * @format Hex color code
   * @example 0e72ed
   */
  background_color: string;
  /**
   * Whether set the name tag as the default name tag or not.
   *
   * @example true
   * @default false
   */
  is_default?: boolean;
  /**
   * Whether to set the name tag as the new default for all panelists or not. This includes panelists not currently assigned a default name tag.
   *
   * @example true
   * @default true
   */
  set_default_for_all_panelists?: boolean;
};

export type CreateWebinarBrandingNameTagVariables = {
  body: CreateWebinarBrandingNameTagRequestBody;
  pathParams: CreateWebinarBrandingNameTagPathParams;
} & FetcherExtraProps;

/**
 * Create a webinar's [session branding](https://support.zoom.us/hc/en-us/articles/4836268732045-Using-Webinar-Session-Branding) name tag. There's a limit of 20 name tags per webinar. **Prerequisites:**
 * *  The **Webinar Session Branding** setting enabled.
 *
 * **[Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `webinar:write`,`webinar:write:admin`
 *
 * **[Granular Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `webinar:write:branding_name_tag`,`webinar:write:branding_name_tag:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
 */
export const createWebinarBrandingNameTag = (
  variables: CreateWebinarBrandingNameTagVariables,
  signal?: AbortSignal,
) =>
  fetch<
    CreateWebinarBrandingNameTagResponse,
    CreateWebinarBrandingNameTagError,
    CreateWebinarBrandingNameTagRequestBody,
    {},
    {},
    CreateWebinarBrandingNameTagPathParams
  >({
    url: "/webinars/{webinarId}/branding/name_tags",
    method: "post",
    ...variables,
    signal,
  });

export type DeleteWebinarBrandingNameTagPathParams = {
  /**
   * The webinar's ID.
   *
   * @format int64
   * @example 99289110036
   */
  webinarId: number;
};

export type DeleteWebinarBrandingNameTagQueryParams = {
  /**
   * A comma-separated list of the name tag IDs to delete.
   *
   * @example zazQjwDuQkS3Q2EprNd7jQ,AsfE0cx2TFSfqqKbE0BUZg
   */
  name_tag_ids?: string;
};

export type DeleteWebinarBrandingNameTagError = Fetcher.ErrorWrapper<undefined>;

export type DeleteWebinarBrandingNameTagVariables = {
  pathParams: DeleteWebinarBrandingNameTagPathParams;
  queryParams?: DeleteWebinarBrandingNameTagQueryParams;
} & FetcherExtraProps;

/**
 * Delete a webinar's [session branding](https://support.zoom.us/hc/en-us/articles/4836268732045-Using-Webinar-Session-Branding) name tag.
 *
 *  **Prerequisites:**
 * * The **Webinar Session Branding** setting enabled.
 *
 * **[Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `webinar:write`,`webinar:write:admin`
 *
 * **[Granular Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `webinar:delete:branding_name_tag`,`webinar:delete:branding_name_tag:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
 */
export const deleteWebinarBrandingNameTag = (
  variables: DeleteWebinarBrandingNameTagVariables,
  signal?: AbortSignal,
) =>
  fetch<
    undefined,
    DeleteWebinarBrandingNameTagError,
    undefined,
    {},
    DeleteWebinarBrandingNameTagQueryParams,
    DeleteWebinarBrandingNameTagPathParams
  >({
    url: "/webinars/{webinarId}/branding/name_tags",
    method: "delete",
    ...variables,
    signal,
  });

export type UpdateWebinarBrandingNameTagPathParams = {
  /**
   * The webinar's ID.
   *
   * @format int64
   * @example 99289110036
   */
  webinarId: number;
  /**
   * The name tag's ID.
   *
   * @example J0sFXN2PSOCGrqTqLRwgAQ
   */
  nameTagId: string;
};

export type UpdateWebinarBrandingNameTagError = Fetcher.ErrorWrapper<undefined>;

export type UpdateWebinarBrandingNameTagRequestBody = {
  /**
   * The name tag's name.
   *
   * **Note:** This value cannot exceed more than 50 characters.
   *
   * @example name
   */
  name?: string;
  /**
   * The name tag's text color.
   *
   * @format Hex color code
   * @example 0e72ed
   */
  text_color?: string;
  /**
   * The name tag's accent color.
   *
   * @format Hex color code
   * @example 0e72ed
   */
  accent_color?: string;
  /**
   * The name tag's background color.
   *
   * @format Hex color code
   * @example 0e72ed
   */
  background_color?: string;
  /**
   * Whether set the name tag as the default name tag or not.
   *
   * @example true
   * @default false
   */
  is_default?: boolean;
  /**
   * Whether to set the name tag as the new default for all panelists or not, including panelists not currently assigned a default name tag.
   *
   * @example true
   * @default true
   */
  set_default_for_all_panelists?: boolean;
};

export type UpdateWebinarBrandingNameTagVariables = {
  body?: UpdateWebinarBrandingNameTagRequestBody;
  pathParams: UpdateWebinarBrandingNameTagPathParams;
} & FetcherExtraProps;

/**
 * Update a webinar's [session branding](https://support.zoom.us/hc/en-us/articles/4836268732045-Using-Webinar-Session-Branding) name tag. **Prerequisites:**
 * *  The **Webinar Session Branding** setting enabled.
 *
 * **[Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `webinar:write`,`webinar:write:admin`
 *
 * **[Granular Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `webinar:update:branding_name_tag`,`webinar:update:branding_name_tag:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
 */
export const updateWebinarBrandingNameTag = (
  variables: UpdateWebinarBrandingNameTagVariables,
  signal?: AbortSignal,
) =>
  fetch<
    undefined,
    UpdateWebinarBrandingNameTagError,
    UpdateWebinarBrandingNameTagRequestBody,
    {},
    {},
    UpdateWebinarBrandingNameTagPathParams
  >({
    url: "/webinars/{webinarId}/branding/name_tags/{nameTagId}",
    method: "patch",
    ...variables,
    signal,
  });

export type UploadWebinarBrandingVBPathParams = {
  /**
   * The webinar's ID.
   *
   * @format int64
   * @example 99289110036
   */
  webinarId: number;
};

export type UploadWebinarBrandingVBError = Fetcher.ErrorWrapper<undefined>;

export type UploadWebinarBrandingVBResponse = {
  /**
   * The virtual background file's ID.
   *
   * @example J0sFXN2PSOCGrqTqLRwgAQ
   */
  id?: string;
  /**
   * The virtual background file's name.
   *
   * @example beach.jpg
   */
  name?: string;
  /**
   * Whether the file is the default virtual background file.
   *
   * @example true
   */
  is_default?: boolean;
  /**
   * The virtual background file's size, in bytes.
   *
   * @example 524288
   */
  size?: number;
  /**
   * The virtual background file's file type.
   * * `image` - An image file.
   *
   * @example image
   */
  type?: "image";
};

export type UploadWebinarBrandingVBRequestBody = {
  /**
   * The vvirtual background's file path, in binary format.
   *
   * @format binary
   * @example Vm0wd2QyUXlVWGxWV0d4WFlUSm9WMVl3Wkc5V1ZsbDNXa2M1YWxKc1dqQlVWbHBQVjBaYWMySkVUbGhoTVVwVVZtcEdZV015U2tWVWJHaG9UV3N3ZUZacVFtRlRNazE1VTJ0V1ZXSkhhRzlVVm1oRFZWWmFkR1ZHV214U2JHdzFWa2QwYzJGc1NuUmhSemxWVmpOT00xcFZXbUZrUjA1R1pFWlNUbFpVVmtwV2JURXdZVEZrU0ZOclpHcFNWR3hoV1d4b1UxUkdXbk5YYlVaclVqQTFSMXBGV2xOVWJGcFlaSHBHVjJFeVVYZFpla3BIVmpGT2RWVnNXbWhsYlhob1ZtMXdUMkl5UmtkalJtUllZbFZhY2xWcVJtRlRWbkJHVjJ4T1ZXSkdjRlpXYlhoelZqRmFObEZZYUZkU1JYQklWV3BHVDJSV1ZuTlhiV3hUVFcxb2RsWnRNWGRVTWtsNVVtdGtXR0pIVWxsWmJHaFRWMFpTVjJGRlRsUmlSM1F6VjJ0U1UxWnJNWEpqUm1oV1RXNW9lbFpxUm1GT2JFWlpZVVprVTFKV2NEWldiWEJIVkRKU1YxWnVVbWhTYXpWeldXeG9iMWRHV25STlNHaFBVakZHTTFSVmFHOWhiRXAwVld4c1dtSkhhRlJXTUZwVFZqRmtkRkp0ZUZkaVZrbzFWbXBLTkZReVJrZFhiazVxVTBkNFdGUldaRzlOTVZweFVtdHdiR0pWV2tsWlZWcHZWakpLVjFOcmJGZGlXRUpJVmtSR2ExWXlUa1phUjJoVFRXNW9WVlpHWTNoaU1XUnpWMWhvV0dKWVVrOVZiVEUwVjBaVmVHRkhPV2hpUlhCWVZqSjRVMWR0U2tkWGJXaGFUVlp3ZWxreWVIZFNNVkp5VGxaT2FXRXdjRWxXYlhCTFRrWlJlRmRzYUZSaE1sSnhWV3RXWVZZeFduRlVhMDVZVW14d2VGVnRkSGRpUjBwV1YydHNXbFpXY0hKWlZXUkdaVWRPU0U5V1pGZFNWWEJ2Vm10U1MxUXlVa2RVYmtwaFVteEtjRlpxVG05a2JGcEhWbTA1VWsxWFVsaFdNV2h2V1ZaS1JsTnRSbGRoYTFwSVZHdGFXbVZIUmtoUFZtUnBWbGhDU2xac1pEUmpNV1IwVTJ0a1dHSlhhRmhVVlZwM1pXeHJlV1ZJWkZOTlZrb3dXbFZhYTJGV1NYcFpNMmhYVFc1b1dGWnFSbEpsUm1SWldrVTFXRkpZUWxsWFZtUjZUVlpzVjFWc1dsaGliVkpZVlcxNGQyVkdWblJOVldSWFRVUkdlVlJzVm05V01VbzJVbXRvVjFaRldreFdha3BQVW14YWMxcEhiRk5OVlZZelZteGFVMUl4YkZkWGJrcE9WbXh3V0ZsWWNGZFdSbFp5Vm10YVQxVlVNRGs9
   */
  file: Blob;
  /**
   * Whether set the file as the default virtual background file.
   *
   * @example true
   * @default false
   */
  ["default"]?: boolean;
  /**
   * Whether to set the virtual background file as the new default for all panelists. This includes panelists not currently assigned a default virtual background.
   *
   * @example true
   * @default true
   */
  set_default_for_all_panelists?: boolean;
};

export type UploadWebinarBrandingVBVariables = {
  body: UploadWebinarBrandingVBRequestBody;
  pathParams: UploadWebinarBrandingVBPathParams;
} & FetcherExtraProps;

/**
 * Upload a webinar's session branding [virtual background](https://support.zoom.us/hc/en-us/articles/210707503-Virtual-Background). Hosts and panelists can select and use these virtual backgrounds during the webinar. Branding virtual background files have these restrictions:
 * * A webinar cannot exceed more than 10 virtual background files.
 * * You can only upload image files that are in JPG/JPEG, GIF or PNG format.
 * * The virtual background file size cannot exceed 15 megabytes (MB).
 *
 *  **Prerequisites:**
 * *  The **Webinar Session Branding** setting enabled.
 *
 * **[Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `webinar:write`,`webinar:write:admin`
 *
 * **[Granular Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `webinar:write:branding_virtual_background`,`webinar:write:branding_virtual_background:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
 */
export const uploadWebinarBrandingVB = (
  variables: UploadWebinarBrandingVBVariables,
  signal?: AbortSignal,
) =>
  fetch<
    UploadWebinarBrandingVBResponse,
    UploadWebinarBrandingVBError,
    UploadWebinarBrandingVBRequestBody,
    {},
    {},
    UploadWebinarBrandingVBPathParams
  >({
    url: "/webinars/{webinarId}/branding/virtual_backgrounds",
    method: "post",
    ...variables,
    signal,
  });

export type DeleteWebinarBrandingVBPathParams = {
  /**
   * The webinar's ID.
   *
   * @format int64
   * @example 99289110036
   */
  webinarId: number;
};

export type DeleteWebinarBrandingVBQueryParams = {
  /**
   * A comma-separated list of the virtual background file IDs to delete.
   *
   * @example zazQjwDuQkS3Q2EprNd7jQ,AsfE0cx2TFSfqqKbE0BUZg
   */
  ids?: string;
};

export type DeleteWebinarBrandingVBError = Fetcher.ErrorWrapper<undefined>;

export type DeleteWebinarBrandingVBVariables = {
  pathParams: DeleteWebinarBrandingVBPathParams;
  queryParams?: DeleteWebinarBrandingVBQueryParams;
} & FetcherExtraProps;

/**
 * Delete a webinar's session branding [virtual background](https://support.zoom.us/hc/en-us/articles/210707503-Virtual-Background).
 *
 *  **Prerequisites:**
 * * The **Webinar Session Branding** setting enabled.
 *
 * **[Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `webinar:write`,`webinar:write:admin`
 *
 * **[Granular Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `webinar:delete:branding_virtual_background`,`webinar:delete:branding_virtual_background:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
 */
export const deleteWebinarBrandingVB = (
  variables: DeleteWebinarBrandingVBVariables,
  signal?: AbortSignal,
) =>
  fetch<
    undefined,
    DeleteWebinarBrandingVBError,
    undefined,
    {},
    DeleteWebinarBrandingVBQueryParams,
    DeleteWebinarBrandingVBPathParams
  >({
    url: "/webinars/{webinarId}/branding/virtual_backgrounds",
    method: "delete",
    ...variables,
    signal,
  });

export type SetWebinarBrandingVBPathParams = {
  /**
   * The webinar's ID.
   *
   * @format int64
   * @example 99289110036
   */
  webinarId: number;
};

export type SetWebinarBrandingVBQueryParams = {
  /**
   * The virtual background file ID to update.
   *
   * @example zazQjwDuQkS3Q2EprNd7jQ
   */
  id?: string;
  /**
   * Whether to set the virtual background file as the new default for all panelists. This includes panelists not currently assigned a default virtual background.
   *
   * @example true
   */
  set_default_for_all_panelists?: boolean;
};

export type SetWebinarBrandingVBError = Fetcher.ErrorWrapper<undefined>;

export type SetWebinarBrandingVBVariables = {
  pathParams: SetWebinarBrandingVBPathParams;
  queryParams?: SetWebinarBrandingVBQueryParams;
} & FetcherExtraProps;

/**
 * Set a webinar's default session branding [virtual background](https://support.zoom.us/hc/en-us/articles/210707503-Virtual-Background).
 *
 *  **Prerequisites:**
 * * The **Webinar Session Branding** setting enabled.
 *
 * **[Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `webinar:write`,`webinar:write:admin`
 *
 * **[Granular Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `webinar:update:branding_virtual_background`,`webinar:update:branding_virtual_background:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
 */
export const setWebinarBrandingVB = (
  variables: SetWebinarBrandingVBVariables,
  signal?: AbortSignal,
) =>
  fetch<
    undefined,
    SetWebinarBrandingVBError,
    undefined,
    {},
    SetWebinarBrandingVBQueryParams,
    SetWebinarBrandingVBPathParams
  >({
    url: "/webinars/{webinarId}/branding/virtual_backgrounds",
    method: "patch",
    ...variables,
    signal,
  });

export type UploadWebinarBrandingWallpaperPathParams = {
  /**
   * The webinar's ID.
   *
   * @format int64
   * @example 99289110036
   */
  webinarId: number;
};

export type UploadWebinarBrandingWallpaperError =
  Fetcher.ErrorWrapper<undefined>;

export type UploadWebinarBrandingWallpaperResponse = {
  /**
   * The wallpaper file's ID.
   *
   * @example zazQjwDuQkS3Q2EprNd7jQ
   */
  id?: string;
  /**
   * The wallpaper file's name.
   *
   * @example logo.jpg
   */
  name?: string;
  /**
   * The wallpaper file's size, in bytes.
   *
   * @example 262144
   */
  size?: number;
  /**
   * The wallpaper file's file type.
   * * `image` - An image file.
   *
   * @example image
   */
  type?: "image";
};

export type UploadWebinarBrandingWallpaperRequestBody = {
  /**
   * The wallpaper's file path, in binary format.
   *
   * @format binary
   */
  file: Blob;
};

export type UploadWebinarBrandingWallpaperVariables = {
  body: UploadWebinarBrandingWallpaperRequestBody;
  pathParams: UploadWebinarBrandingWallpaperPathParams;
} & FetcherExtraProps;

/**
 * Upload a webinar's session branding wallpaper file. Webinar branding wallpaper files have these requirements:
 * * A webinar can only have one wallpaper file.
 * * You can only upload image files that are in JPG/JPEG, GIF, or PNG format.
 * * Image files must be 16:9 ratio. The recommended image size is 1920 x 1080 pixels.
 * * The wallpaper file size cannot exceed 15 megabytes.
 *
 *  **Prerequisites:**
 * *  The **Webinar Session Branding** setting enabled.
 *
 * **[Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `webinar:write`,`webinar:write:admin`
 *
 * **[Granular Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `webinar:write:branding_wallpaper`,`webinar:write:branding_wallpaper:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
 */
export const uploadWebinarBrandingWallpaper = (
  variables: UploadWebinarBrandingWallpaperVariables,
  signal?: AbortSignal,
) =>
  fetch<
    UploadWebinarBrandingWallpaperResponse,
    UploadWebinarBrandingWallpaperError,
    UploadWebinarBrandingWallpaperRequestBody,
    {},
    {},
    UploadWebinarBrandingWallpaperPathParams
  >({
    url: "/webinars/{webinarId}/branding/wallpaper",
    method: "post",
    ...variables,
    signal,
  });

export type DeleteWebinarBrandingWallpaperPathParams = {
  /**
   * The webinar's ID.
   *
   * @format int64
   * @example 99289110036
   */
  webinarId: number;
};

export type DeleteWebinarBrandingWallpaperError =
  Fetcher.ErrorWrapper<undefined>;

export type DeleteWebinarBrandingWallpaperVariables = {
  pathParams: DeleteWebinarBrandingWallpaperPathParams;
} & FetcherExtraProps;

/**
 * Delete a webinar's session branding wallpaper file.
 *
 *  **Prerequisites:**
 * * The **Webinar Session Branding** setting enabled.
 *
 * **[Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `webinar:write`,`webinar:write:admin`
 *
 * **[Granular Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `webinar:delete:branding_wallpaper`,`webinar:delete:branding_wallpaper:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
 */
export const deleteWebinarBrandingWallpaper = (
  variables: DeleteWebinarBrandingWallpaperVariables,
  signal?: AbortSignal,
) =>
  fetch<
    undefined,
    DeleteWebinarBrandingWallpaperError,
    undefined,
    {},
    {},
    DeleteWebinarBrandingWallpaperPathParams
  >({
    url: "/webinars/{webinarId}/branding/wallpaper",
    method: "delete",
    ...variables,
    signal,
  });

export type WebinarInviteLinksCreatePathParams = {
  /**
   * The webinar's ID.
   *
   * @format int64
   * @example 99289110036
   */
  webinarId: number;
};

export type WebinarInviteLinksCreateError = Fetcher.ErrorWrapper<undefined>;

export type WebinarInviteLinksCreateResponse = {
  /**
   * The attendee list.
   *
   * @maxItems 500
   * @minItems 1
   */
  attendees?: {
    /**
     * The URL to join the meeting.
     *
     * @example https://example.com/j/11111
     */
    join_url?: string;
    /**
     * The user's display name.
     *
     * @example Jill Chill
     */
    name?: string;
  }[];
};

export type WebinarInviteLinksCreateRequestBody = {
  /**
   * The attendees list.
   *
   * @maxItems 500
   * @minItems 1
   */
  attendees?: {
    /**
     * User display name.
     *
     * @maxLength 64
     * @example Jill Chill
     */
    name: string;
    /**
     * Whether to disable participant video when joining the meeting. If not provided or set to `false`, the participant video will follow the meeting's default settings.
     *
     * @example false
     * @default false
     */
    disable_video?: boolean;
    /**
     * Whether to disable participant audio when joining the meeting. If not provided or set to `false`, the participant audio will follow the meeting's default settings.
     *
     * @example false
     * @default false
     */
    disable_audio?: boolean;
  }[];
  /**
   * The invite link's expiration time, in seconds.
   *
   * This value defaults to `7200`.
   *
   * @maximum 7776000
   * @minimum 0
   * @format int64
   * @example 1000
   * @default 7200
   */
  ttl?: number;
};

export type WebinarInviteLinksCreateVariables = {
  body?: WebinarInviteLinksCreateRequestBody;
  pathParams: WebinarInviteLinksCreatePathParams;
} & FetcherExtraProps;

/**
 * Create a batch of invitation links for a webinar.
 *
 * **Prerequisites:**
 *
 * * Business, Education or API Plan with the Webinar add-on.
 *
 * **[Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `webinar:write:admin`,`webinar:write`
 *
 * **[Granular Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `webinar:write:invite_links`,`webinar:write:invite_links:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
 */
export const webinarInviteLinksCreate = (
  variables: WebinarInviteLinksCreateVariables,
  signal?: AbortSignal,
) =>
  fetch<
    WebinarInviteLinksCreateResponse,
    WebinarInviteLinksCreateError,
    WebinarInviteLinksCreateRequestBody,
    {},
    {},
    WebinarInviteLinksCreatePathParams
  >({
    url: "/webinars/{webinarId}/invite_links",
    method: "post",
    ...variables,
    signal,
  });

export type WebinarLiveStreamingJoinTokenPathParams = {
  /**
   * The webinar's ID.
   *
   * @format int64
   * @example 99289110036
   */
  webinarId: number;
};

export type WebinarLiveStreamingJoinTokenError =
  Fetcher.ErrorWrapper<undefined>;

export type WebinarLiveStreamingJoinTokenResponse = {
  /**
   * The number of seconds the join token is valid for before it expires. This value always returns `120`.
   *
   * @format int64
   * @example 120
   */
  expire_in?: 120;
  /**
   * The join token.
   *
   * @example 2njt50mj
   */
  token?: string;
};

export type WebinarLiveStreamingJoinTokenVariables = {
  pathParams: WebinarLiveStreamingJoinTokenPathParams;
} & FetcherExtraProps;

/**
 * Retrieve a webinar's archive token to allow live streaming. The join token lets a recording bot implemented using Zoom meeting SDK connect to a Zoom meeting **hosted by the issuer of the token**, and can call the streaming method automatically. It supports both regular live streaming and raw streaming.
 *
 *  **Prerequisites:**
 * * A Pro or higher plan with a Webinar add-on.
 * * The **Allow livestreaming of webinars** user setting enabled in the Zoom web portal.
 *
 * **[Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `webinar_token:read:admin:live_streaming`,`webinar_token:read:live_streaming`
 *
 * **[Granular Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `webinar:read:live_streaming_token`,`webinar:read:live_streaming_token:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
 */
export const webinarLiveStreamingJoinToken = (
  variables: WebinarLiveStreamingJoinTokenVariables,
  signal?: AbortSignal,
) =>
  fetch<
    WebinarLiveStreamingJoinTokenResponse,
    WebinarLiveStreamingJoinTokenError,
    undefined,
    {},
    {},
    WebinarLiveStreamingJoinTokenPathParams
  >({
    url: "/webinars/{webinarId}/jointoken/live_streaming",
    method: "get",
    ...variables,
    signal,
  });

export type WebinarLocalArchivingArchiveTokenPathParams = {
  /**
   * The webinar's ID.
   *
   * @format int64
   * @example 99289110036
   */
  webinarId: number;
};

export type WebinarLocalArchivingArchiveTokenError =
  Fetcher.ErrorWrapper<undefined>;

export type WebinarLocalArchivingArchiveTokenResponse = {
  /**
   * The number of seconds the archive token is valid for before it expires. This value always returns `120`.
   *
   * @format int64
   * @example 120
   */
  expire_in?: 120;
  /**
   * The archive token.
   *
   * @example 2njt50mj
   */
  token?: string;
};

export type WebinarLocalArchivingArchiveTokenVariables = {
  pathParams: WebinarLocalArchivingArchiveTokenPathParams;
} & FetcherExtraProps;

/**
 * Use this API to get a webinar's archive token to allow local archiving. The archive token allows a meeting SDK app or bot to get archive permission to access the webinar's raw audio and video media stream in real-time.
 *
 *  **Prerequisites:**
 * * A Pro or higher plan with a Webinar Add-on.
 * * The **Archive meetings and webinars** account setting enabled in the Zoom web portal.
 *
 * **[Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `webinar_token:read:admin:local_archiving`
 *
 * **[Granular Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `webinar:read:local_archiving_token:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
 */
export const webinarLocalArchivingArchiveToken = (
  variables: WebinarLocalArchivingArchiveTokenVariables,
  signal?: AbortSignal,
) =>
  fetch<
    WebinarLocalArchivingArchiveTokenResponse,
    WebinarLocalArchivingArchiveTokenError,
    undefined,
    {},
    {},
    WebinarLocalArchivingArchiveTokenPathParams
  >({
    url: "/webinars/{webinarId}/jointoken/local_archiving",
    method: "get",
    ...variables,
    signal,
  });

export type WebinarLocalRecordingJoinTokenPathParams = {
  /**
   * The webinar's ID.
   *
   * @format int64
   * @example 99289110036
   */
  webinarId: number;
};

export type WebinarLocalRecordingJoinTokenError =
  Fetcher.ErrorWrapper<undefined>;

export type WebinarLocalRecordingJoinTokenResponse = {
  /**
   * The number of seconds the join token is valid for before it expires. This value always returns `120`.
   *
   * @format int64
   * @example 120
   */
  expire_in?: 120;
  /**
   * The join token.
   *
   * @example 2njt50mj
   */
  token?: string;
};

export type WebinarLocalRecordingJoinTokenVariables = {
  pathParams: WebinarLocalRecordingJoinTokenPathParams;
} & FetcherExtraProps;

/**
 * Retrieve a webinar's join token to allow for local recording. The join token lets a recording bot implemented using Zoom Meeting SDK connect to a Zoom webinar. The recording bot can then automatically start locally recording. This supports both regular and raw local recording.
 *
 *  **Prerequisites:**
 * * A Pro or higher plan with a Webinar add-on.
 * * The **Local recording** user setting enabled in the Zoom web portal.
 *
 * **[Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `webinar_token:read:admin:local_recording`,`webinar_token:read:local_recording`
 *
 * **[Granular Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `webinar:read:local_recording_token`,`webinar:read:local_recording_token:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
 */
export const webinarLocalRecordingJoinToken = (
  variables: WebinarLocalRecordingJoinTokenVariables,
  signal?: AbortSignal,
) =>
  fetch<
    WebinarLocalRecordingJoinTokenResponse,
    WebinarLocalRecordingJoinTokenError,
    undefined,
    {},
    {},
    WebinarLocalRecordingJoinTokenPathParams
  >({
    url: "/webinars/{webinarId}/jointoken/local_recording",
    method: "get",
    ...variables,
    signal,
  });

export type GetWebinarLiveStreamDetailsPathParams = {
  /**
   * The webinar's unique ID.
   *
   * @example 95204914252
   */
  webinarId: string;
};

export type GetWebinarLiveStreamDetailsError = Fetcher.ErrorWrapper<undefined>;

export type GetWebinarLiveStreamDetailsResponse = {
  /**
   * Live streaming page URL. This is the URL using which anyone can view the live stream of the webinar.
   *
   * @example https://example.com/livestream/123
   */
  page_url?: string;
  /**
   * Stream key.
   *
   * @example contact-it@example.com
   */
  stream_key?: string;
  /**
   * Stream URL.
   *
   * @example https://example.com/livestream
   */
  stream_url?: string;
  /**
   * The number of pixels in each dimension that the video camera can display.
   *
   * @example 720p
   */
  resolution?: string;
};

export type GetWebinarLiveStreamDetailsVariables = {
  pathParams: GetWebinarLiveStreamDetailsPathParams;
} & FetcherExtraProps;

/**
 * Get a webinar's live stream configuration details, such as Stream URL, Stream Key and Page URL.
 *
 * Zoom allows users to [live stream a webinar](https://support.zoom.us/hc/en-us/articles/115001777826-Live-Streaming-Meetings-or-Webinars-Using-a-Custom-Service) to a custom platform.
 *
 *
 * **Prerequisites:**
 *
 * * Pro or higher plan with the webinar add-on.
 *
 * * Live streaming details must have been [configured](https://support.zoom.us/hc/en-us/articles/115001777826-Live-Streaming-Meetings-or-Webinars-Using-a-Custom-Service#h_01589a6f-a40a-4e18-a448-cb746e52ebc5) for the webinar.
 *
 *
 *
 *
 * **[Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `webinar:read:admin`,`webinar:read`
 *
 * **[Granular Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `webinar:read:livestream`,`webinar:read:livestream:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
 */
export const getWebinarLiveStreamDetails = (
  variables: GetWebinarLiveStreamDetailsVariables,
  signal?: AbortSignal,
) =>
  fetch<
    GetWebinarLiveStreamDetailsResponse,
    GetWebinarLiveStreamDetailsError,
    undefined,
    {},
    {},
    GetWebinarLiveStreamDetailsPathParams
  >({
    url: "/webinars/{webinarId}/livestream",
    method: "get",
    ...variables,
    signal,
  });

export type WebinarLiveStreamUpdatePathParams = {
  /**
   * The webinar's ID.
   *
   * @format int64
   * @example 99289110036
   */
  webinarId: number;
};

export type WebinarLiveStreamUpdateError = Fetcher.ErrorWrapper<undefined>;

export type WebinarLiveStreamUpdateRequestBody = {
  /**
   * The webinar live stream page's URL.
   *
   * @maxLength 1024
   * @format uri
   * @example https://example.com/livestream/123
   */
  page_url: string;
  /**
   * The webinar live stream name and key.
   *
   * @maxLength 512
   * @example contact-it@example.com
   */
  stream_key: string;
  /**
   * The webinar live stream URL.
   *
   * @maxLength 1024
   * @example https://example.com/livestream
   */
  stream_url: string;
  /**
   * The number of pixels in each dimension that the video camera can display, required when a user enables 1080p. Use a value of `720p` or `1080p`
   *
   * @example 720p
   */
  resolution?: string;
};

export type WebinarLiveStreamUpdateVariables = {
  body: WebinarLiveStreamUpdateRequestBody;
  pathParams: WebinarLiveStreamUpdatePathParams;
} & FetcherExtraProps;

/**
 * Update a webinar's live stream information.
 *
 *
 * **Prerequisites:**
 *
 * * Pro or higher plan with the webinar add-on.
 *
 * * Live streaming details must be [configured](https://support.zoom.us/hc/en-us/articles/115001777826-Live-Streaming-Meetings-or-Webinars-Using-a-Custom-Service#h_01589a6f-a40a-4e18-a448-cb746e52ebc5) for the webinar.
 *
 *
 *
 *
 * **[Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `webinar:write:admin`,`webinar:write`
 *
 * **[Granular Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `webinar:update:livestream`,`webinar:update:livestream:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
 */
export const webinarLiveStreamUpdate = (
  variables: WebinarLiveStreamUpdateVariables,
  signal?: AbortSignal,
) =>
  fetch<
    undefined,
    WebinarLiveStreamUpdateError,
    WebinarLiveStreamUpdateRequestBody,
    {},
    {},
    WebinarLiveStreamUpdatePathParams
  >({
    url: "/webinars/{webinarId}/livestream",
    method: "patch",
    ...variables,
    signal,
  });

export type WebinarLiveStreamStatusUpdatePathParams = {
  /**
   * The webinar's ID.
   *
   * @format int64
   * @example 99289110036
   */
  webinarId: number;
};

export type WebinarLiveStreamStatusUpdateError =
  Fetcher.ErrorWrapper<undefined>;

export type WebinarLiveStreamStatusUpdateRequestBody = {
  /**
   * Update the live stream's status.
   *
   * * `start` - Start a webinar live stream.
   *
   * * `stop`- Stop an ongoing webinar live stream.
   *
   * @example start
   */
  action?: "start" | "stop";
  /**
   * Update the live stream session's settings.  **Only** settings for a stopped live stream can be updated.
   */
  settings?: {
    /**
     * Display the name of the active speaker during a live stream.
     *
     * @example true
     */
    active_speaker_name?: boolean;
    /**
     * Display the live stream's name.
     *
     * @maxLength 50
     * @minLength 1
     * @example Jill Chill
     */
    display_name?: string;
  };
};

export type WebinarLiveStreamStatusUpdateVariables = {
  body?: WebinarLiveStreamStatusUpdateRequestBody;
  pathParams: WebinarLiveStreamStatusUpdatePathParams;
} & FetcherExtraProps;

/**
 * Let users [live stream a webinar](https://support.zoom.us/hc/en-us/articles/115001777826-Live-Streaming-Meetings-or-Webinars-Using-a-Custom-Service) to a custom platform. Update the status of a webinar's live stream.
 *
 *
 * **Prerequisites:**
 *
 * * Pro or higher plan with a Webinar Add-on.
 *
 * * Live streaming details must be [configured](https://support.zoom.us/hc/en-us/articles/115001777826-Live-Streaming-Meetings-or-Webinars-Using-a-Custom-Service#h_01589a6f-a40a-4e18-a448-cb746e52ebc5) for the webinar.
 *
 *
 *
 *
 * **[Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `webinar:write:admin`,`webinar:write`
 *
 * **[Granular Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `webinar:update:livestream_status`,`webinar:update:livestream_status:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
 */
export const webinarLiveStreamStatusUpdate = (
  variables: WebinarLiveStreamStatusUpdateVariables,
  signal?: AbortSignal,
) =>
  fetch<
    undefined,
    WebinarLiveStreamStatusUpdateError,
    WebinarLiveStreamStatusUpdateRequestBody,
    {},
    {},
    WebinarLiveStreamStatusUpdatePathParams
  >({
    url: "/webinars/{webinarId}/livestream/status",
    method: "patch",
    ...variables,
    signal,
  });

export type WebinarPanelistsPathParams = {
  /**
   * The webinar's ID.
   *
   * @format int64
   * @example 99289110036
   */
  webinarId: number;
};

export type WebinarPanelistsError = Fetcher.ErrorWrapper<undefined>;

export type WebinarPanelistsResponse = {
  /**
   * List of panelist objects.
   */
  panelists?: {
    /**
     * Panelist's ID.
     *
     * @example Tg2b6GhcQKKbV7nSCbDKug
     */
    id?: string;
    /**
     * Panelist's email. See [Email address display rules](https://developers.zoom.us/docs/api/rest/using-zoom-apis/#email-address-display-rules) for return value details.
     *
     * @format email
     * @example jchill@example.com
     */
    email?: string;
    /**
     * The panelist's full name.
     *
     * **Note** This value cannot exceed more than 12 Chinese characters.
     *
     * @example Jill Chill
     */
    name?: string;
    /**
     * Join URL.
     *
     * @example https://example.com/j/11111
     */
    join_url?: string;
    /**
     * The virtual background's ID.
     *
     * @example xHhPyb8ERMCmiC5njPjFdQ
     */
    virtual_background_id?: string;
    /**
     * The name tag ID to bind.
     *
     * @example xHhPyb8ERMCmiC5njPjFdQ
     */
    name_tag_id?: string;
    /**
     * The panelist's name to display in the name tag.
     *
     * @example name
     */
    name_tag_name?: string;
    /**
     * The pronouns to display in the name tag.
     *
     * @example pronouns
     */
    name_tag_pronouns?: string;
    /**
     * The description for the name tag, such as the person's title.
     *
     * @example description
     */
    name_tag_description?: string;
  }[];
  /**
   * Total records.
   *
   * @example 1
   */
  total_records?: number;
};

export type WebinarPanelistsVariables = {
  pathParams: WebinarPanelistsPathParams;
} & FetcherExtraProps;

/**
 * List all of a webinar's panelists.
 *
 * Webinar panelists can view and send video, screen share, annotate, and do much more compared to webinar attendees.
 *
 *
 * **Prerequisites:**
 *
 * * Pro or a higher plan with [Webinar Add-on](https://zoom.us/webinar).
 *
 *
 * **[Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `webinar:read:admin`,`webinar:read`
 *
 * **[Granular Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `webinar:read:list_panelists`,`webinar:read:list_panelists:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
 */
export const webinarPanelists = (
  variables: WebinarPanelistsVariables,
  signal?: AbortSignal,
) =>
  fetch<
    WebinarPanelistsResponse,
    WebinarPanelistsError,
    undefined,
    {},
    {},
    WebinarPanelistsPathParams
  >({
    url: "/webinars/{webinarId}/panelists",
    method: "get",
    ...variables,
    signal,
  });

export type WebinarPanelistCreatePathParams = {
  /**
   * The webinar's ID.
   *
   * @format int64
   * @example 99289110036
   */
  webinarId: number;
};

export type WebinarPanelistCreateError = Fetcher.ErrorWrapper<undefined>;

export type WebinarPanelistCreateResponse = {
  /**
   * Webinar ID.
   *
   * @example 95204914252
   */
  id?: string;
  /**
   * The time when the panelist was added.
   *
   * @format date-time
   * @example 2022-03-26T07:30:16Z
   */
  updated_at?: string;
};

export type WebinarPanelistCreateRequestBody = {
  /**
   * List of panelist objects.
   *
   * @maximum 30
   */
  panelists?: {
    /**
     * Panelist's email. See the [email address display rules](https://developers.zoom.us/docs/api/rest/using-zoom-apis/#email-address-display-rules) for return value details.
     *
     * @format email
     * @example jchill@example.com
     */
    email?: string;
    /**
     * The panelist's full name.
     *
     * **Note:** This value cannot exceed more than 12 Chinese characters.
     *
     * @example Jill Chill
     */
    name?: string;
    /**
     * The virtual background ID to bind.
     *
     * @example xHhPyb8ERMCmiC5njPjFdQ
     */
    virtual_background_id?: string;
    /**
     * The name tag ID to bind.
     *
     * @example xHhPyb8ERMCmiC5njPjFdQ
     */
    name_tag_id?: string;
    /**
     * The panelist's name to display in the name tag.
     *
     * @example xHhPyb8ERMCmiC5njPjFdQ
     */
    name_tag_name?: string;
    /**
     * The pronouns to display in the name tag.
     *
     * @example pronouns
     */
    name_tag_pronouns?: string;
    /**
     * The description for the name tag, such the person's title.
     *
     * @example description
     */
    name_tag_description?: string;
  }[];
};

export type WebinarPanelistCreateVariables = {
  body?: WebinarPanelistCreateRequestBody;
  pathParams: WebinarPanelistCreatePathParams;
} & FetcherExtraProps;

/**
 * Panelists in a webinar can view and send video, screen share, annotate, and do much more compared to attendees in a webinar.
 *  [Add panelists](https://support.zoom.us/hc/en-us/articles/115005657826-Inviting-Panelists-to-a-Webinar#h_7550d59e-23f5-4703-9e22-e76bded1ed70) to a scheduled webinar.
 *
 *
 * **Prerequisites:**
 * * Pro or a higher plan with the [Webinar Add-on](https://zoom.us/webinar).
 *
 *
 * **[Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `webinar:write:admin`,`webinar:write`
 *
 * **[Granular Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `webinar:write:panelist`,`webinar:write:panelist:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
 */
export const webinarPanelistCreate = (
  variables: WebinarPanelistCreateVariables,
  signal?: AbortSignal,
) =>
  fetch<
    WebinarPanelistCreateResponse,
    WebinarPanelistCreateError,
    WebinarPanelistCreateRequestBody,
    {},
    {},
    WebinarPanelistCreatePathParams
  >({
    url: "/webinars/{webinarId}/panelists",
    method: "post",
    ...variables,
    signal,
  });

export type WebinarPanelistsDeletePathParams = {
  /**
   * The webinar's ID.
   *
   * @format int64
   * @example 99289110036
   */
  webinarId: number;
};

export type WebinarPanelistsDeleteError = Fetcher.ErrorWrapper<undefined>;

export type WebinarPanelistsDeleteVariables = {
  pathParams: WebinarPanelistsDeletePathParams;
} & FetcherExtraProps;

/**
 * Remove all the panelists from a webinar.
 *
 * **Prerequisites:**
 *
 * * Pro or a higher plan with the [webinar add-on](https://zoom.us/webinar).
 *
 *
 * **[Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `webinar:write:admin`,`webinar:write`
 *
 * **[Granular Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `webinar:delete:panelist`,`webinar:delete:panelist:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
 */
export const webinarPanelistsDelete = (
  variables: WebinarPanelistsDeleteVariables,
  signal?: AbortSignal,
) =>
  fetch<
    undefined,
    WebinarPanelistsDeleteError,
    undefined,
    {},
    {},
    WebinarPanelistsDeletePathParams
  >({
    url: "/webinars/{webinarId}/panelists",
    method: "delete",
    ...variables,
    signal,
  });

export type WebinarPanelistDeletePathParams = {
  /**
   * The webinar's ID.
   *
   * @format int64
   * @example 99289110036
   */
  webinarId: number;
  /**
   * The panelist's ID or email.
   *
   * @example Tg2b6GhcQKKbV7nSCbDKug
   */
  panelistId: string;
};

export type WebinarPanelistDeleteError = Fetcher.ErrorWrapper<undefined>;

export type WebinarPanelistDeleteVariables = {
  pathParams: WebinarPanelistDeletePathParams;
} & FetcherExtraProps;

/**
 * [Remove](https://support.zoom.us/hc/en-us/articles/115005657826-Inviting-Panelists-to-a-Webinar#h_de31f237-a91c-4fb2-912b-ecfba8ec5ffb) a single panelist from a webinar.
 *   Retrieve the `panelistId` by calling **List Panelists API**.
 *
 *
 * **Prerequisites:**
 *
 * * Pro or a higher plan with the [webinar add-on](https://zoom.us/webinar).
 *
 *
 * **[Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `webinar:write:admin`,`webinar:write`
 *
 * **[Granular Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `webinar:delete:panelist`,`webinar:delete:panelist:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
 */
export const webinarPanelistDelete = (
  variables: WebinarPanelistDeleteVariables,
  signal?: AbortSignal,
) =>
  fetch<
    undefined,
    WebinarPanelistDeleteError,
    undefined,
    {},
    {},
    WebinarPanelistDeletePathParams
  >({
    url: "/webinars/{webinarId}/panelists/{panelistId}",
    method: "delete",
    ...variables,
    signal,
  });

export type WebinarPollsPathParams = {
  /**
   * The webinar's ID.
   *
   * @format int64
   * @example 99289110036
   */
  webinarId: number;
};

export type WebinarPollsQueryParams = {
  /**
   * Whether to query for polls with the **Anonymous** option enabled:
   * * `true` &mdash; Query for polls with the **Anonymous** option enabled.
   * * `false` &mdash; Do not query for polls with the **Anonymous** option enabled.
   *
   * @example true
   */
  anonymous?: boolean;
};

export type WebinarPollsError = Fetcher.ErrorWrapper<undefined>;

export type WebinarPollsResponse = {
  /**
   * An array of polls.
   */
  polls?: {
    /**
     * The poll ID.
     *
     * @example QalIoKWLTJehBJ8e1xRrbQ
     */
    id?: string;
    /**
     * The status of the webinar poll:
     * `notstart` - Poll not started
     * `started` - Poll started
     * `ended` - Poll ended
     * `sharing` - Sharing poll results
     * `deactivated` - Poll deactivated
     *
     * @example notstart
     */
    status?: "notstart" | "started" | "ended" | "sharing" | "deactivated";
    /**
     * Whether meeting participants answer poll questions anonymously.
     *
     * This value defaults to `false`.
     *
     * @example true
     * @default false
     */
    anonymous?: boolean;
    /**
     * The type of poll:
     * * `1` &mdash; Poll.
     * * `2` &mdash; Advanced Poll. This feature must be enabled in your Zoom account.
     * * `3` &mdash; Quiz. This feature must be enabled in your Zoom account.
     *
     *  This value defaults to `1`.
     *
     * @example 2
     */
    poll_type?: 1 | 2 | 3;
    /**
     * The information about the poll's questions.
     */
    questions?: {
      /**
       * The allowed maximum number of characters. This field only applies to `short_answer` and `long_answer` polls:
       * * For `short_answer` polls, a maximum of 500 characters.
       * * For `long_answer` polls, a maximum of 2,000 characters.
       *
       * @example 200
       */
      answer_max_character?: number;
      /**
       * The allowed minimum number of characters. This field only applies to `short_answer` and `long_answer` polls. You must provide at least a **one** character minimum value.
       *
       * @minimum 1
       * @example 1
       */
      answer_min_character?: number;
      /**
       * Whether participants must answer the question:
       * * `true` &mdash; The participant must answer the question.
       * * `false` &mdash; The participant does not need to answer the question.
       *
       * **Note:**
       * * When the poll's `type` value is `1` (Poll), this value defaults to `true`.
       * * When the poll's `type` value is the `2` (Advanced Poll) or `3` (Quiz) values, this value defaults to `false`.
       *
       * @example false
       * @default false
       */
      answer_required?: boolean;
      /**
       * The poll question's available answers. This field requires a **minimum** of two answers.
       *
       * * For `single` and `multiple` polls, you can only provide a maximum of 10 answers.
       * * For `matching` polls, you can only provide a maximum of 16 answers.
       * * For `rank_order` polls, you can only provide a maximum of seven answers.
       *
       * @minItems 2
       */
      answers?: string[];
      /**
       * Whether the correct answer is case sensitive. This field only applies to `fill_in_the_blank` polls:
       * * `true` &mdash; The answer is case-sensitive.
       * * `false` &mdash; The answer is not case-sensitive.
       *
       * This value defaults to `false`.
       *
       * @example false
       * @default false
       */
      case_sensitive?: boolean;
      /**
       * The poll question, up to 1024 characters.
       *
       * For `fill_in_the_blank` polls, this field is the poll's question. For each value that the user must fill in, ensure that there are the same number of `right_answers` values.
       *
       * @maxLength 1024
       * @example How useful was this meeting?
       */
      name?: string;
      /**
       * The information about the prompt questions. This field only applies to `matching` and `rank_order` polls. You **must** provide a minimum of two prompts, up to a maximum of 10 prompts.
       */
      prompts?: {
        /**
         * The question prompt's title.
         *
         * @example How are you?
         */
        prompt_question?: string;
        /**
         * The question prompt's correct answers:
         * * For `matching` polls, you must provide a minimum of two correct answers, up to a maximum of 10 correct answers.
         * * For `rank_order` polls, you can only provide one correct answer.
         */
        prompt_right_answers?: string[];
      }[];
      /**
       * The high score label for the `rating_max_value` field.
       *
       * This field only applies to the `rating_scale` poll.
       *
       * @example Extremely Likely
       */
      rating_max_label?: string;
      /**
       * The rating scale's maximum value, up to a maximum value of 10.
       *
       * This field only applies to the `rating_scale` poll.
       *
       * @maximum 10
       * @example 4
       */
      rating_max_value?: number;
      /**
       * The low score label for the `rating_min_value` field.
       *
       * This field only applies to the `rating_scale` poll.
       *
       * @example Not likely
       */
      rating_min_label?: string;
      /**
       * The rating scale's minimum value. This value cannot be less than zero.
       *
       * This field only applies to the `rating_scale` poll.
       *
       * @minimum 0
       * @example 0
       */
      rating_min_value?: number;
      /**
       * The poll question's correct answer(s). This field is **required** if the poll's `type` value is `3` (Quiz).
       *
       *  For `single` and `matching` polls, this field only accepts one answer.
       *
       * @minItems 1
       */
      right_answers?: string[];
      /**
       * Whether to display the radio selection as a drop-down box:
       * * `true` &mdash; Show as a drop-down box.
       * * `false` &mdash; Do not show as a drop-down box.
       *
       * This value defaults to `false`.
       *
       * @example false
       * @default false
       */
      show_as_dropdown?: boolean;
      /**
       * The poll's question and answer type:
       * * `single` &mdash; Single choice.
       * * `multiple` &mdash; Multiple choice.
       * * `matching` &mdash; Matching.
       * * `rank_order` &mdash; Rank order.
       * * `short_answer` &mdash; Short answer.
       * * `long_answer` &mdash; Long answer.
       * * `fill_in_the_blank` &mdash; Fill in the blank.
       * * `rating_scale` &mdash; Rating scale.
       *
       * @example single
       */
      type?:
        | "single"
        | "multiple"
        | "matching"
        | "rank_order"
        | "short_answer"
        | "long_answer"
        | "fill_in_the_blank"
        | "rating_scale";
    }[];
    /**
     * The poll's title, up to 64 characters.
     *
     * @maxLength 64
     * @example Learn something new
     */
    title?: string;
  }[];
  /**
   * The number of all records available across pages.
   *
   * @example 1
   */
  total_records?: number;
};

export type WebinarPollsVariables = {
  pathParams: WebinarPollsPathParams;
  queryParams?: WebinarPollsQueryParams;
} & FetcherExtraProps;

/**
 * Lists all the [polls](https://support.zoom.us/hc/en-us/articles/203749865-Polling-for-Webinars) of a webinar.
 *
 * **Prerequisites**
 * * A Pro or higher plan with a [Webinar plan](https://zoom.us/webinar) add-on.
 *
 * **[Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `webinar:read:admin`,`webinar:read`
 *
 * **[Granular Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `webinar:read:list_polls`,`webinar:read:list_polls:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
 */
export const webinarPolls = (
  variables: WebinarPollsVariables,
  signal?: AbortSignal,
) =>
  fetch<
    WebinarPollsResponse,
    WebinarPollsError,
    undefined,
    {},
    WebinarPollsQueryParams,
    WebinarPollsPathParams
  >({
    url: "/webinars/{webinarId}/polls",
    method: "get",
    ...variables,
    signal,
  });

export type WebinarPollCreatePathParams = {
  /**
   * The webinar's ID.
   *
   * @format int64
   * @example 99289110036
   */
  webinarId: number;
};

export type WebinarPollCreateError = Fetcher.ErrorWrapper<undefined>;

export type WebinarPollCreateResponse = {
  /**
   * The webinar poll ID.
   *
   * @example QalIoKWLTJehBJ8e1xRrbQ
   */
  id?: string;
  /**
   * The status of the webinar poll:
   *  `notstart` - Poll not started
   *  `started` - Poll started
   *  `ended` - Poll ended
   *  `sharing` - Sharing poll results
   *
   * @example notstart
   */
  status?: "notstart" | "started" | "ended" | "sharing";
  /**
   * Whether meeting participants answer poll questions anonymously.
   *
   * This value defaults to `false`.
   *
   * @example true
   * @default false
   */
  anonymous?: boolean;
  /**
   * The type of poll.
   * * `1` - Poll.
   * * `2` - Advanced Poll. This feature must be enabled in your Zoom account.
   * * `3` - Quiz. This feature must be enabled in your Zoom account.
   *
   *  This value defaults to `1`.
   *
   * @example 2
   */
  poll_type?: 1 | 2 | 3;
  /**
   * The information about the poll's questions.
   */
  questions?: {
    /**
     * The allowed maximum number of characters. This field only applies to `short_answer` and `long_answer` polls:
     * * For `short_answer` polls, a maximum of 500 characters.
     * * For `long_answer` polls, a maximum of 2,000 characters.
     *
     * @example 200
     */
    answer_max_character?: number;
    /**
     * The allowed minimum number of characters. This field only applies to `short_answer` and `long_answer` polls. You must provide at least a **one** character minimum value.
     *
     * @minimum 1
     * @example 1
     */
    answer_min_character?: number;
    /**
     * Whether participants must answer the question.
     * * `true` - The participant must answer the question.
     * * `false` - The participant does not need to answer the question.
     *
     * **Note:**
     * * When the poll's `type` value is `1` (Poll), this value defaults to `true`.
     * * When the poll's `type` value is the `2` (Advanced Poll) or `3` (Quiz) values, this value defaults to `false`.
     *
     * @example false
     * @default false
     */
    answer_required?: boolean;
    /**
     * The poll question's available answers. This field requires a **minimum** of two answers.
     *
     * * For `single` and `multiple` polls, you can only provide a maximum of 10 answers.
     * * For `matching` polls, you can only provide a maximum of 16 answers.
     * * For `rank_order` polls, you can only provide a maximum of seven answers.
     *
     * @minItems 2
     */
    answers?: string[];
    /**
     * Whether the correct answer is case sensitive. This field only applies to `fill_in_the_blank` polls.
     * * `true` - The answer is case-sensitive.
     * * `false` - The answer is not case-sensitive.
     *
     * This value defaults to `false`.
     *
     * @example false
     * @default false
     */
    case_sensitive?: boolean;
    /**
     * The poll question, up to 1024 characters.
     *
     * For `fill_in_the_blank` polls, this field is the poll's question. For each value that the user must fill in, ensure that there are the same number of `right_answers` values.
     *
     * @maxLength 1024
     * @example How useful was this meeting?
     */
    name?: string;
    /**
     * The information about the prompt questions. This field only applies to `matching` and `rank_order` polls. You **must** provide a minimum of two prompts, up to a maximum of 10 prompts.
     */
    prompts?: {
      /**
       * The question prompt's title.
       *
       * @example How are you?
       */
      prompt_question?: string;
      /**
       * The question prompt's correct answers:
       * * For `matching` polls, you must provide a minimum of two correct answers, up to a maximum of 10 correct answers.
       * * For `rank_order` polls, you can only provide one correct answer.
       */
      prompt_right_answers?: string[];
    }[];
    /**
     * The high score label for the `rating_max_value` field.
     *
     * This field only applies to the `rating_scale` poll.
     *
     * @example Extremely Likely
     */
    rating_max_label?: string;
    /**
     * The rating scale's maximum value, up to a maximum value of 10.
     *
     * This field only applies to the `rating_scale` poll.
     *
     * @maximum 10
     * @example 4
     */
    rating_max_value?: number;
    /**
     * The low score label for the `rating_min_value` field.
     *
     * This field only applies to the `rating_scale` poll.
     *
     * @example Not likely
     */
    rating_min_label?: string;
    /**
     * The rating scale's minimum value. This value cannot be less than zero.
     *
     * This field only applies to the `rating_scale` poll.
     *
     * @minimum 0
     * @example 0
     */
    rating_min_value?: number;
    /**
     * The poll question's correct answer(s). This field is **required** if the poll's `type` value is `3` (Quiz).
     *
     *  For `single` and `matching` polls, this field only accepts one answer.
     *
     * @minItems 1
     */
    right_answers?: string[];
    /**
     * Whether to display the radio selection as a drop-down box.
     * * `true` - Show as a drop-down box.
     * * `false` - Do not show as a drop-down box.
     *
     * This value defaults to `false`.
     *
     * @example false
     * @default false
     */
    show_as_dropdown?: boolean;
    /**
     * The poll's question and answer type.
     * * `single` - Single choice.
     * * `multiple` - Multiple choice.
     * * `matching` - Matching.
     * * `rank_order` - Rank order.
     * * `short_answer` - Short answer.
     * * `long_answer` - Long answer.
     * * `fill_in_the_blank` - Fill in the blank.
     * * `rating_scale` - Rating scale.
     *
     * @example single
     */
    type?:
      | "single"
      | "multiple"
      | "matching"
      | "rank_order"
      | "short_answer"
      | "long_answer"
      | "fill_in_the_blank"
      | "rating_scale";
  }[];
  /**
   * The poll's title, up to 64 characters.
   *
   * @maxLength 64
   * @example Learn something new
   */
  title?: string;
};

export type WebinarPollCreateRequestBody = {
  /**
   * Whether meeting participants answer poll questions anonymously.
   *
   * This value defaults to `false`.
   *
   * @example true
   * @default false
   */
  anonymous?: boolean;
  /**
   * The type of poll.
   * * `1` - Poll.
   * * `2` - Advanced Poll. This feature must be enabled in your Zoom account.
   * * `3` - Quiz. This feature must be enabled in your Zoom account.
   *
   *  This value defaults to `1`.
   *
   * @example 2
   */
  poll_type?: 1 | 2 | 3;
  /**
   * The information about the poll's questions.
   */
  questions?: {
    /**
     * The allowed maximum number of characters. This field only applies to `short_answer` and `long_answer` polls:
     * * For `short_answer` polls, a maximum of 500 characters.
     * * For `long_answer` polls, a maximum of 2,000 characters.
     *
     * @example 200
     */
    answer_max_character?: number;
    /**
     * The allowed minimum number of characters. This field only applies to `short_answer` and `long_answer` polls. You must provide at least a **one** character minimum value.
     *
     * @minimum 1
     * @example 1
     */
    answer_min_character?: number;
    /**
     * Whether participants must answer the question.
     * * `true` - The participant must answer the question.
     * * `false` - The participant does not need to answer the question.
     *
     * **Note:**
     * * When the poll's `type` value is `1` (Poll), this value defaults to `true`.
     * * When the poll's `type` value is the `2` (Advanced Poll) or `3` (Quiz) values, this value defaults to `false`.
     *
     * @example false
     * @default false
     */
    answer_required?: boolean;
    /**
     * The poll question's available answers. This field requires a **minimum** of two answers.
     *
     * * For `single` and `multiple` polls, you can only provide a maximum of 10 answers.
     * * For `matching` polls, you can only provide a maximum of 16 answers.
     * * For `rank_order` polls, you can only provide a maximum of seven answers.
     *
     * @minItems 2
     */
    answers?: string[];
    /**
     * Whether the correct answer is case sensitive. This field only applies to `fill_in_the_blank` polls.
     * * `true` - The answer is case-sensitive.
     * * `false` - The answer is not case-sensitive.
     *
     * This value defaults to `false`.
     *
     * @example false
     * @default false
     */
    case_sensitive?: boolean;
    /**
     * The poll question, up to 1024 characters.
     *
     * For `fill_in_the_blank` polls, this field is the poll's question. For each value that the user must fill in, ensure that there are the same number of `right_answers` values.
     *
     * @maxLength 1024
     * @example How useful was this meeting?
     */
    name?: string;
    /**
     * The information about the prompt questions. This field only applies to `matching` and `rank_order` polls. You **must** provide a minimum of two prompts, up to a maximum of 10 prompts.
     */
    prompts?: {
      /**
       * The question prompt's title.
       *
       * @example How are you?
       */
      prompt_question?: string;
      /**
       * The question prompt's correct answers:
       * * For `matching` polls, you must provide a minimum of two correct answers, up to a maximum of 10 correct answers.
       * * For `rank_order` polls, you can only provide one correct answer.
       */
      prompt_right_answers?: string[];
    }[];
    /**
     * The high score label for the `rating_max_value` field.
     *
     * This field only applies to the `rating_scale` poll.
     *
     * @example Extremely Likely
     */
    rating_max_label?: string;
    /**
     * The rating scale's maximum value, up to a maximum value of 10.
     *
     * This field only applies to the `rating_scale` poll.
     *
     * @maximum 10
     * @example 4
     */
    rating_max_value?: number;
    /**
     * The low score label for the `rating_min_value` field.
     *
     * This field only applies to the `rating_scale` poll.
     *
     * @example Not likely
     */
    rating_min_label?: string;
    /**
     * The rating scale's minimum value. This value cannot be less than zero.
     *
     * This field only applies to the `rating_scale` poll.
     *
     * @minimum 0
     * @example 0
     */
    rating_min_value?: number;
    /**
     * The poll question's correct answer(s). This field is **required** if the poll's `type` value is `3` (Quiz).
     *
     *  For `single` and `matching` polls, this field only accepts one answer.
     *
     * @minItems 1
     */
    right_answers?: string[];
    /**
     * Whether to display the radio selection as a drop-down box.
     * * `true` - Show as a drop-down box.
     * * `false` - Do not show as a drop-down box.
     *
     * This value defaults to `false`.
     *
     * @example false
     * @default false
     */
    show_as_dropdown?: boolean;
    /**
     * The poll's question and answer type.
     * * `single` - Single choice.
     * * `multiple` - Multiple choice.
     * * `matching` - Matching.
     * * `rank_order` - Rank order.
     * * `short_answer` - Short answer.
     * * `long_answer` - Long answer.
     * * `fill_in_the_blank` - Fill in the blank.
     * * `rating_scale` - Rating scale.
     *
     * @example single
     */
    type?:
      | "single"
      | "multiple"
      | "matching"
      | "rank_order"
      | "short_answer"
      | "long_answer"
      | "fill_in_the_blank"
      | "rating_scale";
  }[];
  /**
   * The poll's title, up to 64 characters.
   *
   * @maxLength 64
   * @example Learn something new
   */
  title?: string;
};

export type WebinarPollCreateVariables = {
  body?: WebinarPollCreateRequestBody;
  pathParams: WebinarPollCreatePathParams;
} & FetcherExtraProps;

/**
 * Creates a [poll](https://support.zoom.us/hc/en-us/articles/203749865-Polling-for-Webinars) for a webinar.
 *
 * **Prerequisites**
 * * A Pro or higher plan with a [Webinar plan](https://zoom.us/webinar) add-on.
 *
 * **[Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `webinar:write:admin`,`webinar:write`
 *
 * **[Granular Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `webinar:write:poll`,`webinar:write:poll:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
 */
export const webinarPollCreate = (
  variables: WebinarPollCreateVariables,
  signal?: AbortSignal,
) =>
  fetch<
    WebinarPollCreateResponse,
    WebinarPollCreateError,
    WebinarPollCreateRequestBody,
    {},
    {},
    WebinarPollCreatePathParams
  >({
    url: "/webinars/{webinarId}/polls",
    method: "post",
    ...variables,
    signal,
  });

export type WebinarPollGetPathParams = {
  /**
   * The webinar's ID.
   *
   * @format int64
   * @example 99289110036
   */
  webinarId: number;
  /**
   * The poll ID.
   *
   * @example QalIoKWLTJehBJ8e1xRrbQ
   */
  pollId: string;
};

export type WebinarPollGetError = Fetcher.ErrorWrapper<undefined>;

export type WebinarPollGetResponse = {
  /**
   * The webinar poll ID.
   *
   * @example QalIoKWLTJehBJ8e1xRrbQ
   */
  id?: string;
  /**
   * The status of the webinar poll:
   * `notstart` - Poll not started
   * `started` - Poll started
   * `ended` - Poll ended
   * `sharing` - Sharing poll results
   * `deactivated` - Poll deactivated
   *
   * @example notstart
   */
  status?: "notstart" | "started" | "ended" | "sharing" | "deactivated";
  /**
   * Whether meeting participants answer poll questions anonymously.
   *
   * This value defaults to `false`.
   *
   * @example true
   * @default false
   */
  anonymous?: boolean;
  /**
   * The type of poll:
   * * `1` &mdash; Poll.
   * * `2` &mdash; Advanced Poll. This feature must be enabled in your Zoom account.
   * * `3` &mdash; Quiz. This feature must be enabled in your Zoom account.
   *
   *  This value defaults to `1`.
   *
   * @example 2
   */
  poll_type?: 1 | 2 | 3;
  /**
   * The information about the poll's questions.
   */
  questions?: {
    /**
     * The allowed maximum number of characters. This field only applies to `short_answer` and `long_answer` polls:
     * * For `short_answer` polls, a maximum of 500 characters.
     * * For `long_answer` polls, a maximum of 2,000 characters.
     *
     * @example 200
     */
    answer_max_character?: number;
    /**
     * The allowed minimum number of characters. This field only applies to `short_answer` and `long_answer` polls. You must provide at least a **one** character minimum value.
     *
     * @minimum 1
     * @example 1
     */
    answer_min_character?: number;
    /**
     * Whether participants must answer the question:
     * * `true` &mdash; The participant must answer the question.
     * * `false` &mdash; The participant does not need to answer the question.
     *
     * **Note:**
     * * When the poll's `type` value is `1` (Poll), this value defaults to `true`.
     * * When the poll's `type` value is the `2` (Advanced Poll) or `3` (Quiz) values, this value defaults to `false`.
     *
     * @example false
     * @default false
     */
    answer_required?: boolean;
    /**
     * The poll question's available answers. This field requires a **minimum** of two answers.
     *
     * * For `single` and `multiple` polls, you can only provide a maximum of 10 answers.
     * * For `matching` polls, you can only provide a maximum of 16 answers.
     * * For `rank_order` polls, you can only provide a maximum of seven answers.
     *
     * @minItems 2
     */
    answers?: string[];
    /**
     * Whether the correct answer is case sensitive. This field only applies to `fill_in_the_blank` polls:
     * * `true` &mdash; The answer is case-sensitive.
     * * `false` &mdash; The answer is not case-sensitive.
     *
     * This value defaults to `false`.
     *
     * @example false
     * @default false
     */
    case_sensitive?: boolean;
    /**
     * The poll question, up to 1024 characters.
     *
     * For `fill_in_the_blank` polls, this field is the poll's question. For each value that the user must fill in, ensure that there are the same number of `right_answers` values.
     *
     * @maxLength 1024
     * @example How useful was this meeting?
     */
    name?: string;
    /**
     * The information about the prompt questions. This field only applies to `matching` and `rank_order` polls. You **must** provide a minimum of two prompts, up to a maximum of 10 prompts.
     */
    prompts?: {
      /**
       * The question prompt's title.
       *
       * @example How are you?
       */
      prompt_question?: string;
      /**
       * The question prompt's correct answers:
       * * For `matching` polls, you must provide a minimum of two correct answers, up to a maximum of 10 correct answers.
       * * For `rank_order` polls, you can only provide one correct answer.
       */
      prompt_right_answers?: string[];
    }[];
    /**
     * The high score label for the `rating_max_value` field.
     *
     * This field only applies to the `rating_scale` poll.
     *
     * @example Extremely Likely
     */
    rating_max_label?: string;
    /**
     * The rating scale's maximum value, up to a maximum value of 10.
     *
     * This field only applies to the `rating_scale` poll.
     *
     * @maximum 10
     * @example 4
     */
    rating_max_value?: number;
    /**
     * The low score label for the `rating_min_value` field.
     *
     * This field only applies to the `rating_scale` poll.
     *
     * @example Not likely
     */
    rating_min_label?: string;
    /**
     * The rating scale's minimum value. This value cannot be less than zero.
     *
     * This field only applies to the `rating_scale` poll.
     *
     * @minimum 0
     * @example 0
     */
    rating_min_value?: number;
    /**
     * The poll question's correct answer(s). This field is **required** if the poll's `type` value is `3` (Quiz).
     *
     *  For `single` and `matching` polls, this field only accepts one answer.
     *
     * @minItems 1
     */
    right_answers?: string[];
    /**
     * Whether to display the radio selection as a drop-down box:
     * * `true` &mdash; Show as a drop-down box.
     * * `false` &mdash; Do not show as a drop-down box.
     *
     * This value defaults to `false`.
     *
     * @example false
     * @default false
     */
    show_as_dropdown?: boolean;
    /**
     * The poll's question and answer type:
     * * `single` &mdash; Single choice.
     * * `multiple` &mdash; Multiple choice.
     * * `matching` &mdash; Matching.
     * * `rank_order` &mdash; Rank order.
     * * `short_answer` &mdash; Short answer.
     * * `long_answer` &mdash; Long answer.
     * * `fill_in_the_blank` &mdash; Fill in the blank.
     * * `rating_scale` &mdash; Rating scale.
     *
     * @example single
     */
    type?:
      | "single"
      | "multiple"
      | "matching"
      | "rank_order"
      | "short_answer"
      | "long_answer"
      | "fill_in_the_blank"
      | "rating_scale";
  }[];
  /**
   * The poll's title, up to 64 characters.
   *
   * @maxLength 64
   * @example Learn something new
   */
  title?: string;
};

export type WebinarPollGetVariables = {
  pathParams: WebinarPollGetPathParams;
} & FetcherExtraProps;

/**
 * Returns a webinar's [poll](https://support.zoom.us/hc/en-us/articles/203749865-Polling-for-Webinars) details.
 *
 * **Prerequisites**
 * * A Pro or higher plan with a [Webinar plan](https://zoom.us/webinar) add-on.
 *
 * **[Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `webinar:read:admin`,`webinar:read`
 *
 * **[Granular Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `webinar:read:poll`,`webinar:read:poll:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
 */
export const webinarPollGet = (
  variables: WebinarPollGetVariables,
  signal?: AbortSignal,
) =>
  fetch<
    WebinarPollGetResponse,
    WebinarPollGetError,
    undefined,
    {},
    {},
    WebinarPollGetPathParams
  >({
    url: "/webinars/{webinarId}/polls/{pollId}",
    method: "get",
    ...variables,
    signal,
  });

export type WebinarPollUpdatePathParams = {
  /**
   * The webinar's ID.
   *
   * @format int64
   * @example 99289110036
   */
  webinarId: number;
  /**
   * The poll ID.
   *
   * @example QalIoKWLTJehBJ8e1xRrbQ
   */
  pollId: string;
};

export type WebinarPollUpdateError = Fetcher.ErrorWrapper<undefined>;

export type WebinarPollUpdateRequestBody = {
  /**
   * Whether meeting participants answer poll questions anonymously.
   *
   * This value defaults to `false`.
   *
   * @example true
   * @default false
   */
  anonymous?: boolean;
  /**
   * The type of poll:
   * * `1` &mdash; Poll.
   * * `2` &mdash; Advanced Poll. This feature must be enabled in your Zoom account.
   * * `3` &mdash; Quiz. This feature must be enabled in your Zoom account.
   *
   *  This value defaults to `1`.
   *
   * @example 2
   */
  poll_type?: 1 | 2 | 3;
  /**
   * The information about the poll's questions.
   */
  questions?: {
    /**
     * The allowed maximum number of characters. This field only applies to `short_answer` and `long_answer` polls:
     * * For `short_answer` polls, a maximum of 500 characters.
     * * For `long_answer` polls, a maximum of 2,000 characters.
     *
     * @example 200
     */
    answer_max_character?: number;
    /**
     * The allowed minimum number of characters. This field only applies to `short_answer` and `long_answer` polls. You must provide at least a **one** character minimum value.
     *
     * @minimum 1
     * @example 1
     */
    answer_min_character?: number;
    /**
     * Whether participants must answer the question:
     * * `true` &mdash; The participant must answer the question.
     * * `false` &mdash; The participant does not need to answer the question.
     *
     * **Note:**
     * * When the poll's `type` value is `1` (Poll), this value defaults to `true`.
     * * When the poll's `type` value is the `2` (Advanced Poll) or `3` (Quiz) values, this value defaults to `false`.
     *
     * @example false
     * @default false
     */
    answer_required?: boolean;
    /**
     * The poll question's available answers. This field requires a **minimum** of two answers.
     *
     * * For `single` and `multiple` polls, you can only provide a maximum of 10 answers.
     * * For `matching` polls, you can only provide a maximum of 16 answers.
     * * For `rank_order` polls, you can only provide a maximum of seven answers.
     *
     * @minItems 2
     */
    answers?: string[];
    /**
     * Whether the correct answer is case sensitive. This field only applies to `fill_in_the_blank` polls:
     * * `true` &mdash; The answer is case-sensitive.
     * * `false` &mdash; The answer is not case-sensitive.
     *
     * This value defaults to `false`.
     *
     * @example false
     * @default false
     */
    case_sensitive?: boolean;
    /**
     * The poll question, up to 1024 characters.
     *
     * For `fill_in_the_blank` polls, this field is the poll's question. For each value that the user must fill in, ensure that there are the same number of `right_answers` values.
     *
     * @maxLength 1024
     * @example How useful was this meeting?
     */
    name?: string;
    /**
     * The information about the prompt questions. This field only applies to `matching` and `rank_order` polls. You **must** provide a minimum of two prompts, up to a maximum of 10 prompts.
     */
    prompts?: {
      /**
       * The question prompt's title.
       *
       * @example How are you?
       */
      prompt_question?: string;
      /**
       * The question prompt's correct answers:
       * * For `matching` polls, you must provide a minimum of two correct answers, up to a maximum of 10 correct answers.
       * * For `rank_order` polls, you can only provide one correct answer.
       */
      prompt_right_answers?: string[];
    }[];
    /**
     * The high score label for the `rating_max_value` field.
     *
     * This field only applies to the `rating_scale` poll.
     *
     * @example Extremely Likely
     */
    rating_max_label?: string;
    /**
     * The rating scale's maximum value, up to a maximum value of 10.
     *
     * This field only applies to the `rating_scale` poll.
     *
     * @maximum 10
     * @example 4
     */
    rating_max_value?: number;
    /**
     * The low score label for the `rating_min_value` field.
     *
     * This field only applies to the `rating_scale` poll.
     *
     * @example Not likely
     */
    rating_min_label?: string;
    /**
     * The rating scale's minimum value. This value cannot be less than zero.
     *
     * This field only applies to the `rating_scale` poll.
     *
     * @minimum 0
     * @example 0
     */
    rating_min_value?: number;
    /**
     * The poll question's correct answer(s). This field is **required** if the poll's `type` value is `3` (Quiz).
     *
     *  For `single` and `matching` polls, this field only accepts one answer.
     *
     * @minItems 1
     */
    right_answers?: string[];
    /**
     * Whether to display the radio selection as a drop-down box:
     * * `true` &mdash; Show as a drop-down box.
     * * `false` &mdash; Do not show as a drop-down box.
     *
     * This value defaults to `false`.
     *
     * @example false
     * @default false
     */
    show_as_dropdown?: boolean;
    /**
     * The poll's question and answer type:
     * * `single` &mdash; Single choice.
     * * `multiple` &mdash; Multiple choice.
     * * `matching` &mdash; Matching.
     * * `rank_order` &mdash; Rank order.
     * * `short_answer` &mdash; Short answer.
     * * `long_answer` &mdash; Long answer.
     * * `fill_in_the_blank` &mdash; Fill in the blank.
     * * `rating_scale` &mdash; Rating scale.
     *
     * @example single
     */
    type?:
      | "single"
      | "multiple"
      | "matching"
      | "rank_order"
      | "short_answer"
      | "long_answer"
      | "fill_in_the_blank"
      | "rating_scale";
  }[];
  /**
   * The poll's title, up to 64 characters.
   *
   * @maxLength 64
   * @example Learn something new
   */
  title?: string;
};

export type WebinarPollUpdateVariables = {
  body?: WebinarPollUpdateRequestBody;
  pathParams: WebinarPollUpdatePathParams;
} & FetcherExtraProps;

/**
 * Updates a webinar's [poll](https://support.zoom.us/hc/en-us/articles/203749865-Polling-for-Webinars).
 *
 * **Prerequisites**
 * * A Pro or higher plan with a [Webinar plan](https://zoom.us/webinar) add-on.
 *
 * **[Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `webinar:write:admin`,`webinar:write`
 *
 * **[Granular Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `webinar:update:poll`,`webinar:update:poll:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
 */
export const webinarPollUpdate = (
  variables: WebinarPollUpdateVariables,
  signal?: AbortSignal,
) =>
  fetch<
    undefined,
    WebinarPollUpdateError,
    WebinarPollUpdateRequestBody,
    {},
    {},
    WebinarPollUpdatePathParams
  >({
    url: "/webinars/{webinarId}/polls/{pollId}",
    method: "put",
    ...variables,
    signal,
  });

export type WebinarPollDeletePathParams = {
  /**
   * The webinar's ID.
   *
   * @format int64
   * @example 99289110036
   */
  webinarId: number;
  /**
   * The poll ID
   *
   * @example QalIoKWLTJehBJ8e1xRrbQ
   */
  pollId: string;
};

export type WebinarPollDeleteError = Fetcher.ErrorWrapper<undefined>;

export type WebinarPollDeleteVariables = {
  pathParams: WebinarPollDeletePathParams;
} & FetcherExtraProps;

/**
 * Delete a webinar's [poll](https://support.zoom.us/hc/en-us/articles/203749865-Polling-for-Webinars).
 *
 * **Prerequisites**
 * * A Pro or higher plan with a [Webinar plan](https://zoom.us/webinar) add-on.
 *
 * **[Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `webinar:write:admin`,`webinar:write`
 *
 * **[Granular Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `webinar:delete:poll`,`webinar:delete:poll:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
 */
export const webinarPollDelete = (
  variables: WebinarPollDeleteVariables,
  signal?: AbortSignal,
) =>
  fetch<
    undefined,
    WebinarPollDeleteError,
    undefined,
    {},
    {},
    WebinarPollDeletePathParams
  >({
    url: "/webinars/{webinarId}/polls/{pollId}",
    method: "delete",
    ...variables,
    signal,
  });

export type WebinarRegistrantsPathParams = {
  /**
   * The webinar's ID.
   *
   * @format int64
   * @example 99289110036
   */
  webinarId: number;
};

export type WebinarRegistrantsQueryParams = {
  /**
   * The meeting or webinar occurrence ID.
   *
   * @example 1648194360000
   */
  occurrence_id?: string;
  /**
   * Query by the registrant's status.
   * * `pending` - The registration is pending.
   * * `approved` - The registrant is approved.
   * * `denied` - The registration is denied.
   *
   * @example pending
   * @default approved
   */
  status?: "pending" | "approved" | "denied";
  /**
   * The tracking source ID for the registrants. Useful if you share the webinar registration page in multiple locations. See [Creating source tracking links for webinar registration](https://support.zoom.us/hc/en-us/articles/360000315683-Creating-source-tracking-links-for-webinar-registration) for details.
   *
   * @example 5516482804110
   */
  tracking_source_id?: string;
  /**
   * The number of records returned within a single API call.
   *
   * @maximum 300
   * @example 30
   * @default 30
   */
  page_size?: number;
  /**
   * **Deprecated** This field will be deprecated. We will no longer support this field in a future release. Instead, use the `next_page_token` for pagination.
   *
   * @example 1
   * @default 1
   */
  page_number?: number;
  /**
   * Use the next page token to paginate through large result sets. A next page token is returned whenever the set of available results exceeds the current page size. This token's expiration period is 15 minutes.
   *
   * @example IAfJX3jsOLW7w3dokmFl84zOa0MAVGyMEB2
   */
  next_page_token?: string;
};

export type WebinarRegistrantsError = Fetcher.ErrorWrapper<undefined>;

export type WebinarRegistrantsResponse = {
  /**
   * Use the next page token to paginate through large result sets. A next page token is returned whenever the set of available results exceeds the current page size. This token's expiration period is 15 minutes.
   *
   * @example w7587w4eiyfsudgf
   */
  next_page_token?: string;
  /**
   * The number of pages returned for the request made.
   *
   * @example 1
   */
  page_count?: number;
  /**
   * **Deprecated** This field will be deprecated. We will no longer support this field in a future release. Instead, use `next_page_token` for pagination.
   *
   * @example 1
   * @deprecated true
   * @default 1
   */
  page_number?: number;
  /**
   * The number of records returned with a single API call.
   *
   * @maximum 300
   * @example 30
   * @default 30
   */
  page_size?: number;
  /**
   * The total number of all the records available across pages.
   *
   * @example 20
   */
  total_records?: number;
  /**
   * List of registrant objects.
   */
  registrants?: {
    /**
     * The registrant's address.
     *
     * @example 1800 Amphibious Blvd.
     */
    address?: string;
    /**
     * The registrant's city.
     *
     * @example Mountain View
     */
    city?: string;
    /**
     * The registrant's questions and comments.
     *
     * @example Looking forward to the discussion.
     */
    comments?: string;
    /**
     * The registrant's two-letter ISO [country code](https://developers.zoom.us/docs/api/rest/other-references/abbreviation-lists/#countries).
     *
     * @example US
     */
    country?: string;
    /**
     * Information about custom questions.
     */
    custom_questions?: {
      /**
       * The title of the custom question.
       *
       * @example What do you hope to learn from this?
       */
      title?: string;
      /**
       * The custom question's response value. This has a limit of 128 characters.
       *
       * @maxLength 128
       * @example Look forward to learning how you come up with new recipes and what other services you offer.
       */
      value?: string;
    }[];
    /**
     * The registrant's email address. See [Email address display rules](https://developers.zoom.us/docs/api/rest/using-zoom-apis/#email-address-display-rules) for return value details.
     *
     * @maxLength 128
     * @format email
     * @example jchill@example.com
     */
    email: string;
    /**
     * The registrant's first name.
     *
     * @maxLength 64
     * @example Jill
     */
    first_name: string;
    /**
     * The registrant's industry.
     *
     * @example Food
     */
    industry?: string;
    /**
     * The registrant's job title.
     *
     * @example Chef
     */
    job_title?: string;
    /**
     * The registrant's last name.
     *
     * @maxLength 64
     * @example Chill
     */
    last_name?: string;
    /**
     * The registrant's number of employees.
     * * `1-20`
     * * `21-50`
     * * `51-100`
     * * `101-250`
     * * `251-500`
     * * `501-1,000`
     * * `1,001-5,000`
     * * `5,001-10,000`
     * * `More than 10,000`
     *
     * @example 1-20
     */
    no_of_employees?:
      | ""
      | "1-20"
      | "21-50"
      | "51-100"
      | "101-250"
      | "251-500"
      | "501-1,000"
      | "1,001-5,000"
      | "5,001-10,000"
      | "More than 10,000";
    /**
     * The registrant's organization.
     *
     * @example Cooking Org
     */
    org?: string;
    /**
     * The registrant's phone number.
     *
     * @example 5550100
     */
    phone?: string;
    /**
     * The registrant's purchasing time frame.
     * * `Within a month.`
     * * `1-3 months.`
     * * `4-6 months.`
     * * `More than 6 months.`
     * * `No timeframe.`
     *
     * @example 1-3 months
     */
    purchasing_time_frame?:
      | ""
      | "Within a month"
      | "1-3 months"
      | "4-6 months"
      | "More than 6 months"
      | "No timeframe";
    /**
     * The registrant's role in the purchase process.
     * * `Decision maker`
     * * `Evaluator/Recommender.`
     * * `Influencer.`
     * * `Not involved.`
     *
     * @example Influencer
     */
    role_in_purchase_process?:
      | ""
      | "Decision Maker"
      | "Evaluator/Recommender"
      | "Influencer"
      | "Not involved";
    /**
     * The registrant's state or province.
     *
     * @example CA
     */
    state?: string;
    /**
     * The status of the registrant's registration.
     *   `approved` - User has been successfully approved for the webinar.
     *   `pending` -  The registration is still pending.
     *   `denied` - User has been denied from joining the webinar.
     *
     * @example approved
     */
    status?: "approved" | "denied" | "pending";
    /**
     * The registrant's ZIP or postal code.
     *
     * @example 94045
     */
    zip?: string;
    /**
     * Registrant ID.
     *
     * @example 9tboDiHUQAeOnbmudzWa5g
     */
    id?: string;
    /**
     * The time when the registrant registered.
     *
     * @format date-time
     * @example 2022-03-22T05:59:09Z
     */
    create_time?: string;
    /**
     * The URL that an approved registrant can use to join the meeting or webinar.
     *
     * @format string
     * @example https://example.com/j/11111
     */
    join_url?: string;
  }[];
};

export type WebinarRegistrantsVariables = {
  pathParams: WebinarRegistrantsPathParams;
  queryParams?: WebinarRegistrantsQueryParams;
} & FetcherExtraProps;

/**
 * List all users that have registered for a given webinar. Zoom users with a [webinar plan](https://zoom.us/webinar) have access to creating and managing webinars. The webinar functionality lets a host broadcast a Zoom meeting to up to 10,000 attendees. Scheduling a [webinar with registration](https://support.zoom.us/hc/en-us/articles/204619915-Scheduling-a-Webinar-with-Registration) requires your registrants to complete a brief form before receiving the link to join the webinar.
 *
 *
 * **Prerequisites**
 * * Pro or higher plan with a Webinar add-on.
 *
 *
 *
 * **[Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `webinar:read:admin`,`webinar:read`
 *
 * **[Granular Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `webinar:read:list_registrants`,`webinar:read:list_registrants:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
 */
export const webinarRegistrants = (
  variables: WebinarRegistrantsVariables,
  signal?: AbortSignal,
) =>
  fetch<
    WebinarRegistrantsResponse,
    WebinarRegistrantsError,
    undefined,
    {},
    WebinarRegistrantsQueryParams,
    WebinarRegistrantsPathParams
  >({
    url: "/webinars/{webinarId}/registrants",
    method: "get",
    ...variables,
    signal,
  });

export type WebinarRegistrantCreatePathParams = {
  /**
   * The webinar's ID.
   *
   * @format int64
   * @example 99289110036
   */
  webinarId: number;
};

export type WebinarRegistrantCreateQueryParams = {
  /**
   * A comma-separated list of webinar occurrence IDs. Get this value with the [Get a webinar](/docs/api/rest/reference/zoom-api/methods/#operation/webinar) API. Make sure the `registration_type` is 3 if updating multiple occurrences with this API.
   *
   * @example 1648538280000
   */
  occurrence_ids?: string;
};

export type WebinarRegistrantCreateError = Fetcher.ErrorWrapper<undefined>;

export type WebinarRegistrantCreateResponse = {
  /**
   * The webinar's ID.
   *
   * @format int64
   * @example 92674392836
   */
  id?: number;
  /**
   * The URL the registrant can use to join the webinar.
   *
   * @example https://example.com/j/22222
   */
  join_url?: string;
  /**
   * The registrant's ID.
   *
   * @example fdgsfh2ey82fuh
   */
  registrant_id?: string;
  /**
   * The webinar's start time.
   *
   * @format date-time
   * @example 2021-07-13T21:44:51Z
   */
  start_time?: string;
  /**
   * The webinar's topic.
   *
   * @maxLength 200
   * @example My Webinar
   */
  topic?: string;
  /**
   * Array of occurrence objects.
   */
  occurrences?: {
    /**
     * Duration.
     *
     * @example 60
     */
    duration?: number;
    /**
     * Occurrence ID: Unique identifier that identifies an occurrence of a recurring webinar. [Recurring webinars](https://support.zoom.us/hc/en-us/articles/216354763-How-to-Schedule-A-Recurring-Webinar) can have a maximum of 50 occurrences.
     *
     * @example 1648194360000
     */
    occurrence_id?: string;
    /**
     * Start time.
     *
     * @format date-time
     * @example 2022-03-25T07:46:00Z
     */
    start_time?: string;
    /**
     * Occurrence status.
     *
     * @example available
     */
    status?: string;
  }[];
};

export type WebinarRegistrantCreateRequestBody = {
  /**
   * The registrant's first name.
   *
   * @maxLength 64
   * @example Jill
   */
  first_name: string;
  /**
   * The registrant's last name.
   *
   * @maxLength 64
   * @example Chill
   */
  last_name?: string;
  /**
   * The registrant's email address.
   *
   * @maxLength 128
   * @format email
   * @example jchill@example.com
   */
  email: string;
  /**
   * The registrant's address.
   *
   * @example 1800 Amphibious Blvd.
   */
  address?: string;
  /**
   * The registrant's city.
   *
   * @example Mountain View
   */
  city?: string;
  /**
   * The registrant's state or province.
   *
   * @example CA
   */
  state?: string;
  /**
   * The registrant's ZIP or postal code.
   *
   * @example 94045
   */
  zip?: string;
  /**
   * The registrant's two-letter [country code](https://developers.zoom.us/docs/api/rest/other-references/abbreviation-lists/#countries).
   *
   * @example US
   */
  country?: string;
  /**
   * The registrant's phone number.
   *
   * @example 5550100
   */
  phone?: string;
  /**
   * The registrant's questions and comments.
   *
   * @example Looking forward to the discussion.
   */
  comments?: string;
  /**
   * Information about custom questions.
   */
  custom_questions?: {
    /**
     * The custom question's title.
     *
     * @example What do you hope to learn from this?
     */
    title?: string;
    /**
     * The custom question's response value. This has a limit of 128 characters.
     *
     * @maxLength 128
     * @example Look forward to learning how you come up with new recipes and what other services you offer.
     */
    value?: string;
  }[];
  /**
   * The registrant's industry.
   *
   * @example Food
   */
  industry?: string;
  /**
   * The registrant's job title.
   *
   * @example Chef
   */
  job_title?: string;
  /**
   * The registrant's number of employees:
   * * `1-20`
   * * `21-50`
   * * `51-100`
   * * `101-500`
   * * `500-1,000`
   * * `1,001-5,000`
   * * `5,001-10,000`
   * * `More than 10,000`
   *
   * @example 1-20
   */
  no_of_employees?:
    | ""
    | "1-20"
    | "21-50"
    | "51-100"
    | "101-500"
    | "500-1,000"
    | "1,001-5,000"
    | "5,001-10,000"
    | "More than 10,000";
  /**
   * The registrant's organization.
   *
   * @example Cooking Org
   */
  org?: string;
  /**
   * The registrant's purchasing time frame:
   * * `Within a month`
   * * `1-3 months`
   * * `4-6 months`
   * * `More than 6 months`
   * * `No timeframe`
   *
   * @example 1-3 months
   */
  purchasing_time_frame?:
    | ""
    | "Within a month"
    | "1-3 months"
    | "4-6 months"
    | "More than 6 months"
    | "No timeframe";
  /**
   * The registrant's role in the purchase process:
   * * `Decision Maker`
   * * `Evaluator/Recommender`
   * * `Influencer`
   * * `Not involved`
   *
   * @example Influencer
   */
  role_in_purchase_process?:
    | ""
    | "Decision Maker"
    | "Evaluator/Recommender"
    | "Influencer"
    | "Not involved";
  /**
   * Specifies the registrant's preferred language for the confirmation email sent upon successful registration.
   *
   * **Note** This field is only effective if the webinar's 'Select Email Language' setting is set to 'Same as recipients' default language' in the Zoom web portal. If a fixed language is selected, this value will be ignored.
   *
   * **Supported values**
   *
   * * `en-US` - English (US)
   * * `de-DE` - German (Germany)
   * * `es-ES` - Spanish (Spain)
   * * `fr-FR` - French (France)
   * * `jp-JP` - Japanese
   * * `pt-PT` - Portuguese (Portugal)
   * * `ru-RU` - Russian
   * * `zh-CN` - Chinese (PRC)
   * * `zh-TW` - Chinese (Taiwan)
   * * `ko-KO` - Korean
   * * `it-IT` - Italian (Italy)
   * * `vi-VN` - Vietnamese
   * * `pl-PL` - Polish
   * * `Tr-TR` - Turkish
   *
   * @example en-US
   */
  language?:
    | "en-US"
    | "de-DE"
    | "es-ES"
    | "fr-FR"
    | "jp-JP"
    | "pt-PT"
    | "ru-RU"
    | "zh-CN"
    | "zh-TW"
    | "ko-KO"
    | "it-IT"
    | "vi-VN"
    | "pl-PL"
    | "Tr-TR";
  /**
   * The tracking source's unique identifier.
   *
   * @example 4816766181770
   */
  source_id?: string;
};

export type WebinarRegistrantCreateVariables = {
  body: WebinarRegistrantCreateRequestBody;
  pathParams: WebinarRegistrantCreatePathParams;
  queryParams?: WebinarRegistrantCreateQueryParams;
} & FetcherExtraProps;

/**
 * Create and submit a user's registration for a webinar. Zoom users with a [Webinar plan](https://zoom.us/webinar) have access to creating and managing webinars. Webinars allow hosts to broadcast a Zoom meeting to up to 10,000 attendees. Scheduling a [webinar with registration](https://support.zoom.us/hc/en-us/articles/204619915-Scheduling-a-Webinar-with-Registration) requires your registrants to complete a brief form before receiving the link to join the webinar.
 *
 * **Prerequisites:**
 * * A Pro or higher plan with the Webinar add-on.
 *
 * **[Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `webinar:write:admin`,`webinar:write`
 *
 * **[Granular Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `webinar:write:registrant`,`webinar:write:registrant:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
 */
export const webinarRegistrantCreate = (
  variables: WebinarRegistrantCreateVariables,
  signal?: AbortSignal,
) =>
  fetch<
    WebinarRegistrantCreateResponse,
    WebinarRegistrantCreateError,
    WebinarRegistrantCreateRequestBody,
    {},
    WebinarRegistrantCreateQueryParams,
    WebinarRegistrantCreatePathParams
  >({
    url: "/webinars/{webinarId}/registrants",
    method: "post",
    ...variables,
    signal,
  });

export type WebinarRegistrantsQuestionsGetPathParams = {
  /**
   * The webinar's ID.
   *
   * @format int64
   * @example 99289110036
   */
  webinarId: number;
};

export type WebinarRegistrantsQuestionsGetError =
  Fetcher.ErrorWrapper<undefined>;

export type WebinarRegistrantsQuestionsGetResponse = {
  /**
   * Array of Registrant Custom Questions.
   */
  custom_questions?: {
    /**
     * An array of answer choices. Can't be used for short answer type.
     */
    answers?: string[];
    /**
     * State whether or not the custom question is required to be answered by a registrant.
     *
     * @example true
     */
    required?: boolean;
    /**
     * Custom question.
     *
     * @example How are you?
     */
    title?: string;
    /**
     * The question-answer type.
     *
     * @example short
     */
    type?: "short" | "single_radio" | "single_dropdown" | "multiple";
  }[];
  /**
   * Array of registration fields whose values should be provided by registrants during registration.
   */
  questions?: {
    /**
     * Field name
     *
     * @example last_name
     */
    field_name?:
      | "last_name"
      | "address"
      | "city"
      | "country"
      | "zip"
      | "state"
      | "phone"
      | "industry"
      | "org"
      | "job_title"
      | "purchasing_time_frame"
      | "role_in_purchase_process"
      | "no_of_employees"
      | "comments";
    /**
     * State whether the selected fields are required or optional.
     *
     * @example true
     */
    required?: boolean;
  }[];
};

export type WebinarRegistrantsQuestionsGetVariables = {
  pathParams: WebinarRegistrantsQuestionsGetPathParams;
} & FetcherExtraProps;

/**
 * List registration questions and fields that are to be answered by users while registering for a webinar.
 *
 *  Scheduling a [webinar with registration](https://support.zoom.us/hc/en-us/articles/204619915-Scheduling-a-Webinar-with-Registration) requires your registrants to complete a brief form with fields and questions before they can receive the link to join the webinar.
 *
 * **Prerequisites:**
 *
 * * Pro or higher plan with the webinar add-on.
 *
 *
 * **[Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `webinar:read:admin`,`webinar:read`
 *
 * **[Granular Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `webinar:read:list_registration_questions`,`webinar:read:list_registration_questions:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
 */
export const webinarRegistrantsQuestionsGet = (
  variables: WebinarRegistrantsQuestionsGetVariables,
  signal?: AbortSignal,
) =>
  fetch<
    WebinarRegistrantsQuestionsGetResponse,
    WebinarRegistrantsQuestionsGetError,
    undefined,
    {},
    {},
    WebinarRegistrantsQuestionsGetPathParams
  >({
    url: "/webinars/{webinarId}/registrants/questions",
    method: "get",
    ...variables,
    signal,
  });

export type WebinarRegistrantQuestionUpdatePathParams = {
  /**
   * The webinar's ID.
   *
   * @format int64
   * @example 99289110036
   */
  webinarId: number;
};

export type WebinarRegistrantQuestionUpdateError =
  Fetcher.ErrorWrapper<undefined>;

export type WebinarRegistrantQuestionUpdateRequestBody = {
  /**
   * Array of custom questions for registrants.
   */
  custom_questions?: {
    /**
     * An array of answer choices. Can't be used for short answer type.
     */
    answers?: string[];
    /**
     * State whether or not a registrant is required to answer the custom question.
     *
     * @example true
     */
    required?: boolean;
    /**
     * Custom question.
     *
     * @example How are you?
     */
    title?: string;
    /**
     * The question-answer type.
     *
     * @example short
     */
    type?: "short" | "single_radio" | "single_dropdown" | "multiple";
  }[];
  /**
   * Array of registration fields whose values should be provided by registrants.
   */
  questions?: {
    /**
     * Field name
     *
     * @example last_name
     */
    field_name?:
      | "last_name"
      | "address"
      | "city"
      | "country"
      | "zip"
      | "state"
      | "phone"
      | "industry"
      | "org"
      | "job_title"
      | "purchasing_time_frame"
      | "role_in_purchase_process"
      | "no_of_employees"
      | "comments";
    /**
     * State whether the selected fields are required or optional.
     *
     * @example true
     */
    required?: boolean;
  }[];
};

export type WebinarRegistrantQuestionUpdateVariables = {
  body?: WebinarRegistrantQuestionUpdateRequestBody;
  pathParams: WebinarRegistrantQuestionUpdatePathParams;
} & FetcherExtraProps;

/**
 * Update registration questions and fields of a scheduled webinar for users to answer during webinar registration. Scheduling a [webinar with registration](https://support.zoom.us/hc/en-us/articles/204619915-Scheduling-a-Webinar-with-Registration) requires your registrants to complete a brief form with fields and questions before they can receive the link to join the webinar.
 *
 *
 * **Prerequisites:**
 *
 * * Pro or higher plan with a Webinar Add-on.
 * * Registration option for Webinar should be set as required to use this API.
 *
 *
 * **[Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `webinar:write:admin`,`webinar:write`
 *
 * **[Granular Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `webinar:update:registration_question`,`webinar:update:registration_question:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
 */
export const webinarRegistrantQuestionUpdate = (
  variables: WebinarRegistrantQuestionUpdateVariables,
  signal?: AbortSignal,
) =>
  fetch<
    undefined,
    WebinarRegistrantQuestionUpdateError,
    WebinarRegistrantQuestionUpdateRequestBody,
    {},
    {},
    WebinarRegistrantQuestionUpdatePathParams
  >({
    url: "/webinars/{webinarId}/registrants/questions",
    method: "patch",
    ...variables,
    signal,
  });

export type WebinarRegistrantStatusPathParams = {
  /**
   * The webinar's ID.
   *
   * @format int64
   * @example 99289110036
   */
  webinarId: number;
};

export type WebinarRegistrantStatusQueryParams = {
  /**
   * The meeting or webinar occurrence ID.
   *
   * @example 1648194360000
   */
  occurrence_id?: string;
};

export type WebinarRegistrantStatusError = Fetcher.ErrorWrapper<undefined>;

export type WebinarRegistrantStatusRequestBody = {
  /**
   * The registration action to perform.
   * * `approve` - Approve the registrant.
   * * `deny` - Reject the registrant.
   * * `cancel` - Cancel the registrant's approval.
   *
   * @example approve
   */
  action: "approve" | "deny" | "cancel";
  /**
   * The registrant information.
   *
   * @maximum 30
   */
  registrants?: {
    /**
     * The registrant's email address.
     *
     * @format email
     * @example jchill@example.com
     */
    email?: string;
    /**
     * The registrant's ID.
     *
     * @example 9tboDiHUQAeOnbmudzWa5g
     */
    id?: string;
  }[];
};

export type WebinarRegistrantStatusVariables = {
  body: WebinarRegistrantStatusRequestBody;
  pathParams: WebinarRegistrantStatusPathParams;
  queryParams?: WebinarRegistrantStatusQueryParams;
} & FetcherExtraProps;

/**
 * Update webinar registrants' registration status. You can approve or deny a registrant, or revoke a registrant's approval.
 *
 * **Prerequisites**
 * * A Pro or higher plan with a [Webinar plan](https://zoom.us/webinar) add-on.
 *
 * **[Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `webinar:write:admin`,`webinar:write`
 *
 * **[Granular Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `webinar:update:registrant_status`,`webinar:update:registrant_status:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
 */
export const webinarRegistrantStatus = (
  variables: WebinarRegistrantStatusVariables,
  signal?: AbortSignal,
) =>
  fetch<
    undefined,
    WebinarRegistrantStatusError,
    WebinarRegistrantStatusRequestBody,
    {},
    WebinarRegistrantStatusQueryParams,
    WebinarRegistrantStatusPathParams
  >({
    url: "/webinars/{webinarId}/registrants/status",
    method: "put",
    ...variables,
    signal,
  });

export type WebinarRegistrantGetPathParams = {
  /**
   * The webinar's ID.
   *
   * @format int64
   * @example 99289110036
   */
  webinarId: number;
  /**
   * The registrant ID.
   *
   * @example 9tboDiHUQAeOnbmudzWa5g
   */
  registrantId: string;
};

export type WebinarRegistrantGetQueryParams = {
  /**
   * The meeting or webinar occurrence ID.
   *
   * @example 1648194360000
   */
  occurrence_id?: string;
};

export type WebinarRegistrantGetError = Fetcher.ErrorWrapper<undefined>;

export type WebinarRegistrantGetResponse = {
  /**
   * The registrant's address.
   *
   * @example 1800 Amphibious Blvd.
   */
  address?: string;
  /**
   * The registrant's city.
   *
   * @example Mountain View
   */
  city?: string;
  /**
   * The registrant's questions and comments.
   *
   * @example Looking forward to the discussion.
   */
  comments?: string;
  /**
   * The registrant's two-letter ISO [country code](https://developers.zoom.us/docs/api/rest/other-references/abbreviation-lists/#countries).
   *
   * @example US
   */
  country?: string;
  /**
   * Information about custom questions.
   */
  custom_questions?: {
    /**
     * The title of the custom question.
     *
     * @example What do you hope to learn from this?
     */
    title?: string;
    /**
     * The custom question's response value. This has a limit of 128 characters.
     *
     * @maxLength 128
     * @example Look forward to learning how you come up with new recipes and what other services you offer.
     */
    value?: string;
  }[];
  /**
   * The registrant's email address. See [Email address display rules](https://developers.zoom.us/docs/api/rest/using-zoom-apis/#email-address-display-rules) for return value details.
   *
   * @maxLength 128
   * @format email
   * @example jchill@example.com
   */
  email: string;
  /**
   * The registrant's first name.
   *
   * @maxLength 64
   * @example Jill
   */
  first_name: string;
  /**
   * The registrant's industry.
   *
   * @example Food
   */
  industry?: string;
  /**
   * The registrant's job title.
   *
   * @example Chef
   */
  job_title?: string;
  /**
   * The registrant's last name.
   *
   * @maxLength 64
   * @example Chill
   */
  last_name?: string;
  /**
   * The registrant's number of employees:
   * * `1-20`
   * * `21-50`
   * * `51-100`
   * * `101-250`
   * * `251-500`
   * * `501-1,000`
   * * `1,001-5,000`
   * * `5,001-10,000`
   * * `More than 10,000`
   *
   * @example 1-20
   */
  no_of_employees?:
    | ""
    | "1-20"
    | "21-50"
    | "51-100"
    | "101-250"
    | "251-500"
    | "501-1,000"
    | "1,001-5,000"
    | "5,001-10,000"
    | "More than 10,000";
  /**
   * The registrant's organization.
   *
   * @example Cooking Org
   */
  org?: string;
  /**
   * The registrant's phone number.
   *
   * @example 5550100
   */
  phone?: string;
  /**
   * The registrant's purchasing time frame:
   * * `Within a month`
   * * `1-3 months`
   * * `4-6 months`
   * * `More than 6 months`
   * * `No timeframe`
   *
   * @example 1-3 months
   */
  purchasing_time_frame?:
    | ""
    | "Within a month"
    | "1-3 months"
    | "4-6 months"
    | "More than 6 months"
    | "No timeframe";
  /**
   * The registrant's role in the purchase process:
   * * `Decision Maker`
   * * `Evaluator/Recommender`
   * * `Influencer`
   * * `Not involved`
   *
   * @example Influencer
   */
  role_in_purchase_process?:
    | ""
    | "Decision Maker"
    | "Evaluator/Recommender"
    | "Influencer"
    | "Not involved";
  /**
   * The registrant's state or province.
   *
   * @example CA
   */
  state?: string;
  /**
   * The registrant's status:
   * * `approved` &mdash; Registrant is approved.
   * * `denied` &mdash; Registrant is denied.
   * * `pending` &mdash; Registrant is waiting for approval.
   *
   * @example approved
   */
  status?: "approved" | "denied" | "pending";
  /**
   * The registrant's ZIP or postal code.
   *
   * @example 94045
   */
  zip?: string;
  /**
   * The registrant's language preference for confirmation emails:
   * * `en-US` &mdash; English (US)
   * * `de-DE` &mdash; German (Germany)
   * * `es-ES` &mdash; Spanish (Spain)
   * * `fr-FR` &mdash; French (France)
   * * `jp-JP` &mdash; Japanese
   * * `pt-PT` &mdash; Portuguese (Portugal)
   * * `ru-RU` &mdash; Russian
   * * `zh-CN` &mdash; Chinese (PRC)
   * * `zh-TW` &mdash; Chinese (Taiwan)
   * * `ko-KO` &mdash; Korean
   * * `it-IT` &mdash; Italian (Italy)
   * * `vi-VN` &mdash; Vietnamese
   * * `pl-PL` &mdash; Polish
   * * `Tr-TR` &mdash; Turkish
   *
   * @example en-US
   */
  language?:
    | "en-US"
    | "de-DE"
    | "es-ES"
    | "fr-FR"
    | "jp-JP"
    | "pt-PT"
    | "ru-RU"
    | "zh-CN"
    | "zh-TW"
    | "ko-KO"
    | "it-IT"
    | "vi-VN"
    | "pl-PL"
    | "Tr-TR";
  /**
   * @example 95204914252
   */
  id?: string;
  /**
   * @format date-time
   * @example 2022-03-26T06:44:14Z
   */
  create_time?: string;
  /**
   * @format string
   * @example https://example.com/j/11111
   */
  join_url?: string;
};

export type WebinarRegistrantGetVariables = {
  pathParams: WebinarRegistrantGetPathParams;
  queryParams?: WebinarRegistrantGetQueryParams;
} & FetcherExtraProps;

/**
 * Zoom users with a [webinar plan](https://zoom.us/webinar) have access to creating and managing webinars. The webinar feature lets a host broadcast a Zoom meeting to up to 10,000 attendees. Scheduling a [webinar with registration](https://support.zoom.us/hc/en-us/articles/204619915-Scheduling-a-Webinar-with-Registration) requires your registrants to complete a brief form before receiving the link to join the webinar.
 *  Use this API to get details on a specific user who has registered for the webinar.
 *
 *
 * **Prerequisites:**
 *
 * * The account must have a webinar plan.
 *
 * **[Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `webinar:read:admin`,`webinar:read`
 *
 * **[Granular Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `webinar:read:registrant`,`webinar:read:registrant:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
 */
export const webinarRegistrantGet = (
  variables: WebinarRegistrantGetVariables,
  signal?: AbortSignal,
) =>
  fetch<
    WebinarRegistrantGetResponse,
    WebinarRegistrantGetError,
    undefined,
    {},
    WebinarRegistrantGetQueryParams,
    WebinarRegistrantGetPathParams
  >({
    url: "/webinars/{webinarId}/registrants/{registrantId}",
    method: "get",
    ...variables,
    signal,
  });

export type DeleteWebinarRegistrantPathParams = {
  /**
   * The webinar ID.
   *
   * @example 95204914252
   */
  webinarId: number;
  /**
   * The registrant ID.
   *
   * @example 9tboDiHUQAeOnbmudzWa5g
   */
  registrantId: string;
};

export type DeleteWebinarRegistrantQueryParams = {
  /**
   * The webinar occurrence ID.
   *
   * @example 1648538280000
   */
  occurrence_id?: string;
};

export type DeleteWebinarRegistrantError = Fetcher.ErrorWrapper<undefined>;

export type DeleteWebinarRegistrantVariables = {
  pathParams: DeleteWebinarRegistrantPathParams;
  queryParams?: DeleteWebinarRegistrantQueryParams;
} & FetcherExtraProps;

/**
 * Delete a webinar registrant.
 *
 * **Prerequisites**
 * * A Pro or higher plan with a [Webinar plan](https://zoom.us/webinar) add-on.
 *
 * **[Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `webinar:write:admin`,`webinar:write`
 *
 * **[Granular Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `webinar:delete:registrant`,`webinar:delete:registrant:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
 */
export const deleteWebinarRegistrant = (
  variables: DeleteWebinarRegistrantVariables,
  signal?: AbortSignal,
) =>
  fetch<
    undefined,
    DeleteWebinarRegistrantError,
    undefined,
    {},
    DeleteWebinarRegistrantQueryParams,
    DeleteWebinarRegistrantPathParams
  >({
    url: "/webinars/{webinarId}/registrants/{registrantId}",
    method: "delete",
    ...variables,
    signal,
  });

export type GetWebinarSipDialingWithPasscodePathParams = {
  /**
   * The webinar's ID.
   *
   *  When storing this value in your database, store it as a long format integer and **not** an integer. Webinar IDs can exceed 10 digits.
   *
   * @format int64
   * @example 85746065
   */
  webinarId: number;
};

export type GetWebinarSipDialingWithPasscodeError =
  Fetcher.ErrorWrapper<undefined>;

export type GetWebinarSipDialingWithPasscodeResponse = {
  /**
   * The webinar's encoded SIP URI.
   *
   * @example 9678722567.xxxx....30qonrvgy@zoomcrc.com
   */
  sip_dialing?: string;
  /**
   * Whether the API caller has a Conference Room Connector (CRC) plan.
   *
   * @example true
   */
  paid_crc_plan_participant?: boolean;
  /**
   * This value identifies the webinar participant. It is automatically embedded in the SIP URI if the API caller has a CRC plan.
   *
   * @example 30qonrvgy
   */
  participant_identifier_code?: string;
  /**
   * The number of seconds the encoded SIP URI is valid before it expires.
   *
   * @format int64
   * @example 7200
   */
  expire_in?: number;
};

export type GetWebinarSipDialingWithPasscodeRequestBody = {
  /**
   * If customers want a passcode to be embedded in the SIP URI dial string, they must supply the passcode. Zoom will not validate the passcode.
   *
   * @example xxxx
   */
  passcode?: string;
};

export type GetWebinarSipDialingWithPasscodeVariables = {
  body?: GetWebinarSipDialingWithPasscodeRequestBody;
  pathParams: GetWebinarSipDialingWithPasscodePathParams;
} & FetcherExtraProps;

/**
 * Get a webinar's SIP URI. The URI consists of the webinar ID, an optional user-supplied passcode, and participant identifier code. The API return data also includes additional fields to indicate whether the API caller has a valid Cloud Room Connector subscription, the participant identifier code from the URI, and the SIP URI validity period in seconds.
 *
 * **Prerequisites**
 * * A Pro or higher plan with a [Webinar plan](https://zoom.us/webinar) add-on.
 *
 * **[Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `webinar:write:sip_dialing`,`webinar:write:admin:sip_dialing`
 *
 * **[Granular Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `webinar:write:sip_dialing`,`webinar:write:sip_dialing:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
 */
export const getWebinarSipDialingWithPasscode = (
  variables: GetWebinarSipDialingWithPasscodeVariables,
  signal?: AbortSignal,
) =>
  fetch<
    GetWebinarSipDialingWithPasscodeResponse,
    GetWebinarSipDialingWithPasscodeError,
    GetWebinarSipDialingWithPasscodeRequestBody,
    {},
    {},
    GetWebinarSipDialingWithPasscodePathParams
  >({
    url: "/webinars/{webinarId}/sip_dialing",
    method: "post",
    ...variables,
    signal,
  });

export type WebinarStatusPathParams = {
  /**
   * The webinar's ID.
   *
   * @format int64
   * @example 99289110036
   */
  webinarId: number;
};

export type WebinarStatusError = Fetcher.ErrorWrapper<undefined>;

export type WebinarStatusRequestBody = {
  /**
   * @example end
   */
  action?: "end";
};

export type WebinarStatusVariables = {
  body?: WebinarStatusRequestBody;
  pathParams: WebinarStatusPathParams;
} & FetcherExtraProps;

/**
 * Update a webinar's status. Use this API to end an ongoing webinar.
 *
 *
 * **Prerequisites:**
 *
 * * The account must hold a valid [Webinar plan](https://zoom.us/webinar).
 *
 * **[Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `webinar:write:admin`,`webinar:write`
 *
 * **[Granular Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `webinar:update:status`,`webinar:update:status:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
 */
export const webinarStatus = (
  variables: WebinarStatusVariables,
  signal?: AbortSignal,
) =>
  fetch<
    undefined,
    WebinarStatusError,
    WebinarStatusRequestBody,
    {},
    {},
    WebinarStatusPathParams
  >({
    url: "/webinars/{webinarId}/status",
    method: "put",
    ...variables,
    signal,
  });

export type WebinarSurveyGetPathParams = {
  /**
   * The webinar's ID.
   *
   * @format int64
   * @example 99289110036
   */
  webinarId: number;
};

export type WebinarSurveyGetError = Fetcher.ErrorWrapper<undefined>;

export type WebinarSurveyGetResponse = {
  /**
   * Information about the customized webinar survey.
   */
  custom_survey?: {
    /**
     * The survey's title, up to 64 characters.
     *
     * @maxLength 64
     * @example Learn something new
     */
    title?: string;
    /**
     * Allow participants to anonymously answer survey questions.
     * * `true` - Anonymous survey enabled.
     * * `false` - Participants cannot answer survey questions anonymously.
     *
     *  This value defaults to `true`.
     *
     * @example false
     * @default false
     */
    anonymous?: boolean;
    /**
     * Whether to display the number in the question name.
     *
     *  This value defaults to `true`.
     *
     * @example false
     * @default false
     */
    numbered_questions?: boolean;
    /**
     * Whether to display the question type in the question name.
     *
     *  This value defaults to `false`.
     *
     * @example false
     * @default false
     */
    show_question_type?: boolean;
    /**
     * The survey's feedback, up to 320 characters.
     *
     *  This value defaults to `Thank you so much for taking the time to complete the survey, your feedback really makes a difference.`.
     *
     * @maxLength 320
     * @example Thank you so much for taking the time to complete the survey. Your feedback really makes a difference.
     */
    feedback?: string;
    /**
     * Information about the webinar survey's questions.
     *
     * @maxItems 100
     * @minItems 1
     */
    questions?: {
      /**
       * The survey question, up to 420 characters.
       *
       * @example How useful was this webinar?
       */
      name?: string;
      /**
       * The survey's question and answer type.
       * * `single` - Single choice.
       * * `multiple` - Multiple choice.
       * * `matching` - Matching.
       * * `rank_order` - Rank order
       * * `short_answer` - Short answer
       * * `long_answer` - Long answer.
       * * `fill_in_the_blank` - Fill in the blank
       * * `rating_scale` - Rating scale.
       *
       * @example single
       */
      type?:
        | "single"
        | "multiple"
        | "matching"
        | "rank_order"
        | "short_answer"
        | "long_answer"
        | "fill_in_the_blank"
        | "rating_scale";
      /**
       * Whether participants must answer the question.
       * * `true` - The participant must answer the question.
       * * `false` - The participant does not need to answer the question.
       *
       *  This value defaults to `false`.
       *
       * @example false
       * @default false
       */
      answer_required?: boolean;
      /**
       * Whether to display the radio selection as a drop-down box.
       * * `true` - Show as a drop-down box.
       * * `false` - Do not show as a drop-down box.
       *
       *  This value defaults to `false`.
       *
       * @example false
       * @default false
       */
      show_as_dropdown?: boolean;
      /**
       * The survey question's available answers. This field requires a **minimum** of two answers.
       *
       * * For `single` and `multiple` questions, you can only provide a maximum of 50 answers.
       * * For `matching` polls, you can only provide a maximum of 16 answers.
       * * For `rank_order` polls, you can only provide a maximum of seven answers.
       *
       * @minItems 2
       */
      answers?: string[];
      /**
       * Information about the prompt questions. This field only applies to `matching` and `rank_order` questions. You **must** provide a minimum of two prompts, up to a maximum of 10 prompts.
       *
       * @maxItems 10
       * @minItems 2
       */
      prompts?: {
        /**
         * The question prompt's title.
         *
         * @maxLength 200
         * @example How are you?
         */
        prompt_question?: string;
      }[];
      /**
       * The allowed minimum number of characters. This field only applies to `short_answer` and `long_answer` questions. You must provide at least a **one** character minimum value.
       *
       * @minimum 1
       * @example 1
       */
      answer_min_character?: number;
      /**
       * The allowed maximum number of characters. This field only applies to `short_answer` and `long_answer` questions.
       * * For `short_answer` question, a maximum of 500 characters.
       * * For `long_answer` question, a maximum of 2,000 characters.
       *
       * @example 200
       */
      answer_max_character?: number;
      /**
       * The rating scale's minimum value. This value cannot be less than zero.
       *
       *  This field only applies to the `rating_scale` survey.
       *
       * @minimum 0
       * @example 1
       */
      rating_min_value?: number;
      /**
       * The rating scale's maximum value, up to a maximum value of 10.
       *
       *  This field only applies to the `rating_scale` survey.
       *
       * @maximum 10
       * @example 4
       */
      rating_max_value?: number;
      /**
       * The low score label used for the `rating_min_value` field, up to 50 characters.
       *
       *  This field only applies to the `rating_scale` survey.
       *
       * @maxLength 50
       * @example Not likely
       */
      rating_min_label?: string;
      /**
       * The high score label used for the `rating_max_value` field, up to 50 characters.
       *
       *  This field only applies to the `rating_scale` survey.
       *
       * @maxLength 50
       * @example Extremely Likely
       */
      rating_max_label?: string;
    }[];
  };
  /**
   * Whether the **Show in the browser when the webinar ends** option is enabled.
   * * `true` - Enabled.
   * * `false` - Disabled.
   *
   *  This value defaults to `true`.
   *
   * @example true
   * @default true
   */
  show_in_the_browser?: boolean;
  /**
   * Whether the **Show the link on the follow-up email** option is enabled.
   * * `true` - Enabled.
   * * `false` - Disabled.
   *
   *  This value defaults to `false`.
   *
   * @example false
   * @default false
   */
  show_in_the_follow_up_email?: boolean;
  /**
   * The link to the third party webinar survey.
   *
   * @maxLength 64
   * @example https://example.com
   */
  third_party_survey?: string;
};

export type WebinarSurveyGetVariables = {
  pathParams: WebinarSurveyGetPathParams;
} & FetcherExtraProps;

/**
 * Return information about a [webinar survey](https://support.zoom.us/hc/en-us/articles/360048745651).
 *
 *  **Prerequisites:**
 * * A Pro or higher plan with the Webinar add-on.
 * * The [**Webinar Survey**](https://support.zoom.us/hc/en-us/articles/360061293191-Enabling-webinar-survey) feature enabled in the host's account.
 *
 * **[Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `webinar:read:admin`,`webinar:read`
 *
 * **[Granular Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `webinar:read:survey`,`webinar:read:survey:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
 */
export const webinarSurveyGet = (
  variables: WebinarSurveyGetVariables,
  signal?: AbortSignal,
) =>
  fetch<
    WebinarSurveyGetResponse,
    WebinarSurveyGetError,
    undefined,
    {},
    {},
    WebinarSurveyGetPathParams
  >({
    url: "/webinars/{webinarId}/survey",
    method: "get",
    ...variables,
    signal,
  });

export type WebinarSurveyDeletePathParams = {
  /**
   * The webinar's ID.
   *
   * @format int64
   * @example 99289110036
   */
  webinarId: number;
};

export type WebinarSurveyDeleteError = Fetcher.ErrorWrapper<undefined>;

export type WebinarSurveyDeleteVariables = {
  pathParams: WebinarSurveyDeletePathParams;
} & FetcherExtraProps;

/**
 * Delete a [webinar survey](https://support.zoom.us/hc/en-us/articles/360048745651).
 *
 *  **Prerequisites:**
 * * A Pro or higher plan with the Webinar Add-on.
 * * The [**Webinar Survey**](https://support.zoom.us/hc/en-us/articles/360061293191-Enabling-webinar-survey) feature enabled in the host's account.
 *
 * **[Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `webinar:write`,`webinar:write:admin`
 *
 * **[Granular Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `webinar:delete:survey`,`webinar:delete:survey:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
 */
export const webinarSurveyDelete = (
  variables: WebinarSurveyDeleteVariables,
  signal?: AbortSignal,
) =>
  fetch<
    undefined,
    WebinarSurveyDeleteError,
    undefined,
    {},
    {},
    WebinarSurveyDeletePathParams
  >({
    url: "/webinars/{webinarId}/survey",
    method: "delete",
    ...variables,
    signal,
  });

export type WebinarSurveyUpdatePathParams = {
  /**
   * The webinar's ID.
   *
   * @format int64
   * @example 99289110036
   */
  webinarId: number;
};

export type WebinarSurveyUpdateError = Fetcher.ErrorWrapper<undefined>;

export type WebinarSurveyUpdateRequestBody = {
  /**
   * Information about the customized webinar survey.
   */
  custom_survey?: {
    /**
     * The survey's title, up to 64 characters.
     *
     * @maxLength 64
     * @example Learn something new
     */
    title?: string;
    /**
     * Allow participants to anonymously answer survey questions.
     * * `true` - Anonymous survey enabled.
     * * `false` - Participants cannot answer survey questions anonymously.
     *
     *  This value defaults to `true`.
     *
     * @example false
     * @default false
     */
    anonymous?: boolean;
    /**
     * Whether to display the number in the question name.
     *
     *  This value defaults to `true`.
     *
     * @example false
     * @default false
     */
    numbered_questions?: boolean;
    /**
     * Whether to display the question type in the question name.
     *
     *  This value defaults to `false`.
     *
     * @example false
     * @default false
     */
    show_question_type?: boolean;
    /**
     * The survey's feedback, up to 320 characters.
     *
     *  This value defaults to `Thank you so much for taking the time to complete the survey, your feedback really makes a difference.`.
     *
     * @maxLength 320
     * @example Thank you so much for taking the time to complete the survey. Your feedback really makes a difference.
     */
    feedback?: string;
    /**
     * Information about the webinar survey's questions.
     *
     * @maxItems 100
     * @minItems 1
     */
    questions?: {
      /**
       * The survey question, up to 420 characters.
       *
       * @example How useful was this webinar?
       */
      name?: string;
      /**
       * The survey's question and answer type.
       * * `single` - Single choice.
       * * `multiple` - Multiple choice.
       * * `matching` - Matching.
       * * `rank_order` - Rank order
       * * `short_answer` - Short answer
       * * `long_answer` - Long answer.
       * * `fill_in_the_blank` - Fill in the blank
       * * `rating_scale` - Rating scale.
       *
       * @example single
       */
      type?:
        | "single"
        | "multiple"
        | "matching"
        | "rank_order"
        | "short_answer"
        | "long_answer"
        | "fill_in_the_blank"
        | "rating_scale";
      /**
       * Whether participants must answer the question.
       * * `true` - The participant must answer the question.
       * * `false` - The participant does not need to answer the question.
       *
       *  This value defaults to `false`.
       *
       * @example false
       * @default false
       */
      answer_required?: boolean;
      /**
       * Whether to display the radio selection as a drop-down box.
       * * `true` - Show as a drop-down box.
       * * `false` - Do not show as a drop-down box.
       *
       *  This value defaults to `false`.
       *
       * @example false
       * @default false
       */
      show_as_dropdown?: boolean;
      /**
       * The survey question's available answers. This field requires a **minimum** of two answers.
       *
       * * For `single` and `multiple` questions, you can only provide a maximum of 50 answers.
       * * For `matching` polls, you can only provide a maximum of 16 answers.
       * * For `rank_order` polls, you can only provide a maximum of seven answers.
       *
       * @minItems 2
       */
      answers?: string[];
      /**
       * Information about the prompt questions. This field only applies to `matching` and `rank_order` questions. You **must** provide a minimum of two prompts, up to a maximum of 10 prompts.
       *
       * @maxItems 10
       * @minItems 2
       */
      prompts?: {
        /**
         * The question prompt's title.
         *
         * @maxLength 200
         * @example How are you?
         */
        prompt_question?: string;
      }[];
      /**
       * The allowed minimum number of characters. This field only applies to `short_answer` and `long_answer` questions. You must provide at least a **one** character minimum value.
       *
       * @minimum 1
       * @example 1
       */
      answer_min_character?: number;
      /**
       * The allowed maximum number of characters. This field only applies to `short_answer` and `long_answer` questions.
       * * For `short_answer` question, a maximum of 500 characters.
       * * For `long_answer` question, a maximum of 2,000 characters.
       *
       * @example 200
       */
      answer_max_character?: number;
      /**
       * The rating scale's minimum value. This value can't be less than zero.
       *
       *  This field only applies to the `rating_scale` survey.
       *
       * @minimum 0
       * @example 1
       */
      rating_min_value?: number;
      /**
       * The rating scale's maximum value, up to a maximum value of 10.
       *
       *  This field only applies to the `rating_scale` survey.
       *
       * @maximum 10
       * @example 4
       */
      rating_max_value?: number;
      /**
       * The low score label used for the `rating_min_value` field, up to 50 characters.
       *
       *  This field only applies to the `rating_scale` survey.
       *
       * @maxLength 50
       * @example Not likely
       */
      rating_min_label?: string;
      /**
       * The high score label used for the `rating_max_value` field, up to 50 characters.
       *
       *  This field only applies to the `rating_scale` survey.
       *
       * @maxLength 50
       * @example Extremely Likely
       */
      rating_max_label?: string;
    }[];
  };
  /**
   * Whether the **Show in the browser when the webinar ends** option is enabled.
   * * `true` - Enabled.
   * * `false` - Disabled.
   *
   *  This value defaults to `true`.
   *
   * @example true
   * @default true
   */
  show_in_the_browser?: boolean;
  /**
   * Whether the **Show the link on the follow-up email** option is enabled.
   * * `true` - Enabled.
   * * `false` - Disabled.
   *
   *  This value defaults to `false`.
   *
   * @example false
   * @default false
   */
  show_in_the_follow_up_email?: boolean;
  /**
   * The link to the third party webinar survey.
   *
   * @maxLength 64
   * @example https://example.com
   */
  third_party_survey?: string;
};

export type WebinarSurveyUpdateVariables = {
  body?: WebinarSurveyUpdateRequestBody;
  pathParams: WebinarSurveyUpdatePathParams;
} & FetcherExtraProps;

/**
 * Update a [webinar survey](https://support.zoom.us/hc/en-us/articles/360048745651).  **Prerequisites:** * A Pro or higher plan with the Webinar add-on. * Enable the [**Webinar Survey**](https://support.zoom.us/hc/en-us/articles/360061293191-Enabling-webinar-survey) feature in the host's account.
 *
 * **[Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `webinar:write`,`webinar:write:admin`
 *
 * **[Granular Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `webinar:update:survey`,`webinar:update:survey:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
 */
export const webinarSurveyUpdate = (
  variables: WebinarSurveyUpdateVariables,
  signal?: AbortSignal,
) =>
  fetch<
    undefined,
    WebinarSurveyUpdateError,
    WebinarSurveyUpdateRequestBody,
    {},
    {},
    WebinarSurveyUpdatePathParams
  >({
    url: "/webinars/{webinarId}/survey",
    method: "patch",
    ...variables,
    signal,
  });

export type WebinarTokenPathParams = {
  /**
   * The webinar's ID.
   *
   * @format int64
   * @example 99289110036
   */
  webinarId: number;
};

export type WebinarTokenQueryParams = {
  /**
   * The webinar token type:
   * * `closed_caption_token` &mdash; The third-party closed caption API token.
   *
   * This defaults to `closed_caption_token`.
   *
   * @example closed_caption_token
   * @default closed_caption_token
   */
  type?: "closed_caption_token";
};

export type WebinarTokenError = Fetcher.ErrorWrapper<undefined>;

export type WebinarTokenResponse = {
  /**
   * The generated webinar token.
   *
   * @example https://example.com/closedcaption?id=200610693&ns=GZHkEA==&expire=86400&spparams=id%2Cns%2Cexpire&signature=nYtXJqRKCW
   */
  token?: string;
};

export type WebinarTokenVariables = {
  pathParams: WebinarTokenPathParams;
  queryParams?: WebinarTokenQueryParams;
} & FetcherExtraProps;

/**
 * Use this API to get a webinar's [closed caption token (caption URL)](https://support.zoom.us/hc/en-us/articles/115002212983-Using-a-third-party-closed-captioning-service). This token lets you use a third-party service to stream text to their closed captioning software to the Zoom webinar.
 *
 * **Prerequisites:**
 * * A Pro or higher plan with the Webinar add-on.
 * * The **Closed captioning** setting enabled in the Zoom web portal.
 * *
 * * The **Allow use of caption API Token to integrate with 3rd-party Closed Captioning services** setting enabled.
 *
 * **[Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `webinar:read`,`webinar:read:admin`
 *
 * **[Granular Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `webinar:read:token`,`webinar:read:token:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
 */
export const webinarToken = (
  variables: WebinarTokenVariables,
  signal?: AbortSignal,
) =>
  fetch<
    WebinarTokenResponse,
    WebinarTokenError,
    undefined,
    {},
    WebinarTokenQueryParams,
    WebinarTokenPathParams
  >({
    url: "/webinars/{webinarId}/token",
    method: "get",
    ...variables,
    signal,
  });

export type GetTrackingSourcesPathParams = {
  /**
   * The webinar's ID.
   *
   * @format int64
   * @example 99289110036
   */
  webinarId: number;
};

export type GetTrackingSourcesError = Fetcher.ErrorWrapper<undefined>;

export type GetTrackingSourcesResponse = {
  /**
   * The total number of registration records for this Webinar.
   *
   * @example 1
   */
  total_records?: number;
  /**
   * Tracking Sources object.
   */
  tracking_sources?: {
    /**
     * Unique Identifier of the tracking source.
     *
     * @example 5516482804110
     */
    id?: string;
    /**
     * Number of registrations made from this source.
     *
     * @example 1
     */
    registration_count?: number;
    /**
     * Name of the source (platform) where the registration URL was shared.
     *
     * @example https://example.com
     */
    source_name?: string;
    /**
     * Tracking URL. The URL that was shared for the registration.
     *
     * @example https://example.com/webinar/register/5516482804110/WN_juM2BGyLQMyQ_ZrqiGRhLg
     */
    tracking_url?: string;
    /**
     * Number of visitors who visited the registration page from this source.
     *
     * @example 1
     */
    visitor_count?: number;
  }[];
};

export type GetTrackingSourcesVariables = {
  pathParams: GetTrackingSourcesPathParams;
} & FetcherExtraProps;

/**
 * [Webinar Registration Tracking Sources](https://support.zoom.us/hc/en-us/articles/360000315683-Webinar-Registration-Source-Tracking) allow you to see where your registrants are coming from if you share the webinar registration page in multiple platforms. You can then use the source tracking to see the number of registrants generated from each platform.
 *   Use this API to list information on all the tracking sources of a Webinar.
 *
 * **Prerequisites**:
 *
 * * [Webinar license](https://zoom.us/webinar).
 * * Registration must be required for the Webinar.
 *
 *
 * **[Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `webinar:read:admin`,`webinar:read`
 *
 * **[Granular Scopes](https://developers.zoom.us/docs/integrations/oauth-scopes-overview/):** `webinar:read:list_tracking_sources`,`webinar:read:list_tracking_sources:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
 */
export const getTrackingSources = (
  variables: GetTrackingSourcesVariables,
  signal?: AbortSignal,
) =>
  fetch<
    GetTrackingSourcesResponse,
    GetTrackingSourcesError,
    undefined,
    {},
    {},
    GetTrackingSourcesPathParams
  >({
    url: "/webinars/{webinarId}/tracking_sources",
    method: "get",
    ...variables,
    signal,
  });

export const operationsByTag = {
  archiving: {
    listArchivedFiles,
    getArchivedFileStatistics,
    updateArchivedFile,
    getArchivedFiles,
    deleteArchivedFiles,
  },
  cloudRecording: {
    recordingGet,
    recordingDelete,
    analyticsDetails,
    analyticsSummary,
    meetingRecordingRegistrants,
    meetingRecordingRegistrantCreate,
    recordingRegistrantsQuestionsGet,
    recordingRegistrantQuestionUpdate,
    meetingRecordingRegistrantStatus,
    recordingSettingUpdate,
    recordingSettingsUpdate,
    recordingDeleteOne,
    recordingStatusUpdateOne,
    getMeetingTranscript,
    deleteMeetingTranscript,
    recordingStatusUpdate,
    recordingsList,
  },
  devices: {
    listDevices,
    addDevice,
    getzdmgroupinfo,
    assigndevicetoauserCommonarea,
    getZpaDeviceListProfileSettingOfaUser,
    upgradeZpasApp,
    deleteZpaDeviceByVendorAndMacAddress,
    getZpaVersioninfo,
    getDevice,
    deleteDevice,
    updateDevice,
    assginGroup,
    changeDeviceAssociation,
  },
  h323Devices: { deviceList, deviceCreate, deviceDelete, deviceUpdate },
  meetings: {
    deleteMeetingChatMessageById,
    updateMeetingChatMessageById,
    inMeetingControl,
    meetingRTMSStatusUpdate,
    listmeetingsummaries,
    meeting,
    meetingDelete,
    meetingUpdate,
    createBatchPolls,
    addBatchRegistrants,
    meetingInvitation,
    meetingInviteLinksCreate,
    meetingLiveStreamingJoinToken,
    meetingLocalArchivingArchiveToken,
    meetingLocalRecordingJoinToken,
    getMeetingLiveStreamDetails,
    meetingLiveStreamUpdate,
    meetingLiveStreamStatusUpdate,
    getameetingsummary,
    deletemeetingorwebinarsummary,
    meetingAppAdd,
    meetingAppDelete,
    meetingPolls,
    meetingPollCreate,
    meetingPollGet,
    meetingPollUpdate,
    meetingPollDelete,
    meetingRegistrants,
    meetingRegistrantCreate,
    meetingRegistrantsQuestionsGet,
    meetingRegistrantQuestionUpdate,
    meetingRegistrantStatus,
    meetingRegistrantGet,
    meetingregistrantdelete,
    getSipDialingWithPasscode,
    meetingStatus,
    meetingSurveyGet,
    meetingSurveyDelete,
    meetingSurveyUpdate,
    meetingToken,
    pastMeetingDetails,
    pastMeetings,
    pastMeetingParticipants,
    listPastMeetingPolls,
    listPastMeetingQA,
    listMeetingTemplates,
    meetingTemplateCreate,
    meetings,
    meetingCreate,
    listUpcomingMeeting,
  },
  pac: { userPACs },
  reports: {
    reportSignInSignOutActivities,
    getBillingReport,
    getBillingInvoicesReports,
    reportCloudRecording,
    reportDaily,
    gethistorymeetingandwebinarlist,
    reportMeetingactivitylogs,
    reportMeetingDetails,
    reportMeetingParticipants,
    reportMeetingPolls,
    reportMeetingQA,
    reportMeetingSurvey,
    reportOperationLogs,
    reportTelephone,
    reportUpcomingEvents,
    reportUsers,
    reportMeetings,
    reportWebinarDetails,
    reportWebinarParticipants,
    reportWebinarPolls,
    reportWebinarQA,
    reportWebinarSurvey,
  },
  sIPPhone: {
    listSipPhones,
    createSIPPhone,
    listSIPPhonePhones,
    enableSIPPhonePhones,
    deleteSIPPhonePhones,
    updateSIPPhonePhones,
    deleteSIPPhone,
    updateSIPPhone,
  },
  tsp: {
    tsp,
    tspUpdate,
    userTSPs,
    userTSPCreate,
    tspUrlUpdate,
    userTSP,
    userTSPDelete,
    userTSPUpdate,
  },
  trackingField: {
    trackingfieldList,
    trackingfieldCreate,
    trackingfieldGet,
    trackingfieldDelete,
    trackingfieldUpdate,
  },
  webinars: {
    deleteWebinarChatMessageById,
    webinarAbsentees,
    pastWebinars,
    listWebinarParticipants,
    listPastWebinarPollResults,
    listPastWebinarQA,
    listWebinarTemplates,
    webinarTemplateCreate,
    webinars,
    webinarCreate,
    webinar,
    webinarDelete,
    webinarUpdate,
    addBatchWebinarRegistrants,
    getWebinarBranding,
    createWebinarBrandingNameTag,
    deleteWebinarBrandingNameTag,
    updateWebinarBrandingNameTag,
    uploadWebinarBrandingVB,
    deleteWebinarBrandingVB,
    setWebinarBrandingVB,
    uploadWebinarBrandingWallpaper,
    deleteWebinarBrandingWallpaper,
    webinarInviteLinksCreate,
    webinarLiveStreamingJoinToken,
    webinarLocalArchivingArchiveToken,
    webinarLocalRecordingJoinToken,
    getWebinarLiveStreamDetails,
    webinarLiveStreamUpdate,
    webinarLiveStreamStatusUpdate,
    webinarPanelists,
    webinarPanelistCreate,
    webinarPanelistsDelete,
    webinarPanelistDelete,
    webinarPolls,
    webinarPollCreate,
    webinarPollGet,
    webinarPollUpdate,
    webinarPollDelete,
    webinarRegistrants,
    webinarRegistrantCreate,
    webinarRegistrantsQuestionsGet,
    webinarRegistrantQuestionUpdate,
    webinarRegistrantStatus,
    webinarRegistrantGet,
    deleteWebinarRegistrant,
    getWebinarSipDialingWithPasscode,
    webinarStatus,
    webinarSurveyGet,
    webinarSurveyDelete,
    webinarSurveyUpdate,
    webinarToken,
    getTrackingSources,
  },
};
