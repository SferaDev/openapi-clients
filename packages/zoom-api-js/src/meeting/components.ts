/**
 * Generated by @openapi-codegen
 *
 * @version 1.0.0
 */
import type * as Fetcher from './fetcher';
import { fetch, FetcherExtraProps } from './fetcher';

export type GetArchiveFilesStatisticsQueryParams = {
  /**
   * The query start date, `yyyy-MM-dd'T'HH:mm:ssZ` format. This value and the `to` query parameter value cannot exceed seven days.
   */
  from?: string;
  /**
   * The query end date, in `yyyy-MM-dd'T'HH:mm:ssZ` format. This value and the `from` query parameter value cannot exceed seven days.
   */
  to?: string;
};

export type GetArchiveFilesStatisticsHeaders = {
  Accept?: string;
};

export type GetArchiveFilesStatisticsError = Fetcher.ErrorWrapper<undefined>;

export type GetArchiveFilesStatisticsVariables = {
  headers?: GetArchiveFilesStatisticsHeaders;
  queryParams?: GetArchiveFilesStatisticsQueryParams;
} & FetcherExtraProps;

/**
 * Get statistics about an account's archived meeting or webinar files.
 *
 *  Zoom's [archiving solution](https://support.zoom.us/hc/en-us/articles/360050431572-Archiving-indicators) lets account administrators set up an automated mechanism to record, collect, and archive meeting data to a third-party platform of their choice to satisfy FINRA and other compliance requirements.
 *
 *  **Prerequisites:**
 * * The [**Meeting and Webinar Archiving** feature](https://support.zoom.us/hc/en-us/articles/4405656451213--Archiving-for-meetings-and-webinars) enabled for your account by [Zoom Support](https://support.zoom.us/hc/en-us/articles/201362003).
 *
 * **Scopes:** `recording:read:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`
 */
export const getArchiveFilesStatistics = (variables: GetArchiveFilesStatisticsVariables, signal?: AbortSignal) =>
  fetch<
    Record<string, any>,
    GetArchiveFilesStatisticsError,
    undefined,
    GetArchiveFilesStatisticsHeaders,
    GetArchiveFilesStatisticsQueryParams,
    {}
  >({ url: '/archive_files/statistics', method: 'get', ...variables, signal });

export type PatchArchiveFilesFileIdPathParams = {
  fileId: string;
};

export type PatchArchiveFilesFileIdHeaders = {
  ['Content-Type']?: string;
};

export type PatchArchiveFilesFileIdError = Fetcher.ErrorWrapper<undefined>;

export type PatchArchiveFilesFileIdVariables = {
  body?: Record<string, any>;
  headers?: PatchArchiveFilesFileIdHeaders;
  pathParams: PatchArchiveFilesFileIdPathParams;
} & FetcherExtraProps;

/**
 * Update an archived file's auto-delete status.
 *
 *  **Prerequisites:**
 * * [Zoom Support](https://support.zoom.us/hc/en-us/articles/201362003) must enable the [**Meeting and Webinar Archiving** feature](https://support.zoom.us/hc/en-us/articles/4405656451213--Archiving-for-meetings-and-webinars) for your account.
 * * Open the disabling auto-delete feature in OP. Contact [Zoom Support](https://support.zoom.us/hc/en-us/articles/201362003) to open.
 *
 * **Scopes:** `recording:write`,`recording:write:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
 */
export const patchArchiveFilesFileId = (variables: PatchArchiveFilesFileIdVariables, signal?: AbortSignal) =>
  fetch<
    undefined,
    PatchArchiveFilesFileIdError,
    Record<string, any>,
    PatchArchiveFilesFileIdHeaders,
    {},
    PatchArchiveFilesFileIdPathParams
  >({ url: '/archive_files/{fileId}', method: 'patch', ...variables, signal });

export type GetArchiveFilesQueryParams = {
  /**
   * The number of records returned within a single API call.
   */
  page_size?: number;
  /**
   * Use the next page token to paginate through large result sets. A next page token is returned whenever the set of available results exceeds the current page size. This token's expiration period is 15 minutes.
   */
  next_page_token?: string;
  /**
   * The query start date, in `yyyy-MM-dd'T'HH:mm:ssZ` format. This value and the `to` query parameter value cannot exceed seven days.
   */
  from?: string;
  /**
   * The query end date, in `yyyy-MM-dd'T'HH:mm:ssZ` format. This value and the `from` query parameter value cannot exceed seven days.
   */
  to?: string;
  /**
   * The type of query date.
   * * `meeting_start_time`
   * * `archive_complete_time`
   *
   *  This value defaults to `meeting_start_time`.
   */
  query_date_type?: string;
  /**
   * The group ID. To get a group ID, use the [List groups](https://developers.zoom.us/docs/api/rest/reference/scim-api/methods/#operation/groupSCIM2List) API.
   */
  group_id?: string;
};

export type GetArchiveFilesHeaders = {
  Accept?: string;
};

export type GetArchiveFilesError = Fetcher.ErrorWrapper<undefined>;

export type GetArchiveFilesVariables = {
  headers?: GetArchiveFilesHeaders;
  queryParams?: GetArchiveFilesQueryParams;
} & FetcherExtraProps;

/**
 * Get an account's archived meeting or webinar files.
 *
 *  Zoom's [archiving solution](https://support.zoom.us/hc/en-us/articles/360050431572-Archiving-indicators) lets account administrators set up an automated mechanism to record, collect, and archive meeting data to a third-party platform of their choice to satisfy FINRA or other compliance requirements.
 *
 *  **Prerequisites:**
 * * The [**Meeting and Webinar Archiving** feature](https://support.zoom.us/hc/en-us/articles/4405656451213--Archiving-for-meetings-and-webinars) enabled for your account by [Zoom Support](https://support.zoom.us/hc/en-us/articles/201362003).
 *
 * **Scopes:** `recording:read:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
 */
export const getArchiveFiles = (variables: GetArchiveFilesVariables, signal?: AbortSignal) =>
  fetch<Record<string, any>, GetArchiveFilesError, undefined, GetArchiveFilesHeaders, GetArchiveFilesQueryParams, {}>({
    url: '/archive_files',
    method: 'get',
    ...variables,
    signal
  });

export type GetPastMeetingsMeetingUUIDArchiveFilesPathParams = {
  /**
   * (Required) The meeting's universally unique identifier (UUID). Each meeting instance generates a UUID. After a meeting ends, a new UUID is generated for the next meeting instance.
   *
   * If the meeting UUID begins with a `/` character or contains a `//` character, you **must** [double encode](https://developers.zoom.us/docs/api/rest/using-zoom-apis/#meeting-id-and-uuid) the meeting UUID when using the meeting UUID for other API calls.
   */
  meetingUUID: string;
};

export type GetPastMeetingsMeetingUUIDArchiveFilesHeaders = {
  Accept?: string;
};

export type GetPastMeetingsMeetingUUIDArchiveFilesError = Fetcher.ErrorWrapper<undefined>;

export type GetPastMeetingsMeetingUUIDArchiveFilesVariables = {
  headers?: GetPastMeetingsMeetingUUIDArchiveFilesHeaders;
  pathParams: GetPastMeetingsMeetingUUIDArchiveFilesPathParams;
} & FetcherExtraProps;

/**
 * Return a specific meeting instance's [archived files](https://support.zoom.us/hc/en-us/articles/360050431572-Archiving-indicators).
 *
 *  **Prerequisites:**
 * * The [**Meeting and Webinar Archiving** feature](https://support.zoom.us/hc/en-us/articles/4405656451213--Archiving-for-meetings-and-webinars) enabled for your account by [Zoom Support](https://support.zoom.us/hc/en-us/articles/201362003).
 *
 * **Scopes:** `recording:read`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
 */
export const getPastMeetingsMeetingUUIDArchiveFiles = (
  variables: GetPastMeetingsMeetingUUIDArchiveFilesVariables,
  signal?: AbortSignal
) =>
  fetch<
    Record<string, any>,
    GetPastMeetingsMeetingUUIDArchiveFilesError,
    undefined,
    GetPastMeetingsMeetingUUIDArchiveFilesHeaders,
    {},
    GetPastMeetingsMeetingUUIDArchiveFilesPathParams
  >({ url: '/past_meetings/{meetingUUID}/archive_files', method: 'get', ...variables, signal });

export type DeletePastMeetingsMeetingUUIDArchiveFilesPathParams = {
  /**
   * (Required) The meeting's universally unique identifier (UUID). Each meeting instance generates a UUID. For example, after a meeting ends, a new UUID is generated for the next meeting instance.
   *
   * If the meeting UUID begins with a `/` character or contains a `//` character, you **must** [double encode](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis/#meeting-id-and-uuid) the meeting UUID when using the meeting UUID for other API calls.
   */
  meetingUUID: string;
};

export type DeletePastMeetingsMeetingUUIDArchiveFilesError = Fetcher.ErrorWrapper<undefined>;

export type DeletePastMeetingsMeetingUUIDArchiveFilesVariables = {
  pathParams: DeletePastMeetingsMeetingUUIDArchiveFilesPathParams;
} & FetcherExtraProps;

/**
 * Use this API to delete all of a meeting's archived files.
 *
 *  **Prerequisites:**
 * * The [**Meeting and Webinar Archiving** feature](https://support.zoom.us/hc/en-us/articles/4405656451213--Archiving-for-meetings-and-webinars) enabled for your account by [Zoom Support](https://support.zoom.us/hc/en-us/articles/201362003).
 *
 * **Scopes:** `recording:write:admin`,`recording:write`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
 */
export const deletePastMeetingsMeetingUUIDArchiveFiles = (
  variables: DeletePastMeetingsMeetingUUIDArchiveFilesVariables,
  signal?: AbortSignal
) =>
  fetch<
    undefined,
    DeletePastMeetingsMeetingUUIDArchiveFilesError,
    undefined,
    {},
    {},
    DeletePastMeetingsMeetingUUIDArchiveFilesPathParams
  >({ url: '/past_meetings/{meetingUUID}/archive_files', method: 'delete', ...variables, signal });

export type GetPastMeetingsMeetingIdInstancesPathParams = {
  /**
   * (Required) The past meeting's ID.
   */
  meetingId: string;
};

export type GetPastMeetingsMeetingIdInstancesHeaders = {
  Accept?: string;
};

export type GetPastMeetingsMeetingIdInstancesError = Fetcher.ErrorWrapper<undefined>;

export type GetPastMeetingsMeetingIdInstancesVariables = {
  headers?: GetPastMeetingsMeetingIdInstancesHeaders;
  pathParams: GetPastMeetingsMeetingIdInstancesPathParams;
} & FetcherExtraProps;

/**
 * Return a list of past meeting instances.
 *
 *
 *
 * **Scopes:** `meeting:read:admin`,`meeting:read`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`
 */
export const getPastMeetingsMeetingIdInstances = (
  variables: GetPastMeetingsMeetingIdInstancesVariables,
  signal?: AbortSignal
) =>
  fetch<
    Record<string, any>,
    GetPastMeetingsMeetingIdInstancesError,
    undefined,
    GetPastMeetingsMeetingIdInstancesHeaders,
    {},
    GetPastMeetingsMeetingIdInstancesPathParams
  >({ url: '/past_meetings/{meetingId}/instances', method: 'get', ...variables, signal });

export type GetPastMeetingsMeetingIdParticipantsPathParams = {
  /**
   * (Required) The meeting's ID or universally unique ID (UUID).
   * * If you provide a meeting ID, the API will return a response for the latest meeting instance.
   * * If you provide a meeting UUID that begins with a `/` character or contains the `//` characters, you **must** double-encode the meeting UUID before making an API request.
   */
  meetingId: string;
};

export type GetPastMeetingsMeetingIdParticipantsQueryParams = {
  /**
   * The number of records returned within a single API call.
   */
  page_size?: number;
  /**
   * Use the next page token to paginate through large result sets. A next page token is returned whenever the set of available results exceeds the current page size. This token's expiration period is 15 minutes.
   */
  next_page_token?: string;
};

export type GetPastMeetingsMeetingIdParticipantsHeaders = {
  Accept?: string;
};

export type GetPastMeetingsMeetingIdParticipantsError = Fetcher.ErrorWrapper<undefined>;

export type GetPastMeetingsMeetingIdParticipantsVariables = {
  headers?: GetPastMeetingsMeetingIdParticipantsHeaders;
  pathParams: GetPastMeetingsMeetingIdParticipantsPathParams;
  queryParams?: GetPastMeetingsMeetingIdParticipantsQueryParams;
} & FetcherExtraProps;

/**
 * Retrieve information on participants from a past meeting. Note the API doesn't return results if there's only one participant in a meeting.
 *
 *
 * **Prerequisites:**
 *
 * * Paid account on a Pro or higher plan.
 *
 *
 *
 *    **Note**: Please double encode your UUID when using this API if the UUID begins with a '/'or contains '//' in it.
 *
 *
 * **Scopes:** `meeting:read:admin`,`meeting:read`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
 */
export const getPastMeetingsMeetingIdParticipants = (
  variables: GetPastMeetingsMeetingIdParticipantsVariables,
  signal?: AbortSignal
) =>
  fetch<
    Record<string, any>,
    GetPastMeetingsMeetingIdParticipantsError,
    undefined,
    GetPastMeetingsMeetingIdParticipantsHeaders,
    GetPastMeetingsMeetingIdParticipantsQueryParams,
    GetPastMeetingsMeetingIdParticipantsPathParams
  >({ url: '/past_meetings/{meetingId}/participants', method: 'get', ...variables, signal });

export type GetPastMeetingsMeetingIdPollsPathParams = {
  /**
   * (Required) The meeting's ID or universally unique ID (UUID).
   * * If you provide a meeting ID, the API will return a response for the latest meeting instance.
   * * If you provide a meeting UUID that begins with a `/` character or contains the `//` characters, you **must** double-encode the meeting UUID before making an API request.
   */
  meetingId: string;
};

export type GetPastMeetingsMeetingIdPollsHeaders = {
  Accept?: string;
};

export type GetPastMeetingsMeetingIdPollsError = Fetcher.ErrorWrapper<undefined>;

export type GetPastMeetingsMeetingIdPollsVariables = {
  headers?: GetPastMeetingsMeetingIdPollsHeaders;
  pathParams: GetPastMeetingsMeetingIdPollsPathParams;
} & FetcherExtraProps;

/**
 * [Polls](https://support.zoom.us/hc/en-us/articles/213756303-Polling-for-Meetings) allow the meeting host to survey attendees. List poll results of a meeting.
 *
 *
 *
 * **Prerequisites**:
 *
 * * Host user type must be **Pro**.
 * * Meeting must be a scheduled meeting. Instant meetings do not have polling features enabled.
 *
 * **Scopes:** `meeting:read:admin`,`meeting:read`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`
 */
export const getPastMeetingsMeetingIdPolls = (
  variables: GetPastMeetingsMeetingIdPollsVariables,
  signal?: AbortSignal
) =>
  fetch<
    Record<string, any>,
    GetPastMeetingsMeetingIdPollsError,
    undefined,
    GetPastMeetingsMeetingIdPollsHeaders,
    {},
    GetPastMeetingsMeetingIdPollsPathParams
  >({ url: '/past_meetings/{meetingId}/polls', method: 'get', ...variables, signal });

export type GetPastMeetingsMeetingIdQaPathParams = {
  /**
   * (Required) The meeting's ID or universally unique ID (UUID).
   * * If you provide a meeting ID, the API will return a response for the latest meeting instance.
   * * If you provide a meeting UUID that begins with a `/` character or contains the `//` characters, you **must** double-encode the meeting UUID before making an API request.
   */
  meetingId: string;
};

export type GetPastMeetingsMeetingIdQaHeaders = {
  Accept?: string;
};

export type GetPastMeetingsMeetingIdQaError = Fetcher.ErrorWrapper<undefined>;

export type GetPastMeetingsMeetingIdQaVariables = {
  headers?: GetPastMeetingsMeetingIdQaHeaders;
  pathParams: GetPastMeetingsMeetingIdQaPathParams;
} & FetcherExtraProps;

/**
 * The question &amp; answer (Q&amp;A) feature for Zoom Meetings lets attendees ask questions during a meeting and lets the other attendees answer those questions.
 *
 * List Q&amp;A of a specific meeting.
 *
 * **Prerequisites:**
 *
 * *
 *
 * **Scopes:** `meeting:read:admin`,`meeting:read`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`
 */
export const getPastMeetingsMeetingIdQa = (variables: GetPastMeetingsMeetingIdQaVariables, signal?: AbortSignal) =>
  fetch<
    Record<string, any>,
    GetPastMeetingsMeetingIdQaError,
    undefined,
    GetPastMeetingsMeetingIdQaHeaders,
    {},
    GetPastMeetingsMeetingIdQaPathParams
  >({ url: '/past_meetings/{meetingId}/qa', method: 'get', ...variables, signal });

export type GetPastMeetingsMeetingIdPathParams = {
  /**
   * (Required) The meeting's ID or universally unique ID (UUID).
   * * If you provide a meeting ID, the API will return a response for the latest meeting instance.
   * * If you provide a meeting UUID that begins with a `/` character or contains the `//` characters, you **must** [double encode](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis/#meeting-id-and-uuid) the meeting UUID before making an API request.
   */
  meetingId: string;
};

export type GetPastMeetingsMeetingIdHeaders = {
  Accept?: string;
};

export type GetPastMeetingsMeetingIdError = Fetcher.ErrorWrapper<undefined>;

export type GetPastMeetingsMeetingIdVariables = {
  headers?: GetPastMeetingsMeetingIdHeaders;
  pathParams: GetPastMeetingsMeetingIdPathParams;
} & FetcherExtraProps;

/**
 * Get information about a past meeting.
 *
 *
 *
 * **Scopes:** `meeting:read:admin`,`meeting:read`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
 */
export const getPastMeetingsMeetingId = (variables: GetPastMeetingsMeetingIdVariables, signal?: AbortSignal) =>
  fetch<
    Record<string, any>,
    GetPastMeetingsMeetingIdError,
    undefined,
    GetPastMeetingsMeetingIdHeaders,
    {},
    GetPastMeetingsMeetingIdPathParams
  >({ url: '/past_meetings/{meetingId}', method: 'get', ...variables, signal });

export type GetDevicesGroupsQueryParams = {
  /**
   * The total number of records returned from a single API call.
   * Default - 30.
   * Max -100.
   */
  page_size?: string;
  /**
   * Use the next page token to paginate through large result sets. A next page token is returned whenever the set of available results exceeds the current page size. This token's expiration period token is 15 minutes.
   */
  next_page_token?: string;
};

export type GetDevicesGroupsHeaders = {
  Accept?: string;
};

export type GetDevicesGroupsError = Fetcher.ErrorWrapper<undefined>;

export type GetDevicesGroupsVariables = {
  headers?: GetDevicesGroupsHeaders;
  queryParams?: GetDevicesGroupsQueryParams;
} & FetcherExtraProps;

/**
 * Get Zoom Device Manager (ZDM) group information for an account.
 *
 * **Scopes:** `device:read:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
 */
export const getDevicesGroups = (variables: GetDevicesGroupsVariables, signal?: AbortSignal) =>
  fetch<
    Record<string, any>,
    GetDevicesGroupsError,
    undefined,
    GetDevicesGroupsHeaders,
    GetDevicesGroupsQueryParams,
    {}
  >({ url: '/devices/groups', method: 'get', ...variables, signal });

export type PostDevicesZpaAssignmentHeaders = {
  ['Content-Type']?: string;
};

export type PostDevicesZpaAssignmentError = Fetcher.ErrorWrapper<undefined>;

export type PostDevicesZpaAssignmentVariables = {
  body?: Record<string, any>;
  headers?: PostDevicesZpaAssignmentHeaders;
} & FetcherExtraProps;

/**
 * Assign a device to a user or common area, or move a device to another user or common area, or remove a device.
 *
 * **Prerequisites:**
 * * Device must be enrolled in Zoom Device Management (ZDM).
 *
 * **Scopes:** `device:write:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
 */
export const postDevicesZpaAssignment = (variables: PostDevicesZpaAssignmentVariables, signal?: AbortSignal) =>
  fetch<undefined, PostDevicesZpaAssignmentError, Record<string, any>, PostDevicesZpaAssignmentHeaders, {}, {}>({
    url: '/devices/zpa/assignment',
    method: 'post',
    ...variables,
    signal
  });

export type PostDevicesZpaUpgradeHeaders = {
  ['Content-Type']?: string;
};

export type PostDevicesZpaUpgradeError = Fetcher.ErrorWrapper<undefined>;

export type PostDevicesZpaUpgradeVariables = {
  body?: Record<string, any>;
  headers?: PostDevicesZpaUpgradeHeaders;
} & FetcherExtraProps;

/**
 * Upgrade ZPA firmware or app by Zoom Device Manager (ZDM) group ID.
 *
 * **Scopes:** `device:write:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `HEAVY`
 */
export const postDevicesZpaUpgrade = (variables: PostDevicesZpaUpgradeVariables, signal?: AbortSignal) =>
  fetch<undefined, PostDevicesZpaUpgradeError, Record<string, any>, PostDevicesZpaUpgradeHeaders, {}, {}>({
    url: '/devices/zpa/upgrade',
    method: 'post',
    ...variables,
    signal
  });

export type DeleteDevicesZpaVendorsVendorMacAddressesMacAddressPathParams = {
  /**
   * (Required) The device's manufacturer.
   */
  vendor: string;
  /**
   * (Required) The device's mac address.
   */
  macAddress: string;
};

export type DeleteDevicesZpaVendorsVendorMacAddressesMacAddressError = Fetcher.ErrorWrapper<undefined>;

export type DeleteDevicesZpaVendorsVendorMacAddressesMacAddressVariables = {
  pathParams: DeleteDevicesZpaVendorsVendorMacAddressesMacAddressPathParams;
} & FetcherExtraProps;

/**
 * Remove a ZPA device from the device manager, by vendor and mac address.
 *
 * **Scopes:** `device:write:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
 */
export const deleteDevicesZpaVendorsVendorMacAddressesMacAddress = (
  variables: DeleteDevicesZpaVendorsVendorMacAddressesMacAddressVariables,
  signal?: AbortSignal
) =>
  fetch<
    undefined,
    DeleteDevicesZpaVendorsVendorMacAddressesMacAddressError,
    undefined,
    {},
    {},
    DeleteDevicesZpaVendorsVendorMacAddressesMacAddressPathParams
  >({ url: '/devices/zpa/vendors/{vendor}/mac_addresses/{macAddress}', method: 'delete', ...variables, signal });

export type GetDevicesZpaZdmGroupsZdmGroupIdVersionsPathParams = {
  /**
   * (Required) The Zoom Device Management (ZDM) group ID.
   */
  zdmGroupId: string;
};

export type GetDevicesZpaZdmGroupsZdmGroupIdVersionsHeaders = {
  Accept?: string;
};

export type GetDevicesZpaZdmGroupsZdmGroupIdVersionsError = Fetcher.ErrorWrapper<undefined>;

export type GetDevicesZpaZdmGroupsZdmGroupIdVersionsVariables = {
  headers?: GetDevicesZpaZdmGroupsZdmGroupIdVersionsHeaders;
  pathParams: GetDevicesZpaZdmGroupsZdmGroupIdVersionsPathParams;
} & FetcherExtraProps;

/**
 * Get ZPA firmware and app version information that can be upgraded for devices.
 *
 * **Scopes:** `device:read:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
 */
export const getDevicesZpaZdmGroupsZdmGroupIdVersions = (
  variables: GetDevicesZpaZdmGroupsZdmGroupIdVersionsVariables,
  signal?: AbortSignal
) =>
  fetch<
    Record<string, any>,
    GetDevicesZpaZdmGroupsZdmGroupIdVersionsError,
    undefined,
    GetDevicesZpaZdmGroupsZdmGroupIdVersionsHeaders,
    {},
    GetDevicesZpaZdmGroupsZdmGroupIdVersionsPathParams
  >({ url: '/devices/zpa/zdm_groups/{zdmGroupId}/versions', method: 'get', ...variables, signal });

export type PatchDevicesDeviceIdAssignmentPathParams = {
  /**
   * (Required) Unique identifier of the device.
   */
  deviceId: string;
};

export type PatchDevicesDeviceIdAssignmentHeaders = {
  ['Content-Type']?: string;
};

export type PatchDevicesDeviceIdAssignmentError = Fetcher.ErrorWrapper<undefined>;

export type PatchDevicesDeviceIdAssignmentVariables = {
  body?: Record<string, any>;
  headers?: PatchDevicesDeviceIdAssignmentHeaders;
  pathParams: PatchDevicesDeviceIdAssignmentPathParams;
} & FetcherExtraProps;

/**
 * This Device API lets you change device association from one Zoom Room to another.
 *
 * **Prerequisites:**
 * * Device must be enrolled in ZMD (Zoom Device Management)
 *
 *
 *
 * **Scopes:** `device:write:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`
 */
export const patchDevicesDeviceIdAssignment = (
  variables: PatchDevicesDeviceIdAssignmentVariables,
  signal?: AbortSignal
) =>
  fetch<
    undefined,
    PatchDevicesDeviceIdAssignmentError,
    Record<string, any>,
    PatchDevicesDeviceIdAssignmentHeaders,
    {},
    PatchDevicesDeviceIdAssignmentPathParams
  >({ url: '/devices/{deviceId}/assignment', method: 'patch', ...variables, signal });

export type GetDevicesDeviceIdPathParams = {
  /**
   * (Required) The device's unique identifier.
   */
  deviceId: string;
};

export type GetDevicesDeviceIdHeaders = {
  Accept?: string;
};

export type GetDevicesDeviceIdError = Fetcher.ErrorWrapper<undefined>;

export type GetDevicesDeviceIdVariables = {
  headers?: GetDevicesDeviceIdHeaders;
  pathParams: GetDevicesDeviceIdPathParams;
} & FetcherExtraProps;

/**
 * Retrieve a device's details.
 *
 * **Scopes:** `device:read:admin`,`device:write:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `HEAVY`
 */
export const getDevicesDeviceId = (variables: GetDevicesDeviceIdVariables, signal?: AbortSignal) =>
  fetch<
    Record<string, any>,
    GetDevicesDeviceIdError,
    undefined,
    GetDevicesDeviceIdHeaders,
    {},
    GetDevicesDeviceIdPathParams
  >({ url: '/devices/{deviceId}', method: 'get', ...variables, signal });

export type DeleteDevicesDeviceIdPathParams = {
  /**
   * (Required) Unique identifier of the device.
   */
  deviceId: string;
};

export type DeleteDevicesDeviceIdError = Fetcher.ErrorWrapper<undefined>;

export type DeleteDevicesDeviceIdVariables = {
  pathParams: DeleteDevicesDeviceIdPathParams;
} & FetcherExtraProps;

/**
 * Delete a device from a Zoom account.
 *
 * **Prerequisites:**
 * * Device must be enrolled in ZMD (Zoom Device Management)
 *
 * **Scopes:** `device:write:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `HEAVY`
 */
export const deleteDevicesDeviceId = (variables: DeleteDevicesDeviceIdVariables, signal?: AbortSignal) =>
  fetch<undefined, DeleteDevicesDeviceIdError, undefined, {}, {}, DeleteDevicesDeviceIdPathParams>({
    url: '/devices/{deviceId}',
    method: 'delete',
    ...variables,
    signal
  });

export type PatchDevicesDeviceIdPathParams = {
  /**
   * (Required) Unique identifier of the device.
   */
  deviceId: string;
};

export type PatchDevicesDeviceIdHeaders = {
  ['Content-Type']?: string;
};

export type PatchDevicesDeviceIdError = Fetcher.ErrorWrapper<undefined>;

export type PatchDevicesDeviceIdVariables = {
  body?: Record<string, any>;
  headers?: PatchDevicesDeviceIdHeaders;
  pathParams: PatchDevicesDeviceIdPathParams;
} & FetcherExtraProps;

/**
 * Change device name.
 *
 * **Prerequisites:**
 * * Device must be enrolled in ZMD (Zoom Device Management)
 *
 * **Scopes:** `device:write:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
 */
export const patchDevicesDeviceId = (variables: PatchDevicesDeviceIdVariables, signal?: AbortSignal) =>
  fetch<
    undefined,
    PatchDevicesDeviceIdError,
    Record<string, any>,
    PatchDevicesDeviceIdHeaders,
    {},
    PatchDevicesDeviceIdPathParams
  >({ url: '/devices/{deviceId}', method: 'patch', ...variables, signal });

export type GetDevicesQueryParams = {
  /**
   * Filter devices by name or serial number.
   */
  search_text?: string;
  /**
   * Filter devices by platform operating system.
   */
  platform_os?: string;
  /**
   * Filter devices by enrollment of ZDM (Zoom Device Management).
   */
  is_enrolled_in_zdm?: boolean;
  /**
   * Filter devices by device type.
   *   Device Type:
   *  `-1` - All Zoom Room device(0,1,2,3,4,6).
   *  `0` - Zoom Rooms Computer.
   *  `1` - Zoom Rooms Controller.
   *  `2` - Zoom Rooms Scheduling Display.
   *  `3` - Zoom Rooms Control System.
   *  `4` -  Zoom Rooms Whiteboard.
   *  `5` - Zoom Phone Appliance.
   *  `6` - Zoom Rooms Computer (with Controller).
   */
  device_type?: number;
  /**
   * Filter devices by vendor.
   */
  device_vendor?: string;
  /**
   * Filter devices by model.
   */
  device_model?: string;
  /**
   * Filter devices by status.
   *   Device Status:
   *  `0` - offline.
   *  `1` - online.
   *  `-1` - unlink
   */
  device_status?: number;
  /**
   * The number of records returned within a single API call.
   */
  page_size?: number;
  /**
   * Use the next page token to paginate through large result sets. A next page token is returned whenever the set of available results exceeds the current page size. This token's expiration period is 15 minutes.
   */
  next_page_token?: string;
};

export type GetDevicesHeaders = {
  Accept?: string;
};

export type GetDevicesError = Fetcher.ErrorWrapper<undefined>;

export type GetDevicesVariables = {
  headers?: GetDevicesHeaders;
  queryParams?: GetDevicesQueryParams;
} & FetcherExtraProps;

/**
 * This API lets you list devices.
 *
 *
 *
 * **Scopes:** `device:read:admin`,`device:write:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `HEAVY`
 */
export const getDevices = (variables: GetDevicesVariables, signal?: AbortSignal) =>
  fetch<Record<string, any>, GetDevicesError, undefined, GetDevicesHeaders, GetDevicesQueryParams, {}>({
    url: '/devices',
    method: 'get',
    ...variables,
    signal
  });

export type PostDevicesHeaders = {
  ['Content-Type']?: string;
};

export type PostDevicesError = Fetcher.ErrorWrapper<undefined>;

export type PostDevicesVariables = {
  body?: Record<string, any>;
  headers?: PostDevicesHeaders;
} & FetcherExtraProps;

/**
 * Add a new device to Zoom account.
 *
 * **Scope:** `device:write:admin`
 *
 *  **[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Medium`
 *
 * **Scopes:** `device:write:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
 */
export const postDevices = (variables: PostDevicesVariables, signal?: AbortSignal) =>
  fetch<undefined, PostDevicesError, Record<string, any>, PostDevicesHeaders, {}, {}>({
    url: '/devices',
    method: 'post',
    ...variables,
    signal
  });

export type GetUsersUserIdRecordingsPathParams = {
  /**
   * (Required) The user's ID or email address. For user-level apps, pass the `me` value.
   */
  userId: string;
};

export type GetUsersUserIdRecordingsQueryParams = {
  /**
   * The number of records returned within a single API call.
   */
  page_size?: number;
  /**
   * The next page token paginates through a large set of results. A next page token returns whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
   */
  next_page_token?: string;
  /**
   * The query metadata of the recording if using an on-premise meeting connector for the meeting.
   */
  mc?: boolean;
  /**
   * The query trash.
   * * `true` - List recordings from trash.
   * * `false` - Do not list recordings from the trash.
   *
   * The default value is `false`. If you set it to `true`, you can use the `trash_type` property to indicate the type of Cloud recording that you need to retrieve.
   */
  trash?: boolean;
  /**
   * The start date in 'yyyy-mm-dd' UTC format for the date range where you would like to retrieve recordings. The maximum range can be a month. If no value is provided for this field, the default will be current date.
   *
   * For example, if you make the API request on June 30, 2020, without providing the `from` and `to` parameters, by default the value of 'from' field will be `2020-06-30` and the value of the 'to' field will be `2020-07-01`.
   *
   * **Note**: The `trash` files cannot be filtered by date range and thus, the `from` and `to` fields should not be used for trash files.
   */
  from?: string;
  /**
   * The end date in 'yyyy-mm-dd' 'yyyy-mm-dd' UTC format.
   */
  to?: string;
  /**
   * The type of cloud recording to retrieve from the trash.
   *
   *  *   `meeting_recordings`: List all meeting recordings from the trash.
   *  *  `recording_file`: List all individual recording files from the trash.
   */
  trash_type?: string;
  /**
   * The meeting ID.
   */
  meeting_id?: string;
};

export type GetUsersUserIdRecordingsHeaders = {
  Accept?: string;
};

export type GetUsersUserIdRecordingsError = Fetcher.ErrorWrapper<undefined>;

export type GetUsersUserIdRecordingsVariables = {
  headers?: GetUsersUserIdRecordingsHeaders;
  pathParams: GetUsersUserIdRecordingsPathParams;
  queryParams?: GetUsersUserIdRecordingsQueryParams;
} & FetcherExtraProps;

/**
 * Lists all [cloud recordings](https://support.zoom.us/hc/en-us/articles/203741855-Cloud-Recording) for a user.
 *
 * For user-level apps, pass the [`me` value](https://developers.zoom.us/docs/api/rest/using-zoom-apis/#the-me-keyword) instead of the `userId` parameter.  To access a user's passcode protected cloud recording, send the user's [OAuth access token](https://developers.zoom.us/docs/integrations/oauth/) as a bearer token in the authorization header.
 *
 * Example:  `curl -H "Authorization: Bearer <ACCESS_TOKEN>" https://{{base-domain}}/rec/archive/download/xyz`
 *
 * **Prerequisites:**
 * * Must have a Pro or a higher plan.
 * * Must enable Cloud Recording on the user's account.
 *
 * **Scopes:** `recording:read:admin`,`recording:read`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
 */
export const getUsersUserIdRecordings = (variables: GetUsersUserIdRecordingsVariables, signal?: AbortSignal) =>
  fetch<
    Record<string, any>,
    GetUsersUserIdRecordingsError,
    undefined,
    GetUsersUserIdRecordingsHeaders,
    GetUsersUserIdRecordingsQueryParams,
    GetUsersUserIdRecordingsPathParams
  >({ url: '/users/{userId}/recordings', method: 'get', ...variables, signal });

export type GetUsersUserIdMeetingTemplatesPathParams = {
  /**
   * (Required) The user ID retrievable from the [List users](/api-reference/zoom-api/methods#operation/users) API.
   */
  userId: string;
};

export type GetUsersUserIdMeetingTemplatesHeaders = {
  Accept?: string;
};

export type GetUsersUserIdMeetingTemplatesError = Fetcher.ErrorWrapper<undefined>;

export type GetUsersUserIdMeetingTemplatesVariables = {
  headers?: GetUsersUserIdMeetingTemplatesHeaders;
  pathParams: GetUsersUserIdMeetingTemplatesPathParams;
} & FetcherExtraProps;

/**
 * List available [meeting templates](https://support.zoom.us/hc/en-us/articles/360036559151-Meeting-templates) for a user. For user-level apps, pass [the `me` value](https://developers.zoom.us/docs/api/rest/using-zoom-apis/#the-me-keyword) instead of the `userId` parameter.
 *
 *
 *
 * **Scopes:** `meeting:read`,`meeting:read:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`
 */
export const getUsersUserIdMeetingTemplates = (
  variables: GetUsersUserIdMeetingTemplatesVariables,
  signal?: AbortSignal
) =>
  fetch<
    Record<string, any>,
    GetUsersUserIdMeetingTemplatesError,
    undefined,
    GetUsersUserIdMeetingTemplatesHeaders,
    {},
    GetUsersUserIdMeetingTemplatesPathParams
  >({ url: '/users/{userId}/meeting_templates', method: 'get', ...variables, signal });

export type PostUsersUserIdMeetingTemplatesPathParams = {
  /**
   * (Required) The user ID retrievable from the [List users](/api-reference/zoom-api/methods#operation/users) API.
   */
  userId: string;
};

export type PostUsersUserIdMeetingTemplatesHeaders = {
  ['Content-Type']?: string;
  Accept?: string;
};

export type PostUsersUserIdMeetingTemplatesError = Fetcher.ErrorWrapper<undefined>;

export type PostUsersUserIdMeetingTemplatesVariables = {
  body?: Record<string, any>;
  headers?: PostUsersUserIdMeetingTemplatesHeaders;
  pathParams: PostUsersUserIdMeetingTemplatesPathParams;
} & FetcherExtraProps;

/**
 * Create a meeting template from an existing meeting.
 *
 *
 *
 * **Scopes:** `meeting:write:admin`,`meeting:write`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`
 */
export const postUsersUserIdMeetingTemplates = (
  variables: PostUsersUserIdMeetingTemplatesVariables,
  signal?: AbortSignal
) =>
  fetch<
    Record<string, any>,
    PostUsersUserIdMeetingTemplatesError,
    Record<string, any>,
    PostUsersUserIdMeetingTemplatesHeaders,
    {},
    PostUsersUserIdMeetingTemplatesPathParams
  >({ url: '/users/{userId}/meeting_templates', method: 'post', ...variables, signal });

export type GetUsersUserIdMeetingsPathParams = {
  /**
   * (Required) The user's user ID or email address. For user-level apps, pass the `me` value.
   */
  userId: string;
};

export type GetUsersUserIdMeetingsQueryParams = {
  /**
   * The type of meeting.
   * * `scheduled` - All valid previous (unexpired) meetings, live meetings, and upcoming scheduled meetings.
   * * `live` - All the ongoing meetings.
   * * `upcoming` - All upcoming meetings, including live meetings.
   * * `upcoming_meetings` - All upcoming meetings, including live meetings.
   * * `previous_meetings` - All the previous meetings.
   */
  type?: string;
  /**
   * The number of records returned within a single API call.
   */
  page_size?: number;
  /**
   * Use the next page token to paginate through large result sets. A next page token is returned whenever the set of available results exceeds the current page size. This token's expiration period is 15 minutes.
   */
  next_page_token?: string;
  /**
   * The page number of the current page in the returned records.
   */
  page_number?: string;
  /**
   * The start date.
   */
  from?: string;
  /**
   * The end date.
   */
  to?: string;
  /**
   * The timezone to assign to the `from` and `to` value. For a list of supported timezones and their formats, see our [timezone list](https://developers.zoom.us/docs/api/rest/other-references/abbreviation-lists/#timezones).
   */
  timezone?: string;
};

export type GetUsersUserIdMeetingsHeaders = {
  Accept?: string;
};

export type GetUsersUserIdMeetingsError = Fetcher.ErrorWrapper<undefined>;

export type GetUsersUserIdMeetingsVariables = {
  headers?: GetUsersUserIdMeetingsHeaders;
  pathParams: GetUsersUserIdMeetingsPathParams;
  queryParams?: GetUsersUserIdMeetingsQueryParams;
} & FetcherExtraProps;

/**
 * List a meeting host user's scheduled meetings. For user-level apps, pass [the `me` value](https://developers.zoom.us/docs/api/rest/using-zoom-apis/#the-me-keyword) instead of the `userId` parameter.
 *
 * **Note**
 * * This API **only** supports scheduled meetings. This API does not return information about instant meetings.
 * * This API only returns a user's [unexpired meetings](https://support.zoom.us/hc/en-us/articles/201362373-Meeting-ID#h_c73f9b08-c1c0-4a1a-b538-e01ebb98e844).
 *
 *
 *
 * **Scopes:** `meeting:read`,`meeting:read:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
 */
export const getUsersUserIdMeetings = (variables: GetUsersUserIdMeetingsVariables, signal?: AbortSignal) =>
  fetch<
    Record<string, any>,
    GetUsersUserIdMeetingsError,
    undefined,
    GetUsersUserIdMeetingsHeaders,
    GetUsersUserIdMeetingsQueryParams,
    GetUsersUserIdMeetingsPathParams
  >({ url: '/users/{userId}/meetings', method: 'get', ...variables, signal });

export type PostUsersUserIdMeetingsPathParams = {
  /**
   * (Required) The user's user ID or email address. For user-level apps, pass the `me` value.
   */
  userId: string;
};

export type PostUsersUserIdMeetingsHeaders = {
  ['Content-Type']?: string;
  Accept?: string;
};

export type PostUsersUserIdMeetingsError = Fetcher.ErrorWrapper<undefined>;

export type PostUsersUserIdMeetingsVariables = {
  body?: Record<string, any>;
  headers?: PostUsersUserIdMeetingsHeaders;
  pathParams: PostUsersUserIdMeetingsPathParams;
} & FetcherExtraProps;

/**
 * [Create a meeting](https://support.zoom.us/hc/en-us/articles/201362413-Scheduling-meetings) for a user. For user-level apps, pass [the `me` value](https://developers.zoom.us/docs/api/rest/using-zoom-apis/#the-me-keyword) instead of the `userId` parameter.
 *
 * * A meeting's `start_url` value is the URL a host or an alternative host can use to start a meeting. The expiration time for the `start_url` value is **two hours** for all regular users.
 * * For `custCreate` meeting hosts (users created with the `custCreate` parameter via the [**Create users**](https://developers.zoom.us/docs/api/rest/reference/zoom-api/methods/#operation/userCreate) API), the expiration time of the `start_url` parameter is **90 days** from the generation of the `start_url`.
 *
 * **Note:**
 *
 * For security reasons, the recommended way to programmatically get the updated `start_url` value after expiry is to call the [**Get a meeting**](/api-reference/zoom-api/methods#operation/meeting) API. Refer to the `start_url` value in the response.
 *
 *  **100 requests per day**. The rate limit is applied against the `userId` of the **meeting host** used to make the request.
 *
 * **Scopes:** `meeting:write`,`meeting:write:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
 */
export const postUsersUserIdMeetings = (variables: PostUsersUserIdMeetingsVariables, signal?: AbortSignal) =>
  fetch<
    Record<string, any>,
    PostUsersUserIdMeetingsError,
    Record<string, any>,
    PostUsersUserIdMeetingsHeaders,
    {},
    PostUsersUserIdMeetingsPathParams
  >({ url: '/users/{userId}/meetings', method: 'post', ...variables, signal });

export type GetUsersUserIdUpcomingMeetingsPathParams = {
  /**
   * (Required) The user's user ID or email address. For user-level apps, pass [the `me` value](https://developers.zoom.us/docs/api/rest/using-zoom-apis/#the-me-keyword).
   */
  userId: string;
};

export type GetUsersUserIdUpcomingMeetingsHeaders = {
  Accept?: string;
};

export type GetUsersUserIdUpcomingMeetingsError = Fetcher.ErrorWrapper<undefined>;

export type GetUsersUserIdUpcomingMeetingsVariables = {
  headers?: GetUsersUserIdUpcomingMeetingsHeaders;
  pathParams: GetUsersUserIdUpcomingMeetingsPathParams;
} & FetcherExtraProps;

/**
 * List a Zoom user's upcoming meetings. For user-level apps, pass [the `me` value](https://developers.zoom.us/docs/api/rest/using-zoom-apis/#the-me-keyword) instead of the `userId` parameter.
 *
 * **Note**
 * * This API includes the meetings that Zoom users schedule and the meetings they are invited to join.
 * * This API **only** includes upcoming meetings within the next 24 hours.
 *
 * **Scopes:** `meeting:read`,`meeting:read:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
 */
export const getUsersUserIdUpcomingMeetings = (
  variables: GetUsersUserIdUpcomingMeetingsVariables,
  signal?: AbortSignal
) =>
  fetch<
    Record<string, any>,
    GetUsersUserIdUpcomingMeetingsError,
    undefined,
    GetUsersUserIdUpcomingMeetingsHeaders,
    {},
    GetUsersUserIdUpcomingMeetingsPathParams
  >({ url: '/users/{userId}/upcoming_meetings', method: 'get', ...variables, signal });

export type GetUsersUserIdPacPathParams = {
  /**
   * (Required) The user's user ID or email address. For user-level apps, pass the `me` value.
   */
  userId: string;
};

export type GetUsersUserIdPacHeaders = {
  Accept?: string;
};

export type GetUsersUserIdPacError = Fetcher.ErrorWrapper<undefined>;

export type GetUsersUserIdPacVariables = {
  headers?: GetUsersUserIdPacHeaders;
  pathParams: GetUsersUserIdPacPathParams;
} & FetcherExtraProps;

/**
 * Retrieve a list of a user's [personal audio conference (PAC)](https://support.zoom.us/hc/en-us/articles/204517069-Getting-Started-with-Personal-Audio-Conference) accounts. For user-level apps, pass [the `me` value](https://developers.zoom.us/docs/api/rest/using-zoom-apis/#the-me-keyword) instead of the `userId` parameter.
 *
 *  PAC allows Pro or higher account holders to host meetings through PSTN (phone dial-in) only.
 *
 *  **Prerequisites**
 * * A Pro or higher plan with an [Audio Conferencing](https://support.zoom.us/hc/en-us/articles/204517069-Getting-Started-with-Personal-Audio-Conference) subscription.
 * * The [**Personal Audio Conference**](https://support.zoom.us/hc/en-us/articles/204517069-Getting-Started-with-Personal-Audio-Conference#h_01F5BPM447M6QDJXX50RSFXKJ3) setting enabled in the user's profile.
 *
 * **Scopes:** `pac:read:admin`,`pac:read`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
 */
export const getUsersUserIdPac = (variables: GetUsersUserIdPacVariables, signal?: AbortSignal) =>
  fetch<
    Record<string, any>,
    GetUsersUserIdPacError,
    undefined,
    GetUsersUserIdPacHeaders,
    {},
    GetUsersUserIdPacPathParams
  >({ url: '/users/{userId}/pac', method: 'get', ...variables, signal });

export type PatchUsersUserIdTspSettingsPathParams = {
  /**
   * (Required) The userId or email address of the user.
   */
  userId: string;
};

export type PatchUsersUserIdTspSettingsHeaders = {
  ['Content-Type']?: string;
};

export type PatchUsersUserIdTspSettingsError = Fetcher.ErrorWrapper<undefined>;

export type PatchUsersUserIdTspSettingsVariables = {
  body?: Record<string, any>;
  headers?: PatchUsersUserIdTspSettingsHeaders;
  pathParams: PatchUsersUserIdTspSettingsPathParams;
} & FetcherExtraProps;

/**
 * A global dial-in page can provide a list of global access numbers using which audio conferencing can be conducted. By calling this API, you can set the url for the global dial-in page of a user whose Zoom account has TSP and special TSP with third-party audio conferencing options enabled. &lt;p&gt;&lt;/p&gt;
 *
 *
 * **Scopes:** `tsp:write:admin`,`tsp:write`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
 */
export const patchUsersUserIdTspSettings = (variables: PatchUsersUserIdTspSettingsVariables, signal?: AbortSignal) =>
  fetch<
    undefined,
    PatchUsersUserIdTspSettingsError,
    Record<string, any>,
    PatchUsersUserIdTspSettingsHeaders,
    {},
    PatchUsersUserIdTspSettingsPathParams
  >({ url: '/users/{userId}/tsp/settings', method: 'patch', ...variables, signal });

export type GetUsersUserIdTspTspIdPathParams = {
  /**
   * (Required) The user ID or email address of the user. For user-level apps, pass the `me` value.
   */
  userId: string;
  /**
   * (Required) TSP account ID.
   */
  tspId: number;
};

export type GetUsersUserIdTspTspIdHeaders = {
  Accept?: string;
};

export type GetUsersUserIdTspTspIdError = Fetcher.ErrorWrapper<undefined>;

export type GetUsersUserIdTspTspIdVariables = {
  headers?: GetUsersUserIdTspTspIdHeaders;
  pathParams: GetUsersUserIdTspTspIdPathParams;
} & FetcherExtraProps;

/**
 * Each user can have a maximum of two TSP accounts. Use this API to retrieve details of a specific TSP account enabled for a specific user.
 *
 *
 *
 *
 * **Scopes:** `tsp:read:admin`,`tsp:read`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
 */
export const getUsersUserIdTspTspId = (variables: GetUsersUserIdTspTspIdVariables, signal?: AbortSignal) =>
  fetch<
    Record<string, any>,
    GetUsersUserIdTspTspIdError,
    undefined,
    GetUsersUserIdTspTspIdHeaders,
    {},
    GetUsersUserIdTspTspIdPathParams
  >({ url: '/users/{userId}/tsp/{tspId}', method: 'get', ...variables, signal });

export type DeleteUsersUserIdTspTspIdPathParams = {
  /**
   * (Required) The user ID or email address of the user. For user-level apps, pass the `me` value.
   */
  userId: string;
  /**
   * (Required) TSP account ID.
   */
  tspId: number;
};

export type DeleteUsersUserIdTspTspIdError = Fetcher.ErrorWrapper<undefined>;

export type DeleteUsersUserIdTspTspIdVariables = {
  pathParams: DeleteUsersUserIdTspTspIdPathParams;
} & FetcherExtraProps;

/**
 * Delete a user's TSP account.
 *
 *
 *
 *
 * **Scopes:** `tsp:write:admin`,`tsp:write`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
 */
export const deleteUsersUserIdTspTspId = (variables: DeleteUsersUserIdTspTspIdVariables, signal?: AbortSignal) =>
  fetch<undefined, DeleteUsersUserIdTspTspIdError, undefined, {}, {}, DeleteUsersUserIdTspTspIdPathParams>({
    url: '/users/{userId}/tsp/{tspId}',
    method: 'delete',
    ...variables,
    signal
  });

export type PatchUsersUserIdTspTspIdPathParams = {
  /**
   * (Required) The user ID or email address of the user. For user-level apps, pass the `me` value.
   */
  userId: string;
  /**
   * (Required) TSP account ID.
   */
  tspId: number;
};

export type PatchUsersUserIdTspTspIdHeaders = {
  ['Content-Type']?: string;
};

export type PatchUsersUserIdTspTspIdError = Fetcher.ErrorWrapper<undefined>;

export type PatchUsersUserIdTspTspIdVariables = {
  body?: Record<string, any>;
  headers?: PatchUsersUserIdTspTspIdHeaders;
  pathParams: PatchUsersUserIdTspTspIdPathParams;
} & FetcherExtraProps;

/**
 * Update a user's TSP account.
 *
 *
 *
 *
 * **Scopes:** `tsp:write:admin`,`tsp:write`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
 */
export const patchUsersUserIdTspTspId = (variables: PatchUsersUserIdTspTspIdVariables, signal?: AbortSignal) =>
  fetch<
    undefined,
    PatchUsersUserIdTspTspIdError,
    Record<string, any>,
    PatchUsersUserIdTspTspIdHeaders,
    {},
    PatchUsersUserIdTspTspIdPathParams
  >({ url: '/users/{userId}/tsp/{tspId}', method: 'patch', ...variables, signal });

export type GetUsersUserIdTspPathParams = {
  /**
   * (Required) The user ID or email address of the user. For user-level apps, pass the `me` value.
   */
  userId: string;
};

export type GetUsersUserIdTspHeaders = {
  Accept?: string;
};

export type GetUsersUserIdTspError = Fetcher.ErrorWrapper<undefined>;

export type GetUsersUserIdTspVariables = {
  headers?: GetUsersUserIdTspHeaders;
  pathParams: GetUsersUserIdTspPathParams;
} & FetcherExtraProps;

/**
 * A user can have a maximum of two TSP accounts. Use this API to list all TSP accounts of a user.
 *
 *
 *
 *
 * **Scopes:** `tsp:read:admin`,`tsp:read`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`
 */
export const getUsersUserIdTsp = (variables: GetUsersUserIdTspVariables, signal?: AbortSignal) =>
  fetch<
    Record<string, any>,
    GetUsersUserIdTspError,
    undefined,
    GetUsersUserIdTspHeaders,
    {},
    GetUsersUserIdTspPathParams
  >({ url: '/users/{userId}/tsp', method: 'get', ...variables, signal });

export type PostUsersUserIdTspPathParams = {
  /**
   * (Required) The user ID or email address of the user. For user-level apps, pass the `me` value.
   */
  userId: string;
};

export type PostUsersUserIdTspHeaders = {
  ['Content-Type']?: string;
  Accept?: string;
};

export type PostUsersUserIdTspError = Fetcher.ErrorWrapper<undefined>;

export type PostUsersUserIdTspVariables = {
  body?: Record<string, any>;
  headers?: PostUsersUserIdTspHeaders;
  pathParams: PostUsersUserIdTspPathParams;
} & FetcherExtraProps;

/**
 * Add a user's TSP account.
 *
 *
 *
 *
 * **Scopes:** `tsp:write:admin`,`tsp:write`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
 */
export const postUsersUserIdTsp = (variables: PostUsersUserIdTspVariables, signal?: AbortSignal) =>
  fetch<
    Record<string, any>,
    PostUsersUserIdTspError,
    Record<string, any>,
    PostUsersUserIdTspHeaders,
    {},
    PostUsersUserIdTspPathParams
  >({ url: '/users/{userId}/tsp', method: 'post', ...variables, signal });

export type GetUsersUserIdWebinarTemplatesPathParams = {
  /**
   * (Required) The user's ID. To get a user's ID, use the [**List users**](/docs/api-reference/zoom-api/ma#operation/users) API. For user-level apps, pass the `me` value instead of the user ID value.
   */
  userId: string;
};

export type GetUsersUserIdWebinarTemplatesHeaders = {
  Accept?: string;
};

export type GetUsersUserIdWebinarTemplatesError = Fetcher.ErrorWrapper<undefined>;

export type GetUsersUserIdWebinarTemplatesVariables = {
  headers?: GetUsersUserIdWebinarTemplatesHeaders;
  pathParams: GetUsersUserIdWebinarTemplatesPathParams;
} & FetcherExtraProps;

/**
 * Display a list of a user's [webinar templates](https://support.zoom.us/hc/en-us/articles/115001079746-Webinar-Templates). For user-level apps, pass [the `me` value](/docs/api-reference/using-zoom-apis#mekeyword) instead of the `userId` parameter. When you schedule a webinar, save the settings for that webinar as a template for scheduling future webinars.  To use a template when scheduling a webinar, use the `id` value in this API response in the `template_id` field of the [**Create a webinar**](/docs/api-reference/zoom-api/methods#operation/webinarCreate) API. **Prerequisites:** * A Pro or a higher account with the [Zoom Webinar plan](https://zoom.us/pricing/webinar).
 *
 * **Scopes:** `webinar:read:admin`,`webinar:read`
 */
export const getUsersUserIdWebinarTemplates = (
  variables: GetUsersUserIdWebinarTemplatesVariables,
  signal?: AbortSignal
) =>
  fetch<
    Record<string, any>,
    GetUsersUserIdWebinarTemplatesError,
    undefined,
    GetUsersUserIdWebinarTemplatesHeaders,
    {},
    GetUsersUserIdWebinarTemplatesPathParams
  >({ url: '/users/{userId}/webinar_templates', method: 'get', ...variables, signal });

export type PostUsersUserIdWebinarTemplatesPathParams = {
  /**
   * (Required) The user ID retrievable from the [List users](/api-reference/zoom-api/methods#operation/users) API.
   */
  userId: string;
};

export type PostUsersUserIdWebinarTemplatesHeaders = {
  ['Content-Type']?: string;
  Accept?: string;
};

export type PostUsersUserIdWebinarTemplatesError = Fetcher.ErrorWrapper<undefined>;

export type PostUsersUserIdWebinarTemplatesVariables = {
  body?: Record<string, any>;
  headers?: PostUsersUserIdWebinarTemplatesHeaders;
  pathParams: PostUsersUserIdWebinarTemplatesPathParams;
} & FetcherExtraProps;

/**
 * Use this API to create a webinar template from an existing webinar.
 *
 *
 *
 * **Scopes:** `webinar:write:admin`,`webinar:write`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`
 */
export const postUsersUserIdWebinarTemplates = (
  variables: PostUsersUserIdWebinarTemplatesVariables,
  signal?: AbortSignal
) =>
  fetch<
    Record<string, any>,
    PostUsersUserIdWebinarTemplatesError,
    Record<string, any>,
    PostUsersUserIdWebinarTemplatesHeaders,
    {},
    PostUsersUserIdWebinarTemplatesPathParams
  >({ url: '/users/{userId}/webinar_templates', method: 'post', ...variables, signal });

export type GetUsersUserIdWebinarsPathParams = {
  /**
   * (Required) The user's user ID or email address. For user-level apps, pass the `me` value.
   */
  userId: string;
};

export type GetUsersUserIdWebinarsQueryParams = {
  /**
   * The type of webinar.
   * * `scheduled` - All valid previous (unexpired) webinars, live webinars, and upcoming scheduled webinars.
   * * `upcoming` - All upcoming webinars, including live webinars.
   */
  type?: string;
  /**
   * The number of records returned within a single API call.
   */
  page_size?: number;
  /**
   * **Deprecated** We will no longer support this field in a future release. Instead, use the `next_page_token` for pagination.
   */
  page_number?: number;
};

export type GetUsersUserIdWebinarsHeaders = {
  Accept?: string;
};

export type GetUsersUserIdWebinarsError = Fetcher.ErrorWrapper<undefined>;

export type GetUsersUserIdWebinarsVariables = {
  headers?: GetUsersUserIdWebinarsHeaders;
  pathParams: GetUsersUserIdWebinarsPathParams;
  queryParams?: GetUsersUserIdWebinarsQueryParams;
} & FetcherExtraProps;

/**
 * List all the webinars scheduled by or on behalf a webinar host. For user-level apps, pass [the `me` value](https://developers.zoom.us/docs/api/rest/using-zoom-apis/#the-me-keyword) instead of the `userId` parameter.
 *
 *  Zoom users with a [webinar plan](https://zoom.us/webinar) have access to creating and managing webinars. Webinars let a host broadcast a Zoom meeting to up to 10,000 attendees.
 *
 * **Note** This API only returns a user's [unexpired webinars](https://support.zoom.us/hc/en-us/articles/201362373-Meeting-ID#h_c73f9b08-c1c0-4a1a-b538-e01ebb98e844).
 *
 *  **Prerequisites**
 * * A Pro or higher plan with the webinar add-on.
 *
 * **Scopes:** `webinar:read:admin`,`webinar:read`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
 */
export const getUsersUserIdWebinars = (variables: GetUsersUserIdWebinarsVariables, signal?: AbortSignal) =>
  fetch<
    Record<string, any>,
    GetUsersUserIdWebinarsError,
    undefined,
    GetUsersUserIdWebinarsHeaders,
    GetUsersUserIdWebinarsQueryParams,
    GetUsersUserIdWebinarsPathParams
  >({ url: '/users/{userId}/webinars', method: 'get', ...variables, signal });

export type PostUsersUserIdWebinarsPathParams = {
  /**
   * (Required) The user ID or email address of the user. For user-level apps, pass the `me` value.
   */
  userId: string;
};

export type PostUsersUserIdWebinarsHeaders = {
  ['Content-Type']?: string;
  Accept?: string;
};

export type PostUsersUserIdWebinarsError = Fetcher.ErrorWrapper<undefined>;

export type PostUsersUserIdWebinarsVariables = {
  body?: Record<string, any>;
  headers?: PostUsersUserIdWebinarsHeaders;
  pathParams: PostUsersUserIdWebinarsPathParams;
} & FetcherExtraProps;

/**
 * Schedule a webinar for a user who is a webinar host. For user-level apps, pass [the `me` value](https://developers.zoom.us/docs/api/rest/using-zoom-apis/#the-me-keyword) instead of the `userId` parameter.
 *
 *  Webinars allow a host to broadcast a Zoom meeting to up to 10,000 attendees.
 *
 * **Rate limit:**
 * Up to a maximum of **100 requests per day**. The rate limit is applied to the `userId` of the **webinar host** used to make the request.
 *
 * **Prerequisites:**
 * * A Pro or higher plan with a [Webinar plan](https://zoom.us/webinar) add-on.
 *
 * **Scopes:** `webinar:write`,`webinar:write:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
 */
export const postUsersUserIdWebinars = (variables: PostUsersUserIdWebinarsVariables, signal?: AbortSignal) =>
  fetch<
    Record<string, any>,
    PostUsersUserIdWebinarsError,
    Record<string, any>,
    PostUsersUserIdWebinarsHeaders,
    {},
    PostUsersUserIdWebinarsPathParams
  >({ url: '/users/{userId}/webinars', method: 'post', ...variables, signal });

export type GetMeetingsMeetingIdRecordingsAnalyticsDetailsPathParams = {
  /**
   * (Required) To get Cloud Recordings of a meeting, provide the meeting ID or meeting UUID. If the meeting ID is provided instead of UUID,the response will be for the latest meeting instance.
   *
   * To get Cloud Recordings of a webinar, provide the webinar ID or the webinar UUID. If the webinar ID is provided instead of UUID,the response will be for the latest webinar instance.
   *
   * If a UUID starts with &quot;/&quot; or contains &quot;//&quot; (example: &quot;/ajXp112QmuoKj4854875==&quot;), you must **[double encode](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis/#meeting-id-and-uuid)** the UUID before making an API request.
   */
  meetingId: string;
};

export type GetMeetingsMeetingIdRecordingsAnalyticsDetailsQueryParams = {
  /**
   * The number of records returned within a single API call.
   */
  page_size?: number;
  /**
   * Use the next page token to paginate through large result sets. A next page token is returned whenever the set of available results exceeds the current page size. This token's expiration period is 15 minutes.
   */
  next_page_token?: string;
  /**
   * The start date for the monthly range to query. The maximum range can be a month. If you do not provide this value, this defaults to the current date.
   */
  from?: string;
  /**
   * The end date for the monthly range to query. The maximum range can be a month.
   */
  to?: string;
  /**
   * The type of analytics details:
   * * `by_view` &mdash; by_view.
   * * `by_download` &mdash; by_download.
   */
  type?: string;
};

export type GetMeetingsMeetingIdRecordingsAnalyticsDetailsHeaders = {
  Accept?: string;
};

export type GetMeetingsMeetingIdRecordingsAnalyticsDetailsError = Fetcher.ErrorWrapper<undefined>;

export type GetMeetingsMeetingIdRecordingsAnalyticsDetailsVariables = {
  headers?: GetMeetingsMeetingIdRecordingsAnalyticsDetailsHeaders;
  pathParams: GetMeetingsMeetingIdRecordingsAnalyticsDetailsPathParams;
  queryParams?: GetMeetingsMeetingIdRecordingsAnalyticsDetailsQueryParams;
} & FetcherExtraProps;

/**
 * Use this API to return a meeting recording's [analytics details](https://support.zoom.us/hc/en-us/articles/205347605-Managing-cloud-recordings#h_0b665029-ce74-4849-9794-d1aa0320d163). **Maximum duration: 1 Month**. To access a password-protected cloud recording, send the user's [OAuth access token](https://developers.zoom.us/docs/integrations/oauth/) as a Bearer token in the Authorization header. For example,
 *
 *  `curl -H &quot;Authorization: Bearer &lt;ACCESS_TOKEN&gt;&quot; https://{{base-domain}}/rec/archive/download/xyz`
 *
 *
 *
 * **Scopes:** `recording:read:admin`,`recording:read`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`
 */
export const getMeetingsMeetingIdRecordingsAnalyticsDetails = (
  variables: GetMeetingsMeetingIdRecordingsAnalyticsDetailsVariables,
  signal?: AbortSignal
) =>
  fetch<
    Record<string, any>,
    GetMeetingsMeetingIdRecordingsAnalyticsDetailsError,
    undefined,
    GetMeetingsMeetingIdRecordingsAnalyticsDetailsHeaders,
    GetMeetingsMeetingIdRecordingsAnalyticsDetailsQueryParams,
    GetMeetingsMeetingIdRecordingsAnalyticsDetailsPathParams
  >({ url: '/meetings/{meetingId}/recordings/analytics_details', method: 'get', ...variables, signal });

export type GetMeetingsMeetingIdRecordingsAnalyticsSummaryPathParams = {
  /**
   * (Required) To get Cloud Recordings of a meeting, provide the meeting ID or meeting UUID. If the meeting ID is provided instead of UUID,the response will be for the latest meeting instance.
   *
   * To get Cloud Recordings of a webinar, provide the webinar ID or the webinar UUID. If the webinar ID is provided instead of UUID,the response will be for the latest webinar instance.
   *
   * If a UUID starts with &quot;/&quot; or contains &quot;//&quot; (example: &quot;/ajXp112QmuoKj4854875==&quot;), you must **[double encode](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis/#meeting-id-and-uuid)** the UUID before making an API request.
   */
  meetingId: string;
};

export type GetMeetingsMeetingIdRecordingsAnalyticsSummaryQueryParams = {
  /**
   * The start date for the monthly range to query. The maximum range can be a month. If you do not provide this value, this defaults to the current date.
   */
  from?: string;
  /**
   * The end date for the monthly range to query. The maximum range can be a month.
   */
  to?: string;
};

export type GetMeetingsMeetingIdRecordingsAnalyticsSummaryHeaders = {
  Accept?: string;
};

export type GetMeetingsMeetingIdRecordingsAnalyticsSummaryError = Fetcher.ErrorWrapper<undefined>;

export type GetMeetingsMeetingIdRecordingsAnalyticsSummaryVariables = {
  headers?: GetMeetingsMeetingIdRecordingsAnalyticsSummaryHeaders;
  pathParams: GetMeetingsMeetingIdRecordingsAnalyticsSummaryPathParams;
  queryParams?: GetMeetingsMeetingIdRecordingsAnalyticsSummaryQueryParams;
} & FetcherExtraProps;

/**
 * Use this API to return a meeting recording's [analytics summary](https://support.zoom.us/hc/en-us/articles/205347605-Managing-cloud-recordings#h_0b665029-ce74-4849-9794-d1aa0320d163). **Maximum duration: 1 Month**. To access a password-protected cloud recording, send the user's [OAuth access token](https://developers.zoom.us/docs/integrations/oauth/) as a Bearer token in the Authorization header. For example,
 *
 *  `curl -H &quot;Authorization: Bearer &lt;ACCESS_TOKEN&gt;&quot; https://{{base-domain}}/rec/archive/download/xyz`
 *
 *
 *
 * **Scopes:** `recording:read:admin`,`recording:read`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`
 */
export const getMeetingsMeetingIdRecordingsAnalyticsSummary = (
  variables: GetMeetingsMeetingIdRecordingsAnalyticsSummaryVariables,
  signal?: AbortSignal
) =>
  fetch<
    Record<string, any>,
    GetMeetingsMeetingIdRecordingsAnalyticsSummaryError,
    undefined,
    GetMeetingsMeetingIdRecordingsAnalyticsSummaryHeaders,
    GetMeetingsMeetingIdRecordingsAnalyticsSummaryQueryParams,
    GetMeetingsMeetingIdRecordingsAnalyticsSummaryPathParams
  >({ url: '/meetings/{meetingId}/recordings/analytics_summary', method: 'get', ...variables, signal });

export type GetMeetingsMeetingIdRecordingsRegistrantsQuestionsPathParams = {
  /**
   * (Required) To get Cloud Recordings of a meeting, provide the meeting ID or meeting UUID. If the meeting ID is provided instead of UUID,the response will be for the latest meeting instance.
   *
   * To get Cloud Recordings of a webinar, provide the webinar ID or the webinar UUID. If the webinar ID is provided instead of UUID,the response will be for the latest webinar instance.
   *
   * If a UUID starts with &quot;/&quot; or contains &quot;//&quot; (example: &quot;/ajXp112QmuoKj4854875==&quot;), you must **[double encode](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis/#meeting-id-and-uuid)** the UUID before making an API request.
   */
  meetingId: string;
};

export type GetMeetingsMeetingIdRecordingsRegistrantsQuestionsHeaders = {
  Accept?: string;
};

export type GetMeetingsMeetingIdRecordingsRegistrantsQuestionsError = Fetcher.ErrorWrapper<undefined>;

export type GetMeetingsMeetingIdRecordingsRegistrantsQuestionsVariables = {
  headers?: GetMeetingsMeetingIdRecordingsRegistrantsQuestionsHeaders;
  pathParams: GetMeetingsMeetingIdRecordingsRegistrantsQuestionsPathParams;
} & FetcherExtraProps;

/**
 * For [on-demand](https://support.zoom.us/hc/en-us/articles/360000488283-On-demand-Recordings) meeting recordings, you can include fields with questions that will be shown to registrants when they register to view the recording.
 *
 * Use this API to retrieve a list of questions that are displayed for users to complete when registering to view the recording of a specific meeting.
 *
 *
 *
 * **Scopes:** `recording:read:admin`,`recording:read`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
 */
export const getMeetingsMeetingIdRecordingsRegistrantsQuestions = (
  variables: GetMeetingsMeetingIdRecordingsRegistrantsQuestionsVariables,
  signal?: AbortSignal
) =>
  fetch<
    Record<string, any>,
    GetMeetingsMeetingIdRecordingsRegistrantsQuestionsError,
    undefined,
    GetMeetingsMeetingIdRecordingsRegistrantsQuestionsHeaders,
    {},
    GetMeetingsMeetingIdRecordingsRegistrantsQuestionsPathParams
  >({ url: '/meetings/{meetingId}/recordings/registrants/questions', method: 'get', ...variables, signal });

export type PatchMeetingsMeetingIdRecordingsRegistrantsQuestionsPathParams = {
  /**
   * (Required) To get Cloud Recordings of a meeting, provide the meeting ID or meeting UUID. If the meeting ID is provided instead of UUID,the response will be for the latest meeting instance.
   *
   * To get Cloud Recordings of a webinar, provide the webinar ID or the webinar UUID. If the webinar ID is provided instead of UUID,the response will be for the latest webinar instance.
   *
   * If a UUID starts with &quot;/&quot; or contains &quot;//&quot; (example: &quot;/ajXp112QmuoKj4854875==&quot;), you must **[double encode](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis/#meeting-id-and-uuid)** the UUID before making an API request.
   */
  meetingId: string;
};

export type PatchMeetingsMeetingIdRecordingsRegistrantsQuestionsHeaders = {
  ['Content-Type']?: string;
};

export type PatchMeetingsMeetingIdRecordingsRegistrantsQuestionsError = Fetcher.ErrorWrapper<undefined>;

export type PatchMeetingsMeetingIdRecordingsRegistrantsQuestionsVariables = {
  body?: Record<string, any>;
  headers?: PatchMeetingsMeetingIdRecordingsRegistrantsQuestionsHeaders;
  pathParams: PatchMeetingsMeetingIdRecordingsRegistrantsQuestionsPathParams;
} & FetcherExtraProps;

/**
 * For [on-demand](https://support.zoom.us/hc/en-us/articles/360000488283-On-demand-Recordings) meeting recordings, you can include fields with questions that will be shown to registrants when they register to view the recording.
 *
 * Use this API to update registration questions that are to be answered by users while registering to view a recording.
 *
 *
 *
 * **Scopes:** `recording:write:admin`,`recording:write`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
 */
export const patchMeetingsMeetingIdRecordingsRegistrantsQuestions = (
  variables: PatchMeetingsMeetingIdRecordingsRegistrantsQuestionsVariables,
  signal?: AbortSignal
) =>
  fetch<
    undefined,
    PatchMeetingsMeetingIdRecordingsRegistrantsQuestionsError,
    Record<string, any>,
    PatchMeetingsMeetingIdRecordingsRegistrantsQuestionsHeaders,
    {},
    PatchMeetingsMeetingIdRecordingsRegistrantsQuestionsPathParams
  >({ url: '/meetings/{meetingId}/recordings/registrants/questions', method: 'patch', ...variables, signal });

export type PutMeetingsMeetingIdRecordingsRegistrantsStatusPathParams = {
  /**
   * (Required) The meeting's ID.
   *
   *  When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits.
   */
  meetingId: string;
};

export type PutMeetingsMeetingIdRecordingsRegistrantsStatusHeaders = {
  ['Content-Type']?: string;
};

export type PutMeetingsMeetingIdRecordingsRegistrantsStatusError = Fetcher.ErrorWrapper<undefined>;

export type PutMeetingsMeetingIdRecordingsRegistrantsStatusVariables = {
  body?: Record<string, any>;
  headers?: PutMeetingsMeetingIdRecordingsRegistrantsStatusHeaders;
  pathParams: PutMeetingsMeetingIdRecordingsRegistrantsStatusPathParams;
} & FetcherExtraProps;

/**
 * A registrant can either be approved or denied from viewing the [on-demand](https://support.zoom.us/hc/en-us/articles/360000488283-On-demand-Recordings) recording.
 * Use this API to update a registrant's status.
 *
 *
 *
 * **Scopes:** `recording:write:admin`,`recording:write`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`
 */
export const putMeetingsMeetingIdRecordingsRegistrantsStatus = (
  variables: PutMeetingsMeetingIdRecordingsRegistrantsStatusVariables,
  signal?: AbortSignal
) =>
  fetch<
    undefined,
    PutMeetingsMeetingIdRecordingsRegistrantsStatusError,
    Record<string, any>,
    PutMeetingsMeetingIdRecordingsRegistrantsStatusHeaders,
    {},
    PutMeetingsMeetingIdRecordingsRegistrantsStatusPathParams
  >({ url: '/meetings/{meetingId}/recordings/registrants/status', method: 'put', ...variables, signal });

export type GetMeetingsMeetingIdRecordingsRegistrantsPathParams = {
  /**
   * (Required) The meeting's ID.
   *
   *  When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits.
   */
  meetingId: string;
};

export type GetMeetingsMeetingIdRecordingsRegistrantsQueryParams = {
  /**
   * Query by the registrant's status:
   * * `pending` &mdash; The registration is pending.
   * * `approved` &mdash; The registrant is approved.
   * * `denied` &mdash; The registration is denied.
   */
  status?: string;
  /**
   * The number of records returned within a single API call.
   */
  page_size?: number;
  /**
   * **Deprecated.** We will no longer support this field in a future release. Instead, use the `next_page_token` for pagination.
   */
  page_number?: number;
  /**
   * Use the next page token to paginate through large result sets. A next page token is returned whenever the set of available results exceeds the current page size. This token's expiration period is 15 minutes.
   */
  next_page_token?: string;
};

export type GetMeetingsMeetingIdRecordingsRegistrantsHeaders = {
  Accept?: string;
};

export type GetMeetingsMeetingIdRecordingsRegistrantsError = Fetcher.ErrorWrapper<undefined>;

export type GetMeetingsMeetingIdRecordingsRegistrantsVariables = {
  headers?: GetMeetingsMeetingIdRecordingsRegistrantsHeaders;
  pathParams: GetMeetingsMeetingIdRecordingsRegistrantsPathParams;
  queryParams?: GetMeetingsMeetingIdRecordingsRegistrantsQueryParams;
} & FetcherExtraProps;

/**
 * Use this API to list registrants of a past meeting's [on-demand cloud recordings](https://support.zoom.us/hc/en-us/articles/360000488283-On-demand-recordings). Users must [register](/docs/api-reference/zoom-api/methods#operation/meetingRecordingRegistrantCreate) to view the recordings.
 *
 *
 *
 * **Scopes:** `recording:read:admin`,`recording:read`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`
 */
export const getMeetingsMeetingIdRecordingsRegistrants = (
  variables: GetMeetingsMeetingIdRecordingsRegistrantsVariables,
  signal?: AbortSignal
) =>
  fetch<
    Record<string, any>,
    GetMeetingsMeetingIdRecordingsRegistrantsError,
    undefined,
    GetMeetingsMeetingIdRecordingsRegistrantsHeaders,
    GetMeetingsMeetingIdRecordingsRegistrantsQueryParams,
    GetMeetingsMeetingIdRecordingsRegistrantsPathParams
  >({ url: '/meetings/{meetingId}/recordings/registrants', method: 'get', ...variables, signal });

export type PostMeetingsMeetingIdRecordingsRegistrantsPathParams = {
  /**
   * (Required) The meeting's ID.
   *
   *  When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits.
   */
  meetingId: string;
};

export type PostMeetingsMeetingIdRecordingsRegistrantsHeaders = {
  ['Content-Type']?: string;
  Accept?: string;
};

export type PostMeetingsMeetingIdRecordingsRegistrantsError = Fetcher.ErrorWrapper<undefined>;

export type PostMeetingsMeetingIdRecordingsRegistrantsVariables = {
  body?: Record<string, any>;
  headers?: PostMeetingsMeetingIdRecordingsRegistrantsHeaders;
  pathParams: PostMeetingsMeetingIdRecordingsRegistrantsPathParams;
} & FetcherExtraProps;

/**
 * Cloud Recordings of past Zoom Meetings can be made [on-demand](https://support.zoom.us/hc/en-us/articles/360000488283-On-demand-Recordings). Users should be [registered](/docs/api-reference/zoom-api/methods#operation/meetingRecordingRegistrantCreate) to view these recordings.
 *
 * Use this API to register a user to gain access to **On-demand Cloud Recordings** of a past meeting.
 *
 *
 *
 * **Scopes:** `recording:write:admin`,`recording:write`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
 */
export const postMeetingsMeetingIdRecordingsRegistrants = (
  variables: PostMeetingsMeetingIdRecordingsRegistrantsVariables,
  signal?: AbortSignal
) =>
  fetch<
    Record<string, any>,
    PostMeetingsMeetingIdRecordingsRegistrantsError,
    Record<string, any>,
    PostMeetingsMeetingIdRecordingsRegistrantsHeaders,
    {},
    PostMeetingsMeetingIdRecordingsRegistrantsPathParams
  >({ url: '/meetings/{meetingId}/recordings/registrants', method: 'post', ...variables, signal });

export type GetMeetingsMeetingIdRecordingsSettingsPathParams = {
  /**
   * (Required) The meeting ID enables you to get cloud recording of a:
   * - Meeting, provide the meeting ID or meeting UUID. If the meeting ID is provided instead of UUID,the response will be for the latest meeting instance.
   *
   * - Webinar, provide the webinar ID or the webinar UUID. If the webinar ID is provided instead of UUID,the response will be for the latest webinar instance.
   *
   * If a UUID starts with &quot;/&quot; or contains &quot;//&quot; (example: &quot;/ajXp112QmuoKj4854875==&quot;), you must **double encode** the UUID before making an API request.
   */
  meetingId: string;
};

export type GetMeetingsMeetingIdRecordingsSettingsHeaders = {
  Accept?: string;
};

export type GetMeetingsMeetingIdRecordingsSettingsError = Fetcher.ErrorWrapper<undefined>;

export type GetMeetingsMeetingIdRecordingsSettingsVariables = {
  headers?: GetMeetingsMeetingIdRecordingsSettingsHeaders;
  pathParams: GetMeetingsMeetingIdRecordingsSettingsPathParams;
} & FetcherExtraProps;

/**
 * Retrieves settings applied to a meeting's [Cloud Recording](https://support.zoom.us/hc/en-us/articles/203741855-Cloud-Recording).
 *
 *
 *
 *
 * **Scopes:** `recording:read:admin`,`recording:read`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
 */
export const getMeetingsMeetingIdRecordingsSettings = (
  variables: GetMeetingsMeetingIdRecordingsSettingsVariables,
  signal?: AbortSignal
) =>
  fetch<
    Record<string, any>,
    GetMeetingsMeetingIdRecordingsSettingsError,
    undefined,
    GetMeetingsMeetingIdRecordingsSettingsHeaders,
    {},
    GetMeetingsMeetingIdRecordingsSettingsPathParams
  >({ url: '/meetings/{meetingId}/recordings/settings', method: 'get', ...variables, signal });

export type PatchMeetingsMeetingIdRecordingsSettingsPathParams = {
  /**
   * (Required) To get Cloud Recordings of a meeting, provide the meeting ID or meeting UUID. If the meeting ID is provided instead of UUID,the response will be for the latest meeting instance.
   *
   * To get Cloud Recordings of a webinar, provide the webinar ID or the webinar UUID. If the webinar ID is provided instead of UUID,the response will be for the latest webinar instance.
   *
   * If a UUID starts with &quot;/&quot; or contains &quot;//&quot; (example: &quot;/ajXp112QmuoKj4854875==&quot;), you must **double encode** the UUID before making an API request.
   */
  meetingId: string;
};

export type PatchMeetingsMeetingIdRecordingsSettingsHeaders = {
  ['Content-Type']?: string;
};

export type PatchMeetingsMeetingIdRecordingsSettingsError = Fetcher.ErrorWrapper<undefined>;

export type PatchMeetingsMeetingIdRecordingsSettingsVariables = {
  body?: Record<string, any>;
  headers?: PatchMeetingsMeetingIdRecordingsSettingsHeaders;
  pathParams: PatchMeetingsMeetingIdRecordingsSettingsPathParams;
} & FetcherExtraProps;

/**
 * Updates settings applied to a meeting's [Cloud Recording](https://support.zoom.us/hc/en-us/articles/203741855-Cloud-Recording).
 *
 * **Scopes:** `recording:write`,`recording:write:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
 */
export const patchMeetingsMeetingIdRecordingsSettings = (
  variables: PatchMeetingsMeetingIdRecordingsSettingsVariables,
  signal?: AbortSignal
) =>
  fetch<
    undefined,
    PatchMeetingsMeetingIdRecordingsSettingsError,
    Record<string, any>,
    PatchMeetingsMeetingIdRecordingsSettingsHeaders,
    {},
    PatchMeetingsMeetingIdRecordingsSettingsPathParams
  >({ url: '/meetings/{meetingId}/recordings/settings', method: 'patch', ...variables, signal });

export type PutMeetingsMeetingIdRecordingsRecordingIdStatusPathParams = {
  /**
   * (Required) To get Cloud Recordings of a meeting, provide the meeting ID or meeting UUID. If the meeting ID is provided instead of UUID,the response will be for the latest meeting instance.
   *
   * To get Cloud Recordings of a webinar, provide the webinar ID or the webinar UUID. If the webinar ID is provided instead of UUID,the response will be for the latest webinar instance.
   *
   * If a UUID starts with &quot;/&quot; or contains &quot;//&quot; (example: &quot;/ajXp112QmuoKj4854875==&quot;), you must **[double encode](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis/#meeting-id-and-uuid)** the UUID before making an API request.
   */
  meetingId: string;
  /**
   * (Required) The recording ID.
   */
  recordingId: string;
};

export type PutMeetingsMeetingIdRecordingsRecordingIdStatusHeaders = {
  ['Content-Type']?: string;
};

export type PutMeetingsMeetingIdRecordingsRecordingIdStatusError = Fetcher.ErrorWrapper<undefined>;

export type PutMeetingsMeetingIdRecordingsRecordingIdStatusVariables = {
  body?: Record<string, any>;
  headers?: PutMeetingsMeetingIdRecordingsRecordingIdStatusHeaders;
  pathParams: PutMeetingsMeetingIdRecordingsRecordingIdStatusPathParams;
} & FetcherExtraProps;

/**
 * Zoom allows users to recover recordings from trash for up to 30 days from the deletion date. Use this API to recover a single recording file from the meeting.
 *
 *
 *
 * **Scopes:** `recording:write:admin`,`recording:write`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
 */
export const putMeetingsMeetingIdRecordingsRecordingIdStatus = (
  variables: PutMeetingsMeetingIdRecordingsRecordingIdStatusVariables,
  signal?: AbortSignal
) =>
  fetch<
    undefined,
    PutMeetingsMeetingIdRecordingsRecordingIdStatusError,
    Record<string, any>,
    PutMeetingsMeetingIdRecordingsRecordingIdStatusHeaders,
    {},
    PutMeetingsMeetingIdRecordingsRecordingIdStatusPathParams
  >({ url: '/meetings/{meetingId}/recordings/{recordingId}/status', method: 'put', ...variables, signal });

export type DeleteMeetingsMeetingIdRecordingsRecordingIdPathParams = {
  /**
   * (Required) To get Cloud Recordings of a meeting, provide the meeting ID or meeting UUID. If the meeting ID is provided instead of UUID,the response will be for the latest meeting instance.
   *
   * To get Cloud Recordings of a webinar, provide the webinar ID or the webinar UUID. If the webinar ID is provided instead of UUID,the response will be for the latest webinar instance.
   *
   * If a UUID starts with &quot;/&quot; or contains &quot;//&quot; (example: &quot;/ajXp112QmuoKj4854875==&quot;), you must **[double encode](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis/#meeting-id-and-uuid)** the UUID before making an API request.
   */
  meetingId: string;
  /**
   * (Required) The recording ID.
   */
  recordingId: string;
};

export type DeleteMeetingsMeetingIdRecordingsRecordingIdQueryParams = {
  /**
   * The recording delete actions:
   *  `trash` - Move recording to trash.
   *  `delete` - Delete recording permanently.
   */
  action?: string;
};

export type DeleteMeetingsMeetingIdRecordingsRecordingIdError = Fetcher.ErrorWrapper<undefined>;

export type DeleteMeetingsMeetingIdRecordingsRecordingIdVariables = {
  pathParams: DeleteMeetingsMeetingIdRecordingsRecordingIdPathParams;
  queryParams?: DeleteMeetingsMeetingIdRecordingsRecordingIdQueryParams;
} & FetcherExtraProps;

/**
 * Delete a specific recording file from a meeting.&lt;p style=&quot;background-color:#e1f5fe; color:#01579b; padding:8px&quot;&gt; &lt;b&gt;Note:&lt;/b&gt; To use this API, you must enable the &lt;b&gt;The host can delete cloud recordings&lt;/b&gt; setting. You can find this setting in the &lt;b&gt;Recording&lt;/b&gt; tab of the &lt;b&gt;Settings&lt;/b&gt; interface in the [Zoom web portal](https://zoom.us/).&lt;/p&gt;
 *
 *
 *
 * **Scopes:** `recording:write:admin`,`recording:write`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
 */
export const deleteMeetingsMeetingIdRecordingsRecordingId = (
  variables: DeleteMeetingsMeetingIdRecordingsRecordingIdVariables,
  signal?: AbortSignal
) =>
  fetch<
    undefined,
    DeleteMeetingsMeetingIdRecordingsRecordingIdError,
    undefined,
    {},
    DeleteMeetingsMeetingIdRecordingsRecordingIdQueryParams,
    DeleteMeetingsMeetingIdRecordingsRecordingIdPathParams
  >({ url: '/meetings/{meetingId}/recordings/{recordingId}', method: 'delete', ...variables, signal });

export type GetMeetingsMeetingIdRecordingsPathParams = {
  /**
   * (Required) To get a meeting's cloud recordings, provide the meeting ID or UUID. If providing the meeting ID instead of UUID, the response will be for the latest meeting instance.
   *
   * To get a webinar's cloud recordings, provide the webinar's ID or UUID. If providing the webinar ID instead of UUID, the response will be for the latest webinar instance.
   *
   * If a UUID starts with `/` or contains `//` (example: `/ajXp112QmuoKj4854875==`), **[double encode](/docs/api-reference/using-zoom-apis/#meeting-id-and-uuid) the UUID** before making an API request.
   */
  meetingId: string;
};

export type GetMeetingsMeetingIdRecordingsQueryParams = {
  /**
   * The `download_access_token` value for downloading the meeting's recordings.
   */
  include_fields?: string;
  /**
   * The `download_access_token` Time to Live (TTL) value. This parameter is only valid if the `include_fields` query parameter contains the `download_access_token` value.
   */
  ttl?: string;
};

export type GetMeetingsMeetingIdRecordingsHeaders = {
  Accept?: string;
};

export type GetMeetingsMeetingIdRecordingsError = Fetcher.ErrorWrapper<undefined>;

export type GetMeetingsMeetingIdRecordingsVariables = {
  headers?: GetMeetingsMeetingIdRecordingsHeaders;
  pathParams: GetMeetingsMeetingIdRecordingsPathParams;
  queryParams?: GetMeetingsMeetingIdRecordingsQueryParams;
} & FetcherExtraProps;

/**
 * Returns all of a meeting's [recordings](https://support.zoom.us/hc/en-us/articles/203741855-Cloud-Recording#h_7420acb5-1897-4061-87b4-5b76e99c03b4).
 *
 *  Use the `download_url` property listed in the response to download the recording files.  To access a passcode-protected cloud recording, send the user's [OAuth access token](https://developers.zoom.us/docs/integrations/oauth/) as a Bearer token in the Authorization header.
 *
 *  Example:  `curl -H 'Authorization: Bearer <ACCESS_TOKEN>' https://{{base-domain}}/rec/archive/download/xyz`
 *
 * **Scopes:** `recording:read`,`phone_recording:read:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
 */
export const getMeetingsMeetingIdRecordings = (
  variables: GetMeetingsMeetingIdRecordingsVariables,
  signal?: AbortSignal
) =>
  fetch<
    Record<string, any>,
    GetMeetingsMeetingIdRecordingsError,
    undefined,
    GetMeetingsMeetingIdRecordingsHeaders,
    GetMeetingsMeetingIdRecordingsQueryParams,
    GetMeetingsMeetingIdRecordingsPathParams
  >({ url: '/meetings/{meetingId}/recordings', method: 'get', ...variables, signal });

export type DeleteMeetingsMeetingIdRecordingsPathParams = {
  /**
   * (Required) To get Cloud Recordings of a meeting, provide the meeting ID or meeting UUID. If the meeting ID is provided instead of UUID,the response will be for the latest meeting instance.
   *
   * To get Cloud Recordings of a webinar, provide the webinar ID or the webinar UUID. If the webinar ID is provided instead of UUID,the response will be for the latest webinar instance.
   *
   * If a UUID starts with &quot;/&quot; or contains &quot;//&quot; (example: &quot;/ajXp112QmuoKj4854875==&quot;), you must **[double encode](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis/#meeting-id-and-uuid)** the UUID before making an API request.
   */
  meetingId: string;
};

export type DeleteMeetingsMeetingIdRecordingsQueryParams = {
  /**
   * The recording delete actions:
   *  `trash` - Move recording to trash.
   *  `delete` - Delete recording permanently.
   */
  action?: string;
};

export type DeleteMeetingsMeetingIdRecordingsError = Fetcher.ErrorWrapper<undefined>;

export type DeleteMeetingsMeetingIdRecordingsVariables = {
  pathParams: DeleteMeetingsMeetingIdRecordingsPathParams;
  queryParams?: DeleteMeetingsMeetingIdRecordingsQueryParams;
} & FetcherExtraProps;

/**
 * Delete all recording files of a meeting.
 *
 *
 *
 * **Prerequisites**:
 * * Cloud Recording should be enabled on the user's account.
 *
 *
 *
 * **Scopes:** `recording:write:admin`,`recording:write`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
 */
export const deleteMeetingsMeetingIdRecordings = (
  variables: DeleteMeetingsMeetingIdRecordingsVariables,
  signal?: AbortSignal
) =>
  fetch<
    undefined,
    DeleteMeetingsMeetingIdRecordingsError,
    undefined,
    {},
    DeleteMeetingsMeetingIdRecordingsQueryParams,
    DeleteMeetingsMeetingIdRecordingsPathParams
  >({ url: '/meetings/{meetingId}/recordings', method: 'delete', ...variables, signal });

export type PostMeetingsMeetingIdBatchPollsPathParams = {
  /**
   * (Required)
   */
  meetingId: string;
};

export type PostMeetingsMeetingIdBatchPollsHeaders = {
  ['Content-Type']?: string;
  Accept?: string;
};

export type PostMeetingsMeetingIdBatchPollsError = Fetcher.ErrorWrapper<undefined>;

export type PostMeetingsMeetingIdBatchPollsVariables = {
  body?: Record<string, any>;
  headers?: PostMeetingsMeetingIdBatchPollsHeaders;
  pathParams: PostMeetingsMeetingIdBatchPollsPathParams;
} & FetcherExtraProps;

/**
 * Polls allow the meeting host to survey attendees. Create batch [polls](https://support.zoom.us/hc/en-us/articles/213756303-Polling-for-Meetings) for a meeting.
 *
 *
 *
 * **Prerequisites**:
 *
 * * Host user type must be **Pro** or higher plan.
 * * Polling feature must be enabled in the host's account.
 * * Meeting must be a scheduled meeting. Instant meetings do not have polling features enabled.
 *
 * **Scopes:** `meeting:write:admin`,`meeting:write`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
 */
export const postMeetingsMeetingIdBatchPolls = (
  variables: PostMeetingsMeetingIdBatchPollsVariables,
  signal?: AbortSignal
) =>
  fetch<
    Record<string, any>,
    PostMeetingsMeetingIdBatchPollsError,
    Record<string, any>,
    PostMeetingsMeetingIdBatchPollsHeaders,
    {},
    PostMeetingsMeetingIdBatchPollsPathParams
  >({ url: '/meetings/{meetingId}/batch_polls', method: 'post', ...variables, signal });

export type PostMeetingsMeetingIdBatchRegistrantsPathParams = {
  /**
   * (Required) Unique identifier of the meeting (Meeting Number).
   */
  meetingId: string;
};

export type PostMeetingsMeetingIdBatchRegistrantsHeaders = {
  ['Content-Type']?: string;
  Accept?: string;
};

export type PostMeetingsMeetingIdBatchRegistrantsError = Fetcher.ErrorWrapper<undefined>;

export type PostMeetingsMeetingIdBatchRegistrantsVariables = {
  body?: Record<string, any>;
  headers?: PostMeetingsMeetingIdBatchRegistrantsHeaders;
  pathParams: PostMeetingsMeetingIdBatchRegistrantsPathParams;
} & FetcherExtraProps;

/**
 * Register up to 30 registrants at once for a meeting that requires [registration](https://support.zoom.us/hc/en-us/articles/211579443-Registration-for-Meetings).
 *
 *
 * **Prerequisites:**
 *
 * * The meeting host must be a Licensed user.
 * * The meeting must require registration and should be of type `2`, i.e., they should be scheduled meetings. Instant meetings and Recurring meetings are not supported by this API.
 *
 *
 *
 *
 * **Scopes:** `meeting:write`,`meeting:write:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`
 */
export const postMeetingsMeetingIdBatchRegistrants = (
  variables: PostMeetingsMeetingIdBatchRegistrantsVariables,
  signal?: AbortSignal
) =>
  fetch<
    Record<string, any>,
    PostMeetingsMeetingIdBatchRegistrantsError,
    Record<string, any>,
    PostMeetingsMeetingIdBatchRegistrantsHeaders,
    {},
    PostMeetingsMeetingIdBatchRegistrantsPathParams
  >({ url: '/meetings/{meetingId}/batch_registrants', method: 'post', ...variables, signal });

export type GetMeetingsMeetingIdInvitationPathParams = {
  /**
   * (Required) The meeting's ID.
   *
   *  When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits.
   */
  meetingId: string;
};

export type GetMeetingsMeetingIdInvitationHeaders = {
  Accept?: string;
};

export type GetMeetingsMeetingIdInvitationError = Fetcher.ErrorWrapper<undefined>;

export type GetMeetingsMeetingIdInvitationVariables = {
  headers?: GetMeetingsMeetingIdInvitationHeaders;
  pathParams: GetMeetingsMeetingIdInvitationPathParams;
} & FetcherExtraProps;

/**
 * Retrieve the meeting invitation note for a specific meeting.
 *
 * **Scopes:** `meeting:read`,`meeting:read:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
 */
export const getMeetingsMeetingIdInvitation = (
  variables: GetMeetingsMeetingIdInvitationVariables,
  signal?: AbortSignal
) =>
  fetch<
    Record<string, any>,
    GetMeetingsMeetingIdInvitationError,
    undefined,
    GetMeetingsMeetingIdInvitationHeaders,
    {},
    GetMeetingsMeetingIdInvitationPathParams
  >({ url: '/meetings/{meetingId}/invitation', method: 'get', ...variables, signal });

export type PostMeetingsMeetingIdInviteLinksPathParams = {
  /**
   * (Required) The meeting's ID.
   *
   *  When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits.
   */
  meetingId: string;
};

export type PostMeetingsMeetingIdInviteLinksHeaders = {
  ['Content-Type']?: string;
  Accept?: string;
};

export type PostMeetingsMeetingIdInviteLinksError = Fetcher.ErrorWrapper<undefined>;

export type PostMeetingsMeetingIdInviteLinksVariables = {
  body?: Record<string, any>;
  headers?: PostMeetingsMeetingIdInviteLinksHeaders;
  pathParams: PostMeetingsMeetingIdInviteLinksPathParams;
} & FetcherExtraProps;

/**
 * Create a batch of invitation links for a meeting.
 *
 *
 *
 * **Scopes:** `meeting:write:admin`,`meeting:write`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
 */
export const postMeetingsMeetingIdInviteLinks = (
  variables: PostMeetingsMeetingIdInviteLinksVariables,
  signal?: AbortSignal
) =>
  fetch<
    Record<string, any>,
    PostMeetingsMeetingIdInviteLinksError,
    Record<string, any>,
    PostMeetingsMeetingIdInviteLinksHeaders,
    {},
    PostMeetingsMeetingIdInviteLinksPathParams
  >({ url: '/meetings/{meetingId}/invite_links', method: 'post', ...variables, signal });

export type GetMeetingsMeetingIdJointokenLiveStreamingPathParams = {
  /**
   * (Required) The meeting's ID.
   *
   *  When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits.
   */
  meetingId: string;
};

export type GetMeetingsMeetingIdJointokenLiveStreamingHeaders = {
  Accept?: string;
};

export type GetMeetingsMeetingIdJointokenLiveStreamingError = Fetcher.ErrorWrapper<undefined>;

export type GetMeetingsMeetingIdJointokenLiveStreamingVariables = {
  headers?: GetMeetingsMeetingIdJointokenLiveStreamingHeaders;
  pathParams: GetMeetingsMeetingIdJointokenLiveStreamingPathParams;
} & FetcherExtraProps;

/**
 * Get a meeting's join token to allow live streaming. The join token allows a recording bot implemented using Zoom meeting SDK to connect to a Zoom meeting &quot;hosted by the issuer of the token&quot;, and can call the streaming method automatically. It supports both regular live streaming, and raw streaming.
 *
 * **Prerequisites:**
 * * A Pro or higher plan for the meeting host.
 * * The **Allow livestreaming of meetings** user setting enabled in the Zoom web portal.
 *
 * **Scopes:** `meeting_token:read:admin:live_streaming`,`meeting_token:read:live_streaming`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
 */
export const getMeetingsMeetingIdJointokenLiveStreaming = (
  variables: GetMeetingsMeetingIdJointokenLiveStreamingVariables,
  signal?: AbortSignal
) =>
  fetch<
    Record<string, any>,
    GetMeetingsMeetingIdJointokenLiveStreamingError,
    undefined,
    GetMeetingsMeetingIdJointokenLiveStreamingHeaders,
    {},
    GetMeetingsMeetingIdJointokenLiveStreamingPathParams
  >({ url: '/meetings/{meetingId}/jointoken/live_streaming', method: 'get', ...variables, signal });

export type GetMeetingsMeetingIdJointokenLocalArchivingPathParams = {
  /**
   * (Required) The meeting's ID.
   *
   *  When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits.
   */
  meetingId: string;
};

export type GetMeetingsMeetingIdJointokenLocalArchivingHeaders = {
  Accept?: string;
};

export type GetMeetingsMeetingIdJointokenLocalArchivingError = Fetcher.ErrorWrapper<undefined>;

export type GetMeetingsMeetingIdJointokenLocalArchivingVariables = {
  headers?: GetMeetingsMeetingIdJointokenLocalArchivingHeaders;
  pathParams: GetMeetingsMeetingIdJointokenLocalArchivingPathParams;
} & FetcherExtraProps;

/**
 * Get a meeting's archive token to allow local archiving. The archive token allows a meeting SDK app or bot to get archive permission to access the meeting's raw audio and video media stream in real-time.
 *
 * **Prerequisites:**
 * * A Pro or higher plan for the meeting host.
 * * The **Archive meetings and webinars** account setting enabled in the Zoom web portal.
 *
 * **Scopes:** `meeting_token:read:admin:local_archiving`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
 */
export const getMeetingsMeetingIdJointokenLocalArchiving = (
  variables: GetMeetingsMeetingIdJointokenLocalArchivingVariables,
  signal?: AbortSignal
) =>
  fetch<
    Record<string, any>,
    GetMeetingsMeetingIdJointokenLocalArchivingError,
    undefined,
    GetMeetingsMeetingIdJointokenLocalArchivingHeaders,
    {},
    GetMeetingsMeetingIdJointokenLocalArchivingPathParams
  >({ url: '/meetings/{meetingId}/jointoken/local_archiving', method: 'get', ...variables, signal });

export type GetMeetingsMeetingIdJointokenLocalRecordingPathParams = {
  /**
   * (Required) The meeting's ID.
   *
   *  When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits.
   */
  meetingId: string;
};

export type GetMeetingsMeetingIdJointokenLocalRecordingQueryParams = {
  /**
   * Whether to bypass the waiting room.
   */
  bypass_waiting_room?: string;
};

export type GetMeetingsMeetingIdJointokenLocalRecordingHeaders = {
  Accept?: string;
};

export type GetMeetingsMeetingIdJointokenLocalRecordingError = Fetcher.ErrorWrapper<undefined>;

export type GetMeetingsMeetingIdJointokenLocalRecordingVariables = {
  headers?: GetMeetingsMeetingIdJointokenLocalRecordingHeaders;
  pathParams: GetMeetingsMeetingIdJointokenLocalRecordingPathParams;
  queryParams?: GetMeetingsMeetingIdJointokenLocalRecordingQueryParams;
} & FetcherExtraProps;

/**
 * Get a meeting's join token to allow for local recording. The join token lets a recording bot implemented using Zoom Meeting SDK to connect to a Zoom meeting. The recording bot can then automatically start locally recording. This supports both regular and raw local recording types.
 *
 * **Prerequisites:**
 * * The **Local recording** user setting enabled in the Zoom web portal.
 *
 * **Scopes:** `meeting_token:read:local_recording`,`meeting_token:read:admin:local_recording`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
 */
export const getMeetingsMeetingIdJointokenLocalRecording = (
  variables: GetMeetingsMeetingIdJointokenLocalRecordingVariables,
  signal?: AbortSignal
) =>
  fetch<
    Record<string, any>,
    GetMeetingsMeetingIdJointokenLocalRecordingError,
    undefined,
    GetMeetingsMeetingIdJointokenLocalRecordingHeaders,
    GetMeetingsMeetingIdJointokenLocalRecordingQueryParams,
    GetMeetingsMeetingIdJointokenLocalRecordingPathParams
  >({ url: '/meetings/{meetingId}/jointoken/local_recording', method: 'get', ...variables, signal });

export type PatchMeetingsMeetingIdLivestreamStatusPathParams = {
  /**
   * (Required) The meeting's ID.
   *
   *  When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits.
   */
  meetingId: string;
};

export type PatchMeetingsMeetingIdLivestreamStatusHeaders = {
  ['Content-Type']?: string;
};

export type PatchMeetingsMeetingIdLivestreamStatusError = Fetcher.ErrorWrapper<undefined>;

export type PatchMeetingsMeetingIdLivestreamStatusVariables = {
  body?: Record<string, any>;
  headers?: PatchMeetingsMeetingIdLivestreamStatusHeaders;
  pathParams: PatchMeetingsMeetingIdLivestreamStatusPathParams;
} & FetcherExtraProps;

/**
 * Zoom allows users to [livestream a meeting](https://support.zoom.us/hc/en-us/articles/115001777826-Live-Streaming-Meetings-or-Webinars-Using-a-Custom-Service) to a custom platform. Update the status of a meeting's livestream.
 *
 * **Prerequisites:**
 * * Meeting host must have a Pro license.
 *
 * **Scopes:** `meeting:write:admin`,`meeting:write`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
 */
export const patchMeetingsMeetingIdLivestreamStatus = (
  variables: PatchMeetingsMeetingIdLivestreamStatusVariables,
  signal?: AbortSignal
) =>
  fetch<
    undefined,
    PatchMeetingsMeetingIdLivestreamStatusError,
    Record<string, any>,
    PatchMeetingsMeetingIdLivestreamStatusHeaders,
    {},
    PatchMeetingsMeetingIdLivestreamStatusPathParams
  >({ url: '/meetings/{meetingId}/livestream/status', method: 'patch', ...variables, signal });

export type GetMeetingsMeetingIdLivestreamPathParams = {
  /**
   * (Required) Unique identifier of the meeting.
   */
  meetingId: string;
};

export type GetMeetingsMeetingIdLivestreamHeaders = {
  Accept?: string;
};

export type GetMeetingsMeetingIdLivestreamError = Fetcher.ErrorWrapper<undefined>;

export type GetMeetingsMeetingIdLivestreamVariables = {
  headers?: GetMeetingsMeetingIdLivestreamHeaders;
  pathParams: GetMeetingsMeetingIdLivestreamPathParams;
} & FetcherExtraProps;

/**
 * Zoom allows users to [livestream a meeting](https://support.zoom.us/hc/en-us/articles/115001777826-Live-Streaming-Meetings-or-Webinars-Using-a-Custom-Service) to a custom platform. Get a meeting's livestream configuration details such as Stream URL, Stream Key and Page URL.
 *
 *
 * **Prerequisites:**
 *
 * * Meeting host must be a licensed user with a Pro or higher plan.
 *
 * * Live streaming details must have been [configured](https://support.zoom.us/hc/en-us/articles/115001777826-Live-Streaming-Meetings-or-Webinars-Using-a-Custom-Service#h_01589a6f-a40a-4e18-a448-cb746e52ebc5) for the meeting.
 *
 *
 *
 *
 * **Scopes:** `meeting:read:admin`,`meeting:read`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
 */
export const getMeetingsMeetingIdLivestream = (
  variables: GetMeetingsMeetingIdLivestreamVariables,
  signal?: AbortSignal
) =>
  fetch<
    Record<string, any>,
    GetMeetingsMeetingIdLivestreamError,
    undefined,
    GetMeetingsMeetingIdLivestreamHeaders,
    {},
    GetMeetingsMeetingIdLivestreamPathParams
  >({ url: '/meetings/{meetingId}/livestream', method: 'get', ...variables, signal });

export type PatchMeetingsMeetingIdLivestreamPathParams = {
  /**
   * (Required) The meeting's ID.
   *
   *  When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits.
   */
  meetingId: string;
};

export type PatchMeetingsMeetingIdLivestreamHeaders = {
  ['Content-Type']?: string;
};

export type PatchMeetingsMeetingIdLivestreamError = Fetcher.ErrorWrapper<undefined>;

export type PatchMeetingsMeetingIdLivestreamVariables = {
  body?: Record<string, any>;
  headers?: PatchMeetingsMeetingIdLivestreamHeaders;
  pathParams: PatchMeetingsMeetingIdLivestreamPathParams;
} & FetcherExtraProps;

/**
 * Update a meeting's livestream information. Zoom allows users to [livestream a meeting](https://support.zoom.us/hc/en-us/articles/115001777826-Live-Streaming-Meetings-or-Webinars-Using-a-Custom-Service) to a custom platform.
 *
 * **Prerequisites:**
 * * Meeting host must have a Pro license.
 *
 * **Scopes:** `meeting:write:admin`,`meeting:write`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
 */
export const patchMeetingsMeetingIdLivestream = (
  variables: PatchMeetingsMeetingIdLivestreamVariables,
  signal?: AbortSignal
) =>
  fetch<
    undefined,
    PatchMeetingsMeetingIdLivestreamError,
    Record<string, any>,
    PatchMeetingsMeetingIdLivestreamHeaders,
    {},
    PatchMeetingsMeetingIdLivestreamPathParams
  >({ url: '/meetings/{meetingId}/livestream', method: 'patch', ...variables, signal });

export type GetMeetingsMeetingIdMeetingSummaryPathParams = {
  /**
   * The meeting's universally unique ID (UUID). When you provide a meeting UUID that begins with a `/` character or contains the `//` characters, you **must** double-encode the meeting UUID before making an API request.
   */
  meetingId: string;
};

export type GetMeetingsMeetingIdMeetingSummaryHeaders = {
  Accept?: string;
};

export type GetMeetingsMeetingIdMeetingSummaryError = Fetcher.ErrorWrapper<undefined>;

export type GetMeetingsMeetingIdMeetingSummaryVariables = {
  headers?: GetMeetingsMeetingIdMeetingSummaryHeaders;
  pathParams: GetMeetingsMeetingIdMeetingSummaryPathParams;
} & FetcherExtraProps;

/**
 * Displays information about a meeting summary.
 *
 * **Prerequisites**:
 * * Host user type must be Pro or higher plan.
 * * The Meeting Summary with AI Companion feature enabled in the host's account.
 * * E2ee meetings do not have summary feature enabled.
 *
 * **Scopes:** `meeting_summary:read:admin`,`meeting_summary:read`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
 */
export const getMeetingsMeetingIdMeetingSummary = (
  variables: GetMeetingsMeetingIdMeetingSummaryVariables,
  signal?: AbortSignal
) =>
  fetch<
    Record<string, any>,
    GetMeetingsMeetingIdMeetingSummaryError,
    undefined,
    GetMeetingsMeetingIdMeetingSummaryHeaders,
    {},
    GetMeetingsMeetingIdMeetingSummaryPathParams
  >({ url: '/meetings/{meetingId}/meeting_summary', method: 'get', ...variables, signal });

export type GetMeetingsMeetingIdPollsPollIdPathParams = {
  /**
   * (Required) The meeting's ID.
   *
   *  When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits.
   */
  meetingId: string;
  /**
   * (Required) The poll ID
   */
  pollId: string;
};

export type GetMeetingsMeetingIdPollsPollIdHeaders = {
  Accept?: string;
};

export type GetMeetingsMeetingIdPollsPollIdError = Fetcher.ErrorWrapper<undefined>;

export type GetMeetingsMeetingIdPollsPollIdVariables = {
  headers?: GetMeetingsMeetingIdPollsPollIdHeaders;
  pathParams: GetMeetingsMeetingIdPollsPollIdPathParams;
} & FetcherExtraProps;

/**
 * Polls allow the meeting host to survey attendees. Retrieve information about a specific meeting [poll](https://support.zoom.us/hc/en-us/articles/213756303-Polling-for-Meetings).
 *
 *
 *
 *
 * **Scopes:** `meeting:read:admin`,`meeting:read`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
 */
export const getMeetingsMeetingIdPollsPollId = (
  variables: GetMeetingsMeetingIdPollsPollIdVariables,
  signal?: AbortSignal
) =>
  fetch<
    Record<string, any>,
    GetMeetingsMeetingIdPollsPollIdError,
    undefined,
    GetMeetingsMeetingIdPollsPollIdHeaders,
    {},
    GetMeetingsMeetingIdPollsPollIdPathParams
  >({ url: '/meetings/{meetingId}/polls/{pollId}', method: 'get', ...variables, signal });

export type PutMeetingsMeetingIdPollsPollIdPathParams = {
  /**
   * (Required) The meeting's ID.
   *
   *  When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits.
   */
  meetingId: string;
  /**
   * (Required) The poll ID
   */
  pollId: string;
};

export type PutMeetingsMeetingIdPollsPollIdHeaders = {
  ['Content-Type']?: string;
};

export type PutMeetingsMeetingIdPollsPollIdError = Fetcher.ErrorWrapper<undefined>;

export type PutMeetingsMeetingIdPollsPollIdVariables = {
  body?: Record<string, any>;
  headers?: PutMeetingsMeetingIdPollsPollIdHeaders;
  pathParams: PutMeetingsMeetingIdPollsPollIdPathParams;
} & FetcherExtraProps;

/**
 * Polls allow the meeting host to survey attendees. Update information of a specific meeting [poll](https://support.zoom.us/hc/en-us/articles/213756303-Polling-for-Meetings)
 *
 *
 *
 *
 * **Scopes:** `meeting:write:admin`,`meeting:write`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
 */
export const putMeetingsMeetingIdPollsPollId = (
  variables: PutMeetingsMeetingIdPollsPollIdVariables,
  signal?: AbortSignal
) =>
  fetch<
    undefined,
    PutMeetingsMeetingIdPollsPollIdError,
    Record<string, any>,
    PutMeetingsMeetingIdPollsPollIdHeaders,
    {},
    PutMeetingsMeetingIdPollsPollIdPathParams
  >({ url: '/meetings/{meetingId}/polls/{pollId}', method: 'put', ...variables, signal });

export type DeleteMeetingsMeetingIdPollsPollIdPathParams = {
  /**
   * (Required) The meeting's ID.
   *
   *  When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits.
   */
  meetingId: string;
  /**
   * (Required) The poll ID
   */
  pollId: string;
};

export type DeleteMeetingsMeetingIdPollsPollIdError = Fetcher.ErrorWrapper<undefined>;

export type DeleteMeetingsMeetingIdPollsPollIdVariables = {
  pathParams: DeleteMeetingsMeetingIdPollsPollIdPathParams;
} & FetcherExtraProps;

/**
 * Polls allow the meeting host to survey attendees. Delete a meeting [poll](https://support.zoom.us/hc/en-us/articles/213756303-Polling-for-Meetings).
 *
 * **Prerequisites**:
 *
 * * Host user type must be **Pro**.
 * * Polling feature should be enabled in the host's account.
 * * Meeting must be a scheduled meeting. Instant meetings do not have polling features enabled.
 *
 * **Scopes:** `meeting:write:admin`,`meeting:write`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
 */
export const deleteMeetingsMeetingIdPollsPollId = (
  variables: DeleteMeetingsMeetingIdPollsPollIdVariables,
  signal?: AbortSignal
) =>
  fetch<
    undefined,
    DeleteMeetingsMeetingIdPollsPollIdError,
    undefined,
    {},
    {},
    DeleteMeetingsMeetingIdPollsPollIdPathParams
  >({ url: '/meetings/{meetingId}/polls/{pollId}', method: 'delete', ...variables, signal });

export type GetMeetingsMeetingIdPollsPathParams = {
  /**
   * (Required) The meeting's ID.
   *
   *  When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits.
   */
  meetingId: string;
};

export type GetMeetingsMeetingIdPollsQueryParams = {
  /**
   * Whether to query for polls with the **Anonymous** option enabled:
   * * `true` &mdash; Query for polls with the **Anonymous** option enabled.
   * * `false` &mdash; Do not query for polls with the **Anonymous** option enabled.
   */
  anonymous?: string;
};

export type GetMeetingsMeetingIdPollsHeaders = {
  Accept?: string;
};

export type GetMeetingsMeetingIdPollsError = Fetcher.ErrorWrapper<undefined>;

export type GetMeetingsMeetingIdPollsVariables = {
  headers?: GetMeetingsMeetingIdPollsHeaders;
  pathParams: GetMeetingsMeetingIdPollsPathParams;
  queryParams?: GetMeetingsMeetingIdPollsQueryParams;
} & FetcherExtraProps;

/**
 * Polls allow the meeting host to survey attendees. List all [polls](https://support.zoom.us/hc/en-us/articles/213756303-Polling-for-Meetings) of a meeting.
 *
 *
 *
 * **Prerequisites**:
 *
 * * Host user type must be **Pro** or higher plan.
 * * Meeting must be a scheduled meeting. Instant meetings do not have polling features enabled.
 *
 * **Scopes:** `meeting:read:admin`,`meeting:read`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
 */
export const getMeetingsMeetingIdPolls = (variables: GetMeetingsMeetingIdPollsVariables, signal?: AbortSignal) =>
  fetch<
    Record<string, any>,
    GetMeetingsMeetingIdPollsError,
    undefined,
    GetMeetingsMeetingIdPollsHeaders,
    GetMeetingsMeetingIdPollsQueryParams,
    GetMeetingsMeetingIdPollsPathParams
  >({ url: '/meetings/{meetingId}/polls', method: 'get', ...variables, signal });

export type PostMeetingsMeetingIdPollsPathParams = {
  /**
   * (Required) The meeting's ID.
   *
   *  When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits.
   */
  meetingId: string;
};

export type PostMeetingsMeetingIdPollsHeaders = {
  ['Content-Type']?: string;
  Accept?: string;
};

export type PostMeetingsMeetingIdPollsError = Fetcher.ErrorWrapper<undefined>;

export type PostMeetingsMeetingIdPollsVariables = {
  body?: Record<string, any>;
  headers?: PostMeetingsMeetingIdPollsHeaders;
  pathParams: PostMeetingsMeetingIdPollsPathParams;
} & FetcherExtraProps;

/**
 * Polls allow the meeting host to survey attendees. Create a [poll](https://support.zoom.us/hc/en-us/articles/213756303-Polling-for-Meetings) for a meeting.
 *
 *
 *
 * **Prerequisites**:
 *
 * * Host user type must be **Pro** or higher plan.
 * * Polling feature must be enabled in the host's account.
 * * Meeting must be a scheduled meeting. Instant meetings do not have polling features enabled.
 *
 * **Scopes:** `meeting:write:admin`,`meeting:write`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
 */
export const postMeetingsMeetingIdPolls = (variables: PostMeetingsMeetingIdPollsVariables, signal?: AbortSignal) =>
  fetch<
    Record<string, any>,
    PostMeetingsMeetingIdPollsError,
    Record<string, any>,
    PostMeetingsMeetingIdPollsHeaders,
    {},
    PostMeetingsMeetingIdPollsPathParams
  >({ url: '/meetings/{meetingId}/polls', method: 'post', ...variables, signal });

export type GetMeetingsMeetingIdRegistrantsQuestionsPathParams = {
  /**
   * (Required) The meeting's ID.
   *
   *  When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits.
   */
  meetingId: string;
};

export type GetMeetingsMeetingIdRegistrantsQuestionsHeaders = {
  Accept?: string;
};

export type GetMeetingsMeetingIdRegistrantsQuestionsError = Fetcher.ErrorWrapper<undefined>;

export type GetMeetingsMeetingIdRegistrantsQuestionsVariables = {
  headers?: GetMeetingsMeetingIdRegistrantsQuestionsHeaders;
  pathParams: GetMeetingsMeetingIdRegistrantsQuestionsPathParams;
} & FetcherExtraProps;

/**
 * List registration questions that will be displayed to users while [registering for a meeting](https://support.zoom.us/hc/en-us/articles/211579443-Registration-for-Meetings).
 *
 *
 *
 *
 * **Scopes:** `meeting:read`,`meeting:read:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
 */
export const getMeetingsMeetingIdRegistrantsQuestions = (
  variables: GetMeetingsMeetingIdRegistrantsQuestionsVariables,
  signal?: AbortSignal
) =>
  fetch<
    Record<string, any>,
    GetMeetingsMeetingIdRegistrantsQuestionsError,
    undefined,
    GetMeetingsMeetingIdRegistrantsQuestionsHeaders,
    {},
    GetMeetingsMeetingIdRegistrantsQuestionsPathParams
  >({ url: '/meetings/{meetingId}/registrants/questions', method: 'get', ...variables, signal });

export type PatchMeetingsMeetingIdRegistrantsQuestionsPathParams = {
  /**
   * (Required) The meeting's ID.
   *
   *  When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits.
   */
  meetingId: string;
};

export type PatchMeetingsMeetingIdRegistrantsQuestionsHeaders = {
  ['Content-Type']?: string;
};

export type PatchMeetingsMeetingIdRegistrantsQuestionsError = Fetcher.ErrorWrapper<undefined>;

export type PatchMeetingsMeetingIdRegistrantsQuestionsVariables = {
  body?: Record<string, any>;
  headers?: PatchMeetingsMeetingIdRegistrantsQuestionsHeaders;
  pathParams: PatchMeetingsMeetingIdRegistrantsQuestionsPathParams;
} & FetcherExtraProps;

/**
 * Update registration questions that will be displayed to users while [registering for a meeting](https://support.zoom.us/hc/en-us/articles/211579443-Registration-for-Meetings).
 *
 *
 *
 *
 * **Scopes:** `meeting:write`,`meeting:write:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
 */
export const patchMeetingsMeetingIdRegistrantsQuestions = (
  variables: PatchMeetingsMeetingIdRegistrantsQuestionsVariables,
  signal?: AbortSignal
) =>
  fetch<
    undefined,
    PatchMeetingsMeetingIdRegistrantsQuestionsError,
    Record<string, any>,
    PatchMeetingsMeetingIdRegistrantsQuestionsHeaders,
    {},
    PatchMeetingsMeetingIdRegistrantsQuestionsPathParams
  >({ url: '/meetings/{meetingId}/registrants/questions', method: 'patch', ...variables, signal });

export type PutMeetingsMeetingIdRegistrantsStatusPathParams = {
  /**
   * (Required) The meeting's ID.
   *
   *  When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits.
   */
  meetingId: string;
};

export type PutMeetingsMeetingIdRegistrantsStatusQueryParams = {
  /**
   * The meeting or webinar occurrence ID.
   */
  occurrence_id?: string;
};

export type PutMeetingsMeetingIdRegistrantsStatusHeaders = {
  ['Content-Type']?: string;
};

export type PutMeetingsMeetingIdRegistrantsStatusError = Fetcher.ErrorWrapper<undefined>;

export type PutMeetingsMeetingIdRegistrantsStatusVariables = {
  body?: Record<string, any>;
  headers?: PutMeetingsMeetingIdRegistrantsStatusHeaders;
  pathParams: PutMeetingsMeetingIdRegistrantsStatusPathParams;
  queryParams?: PutMeetingsMeetingIdRegistrantsStatusQueryParams;
} & FetcherExtraProps;

/**
 * Update a meeting registrant's status by either approving, cancelling or denying a registrant from joining the meeting.
 *
 *
 *
 *
 * **Scopes:** `meeting:write:admin`,`meeting:write`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`
 */
export const putMeetingsMeetingIdRegistrantsStatus = (
  variables: PutMeetingsMeetingIdRegistrantsStatusVariables,
  signal?: AbortSignal
) =>
  fetch<
    undefined,
    PutMeetingsMeetingIdRegistrantsStatusError,
    Record<string, any>,
    PutMeetingsMeetingIdRegistrantsStatusHeaders,
    PutMeetingsMeetingIdRegistrantsStatusQueryParams,
    PutMeetingsMeetingIdRegistrantsStatusPathParams
  >({ url: '/meetings/{meetingId}/registrants/status', method: 'put', ...variables, signal });

export type GetMeetingsMeetingIdRegistrantsRegistrantIdPathParams = {
  /**
   * (Required) The meeting's ID.
   *
   *  When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits.
   */
  meetingId: string;
  /**
   * (Required) The registrant ID.
   */
  registrantId: string;
};

export type GetMeetingsMeetingIdRegistrantsRegistrantIdHeaders = {
  Accept?: string;
};

export type GetMeetingsMeetingIdRegistrantsRegistrantIdError = Fetcher.ErrorWrapper<undefined>;

export type GetMeetingsMeetingIdRegistrantsRegistrantIdVariables = {
  headers?: GetMeetingsMeetingIdRegistrantsRegistrantIdHeaders;
  pathParams: GetMeetingsMeetingIdRegistrantsRegistrantIdPathParams;
} & FetcherExtraProps;

/**
 * Retrieve details on a specific user who has registered for the meeting. A host or a user with administrative permissions can require [registration for Zoom meetings](https://support.zoom.us/hc/en-us/articles/211579443-Registration-for-Meetings).
 *
 * **Prerequisites:**
 * * The account must have a Meeting plan
 *
 * **Scopes:** `meeting:read:admin`,`meeting:read`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
 */
export const getMeetingsMeetingIdRegistrantsRegistrantId = (
  variables: GetMeetingsMeetingIdRegistrantsRegistrantIdVariables,
  signal?: AbortSignal
) =>
  fetch<
    Record<string, any>,
    GetMeetingsMeetingIdRegistrantsRegistrantIdError,
    undefined,
    GetMeetingsMeetingIdRegistrantsRegistrantIdHeaders,
    {},
    GetMeetingsMeetingIdRegistrantsRegistrantIdPathParams
  >({ url: '/meetings/{meetingId}/registrants/{registrantId}', method: 'get', ...variables, signal });

export type DeleteMeetingsMeetingIdRegistrantsRegistrantIdPathParams = {
  /**
   * (Required) The meeting ID.
   */
  meetingId: string;
  /**
   * (Required) The meeting registrant ID.
   */
  registrantId: string;
};

export type DeleteMeetingsMeetingIdRegistrantsRegistrantIdQueryParams = {
  /**
   * The meeting occurrence ID.
   */
  occurrence_id?: string;
};

export type DeleteMeetingsMeetingIdRegistrantsRegistrantIdError = Fetcher.ErrorWrapper<undefined>;

export type DeleteMeetingsMeetingIdRegistrantsRegistrantIdVariables = {
  pathParams: DeleteMeetingsMeetingIdRegistrantsRegistrantIdPathParams;
  queryParams?: DeleteMeetingsMeetingIdRegistrantsRegistrantIdQueryParams;
} & FetcherExtraProps;

/**
 * Delete a meeting registrant.
 *
 *
 *
 *
 * **Scopes:** `meeting:write:admin`,`meeting:write`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
 */
export const deleteMeetingsMeetingIdRegistrantsRegistrantId = (
  variables: DeleteMeetingsMeetingIdRegistrantsRegistrantIdVariables,
  signal?: AbortSignal
) =>
  fetch<
    undefined,
    DeleteMeetingsMeetingIdRegistrantsRegistrantIdError,
    undefined,
    {},
    DeleteMeetingsMeetingIdRegistrantsRegistrantIdQueryParams,
    DeleteMeetingsMeetingIdRegistrantsRegistrantIdPathParams
  >({ url: '/meetings/{meetingId}/registrants/{registrantId}', method: 'delete', ...variables, signal });

export type GetMeetingsMeetingIdRegistrantsPathParams = {
  /**
   * (Required) The meeting's ID.
   *
   *  When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits.
   */
  meetingId: string;
};

export type GetMeetingsMeetingIdRegistrantsQueryParams = {
  /**
   * The meeting or webinar occurrence ID.
   */
  occurrence_id?: string;
  /**
   * Query by the registrant's status.
   * * `pending` - The registration is pending.
   * * `approved` - The registrant is approved.
   * * `denied` - The registration is denied.
   */
  status?: string;
  /**
   * The number of records returned within a single API call.
   */
  page_size?: number;
  /**
   * **Deprecated.** We will no longer support this field in a future release. Instead, use the `next_page_token` for pagination.
   */
  page_number?: number;
  /**
   * Use the next page token to paginate through large result sets. A next page token is returned whenever the set of available results exceeds the current page size. This token's expiration period is 15 minutes.
   */
  next_page_token?: string;
};

export type GetMeetingsMeetingIdRegistrantsHeaders = {
  Accept?: string;
};

export type GetMeetingsMeetingIdRegistrantsError = Fetcher.ErrorWrapper<undefined>;

export type GetMeetingsMeetingIdRegistrantsVariables = {
  headers?: GetMeetingsMeetingIdRegistrantsHeaders;
  pathParams: GetMeetingsMeetingIdRegistrantsPathParams;
  queryParams?: GetMeetingsMeetingIdRegistrantsQueryParams;
} & FetcherExtraProps;

/**
 * A host or a user with admin permission can require [registration for a Zoom meeting](https://support.zoom.us/hc/en-us/articles/211579443-Registration-for-Meetings). List users that have registered for a meeting.
 *
 *
 *
 *
 * **Scopes:** `meeting:read:admin`,`meeting:read`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`
 */
export const getMeetingsMeetingIdRegistrants = (
  variables: GetMeetingsMeetingIdRegistrantsVariables,
  signal?: AbortSignal
) =>
  fetch<
    Record<string, any>,
    GetMeetingsMeetingIdRegistrantsError,
    undefined,
    GetMeetingsMeetingIdRegistrantsHeaders,
    GetMeetingsMeetingIdRegistrantsQueryParams,
    GetMeetingsMeetingIdRegistrantsPathParams
  >({ url: '/meetings/{meetingId}/registrants', method: 'get', ...variables, signal });

export type PostMeetingsMeetingIdRegistrantsPathParams = {
  /**
   * (Required) The meeting's ID.
   *
   *  When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits.
   */
  meetingId: string;
};

export type PostMeetingsMeetingIdRegistrantsQueryParams = {
  /**
   * A comma-separated list of meeting occurrence IDs. You can get this value with the [Get a meeting](/docs/api-reference/zoom-api/methods#operation/meeting) API.
   */
  occurrence_ids?: string;
};

export type PostMeetingsMeetingIdRegistrantsHeaders = {
  ['Content-Type']?: string;
  Accept?: string;
};

export type PostMeetingsMeetingIdRegistrantsError = Fetcher.ErrorWrapper<undefined>;

export type PostMeetingsMeetingIdRegistrantsVariables = {
  body?: Record<string, any>;
  headers?: PostMeetingsMeetingIdRegistrantsHeaders;
  pathParams: PostMeetingsMeetingIdRegistrantsPathParams;
  queryParams?: PostMeetingsMeetingIdRegistrantsQueryParams;
} & FetcherExtraProps;

/**
 * Create and submit a user's registration to a meeting. See [Customizing webinar registration](https://support.zoom.us/hc/en-us/articles/202835649-Customizing-webinar-registration) for details on how to set the requirements for these fields. Note that there is a maximum limit of 4,999 registrants per meeting and users will see an error if the meeting's capacity is reached.
 *
 *  **Prerequisites:**
 * * The host must be a **Licensed** user type.
 *
 * **Scopes:** `meeting:write:admin`,`meeting:write`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
 */
export const postMeetingsMeetingIdRegistrants = (
  variables: PostMeetingsMeetingIdRegistrantsVariables,
  signal?: AbortSignal
) =>
  fetch<
    Record<string, any>,
    PostMeetingsMeetingIdRegistrantsError,
    Record<string, any>,
    PostMeetingsMeetingIdRegistrantsHeaders,
    PostMeetingsMeetingIdRegistrantsQueryParams,
    PostMeetingsMeetingIdRegistrantsPathParams
  >({ url: '/meetings/{meetingId}/registrants', method: 'post', ...variables, signal });

export type PostMeetingsMeetingIdSipDialingPathParams = {
  /**
   * (Required) The meeting's ID.
   *
   *  When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits.
   */
  meetingId: string;
};

export type PostMeetingsMeetingIdSipDialingHeaders = {
  ['Content-Type']?: string;
  Accept?: string;
};

export type PostMeetingsMeetingIdSipDialingError = Fetcher.ErrorWrapper<undefined>;

export type PostMeetingsMeetingIdSipDialingVariables = {
  body?: Record<string, any>;
  headers?: PostMeetingsMeetingIdSipDialingHeaders;
  pathParams: PostMeetingsMeetingIdSipDialingPathParams;
} & FetcherExtraProps;

/**
 * Get a meeting's SIP URI.  The URI consists of the meeting ID, (optional, user-supplied) passcode and participant identifier code.  The API return data also includes additional fields to indicate whether the API caller has a valid Cloud Room Connector subscription, the participant identifier code from the URI, and the SIP URI validity period (in seconds).
 *
 *
 *
 * **Scopes:** `meeting:write:sip_dialing`,`meeting:write:admin:sip_dialing`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`
 */
export const postMeetingsMeetingIdSipDialing = (
  variables: PostMeetingsMeetingIdSipDialingVariables,
  signal?: AbortSignal
) =>
  fetch<
    Record<string, any>,
    PostMeetingsMeetingIdSipDialingError,
    Record<string, any>,
    PostMeetingsMeetingIdSipDialingHeaders,
    {},
    PostMeetingsMeetingIdSipDialingPathParams
  >({ url: '/meetings/{meetingId}/sip_dialing', method: 'post', ...variables, signal });

export type PutMeetingsMeetingIdStatusPathParams = {
  /**
   * (Required) The meeting's ID.
   *
   *  When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits.
   */
  meetingId: string;
};

export type PutMeetingsMeetingIdStatusHeaders = {
  ['Content-Type']?: string;
};

export type PutMeetingsMeetingIdStatusError = Fetcher.ErrorWrapper<undefined>;

export type PutMeetingsMeetingIdStatusVariables = {
  body?: Record<string, any>;
  headers?: PutMeetingsMeetingIdStatusHeaders;
  pathParams: PutMeetingsMeetingIdStatusPathParams;
} & FetcherExtraProps;

/**
 * Update the status of a meeting.
 *
 *
 *
 *
 * **Scopes:** `meeting:write:admin`,`meeting:write`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
 */
export const putMeetingsMeetingIdStatus = (variables: PutMeetingsMeetingIdStatusVariables, signal?: AbortSignal) =>
  fetch<
    undefined,
    PutMeetingsMeetingIdStatusError,
    Record<string, any>,
    PutMeetingsMeetingIdStatusHeaders,
    {},
    PutMeetingsMeetingIdStatusPathParams
  >({ url: '/meetings/{meetingId}/status', method: 'put', ...variables, signal });

export type GetMeetingsMeetingIdSurveyPathParams = {
  /**
   * (Required) The meeting's ID.
   *
   *  When storing this value in your database, store it as a long-format integer and **not** a simple integer. Meeting IDs can be more than 10 digits.
   */
  meetingId: string;
};

export type GetMeetingsMeetingIdSurveyHeaders = {
  Accept?: string;
};

export type GetMeetingsMeetingIdSurveyError = Fetcher.ErrorWrapper<undefined>;

export type GetMeetingsMeetingIdSurveyVariables = {
  headers?: GetMeetingsMeetingIdSurveyHeaders;
  pathParams: GetMeetingsMeetingIdSurveyPathParams;
} & FetcherExtraProps;

/**
 * Display information about a [meeting survey](https://support.zoom.us/hc/en-us/articles/4404969060621-Post-meeting-survey-and-reporting).  **Prerequisites:** * The host has a **Pro** license. * The [**Meeting Survey**](https://support.zoom.us/hc/en-us/articles/4404939095053-Enabling-meeting-surveys) feature is enabled on the host's account. * The meeting must be a scheduled meeting. Instant meetings do not have survey features enabled.
 *
 * **Scopes:** `meeting:read`,`meeting:read:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
 */
export const getMeetingsMeetingIdSurvey = (variables: GetMeetingsMeetingIdSurveyVariables, signal?: AbortSignal) =>
  fetch<
    Record<string, any>,
    GetMeetingsMeetingIdSurveyError,
    undefined,
    GetMeetingsMeetingIdSurveyHeaders,
    {},
    GetMeetingsMeetingIdSurveyPathParams
  >({ url: '/meetings/{meetingId}/survey', method: 'get', ...variables, signal });

export type DeleteMeetingsMeetingIdSurveyPathParams = {
  /**
   * (Required) The meeting's ID.
   *
   *  When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits.
   */
  meetingId: string;
};

export type DeleteMeetingsMeetingIdSurveyError = Fetcher.ErrorWrapper<undefined>;

export type DeleteMeetingsMeetingIdSurveyVariables = {
  pathParams: DeleteMeetingsMeetingIdSurveyPathParams;
} & FetcherExtraProps;

/**
 * Delete a [meeting survey](https://support.zoom.us/hc/en-us/articles/4404969060621-Post-meeting-survey-and-reporting).
 *
 *  **Prerequisites:**
 * * The host must be a **Pro** user type.
 * * The [**Meeting Survey**](https://support.zoom.us/hc/en-us/articles/4404939095053-Enabling-meeting-surveys) feature enabled in the host's account.
 * * The meeting must be a scheduled meeting. Instant meetings do not have survey features enabled.
 *
 * **Scopes:** `meeting:write`,`meeting:write:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
 */
export const deleteMeetingsMeetingIdSurvey = (
  variables: DeleteMeetingsMeetingIdSurveyVariables,
  signal?: AbortSignal
) =>
  fetch<undefined, DeleteMeetingsMeetingIdSurveyError, undefined, {}, {}, DeleteMeetingsMeetingIdSurveyPathParams>({
    url: '/meetings/{meetingId}/survey',
    method: 'delete',
    ...variables,
    signal
  });

export type PatchMeetingsMeetingIdSurveyPathParams = {
  /**
   * (Required) The meeting's ID.
   *
   *  When storing this value in your database, store it as a long-format integer and **not** a simple integer. Meeting IDs can be over 10 digits.
   */
  meetingId: string;
};

export type PatchMeetingsMeetingIdSurveyHeaders = {
  ['Content-Type']?: string;
};

export type PatchMeetingsMeetingIdSurveyError = Fetcher.ErrorWrapper<undefined>;

export type PatchMeetingsMeetingIdSurveyVariables = {
  body?: Record<string, any>;
  headers?: PatchMeetingsMeetingIdSurveyHeaders;
  pathParams: PatchMeetingsMeetingIdSurveyPathParams;
} & FetcherExtraProps;

/**
 * Update a [meeting survey](https://support.zoom.us/hc/en-us/articles/4404969060621-Post-meeting-survey-and-reporting).  **Prerequisites:** * The host must be a **Pro** user type. * The [**Meeting Survey**](https://support.zoom.us/hc/en-us/articles/4404939095053-Enabling-meeting-surveys) feature is enabled in the host's account. * The meeting must be a scheduled meeting. Instant meetings do not have survey features enabled.
 *
 * **Scopes:** `meeting:write:admin`,`meeting:write`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
 */
export const patchMeetingsMeetingIdSurvey = (variables: PatchMeetingsMeetingIdSurveyVariables, signal?: AbortSignal) =>
  fetch<
    undefined,
    PatchMeetingsMeetingIdSurveyError,
    Record<string, any>,
    PatchMeetingsMeetingIdSurveyHeaders,
    {},
    PatchMeetingsMeetingIdSurveyPathParams
  >({ url: '/meetings/{meetingId}/survey', method: 'patch', ...variables, signal });

export type GetMeetingsMeetingIdTokenPathParams = {
  /**
   * (Required) The meeting's ID.
   *
   *  When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits.
   */
  meetingId: string;
};

export type GetMeetingsMeetingIdTokenQueryParams = {
  /**
   * The meeting token type:
   * * `closed_caption_token` &mdash; The third-party closed caption API token.
   *
   * This defaults to `closed_caption_token`.
   */
  type?: string;
};

export type GetMeetingsMeetingIdTokenHeaders = {
  Accept?: string;
};

export type GetMeetingsMeetingIdTokenError = Fetcher.ErrorWrapper<undefined>;

export type GetMeetingsMeetingIdTokenVariables = {
  headers?: GetMeetingsMeetingIdTokenHeaders;
  pathParams: GetMeetingsMeetingIdTokenPathParams;
  queryParams?: GetMeetingsMeetingIdTokenQueryParams;
} & FetcherExtraProps;

/**
 * Get a meeting's [closed caption token (caption URL)](https://support.zoom.us/hc/en-us/articles/115002212983-Using-a-third-party-closed-captioning-service). This token lets you use a third-party service to stream text to their closed captioning software to the Zoom meeting.
 *
 * **Prerequisites:**
 * * The **Closed captioning** setting enabled in the Zoom web portal.
 * * The **Allow use of caption API Token to integrate with 3rd-party Closed Captioning services** setting enabled.
 *
 * **Scopes:** `meeting:read`,`meeting:read:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
 */
export const getMeetingsMeetingIdToken = (variables: GetMeetingsMeetingIdTokenVariables, signal?: AbortSignal) =>
  fetch<
    Record<string, any>,
    GetMeetingsMeetingIdTokenError,
    undefined,
    GetMeetingsMeetingIdTokenHeaders,
    GetMeetingsMeetingIdTokenQueryParams,
    GetMeetingsMeetingIdTokenPathParams
  >({ url: '/meetings/{meetingId}/token', method: 'get', ...variables, signal });

export type GetMeetingsMeetingIdPathParams = {
  /**
   * (Required) The meeting's ID.
   *
   *  When storing this value in your database, store it as a long format integer and **not** an integer. Meeting IDs can be more than 10 digits.
   */
  meetingId: string;
};

export type GetMeetingsMeetingIdQueryParams = {
  /**
   * Meeting occurrence ID. Provide this field to view meeting details of a particular occurrence of the [recurring meeting](https://support.zoom.us/hc/en-us/articles/214973206-Scheduling-Recurring-Meetings).
   */
  occurrence_id?: string;
  /**
   * Set this field's value to `true` to view meeting details of all previous occurrences of a [recurring meeting](https://support.zoom.us/hc/en-us/articles/214973206-Scheduling-Recurring-Meetings).
   */
  show_previous_occurrences?: string;
};

export type GetMeetingsMeetingIdHeaders = {
  Accept?: string;
};

export type GetMeetingsMeetingIdError = Fetcher.ErrorWrapper<undefined>;

export type GetMeetingsMeetingIdVariables = {
  headers?: GetMeetingsMeetingIdHeaders;
  pathParams: GetMeetingsMeetingIdPathParams;
  queryParams?: GetMeetingsMeetingIdQueryParams;
} & FetcherExtraProps;

/**
 * Retrieve the given meeting's details.
 *
 *
 *
 *
 * **Scopes:** `meeting:read`,`meeting:read:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
 */
export const getMeetingsMeetingId = (variables: GetMeetingsMeetingIdVariables, signal?: AbortSignal) =>
  fetch<
    Record<string, any>,
    GetMeetingsMeetingIdError,
    undefined,
    GetMeetingsMeetingIdHeaders,
    GetMeetingsMeetingIdQueryParams,
    GetMeetingsMeetingIdPathParams
  >({ url: '/meetings/{meetingId}', method: 'get', ...variables, signal });

export type DeleteMeetingsMeetingIdPathParams = {
  /**
   * (Required) The meeting's ID.
   *
   *  When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits.
   */
  meetingId: string;
};

export type DeleteMeetingsMeetingIdQueryParams = {
  /**
   * The meeting or webinar occurrence ID.
   */
  occurrence_id?: string;
  /**
   * `true`: Notify host and alternative host about the meeting cancellation via email.
   * `false`: Do not send any email notification.
   */
  schedule_for_reminder?: string;
  /**
   * `true`: Notify registrants about the meeting cancellation via email.
   *
   * `false`: Do not send any email notification to meeting registrants.
   *
   * The default value of this field is `false`.
   */
  cancel_meeting_reminder?: string;
};

export type DeleteMeetingsMeetingIdError = Fetcher.ErrorWrapper<undefined>;

export type DeleteMeetingsMeetingIdVariables = {
  pathParams: DeleteMeetingsMeetingIdPathParams;
  queryParams?: DeleteMeetingsMeetingIdQueryParams;
} & FetcherExtraProps;

/**
 * Delete a meeting.
 *
 *
 *
 *
 * **Scopes:** `meeting:write:admin`,`meeting:write`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
 */
export const deleteMeetingsMeetingId = (variables: DeleteMeetingsMeetingIdVariables, signal?: AbortSignal) =>
  fetch<
    undefined,
    DeleteMeetingsMeetingIdError,
    undefined,
    {},
    DeleteMeetingsMeetingIdQueryParams,
    DeleteMeetingsMeetingIdPathParams
  >({ url: '/meetings/{meetingId}', method: 'delete', ...variables, signal });

export type PatchMeetingsMeetingIdPathParams = {
  /**
   * (Required) The meeting's ID.
   *
   *  When storing this value in your database, store it as a long format integer and **not** an integer. Meeting IDs can be greater than 10 digits.
   */
  meetingId: string;
};

export type PatchMeetingsMeetingIdQueryParams = {
  /**
   * Meeting occurrence ID. Support change of agenda, `start_time`, duration, or settings {`host_video`, `participant_video`, `join_before_host`, `mute_upon_entry`, `waiting_room`, `watermark`, `auto_recording`}.
   */
  occurrence_id?: string;
};

export type PatchMeetingsMeetingIdHeaders = {
  ['Content-Type']?: string;
};

export type PatchMeetingsMeetingIdError = Fetcher.ErrorWrapper<undefined>;

export type PatchMeetingsMeetingIdVariables = {
  body?: Record<string, any>;
  headers?: PatchMeetingsMeetingIdHeaders;
  pathParams: PatchMeetingsMeetingIdPathParams;
  queryParams?: PatchMeetingsMeetingIdQueryParams;
} & FetcherExtraProps;

/**
 * Update meeting details.
 *
 * **Note**
 * * The `start_time` value **must** be a future date. If the value is omitted or a date is in the past, the API ignores this value and does **not** update any recurring meetings.
 * * The `recurrence` object is **required**.
 * * This API has a rate limit of **100 requests per day**. You can update a meeting for a maximum of **100 times within a 24-hour period**.
 *
 *
 *
 *
 * **Scopes:** `meeting:write`,`meeting:write:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
 */
export const patchMeetingsMeetingId = (variables: PatchMeetingsMeetingIdVariables, signal?: AbortSignal) =>
  fetch<
    undefined,
    PatchMeetingsMeetingIdError,
    Record<string, any>,
    PatchMeetingsMeetingIdHeaders,
    PatchMeetingsMeetingIdQueryParams,
    PatchMeetingsMeetingIdPathParams
  >({ url: '/meetings/{meetingId}', method: 'patch', ...variables, signal });

export type PutMeetingsMeetingUUIDRecordingsStatusPathParams = {
  /**
   * (Required) The meeting's universally unique identifier (UUID). Each meeting instance generates a UUID. For example, after a meeting ends, a new UUID is generated for the next meeting instance.
   *
   * If the meeting UUID begins with a `/` character or contains a `//` character, you **must** [double encode](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis/#meeting-id-and-uuid) the meeting UUID when using the meeting UUID for other API calls.
   */
  meetingUUID: string;
};

export type PutMeetingsMeetingUUIDRecordingsStatusHeaders = {
  ['Content-Type']?: string;
};

export type PutMeetingsMeetingUUIDRecordingsStatusError = Fetcher.ErrorWrapper<undefined>;

export type PutMeetingsMeetingUUIDRecordingsStatusVariables = {
  body?: Record<string, any>;
  headers?: PutMeetingsMeetingUUIDRecordingsStatusHeaders;
  pathParams: PutMeetingsMeetingUUIDRecordingsStatusPathParams;
} & FetcherExtraProps;

/**
 * Zoom allows users to recover recordings from trash for up to 30 days from the deletion date. Use this API to recover all deleted [Cloud Recordings](https://support.zoom.us/hc/en-us/articles/203741855-Cloud-Recording) of a specific meeting.
 *
 *
 * **Prerequisites**:
 *
 * * A Pro user with Cloud Recording enabled.
 *
 * **Scopes:** `recording:write:admin`,`recording:write`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
 */
export const putMeetingsMeetingUUIDRecordingsStatus = (
  variables: PutMeetingsMeetingUUIDRecordingsStatusVariables,
  signal?: AbortSignal
) =>
  fetch<
    undefined,
    PutMeetingsMeetingUUIDRecordingsStatusError,
    Record<string, any>,
    PutMeetingsMeetingUUIDRecordingsStatusHeaders,
    {},
    PutMeetingsMeetingUUIDRecordingsStatusPathParams
  >({ url: '/meetings/{meetingUUID}/recordings/status', method: 'put', ...variables, signal });

export type GetMeetingsMeetingSummariesQueryParams = {
  /**
   * The number of records returned within a single API call.
   */
  page_size?: number;
  /**
   * The next page token paginates through a large set of results. A next page token returns whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
   */
  next_page_token?: string;
  /**
   * The start date in `yyyy-MM-dd'T'HH:mm:ss'Z'` UTC format used to retrieve the creation date range of the meeting summaries.
   */
  from?: string;
  /**
   * The end date in `yyyy-MM-dd'T'HH:mm:ss'Z'` UTC format used to retrieve the creation date range of the meeting summaries.
   */
  to?: string;
};

export type GetMeetingsMeetingSummariesHeaders = {
  Accept?: string;
};

export type GetMeetingsMeetingSummariesError = Fetcher.ErrorWrapper<undefined>;

export type GetMeetingsMeetingSummariesVariables = {
  headers?: GetMeetingsMeetingSummariesHeaders;
  queryParams?: GetMeetingsMeetingSummariesQueryParams;
} & FetcherExtraProps;

/**
 * Generates a list of all meeting summaries for an account.
 *
 * **Prerequisites**
 * * Host user type must be Pro or higher plan.
 * * The Meeting Summary with AI Companion feature enabled in the host's account.
 * * E2ee meetings do not have summary feature enabled.
 *
 * **Scopes:** `meeting_summary:read:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
 */
export const getMeetingsMeetingSummaries = (variables: GetMeetingsMeetingSummariesVariables, signal?: AbortSignal) =>
  fetch<
    Record<string, any>,
    GetMeetingsMeetingSummariesError,
    undefined,
    GetMeetingsMeetingSummariesHeaders,
    GetMeetingsMeetingSummariesQueryParams,
    {}
  >({ url: '/meetings/meeting_summaries', method: 'get', ...variables, signal });

export type DeleteLiveMeetingsMeetingIdChatMessagesMessageIdPathParams = {
  /**
   * (Required) The meeting's ID.
   *
   *  When storing this value in your database, store it as a long-format integer and **not** an integer. Meeting IDs can exceed 10 digits.
   */
  meetingId: string;
  /**
   * (Required) The live meeting chat message's unique identifier (UUID), in base64-encoded format.
   */
  messageId: string;
};

export type DeleteLiveMeetingsMeetingIdChatMessagesMessageIdQueryParams = {
  /**
   * The live webinar chat file's universally unique identifier (UUID), in base64-encoded format. Separate multiple values with commas.
   */
  file_ids?: string;
};

export type DeleteLiveMeetingsMeetingIdChatMessagesMessageIdError = Fetcher.ErrorWrapper<undefined>;

export type DeleteLiveMeetingsMeetingIdChatMessagesMessageIdVariables = {
  pathParams: DeleteLiveMeetingsMeetingIdChatMessagesMessageIdPathParams;
  queryParams?: DeleteLiveMeetingsMeetingIdChatMessagesMessageIdQueryParams;
} & FetcherExtraProps;

/**
 * Delete a message in a live meeting, based on ID.
 *
 * **Prerequisites:**
 * * Have Zoom enable the DLP for the in-meeting chat feature to use this API.
 *
 * **Scopes:** `meeting:write`,`meeting:write:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
 */
export const deleteLiveMeetingsMeetingIdChatMessagesMessageId = (
  variables: DeleteLiveMeetingsMeetingIdChatMessagesMessageIdVariables,
  signal?: AbortSignal
) =>
  fetch<
    undefined,
    DeleteLiveMeetingsMeetingIdChatMessagesMessageIdError,
    undefined,
    {},
    DeleteLiveMeetingsMeetingIdChatMessagesMessageIdQueryParams,
    DeleteLiveMeetingsMeetingIdChatMessagesMessageIdPathParams
  >({ url: '/live_meetings/{meetingId}/chat/messages/{messageId}', method: 'delete', ...variables, signal });

export type PatchLiveMeetingsMeetingIdChatMessagesMessageIdPathParams = {
  /**
   * (Required) The meeting's ID.
   *
   *  When storing this value in your database, store it as a long-format integer and **not** an integer. Meeting IDs can exceed 10 digits.
   */
  meetingId: string;
  /**
   * (Required) The live meeting chat message's unique identifier (UUID), in base64-encoded format.
   */
  messageId: string;
};

export type PatchLiveMeetingsMeetingIdChatMessagesMessageIdHeaders = {
  ['Content-Type']?: string;
};

export type PatchLiveMeetingsMeetingIdChatMessagesMessageIdError = Fetcher.ErrorWrapper<undefined>;

export type PatchLiveMeetingsMeetingIdChatMessagesMessageIdVariables = {
  body?: Record<string, any>;
  headers?: PatchLiveMeetingsMeetingIdChatMessagesMessageIdHeaders;
  pathParams: PatchLiveMeetingsMeetingIdChatMessagesMessageIdPathParams;
} & FetcherExtraProps;

/**
 * Update a message in a live meeting, based on ID. **Prerequisites:** * Have Zoom enable the DLP for the in-meeting chat feature to use this API.
 *
 * **Scopes:** `meeting:write`,`meeting:write:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
 */
export const patchLiveMeetingsMeetingIdChatMessagesMessageId = (
  variables: PatchLiveMeetingsMeetingIdChatMessagesMessageIdVariables,
  signal?: AbortSignal
) =>
  fetch<
    undefined,
    PatchLiveMeetingsMeetingIdChatMessagesMessageIdError,
    Record<string, any>,
    PatchLiveMeetingsMeetingIdChatMessagesMessageIdHeaders,
    {},
    PatchLiveMeetingsMeetingIdChatMessagesMessageIdPathParams
  >({ url: '/live_meetings/{meetingId}/chat/messages/{messageId}', method: 'patch', ...variables, signal });

export type PatchLiveMeetingsMeetingIdEventsPathParams = {
  /**
   * (Required) The live meeting's ID.
   */
  meetingId: string;
};

export type PatchLiveMeetingsMeetingIdEventsHeaders = {
  ['Content-Type']?: string;
};

export type PatchLiveMeetingsMeetingIdEventsError = Fetcher.ErrorWrapper<undefined>;

export type PatchLiveMeetingsMeetingIdEventsVariables = {
  body?: Record<string, any>;
  headers?: PatchLiveMeetingsMeetingIdEventsHeaders;
  pathParams: PatchLiveMeetingsMeetingIdEventsPathParams;
} & FetcherExtraProps;

/**
 * Control [in-meeting](https://support.zoom.us/hc/en-us/articles/360021921032-In-Meeting-Controls) features. In-meeting controls include starting and stopping a recording, pausing and resuming a recording, and inviting participants.
 *
 * **Note:** This API's recording control only works for cloud recordings. It does **not** work for local recordings.
 *
 * **Prerequisites:**
 * * The meeting **must** be a live meeting **except** inviting participants to the meeting through [call out (phone)/(room system)].
 * * Recording control: [Cloud recording](https://support.zoom.us/hc/en-us/articles/360060231472-Enabling-cloud-recording) must be enabled on the account.
 * * The user calling this API must be the host or an alternative meeting host.
 *
 *
 *
 * **Scopes:** `meeting:write`,`meeting:write:admin`,`meeting:master`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`
 */
export const patchLiveMeetingsMeetingIdEvents = (
  variables: PatchLiveMeetingsMeetingIdEventsVariables,
  signal?: AbortSignal
) =>
  fetch<
    undefined,
    PatchLiveMeetingsMeetingIdEventsError,
    Record<string, any>,
    PatchLiveMeetingsMeetingIdEventsHeaders,
    {},
    PatchLiveMeetingsMeetingIdEventsPathParams
  >({ url: '/live_meetings/{meetingId}/events', method: 'patch', ...variables, signal });

export type GetReportActivitiesQueryParams = {
  /**
   * Start date for which you would like to view the activity logs report. Using the `from` and `to` parameters, specify a monthly date range for the report as the API only provides one month worth of data in one request. The specified date range should fall within the last six months.
   */
  from?: string;
  /**
   * End date up to which you would like to view the activity logs report.
   */
  to?: string;
  /**
   * The number of records to be returned within a single API call
   */
  page_size?: string;
  /**
   * Next page token is used to paginate through large result sets
   */
  next_page_token?: string;
};

export type GetReportActivitiesHeaders = {
  Accept?: string;
};

export type GetReportActivitiesError = Fetcher.ErrorWrapper<undefined>;

export type GetReportActivitiesVariables = {
  headers?: GetReportActivitiesHeaders;
  queryParams?: GetReportActivitiesQueryParams;
} & FetcherExtraProps;

/**
 * Retrieve a list of sign in / sign out activity logs [report](https://support.zoom.us/hc/en-us/articles/201363213-Getting-Started-with-Reports) of users under a Zoom account.
 *
 * **Prerequisites**
 *
 * * Pro or higher plan.
 *
 *
 *
 * **Scopes:** `report:read:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`
 */
export const getReportActivities = (variables: GetReportActivitiesVariables, signal?: AbortSignal) =>
  fetch<
    Record<string, any>,
    GetReportActivitiesError,
    undefined,
    GetReportActivitiesHeaders,
    GetReportActivitiesQueryParams,
    {}
  >({ url: '/report/activities', method: 'get', ...variables, signal });

export type GetReportBillingInvoicesQueryParams = {
  /**
   * (Required) Unique Identifier of the Billing Report. Retrieve this ID from the response of **Get Billing Reports** API request.
   */
  billing_id?: string;
};

export type GetReportBillingInvoicesHeaders = {
  Accept?: string;
};

export type GetReportBillingInvoicesError = Fetcher.ErrorWrapper<undefined>;

export type GetReportBillingInvoicesVariables = {
  headers?: GetReportBillingInvoicesHeaders;
  queryParams?: GetReportBillingInvoicesQueryParams;
} & FetcherExtraProps;

/**
 * Get department billing invoices reports for a specific billing period. Provide the `billing_id` of the billing period for which you would like to retrieve the invoices for. This ID can be retrieved from **Get Billing Reports** API.
 *
 * **Prerequisites:**
 *
 * * Pro or a higher account with Department Billing option enabled. Contact the Zoom Support team to enable this feature.
 *
 *
 *
 * **Scopes:** `report:read:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`
 */
export const getReportBillingInvoices = (variables: GetReportBillingInvoicesVariables, signal?: AbortSignal) =>
  fetch<
    Record<string, any>,
    GetReportBillingInvoicesError,
    undefined,
    GetReportBillingInvoicesHeaders,
    GetReportBillingInvoicesQueryParams,
    {}
  >({ url: '/report/billing/invoices', method: 'get', ...variables, signal });

export type GetReportBillingHeaders = {
  Accept?: string;
};

export type GetReportBillingError = Fetcher.ErrorWrapper<undefined>;

export type GetReportBillingVariables = {
  headers?: GetReportBillingHeaders;
} & FetcherExtraProps;

/**
 * Get department billing reports of a Zoom account.
 *
 * **Prerequisites:**
 *
 * * Pro or a higher account with Department Billing option enabled. Contact Zoom Support team for details.
 *
 *
 *
 * **Scopes:** `report:read:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`
 */
export const getReportBilling = (variables: GetReportBillingVariables, signal?: AbortSignal) =>
  fetch<Record<string, any>, GetReportBillingError, undefined, GetReportBillingHeaders, {}, {}>({
    url: '/report/billing',
    method: 'get',
    ...variables,
    signal
  });

export type GetReportCloudRecordingQueryParams = {
  /**
   * (Required) Start date in 'yyyy-mm-dd' format. The date range defined by the &quot;from&quot; and &quot;to&quot; parameters should only be one month as the report includes only one month worth of data at once.
   */
  from?: string;
  /**
   * (Required) End date.
   */
  to?: string;
  /**
   * The group ID. To get a group ID, use the [**List groups**](/api-reference/zoom-api/methods#operation/groups) API.
   *
   *  **Note:** The API response will only contain users who are members of the queried group ID.
   */
  group_id?: string;
};

export type GetReportCloudRecordingHeaders = {
  Accept?: string;
};

export type GetReportCloudRecordingError = Fetcher.ErrorWrapper<undefined>;

export type GetReportCloudRecordingVariables = {
  headers?: GetReportCloudRecordingHeaders;
  queryParams?: GetReportCloudRecordingQueryParams;
} & FetcherExtraProps;

/**
 * Retrieve cloud recording usage report for a specified period. You can only get cloud recording reports that is one day earlier than the current date and for the most recent period of 6 months. The date gap between from and to dates should be smaller or equal to 30 days.
 *
 * **Prerequisites**
 *
 * * Pro or higher plan.
 *
 *
 *
 * **Scopes:** `report:read:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`
 */
export const getReportCloudRecording = (variables: GetReportCloudRecordingVariables, signal?: AbortSignal) =>
  fetch<
    Record<string, any>,
    GetReportCloudRecordingError,
    undefined,
    GetReportCloudRecordingHeaders,
    GetReportCloudRecordingQueryParams,
    {}
  >({ url: '/report/cloud_recording', method: 'get', ...variables, signal });

export type GetReportDailyQueryParams = {
  /**
   * Year for this report
   */
  year?: string;
  /**
   * Month for this report
   */
  month?: string;
  /**
   * The group ID. To get a group ID, use the [**List groups**](/api-reference/zoom-api/methods#operation/groups) API.
   *
   *  **Note:** The API response will only contain users who are members of the queried group ID.
   */
  group_id?: string;
};

export type GetReportDailyHeaders = {
  Accept?: string;
};

export type GetReportDailyError = Fetcher.ErrorWrapper<undefined>;

export type GetReportDailyVariables = {
  headers?: GetReportDailyHeaders;
  queryParams?: GetReportDailyQueryParams;
} & FetcherExtraProps;

/**
 * Retrieve daily report to access the account-wide usage of Zoom services for each day in a given month. It lists the number of new users, meetings, participants, and meeting minutes.
 *
 * **Prerequisites**
 *
 * * Pro or higher plan.
 *
 *
 *
 * **Scopes:** `report:read:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`
 */
export const getReportDaily = (variables: GetReportDailyVariables, signal?: AbortSignal) =>
  fetch<Record<string, any>, GetReportDailyError, undefined, GetReportDailyHeaders, GetReportDailyQueryParams, {}>({
    url: '/report/daily',
    method: 'get',
    ...variables,
    signal
  });

export type GetReportMeetingsMeetingIdParticipantsPathParams = {
  /**
   * (Required) The meeting's ID or universally unique ID (UUID).
   * * If you provide a meeting ID, the API will return a response for the latest meeting instance.
   * * If you provide a meeting UUID that begins with a `/` character or contains the `//` characters, you **must** double-encode the meeting UUID before making an API request.
   */
  meetingId: string;
};

export type GetReportMeetingsMeetingIdParticipantsQueryParams = {
  /**
   * The number of records returned within a single API call.
   */
  page_size?: number;
  /**
   * Use the next page token to paginate through large result sets. A next page token is returned whenever the set of available results exceeds the current page size. This token's expiration period is 15 minutes.
   */
  next_page_token?: string;
  /**
   * Provide `registrant_id` as the value for this field if you would like to see the registrant ID attribute in the response of this API call. A registrant ID is a unique identifier of a [meeting registrant](/docs/api-reference/zoom-api/methods#operation/meetingRegistrants).
   */
  include_fields?: string;
};

export type GetReportMeetingsMeetingIdParticipantsHeaders = {
  Accept?: string;
};

export type GetReportMeetingsMeetingIdParticipantsError = Fetcher.ErrorWrapper<undefined>;

export type GetReportMeetingsMeetingIdParticipantsVariables = {
  headers?: GetReportMeetingsMeetingIdParticipantsHeaders;
  pathParams: GetReportMeetingsMeetingIdParticipantsPathParams;
  queryParams?: GetReportMeetingsMeetingIdParticipantsQueryParams;
} & FetcherExtraProps;

/**
 * Return a report of a past meeting with two or more participants, including the host. To return a report for past meeting with only **one** participant, use the [**List meeting participants**](/docs/api-reference/zoom-api/ma#operation/dashboardMeetingParticipants) API.
 *
 * **Note:**
 *
 * This API may return empty values for participants' `user_name`, `ip_address`, `location`, and `email` responses when the account calling this API:
 * * Does **not** have a signed HIPAA business associate agreement (BAA).
 * * Is a [**legacy** HIPAA BAA account](/docs/api-reference/other-references/legacy-business-associate-agreements).
 *
 * **Prerequisites:**
 * * A Pro or a higher plan.
 *
 * **Scopes:** `report:read:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`
 */
export const getReportMeetingsMeetingIdParticipants = (
  variables: GetReportMeetingsMeetingIdParticipantsVariables,
  signal?: AbortSignal
) =>
  fetch<
    Record<string, any>,
    GetReportMeetingsMeetingIdParticipantsError,
    undefined,
    GetReportMeetingsMeetingIdParticipantsHeaders,
    GetReportMeetingsMeetingIdParticipantsQueryParams,
    GetReportMeetingsMeetingIdParticipantsPathParams
  >({ url: '/report/meetings/{meetingId}/participants', method: 'get', ...variables, signal });

export type GetReportMeetingsMeetingIdPollsPathParams = {
  /**
   * (Required) The meeting's ID or universally unique ID (UUID).
   * * If you provide a meeting ID, the API will return a response for the latest meeting instance.
   * * If you provide a meeting UUID that begins with a `/` character or contains the `//` characters, you **must** [double encode](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis/#meeting-id-and-uuid) the meeting UUID before making an API request.
   */
  meetingId: string;
};

export type GetReportMeetingsMeetingIdPollsHeaders = {
  Accept?: string;
};

export type GetReportMeetingsMeetingIdPollsError = Fetcher.ErrorWrapper<undefined>;

export type GetReportMeetingsMeetingIdPollsVariables = {
  headers?: GetReportMeetingsMeetingIdPollsHeaders;
  pathParams: GetReportMeetingsMeetingIdPollsPathParams;
} & FetcherExtraProps;

/**
 * Use this API to get a report of [poll](https://support.zoom.us/hc/en-us/articles/213756303-Polling-for-Meetings) results for a past meeting.
 *
 *  **Prerequisites:**
 * * A Pro or a higher plan.
 *
 * **Scopes:** `report:read:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`
 */
export const getReportMeetingsMeetingIdPolls = (
  variables: GetReportMeetingsMeetingIdPollsVariables,
  signal?: AbortSignal
) =>
  fetch<
    Record<string, any>,
    GetReportMeetingsMeetingIdPollsError,
    undefined,
    GetReportMeetingsMeetingIdPollsHeaders,
    {},
    GetReportMeetingsMeetingIdPollsPathParams
  >({ url: '/report/meetings/{meetingId}/polls', method: 'get', ...variables, signal });

export type GetReportMeetingsMeetingIdQaPathParams = {
  /**
   * (Required) The meeting's ID or universally unique ID (UUID).
   * * If you provide a meeting ID, the API will return a response for the latest meeting instance.
   * * If you provide a meeting UUID that begins with a `/` character or contains the `//` characters, you **must** double-encode the meeting UUID before making an API request.
   */
  meetingId: string;
};

export type GetReportMeetingsMeetingIdQaHeaders = {
  Accept?: string;
};

export type GetReportMeetingsMeetingIdQaError = Fetcher.ErrorWrapper<undefined>;

export type GetReportMeetingsMeetingIdQaVariables = {
  headers?: GetReportMeetingsMeetingIdQaHeaders;
  pathParams: GetReportMeetingsMeetingIdQaPathParams;
} & FetcherExtraProps;

/**
 * Retrieve a report on questions asked and answered by participants from past meetings.
 *
 *
 *
 *
 * **Prerequisites:**
 *
 * * Pro plan or higher.
 *
 * **Scopes:** `report:read:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `HEAVY`
 */
export const getReportMeetingsMeetingIdQa = (variables: GetReportMeetingsMeetingIdQaVariables, signal?: AbortSignal) =>
  fetch<
    Record<string, any>,
    GetReportMeetingsMeetingIdQaError,
    undefined,
    GetReportMeetingsMeetingIdQaHeaders,
    {},
    GetReportMeetingsMeetingIdQaPathParams
  >({ url: '/report/meetings/{meetingId}/qa', method: 'get', ...variables, signal });

export type GetReportMeetingsMeetingIdSurveyPathParams = {
  /**
   * (Required) The meeting's ID or universally unique ID (UUID).
   * * If you provide a meeting ID, the API will return a response for the latest meeting instance.
   * * If you provide a meeting UUID that begins with a `/` character or contains the `//` characters, you **must** double-encode the meeting UUID before making an API request.
   */
  meetingId: string;
};

export type GetReportMeetingsMeetingIdSurveyHeaders = {
  Accept?: string;
};

export type GetReportMeetingsMeetingIdSurveyError = Fetcher.ErrorWrapper<undefined>;

export type GetReportMeetingsMeetingIdSurveyVariables = {
  headers?: GetReportMeetingsMeetingIdSurveyHeaders;
  pathParams: GetReportMeetingsMeetingIdSurveyPathParams;
} & FetcherExtraProps;

/**
 * Retrieve a report on past [meeting survey](https://support.zoom.com/hc/en/article?id=zm_kb&sysparm_article=KB0057559).
 *
 *
 * **Prerequisites:**
 *
 * * Pro or a higher plan.
 *
 * **Scopes:** `report:read:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `HEAVY`
 */
export const getReportMeetingsMeetingIdSurvey = (
  variables: GetReportMeetingsMeetingIdSurveyVariables,
  signal?: AbortSignal
) =>
  fetch<
    Record<string, any>,
    GetReportMeetingsMeetingIdSurveyError,
    undefined,
    GetReportMeetingsMeetingIdSurveyHeaders,
    {},
    GetReportMeetingsMeetingIdSurveyPathParams
  >({ url: '/report/meetings/{meetingId}/survey', method: 'get', ...variables, signal });

export type GetReportMeetingsMeetingIdPathParams = {
  /**
   * (Required) The meeting's ID or universally unique ID (UUID).
   * * If you provide a meeting ID, the API will return a response for the latest meeting instance.
   * * If you provide a meeting UUID that begins with a `/` character or contains the `//` characters, you **must** [double encode](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis/#meeting-id-and-uuid) the meeting UUID before making an API request.
   */
  meetingId: string;
};

export type GetReportMeetingsMeetingIdHeaders = {
  Accept?: string;
};

export type GetReportMeetingsMeetingIdError = Fetcher.ErrorWrapper<undefined>;

export type GetReportMeetingsMeetingIdVariables = {
  headers?: GetReportMeetingsMeetingIdHeaders;
  pathParams: GetReportMeetingsMeetingIdPathParams;
} & FetcherExtraProps;

/**
 * Get a detailed report for a past meeting.
 *
 * **Prerequisites:**
 *
 * * Pro or a higher plan.
 *
 *
 *
 * **Scopes:** `report:read:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`
 */
export const getReportMeetingsMeetingId = (variables: GetReportMeetingsMeetingIdVariables, signal?: AbortSignal) =>
  fetch<
    Record<string, any>,
    GetReportMeetingsMeetingIdError,
    undefined,
    GetReportMeetingsMeetingIdHeaders,
    {},
    GetReportMeetingsMeetingIdPathParams
  >({ url: '/report/meetings/{meetingId}', method: 'get', ...variables, signal });

export type GetReportOperationlogsQueryParams = {
  /**
   * (Required) Start date in 'yyyy-mm-dd' format. The date range defined by the &quot;from&quot; and &quot;to&quot; parameters should only be one month as the report includes only one month worth of data at once.
   */
  from?: string;
  /**
   * (Required) End date.
   */
  to?: string;
  /**
   * The number of records returned within a single API call.
   */
  page_size?: number;
  /**
   * Use the next page token to paginate through large result sets. A next page token is returned whenever the set of available results exceeds the current page size. This token's expiration period is 15 minutes.
   */
  next_page_token?: string;
  /**
   * **Optional**
   *
   * Filter your response by a category type to see reports for a specific category.
   * The value for this field can be one of the following:
   *   `all`
   *  `user`
   *  `user_settings`
   *  `account`
   *  `billing`
   *  `im`
   *  `recording`
   *  `phone_contacts`
   *  `webinar`
   *  `sub_account`
   *  `role`
   *  `zoom_rooms`
   */
  category_type?: string;
};

export type GetReportOperationlogsHeaders = {
  Accept?: string;
};

export type GetReportOperationlogsError = Fetcher.ErrorWrapper<undefined>;

export type GetReportOperationlogsVariables = {
  headers?: GetReportOperationlogsHeaders;
  queryParams?: GetReportOperationlogsQueryParams;
} & FetcherExtraProps;

/**
 * The [Operations Logs](https://support.zoom.us/hc/en-us/articles/360032748331-Operation-Logs) report allows you to audit admin and user activity, such as adding a new user, changing account settings, and deleting recordings.
 *
 * Use this API to retrieve operation logs report for a specified period of time.
 *
 * **Prerequisites:**
 *
 * * Pro or higher plan.
 *
 * **Scopes:** `report:read:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`
 */
export const getReportOperationlogs = (variables: GetReportOperationlogsVariables, signal?: AbortSignal) =>
  fetch<
    Record<string, any>,
    GetReportOperationlogsError,
    undefined,
    GetReportOperationlogsHeaders,
    GetReportOperationlogsQueryParams,
    {}
  >({ url: '/report/operationlogs', method: 'get', ...variables, signal });

export type GetReportTelephoneQueryParams = {
  /**
   * Audio types:
   *  `1` - Toll-free Call-in &amp; Call-out.
   *  `2` - Toll
   *
   * `3` - SIP Connected Audio
   */
  type?: number;
  /**
   * The type of date to query.
   * * `start_time` &mdash; Query by call start time.
   * * `end_time` &mdash; Query by call end time.
   * * `meeting_start_time` &mdash; Query by meeting start time.
   * * `meeting_end_time` &mdash; Query by meeting end time.
   *
   * This value defaults to `start_time`.
   */
  query_date_type?: string;
  /**
   * (Required) Start date in 'yyyy-mm-dd' format. The date range defined by the &quot;from&quot; and &quot;to&quot; parameters should only be one month as the report includes only one month worth of data at once.
   */
  from?: string;
  /**
   * (Required) End date.
   */
  to?: string;
  /**
   * The number of records returned within a single API call.
   */
  page_size?: number;
  /**
   * The page number of the current page in the returned records. This field is **not** available if the `query_date_type` parameter is the `meeting_start_time` or `meeting_end_time` value.
   *
   * This field is deprecated. Use the `next_page_token` query parameter for pagination.
   */
  page_number?: number;
  /**
   * The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
   */
  next_page_token?: string;
};

export type GetReportTelephoneHeaders = {
  Accept?: string;
};

export type GetReportTelephoneError = Fetcher.ErrorWrapper<undefined>;

export type GetReportTelephoneVariables = {
  headers?: GetReportTelephoneHeaders;
  queryParams?: GetReportTelephoneQueryParams;
} & FetcherExtraProps;

/**
 * The [telephone report](https://support.zoom.us/hc/en-us/articles/206514816-Telephone-reports) allows you to view who dialed into meetings via phone (Audio Conferencing or SIP Connected Audio) and which number they dialed into and other details. Use this API to get telephone report for a specified period of time.
 *
 * **Prerequisites:**
 *
 * * Pro or higher plan.
 *
 * **Scopes:** `report:read:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`
 */
export const getReportTelephone = (variables: GetReportTelephoneVariables, signal?: AbortSignal) =>
  fetch<
    Record<string, any>,
    GetReportTelephoneError,
    undefined,
    GetReportTelephoneHeaders,
    GetReportTelephoneQueryParams,
    {}
  >({ url: '/report/telephone', method: 'get', ...variables, signal });

export type GetReportUpcomingEventsQueryParams = {
  /**
   * (Required) Start date in 'yyyy-mm-dd' format. The date range defined by the &quot;from&quot; and &quot;to&quot; parameters should only be one month as the report includes only one month worth of data at once.
   */
  from?: string;
  /**
   * (Required) End date.
   */
  to?: string;
  /**
   * The number of records returned within a single API call.
   */
  page_size?: number;
  /**
   * Use the next page token to paginate through large result sets. A next page token is returned whenever the set of available results exceeds the current page size. This token's expiration period is 15 minutes.
   */
  next_page_token?: string;
  /**
   * The type of event to query.
   * * `meeting` &mdash; A meeting event.
   * * `webinar` &mdash; A webinar event.
   * * `all` &mdash; Both meeting and webinar events.
   *
   * This value defaults to `all`.
   */
  type?: string;
  /**
   * The group ID. To get a group ID, use the [**List groups**](/api-reference/zoom-api/methods#operation/groups) API.
   *
   *  **Note:** The API response will only contain meetings where the host is a member of the queried group ID.
   */
  group_id?: string;
};

export type GetReportUpcomingEventsHeaders = {
  Accept?: string;
};

export type GetReportUpcomingEventsError = Fetcher.ErrorWrapper<undefined>;

export type GetReportUpcomingEventsVariables = {
  headers?: GetReportUpcomingEventsHeaders;
  queryParams?: GetReportUpcomingEventsQueryParams;
} & FetcherExtraProps;

/**
 * Use this API to list upcoming meeting and/or webinar events within a specified period of time. The report's time range is limited to one month.
 *
 * **Prerequisites:**
 * * A Pro or higher plan
 *
 * **Scopes:** `report:read:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`
 */
export const getReportUpcomingEvents = (variables: GetReportUpcomingEventsVariables, signal?: AbortSignal) =>
  fetch<
    Record<string, any>,
    GetReportUpcomingEventsError,
    undefined,
    GetReportUpcomingEventsHeaders,
    GetReportUpcomingEventsQueryParams,
    {}
  >({ url: '/report/upcoming_events', method: 'get', ...variables, signal });

export type GetReportUsersUserIdMeetingsPathParams = {
  /**
   * (Required) The user ID or email address of the user. For user-level apps, pass the `me` value.
   */
  userId: string;
};

export type GetReportUsersUserIdMeetingsQueryParams = {
  /**
   * (Required) Start date in 'yyyy-mm-dd' format. The date range defined by the &quot;from&quot; and &quot;to&quot; parameters should only be one month as the report includes only one month worth of data at once.
   */
  from?: string;
  /**
   * (Required) End date.
   */
  to?: string;
  /**
   * The number of records returned within a single API call.
   */
  page_size?: number;
  /**
   * Use the next page token to paginate through large result sets. A next page token is returned whenever the set of available results exceeds the current page size. This token's expiration period is 15 minutes.
   */
  next_page_token?: string;
  /**
   * The meeting type to query for:
   * * `past` &mdash; All past meetings.
   * * `pastOne` &mdash; A single past user meeting.
   * * `pastJoined` &mdash; All past meetings the account's users hosted or joined.
   */
  type?: string;
};

export type GetReportUsersUserIdMeetingsHeaders = {
  Accept?: string;
};

export type GetReportUsersUserIdMeetingsError = Fetcher.ErrorWrapper<undefined>;

export type GetReportUsersUserIdMeetingsVariables = {
  headers?: GetReportUsersUserIdMeetingsHeaders;
  pathParams: GetReportUsersUserIdMeetingsPathParams;
  queryParams?: GetReportUsersUserIdMeetingsQueryParams;
} & FetcherExtraProps;

/**
 * Retrieve [report](https://support.zoom.us/hc/en-us/articles/216378603-Meeting-Reporting) on past meetings and webinars for a specified time period. The time range for the report is limited to a month and the month must fall within the past six months.
 *
 * Meetings and webinars are returned only if they have two or more unique participants.
 *
 *
 * **Prerequisites:**
 *
 * * Pro or higher plan.
 *
 * **Scopes:** `report:read:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`
 */
export const getReportUsersUserIdMeetings = (variables: GetReportUsersUserIdMeetingsVariables, signal?: AbortSignal) =>
  fetch<
    Record<string, any>,
    GetReportUsersUserIdMeetingsError,
    undefined,
    GetReportUsersUserIdMeetingsHeaders,
    GetReportUsersUserIdMeetingsQueryParams,
    GetReportUsersUserIdMeetingsPathParams
  >({ url: '/report/users/{userId}/meetings', method: 'get', ...variables, signal });

export type GetReportUsersQueryParams = {
  /**
   * Active or inactive hosts.
   *  `active` - Active hosts.
   *  `inactive` - Inactive hosts.
   */
  type?: string;
  /**
   * (Required) Start date in 'yyyy-mm-dd' format. The date range defined by the `from` and `to` parameters should only be one month as the report includes only one month worth of data at once.
   */
  from?: string;
  /**
   * (Required) End date.
   */
  to?: string;
  /**
   * The number of records returned within a single API call.
   */
  page_size?: number;
  /**
   * The page number of the current page in the returned records.
   */
  page_number?: number;
  /**
   * The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
   */
  next_page_token?: string;
  /**
   * The group ID. To get a group ID, use the [**List groups**](/api-reference/zoom-api/methods#operation/groups) API.
   *
   *  **Note:** The API response will only contain users who are members of the queried group ID.
   */
  group_id?: string;
};

export type GetReportUsersHeaders = {
  Accept?: string;
};

export type GetReportUsersError = Fetcher.ErrorWrapper<undefined>;

export type GetReportUsersVariables = {
  headers?: GetReportUsersHeaders;
  queryParams?: GetReportUsersQueryParams;
} & FetcherExtraProps;

/**
 * Retrieve a host report for a specified period of time within the last six months.
 * The report time range is limited to a month.
 *
 * You can specify the type of report and date range using the query parameters.
 *
 *
 * * The **Active Hosts** report displays a list of meetings, participants, and meeting minutes.
 * An **active host** is defined as any user who has hosted at least one meeting during the during the month specified in the `from` and `to` range.
 *
 *
 * * The **Inactive Hosts** report pulls a list of users who were not active during a specific period of time.
 * An **inactive host** is defined as any user who has not hosted any meetings during the specified period of time for the report. to be inactive.
 *
 *
 *
 *
 *
 *
 *
 * **Prerequisites:**
 *
 * * Pro or higher plan.
 *
 * **Scopes:** `report:read:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `HEAVY`
 */
export const getReportUsers = (variables: GetReportUsersVariables, signal?: AbortSignal) =>
  fetch<Record<string, any>, GetReportUsersError, undefined, GetReportUsersHeaders, GetReportUsersQueryParams, {}>({
    url: '/report/users',
    method: 'get',
    ...variables,
    signal
  });

export type GetReportWebinarsWebinarIdParticipantsPathParams = {
  /**
   * (Required) The webinar's ID or universally unique ID (UUID).
   * * If you provide a webinar ID, the API will return a response for the latest webinar instance.
   * * If you provide a webinar UUID that begins with a `/` character or contains the `//` characters, you **must** double-encode the webinar UUID before making an API request.
   */
  webinarId: string;
};

export type GetReportWebinarsWebinarIdParticipantsQueryParams = {
  /**
   * The number of records returned within a single API call.
   */
  page_size?: number;
  /**
   * Use the next page token to paginate through large result sets. A next page token is returned whenever the set of available results exceeds the current page size. This token's expiration period is 15 minutes.
   */
  next_page_token?: string;
  /**
   * The additional query parameters to include.
   * * `registrant_id` - Include the registrant's ID in the API response. The registrant ID is the webinar participant's unique ID.
   */
  include_fields?: string;
};

export type GetReportWebinarsWebinarIdParticipantsHeaders = {
  Accept?: string;
};

export type GetReportWebinarsWebinarIdParticipantsError = Fetcher.ErrorWrapper<undefined>;

export type GetReportWebinarsWebinarIdParticipantsVariables = {
  headers?: GetReportWebinarsWebinarIdParticipantsHeaders;
  pathParams: GetReportWebinarsWebinarIdParticipantsPathParams;
  queryParams?: GetReportWebinarsWebinarIdParticipantsQueryParams;
} & FetcherExtraProps;

/**
 * Get a detailed report on each webinar attendee. You can get webinar participant reports for the last 6 months.
 *
 *  **Prerequisites:**
 * * A Pro or a higher plan with Webinar add-on enabled.
 *
 * **Scopes:** `report:read:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`
 */
export const getReportWebinarsWebinarIdParticipants = (
  variables: GetReportWebinarsWebinarIdParticipantsVariables,
  signal?: AbortSignal
) =>
  fetch<
    Record<string, any>,
    GetReportWebinarsWebinarIdParticipantsError,
    undefined,
    GetReportWebinarsWebinarIdParticipantsHeaders,
    GetReportWebinarsWebinarIdParticipantsQueryParams,
    GetReportWebinarsWebinarIdParticipantsPathParams
  >({ url: '/report/webinars/{webinarId}/participants', method: 'get', ...variables, signal });

export type GetReportWebinarsWebinarIdPollsPathParams = {
  /**
   * (Required) The webinar's ID or universally unique ID (UUID).
   * * If you provide a webinar ID, the API will return a response for the latest webinar instance.
   * * If you provide a webinar UUID that begins with a `/` character or contains the `//` characters, you **must** double-encode the webinar UUID before making an API request.
   */
  webinarId: string;
};

export type GetReportWebinarsWebinarIdPollsHeaders = {
  Accept?: string;
};

export type GetReportWebinarsWebinarIdPollsError = Fetcher.ErrorWrapper<undefined>;

export type GetReportWebinarsWebinarIdPollsVariables = {
  headers?: GetReportWebinarsWebinarIdPollsHeaders;
  pathParams: GetReportWebinarsWebinarIdPollsPathParams;
} & FetcherExtraProps;

/**
 * Retrieve a report on past [webinar polls](https://support.zoom.us/hc/en-us/articles/203749865-Polling-for-Webinars).
 *
 *
 * **Prerequisites:**
 *
 * * Pro or a higher plan with Webinar add-on enabled.
 *
 * **Scopes:** `report:read:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`
 */
export const getReportWebinarsWebinarIdPolls = (
  variables: GetReportWebinarsWebinarIdPollsVariables,
  signal?: AbortSignal
) =>
  fetch<
    Record<string, any>,
    GetReportWebinarsWebinarIdPollsError,
    undefined,
    GetReportWebinarsWebinarIdPollsHeaders,
    {},
    GetReportWebinarsWebinarIdPollsPathParams
  >({ url: '/report/webinars/{webinarId}/polls', method: 'get', ...variables, signal });

export type GetReportWebinarsWebinarIdQaPathParams = {
  /**
   * (Required) The webinar's ID or universally unique ID (UUID).
   * * If you provide a webinar ID, the API will return a response for the latest webinar instance.
   * * If you provide a webinar UUID that begins with a `/` character or contains the `//` characters, you **must** double-encode the webinar UUID before making an API request.
   */
  webinarId: string;
};

export type GetReportWebinarsWebinarIdQaHeaders = {
  Accept?: string;
};

export type GetReportWebinarsWebinarIdQaError = Fetcher.ErrorWrapper<undefined>;

export type GetReportWebinarsWebinarIdQaVariables = {
  headers?: GetReportWebinarsWebinarIdQaHeaders;
  pathParams: GetReportWebinarsWebinarIdQaPathParams;
} & FetcherExtraProps;

/**
 * Retrieve a report on questions asked by participants and answered by panelists, co-hosts and hosts from past webinars.
 *
 *
 *
 *
 * **Prerequisites:**
 *
 * * Pro or a higher plan with the Webinar add-on enabled.
 *
 * **Scopes:** `report:read:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `HEAVY`
 */
export const getReportWebinarsWebinarIdQa = (variables: GetReportWebinarsWebinarIdQaVariables, signal?: AbortSignal) =>
  fetch<
    Record<string, any>,
    GetReportWebinarsWebinarIdQaError,
    undefined,
    GetReportWebinarsWebinarIdQaHeaders,
    {},
    GetReportWebinarsWebinarIdQaPathParams
  >({ url: '/report/webinars/{webinarId}/qa', method: 'get', ...variables, signal });

export type GetReportWebinarsWebinarIdSurveyPathParams = {
  /**
   * (Required) The webinar's ID or universally unique ID (UUID).
   * * If you provide a webinar ID, the API returns a response for the latest webinar instance.
   * * If you provide a webinar UUID that begins with a `/` character or contains the `//` characters, you **must** double-encode the webinar UUID before making an API request.
   */
  webinarId: string;
};

export type GetReportWebinarsWebinarIdSurveyHeaders = {
  Accept?: string;
};

export type GetReportWebinarsWebinarIdSurveyError = Fetcher.ErrorWrapper<undefined>;

export type GetReportWebinarsWebinarIdSurveyVariables = {
  headers?: GetReportWebinarsWebinarIdSurveyHeaders;
  pathParams: GetReportWebinarsWebinarIdSurveyPathParams;
} & FetcherExtraProps;

/**
 * Retrieve a report on past [webinar survey](https://support.zoom.com/hc/en/article?id=zm_kb&sysparm_article=KB0057559).
 *
 *
 * **Prerequisites:**
 *
 * * Pro or a higher plan with Webinar add-on enabled.
 *
 * **Scopes:** `report:read:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `HEAVY`
 */
export const getReportWebinarsWebinarIdSurvey = (
  variables: GetReportWebinarsWebinarIdSurveyVariables,
  signal?: AbortSignal
) =>
  fetch<
    Record<string, any>,
    GetReportWebinarsWebinarIdSurveyError,
    undefined,
    GetReportWebinarsWebinarIdSurveyHeaders,
    {},
    GetReportWebinarsWebinarIdSurveyPathParams
  >({ url: '/report/webinars/{webinarId}/survey', method: 'get', ...variables, signal });

export type GetReportWebinarsWebinarIdPathParams = {
  /**
   * (Required) The webinar's ID or universally unique ID (UUID).
   * * If you provide a webinar ID, the API will return a response for the latest webinar instance.
   * * If you provide a webinar UUID that begins with a `/` character or contains the `//` characters, you **must** [double encode](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis/#meeting-id-and-uuid) the webinar UUID before making an API request.
   */
  webinarId: string;
};

export type GetReportWebinarsWebinarIdHeaders = {
  Accept?: string;
};

export type GetReportWebinarsWebinarIdError = Fetcher.ErrorWrapper<undefined>;

export type GetReportWebinarsWebinarIdVariables = {
  headers?: GetReportWebinarsWebinarIdHeaders;
  pathParams: GetReportWebinarsWebinarIdPathParams;
} & FetcherExtraProps;

/**
 * Retrieve a [report](https://support.zoom.us/hc/en-us/articles/201393719-Webinar-Reporting) containing past webinar details.
 *
 *
 * **Prerequisites:**
 *
 * * Pro or higher plan with Webinar add-on.
 *
 * **Scopes:** `report:read:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`
 */
export const getReportWebinarsWebinarId = (variables: GetReportWebinarsWebinarIdVariables, signal?: AbortSignal) =>
  fetch<
    Record<string, any>,
    GetReportWebinarsWebinarIdError,
    undefined,
    GetReportWebinarsWebinarIdHeaders,
    {},
    GetReportWebinarsWebinarIdPathParams
  >({ url: '/report/webinars/{webinarId}', method: 'get', ...variables, signal });

export type DeleteSipPhonesPhoneIdPathParams = {
  /**
   * (Required) The SIP phone ID. It can be retrieved from the List SIP Phones API.
   */
  phoneId: string;
};

export type DeleteSipPhonesPhoneIdError = Fetcher.ErrorWrapper<undefined>;

export type DeleteSipPhonesPhoneIdVariables = {
  pathParams: DeleteSipPhonesPhoneIdPathParams;
} & FetcherExtraProps;

/**
 * Use this API to delete a Zoom account's SIP phone.
 *
 *  **Prerequisites**:
 * * Currently only supported on Cisco and Avaya PBX systems.
 * * The user must enable **SIP Phone Integration** by contacting the [Zoom Sales](https://zoom.us/contactsales) team.
 *
 * **Scopes:** `sip_phone:write:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
 */
export const deleteSipPhonesPhoneId = (variables: DeleteSipPhonesPhoneIdVariables, signal?: AbortSignal) =>
  fetch<undefined, DeleteSipPhonesPhoneIdError, undefined, {}, {}, DeleteSipPhonesPhoneIdPathParams>({
    url: '/sip_phones/{phoneId}',
    method: 'delete',
    ...variables,
    signal
  });

export type PatchSipPhonesPhoneIdPathParams = {
  /**
   * (Required) The SIP phone ID. This can be retrieved from the List SIP Phones API.
   */
  phoneId: string;
};

export type PatchSipPhonesPhoneIdHeaders = {
  ['Content-Type']?: string;
};

export type PatchSipPhonesPhoneIdError = Fetcher.ErrorWrapper<undefined>;

export type PatchSipPhonesPhoneIdVariables = {
  body?: Record<string, any>;
  headers?: PatchSipPhonesPhoneIdHeaders;
  pathParams: PatchSipPhonesPhoneIdPathParams;
} & FetcherExtraProps;

/**
 * Zoom's Phone System Integration (PSI), also referred as SIP phones, enables an organization to leverage the Zoom client to complete a softphone registration to supported premise based PBX system. End users will have the ability to have softphone functionality within a single client while maintaining a comparable interface to Zoom Phone. Use this API to update information of a specific SIP Phone on a Zoom account.
 *
 *
 * **Prerequisites**:
 * * Currently only supported on Cisco and Avaya PBX systems.
 * * The account owner or account admin must first enable SIP Phone Integration by contacting the [Sales](https://zoom.us/contactsales) team.
 *
 *
 * **Scopes:** `sip_phone:write:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
 */
export const patchSipPhonesPhoneId = (variables: PatchSipPhonesPhoneIdVariables, signal?: AbortSignal) =>
  fetch<
    undefined,
    PatchSipPhonesPhoneIdError,
    Record<string, any>,
    PatchSipPhonesPhoneIdHeaders,
    {},
    PatchSipPhonesPhoneIdPathParams
  >({ url: '/sip_phones/{phoneId}', method: 'patch', ...variables, signal });

export type GetSipPhonesQueryParams = {
  /**
   * **Deprecated.** We will no longer support this field in a future release. Instead, use the `next_page_token` for pagination.
   */
  page_number?: number;
  /**
   * User name or email address of a user. If this parameter is provided, only the SIP phone system integration enabled for that specific user will be returned. Otherwise, all SIP phones on an account will be returned.
   */
  search_key?: string;
  /**
   * The number of records returned within a single API call.
   */
  page_size?: string;
  /**
   * The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
   */
  next_page_token?: string;
};

export type GetSipPhonesHeaders = {
  Accept?: string;
};

export type GetSipPhonesError = Fetcher.ErrorWrapper<undefined>;

export type GetSipPhonesVariables = {
  headers?: GetSipPhonesHeaders;
  queryParams?: GetSipPhonesQueryParams;
} & FetcherExtraProps;

/**
 * Zoom's Phone System Integration (PSI), also referred as SIP phones, enables an organization to leverage the Zoom client to complete a softphone registration to supported premise based PBX system. End users will have the ability to have softphone functionality within a single client while maintaining a comparable interface to Zoom Phone. Use this API to list SIP phones on an account.
 *
 *
 * **Prerequisites**:
 * * Currently only supported on Cisco and Avaya PBX systems.
 * * User must enable SIP Phone Integration by contacting the [Sales](https://zoom.us/contactsales) team.
 *
 *
 * **Scopes:** `sip_phone:read:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`
 */
export const getSipPhones = (variables: GetSipPhonesVariables, signal?: AbortSignal) =>
  fetch<Record<string, any>, GetSipPhonesError, undefined, GetSipPhonesHeaders, GetSipPhonesQueryParams, {}>({
    url: '/sip_phones',
    method: 'get',
    ...variables,
    signal
  });

export type PostSipPhonesHeaders = {
  ['Content-Type']?: string;
  Accept?: string;
};

export type PostSipPhonesError = Fetcher.ErrorWrapper<undefined>;

export type PostSipPhonesVariables = {
  body?: Record<string, any>;
  headers?: PostSipPhonesHeaders;
} & FetcherExtraProps;

/**
 * Zoom's Phone System Integration (PSI), also referred as SIP phones, enables an organization to leverage the Zoom client to complete a softphone registration to supported premise based PBX system. End users will have the ability to have softphone functionality within a single client while maintaining a comparable interface to Zoom Phone. Use this API to enable a user to use SIP phone.
 *
 *
 * **Prerequisites**:
 * * Currently only supported on Cisco and Avaya PBX systems.
 * * The account owner or account admin must first enable SIP Phone Integration by contacting the [Sales](https://zoom.us/contactsales) team.
 *
 *
 * **Scopes:** `sip_phone:write:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
 */
export const postSipPhones = (variables: PostSipPhonesVariables, signal?: AbortSignal) =>
  fetch<Record<string, any>, PostSipPhonesError, Record<string, any>, PostSipPhonesHeaders, {}, {}>({
    url: '/sip_phones',
    method: 'post',
    ...variables,
    signal
  });

export type GetTspHeaders = {
  Accept?: string;
};

export type GetTspError = Fetcher.ErrorWrapper<undefined>;

export type GetTspVariables = {
  headers?: GetTspHeaders;
} & FetcherExtraProps;

/**
 * Get information on Telephony Service Provider on an account level.
 *
 *
 * **Prerequisites:**
 *
 * * A Pro or a higher plan.
 *
 * **Scopes:** `tsp:read:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
 */
export const getTsp = (variables: GetTspVariables, signal?: AbortSignal) =>
  fetch<Record<string, any>, GetTspError, undefined, GetTspHeaders, {}, {}>({
    url: '/tsp',
    method: 'get',
    ...variables,
    signal
  });

export type PatchTspHeaders = {
  ['Content-Type']?: string;
};

export type PatchTspError = Fetcher.ErrorWrapper<undefined>;

export type PatchTspVariables = {
  body?: Record<string, any>;
  headers?: PatchTspHeaders;
} & FetcherExtraProps;

/**
 * Update information of the Telephony Service Provider set up on an account.
 *
 * **Prerequisites**:
 *
 * TSP account option should be enabled.
 *
 *
 *
 * **Scopes:** `tsp:write:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
 */
export const patchTsp = (variables: PatchTspVariables, signal?: AbortSignal) =>
  fetch<undefined, PatchTspError, Record<string, any>, PatchTspHeaders, {}, {}>({
    url: '/tsp',
    method: 'patch',
    ...variables,
    signal
  });

export type GetTrackingFieldsFieldIdPathParams = {
  /**
   * (Required) The Tracking Field ID
   */
  fieldId: string;
};

export type GetTrackingFieldsFieldIdHeaders = {
  Accept?: string;
};

export type GetTrackingFieldsFieldIdError = Fetcher.ErrorWrapper<undefined>;

export type GetTrackingFieldsFieldIdVariables = {
  headers?: GetTrackingFieldsFieldIdHeaders;
  pathParams: GetTrackingFieldsFieldIdPathParams;
} & FetcherExtraProps;

/**
 * Use this API to return information about a [tracking field](https://support.zoom.us/hc/en-us/articles/115000293426-Scheduling-Tracking-Fields).
 *
 * **Prerequisites:**
 * * A Business, Education, API or higher plan.
 *
 * **Scopes:** `tracking_fields:read:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
 */
export const getTrackingFieldsFieldId = (variables: GetTrackingFieldsFieldIdVariables, signal?: AbortSignal) =>
  fetch<
    Record<string, any>,
    GetTrackingFieldsFieldIdError,
    undefined,
    GetTrackingFieldsFieldIdHeaders,
    {},
    GetTrackingFieldsFieldIdPathParams
  >({ url: '/tracking_fields/{fieldId}', method: 'get', ...variables, signal });

export type DeleteTrackingFieldsFieldIdPathParams = {
  /**
   * (Required) The Tracking Field ID
   */
  fieldId: string;
};

export type DeleteTrackingFieldsFieldIdError = Fetcher.ErrorWrapper<undefined>;

export type DeleteTrackingFieldsFieldIdVariables = {
  pathParams: DeleteTrackingFieldsFieldIdPathParams;
} & FetcherExtraProps;

/**
 * Use this API to delete a [tracking field](https://support.zoom.us/hc/en-us/articles/115000293426-Scheduling-Tracking-Fields).
 *
 * **Prerequisites:**
 * * A Business, Education, API or higher plan.
 *
 * **Scopes:** `tracking_fields:write:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
 */
export const deleteTrackingFieldsFieldId = (variables: DeleteTrackingFieldsFieldIdVariables, signal?: AbortSignal) =>
  fetch<undefined, DeleteTrackingFieldsFieldIdError, undefined, {}, {}, DeleteTrackingFieldsFieldIdPathParams>({
    url: '/tracking_fields/{fieldId}',
    method: 'delete',
    ...variables,
    signal
  });

export type PatchTrackingFieldsFieldIdPathParams = {
  /**
   * (Required) The Tracking Field ID
   */
  fieldId: string;
};

export type PatchTrackingFieldsFieldIdHeaders = {
  ['Content-Type']?: string;
};

export type PatchTrackingFieldsFieldIdError = Fetcher.ErrorWrapper<undefined>;

export type PatchTrackingFieldsFieldIdVariables = {
  body?: Record<string, any>;
  headers?: PatchTrackingFieldsFieldIdHeaders;
  pathParams: PatchTrackingFieldsFieldIdPathParams;
} & FetcherExtraProps;

/**
 * Use this API to update a [tracking field](https://support.zoom.us/hc/en-us/articles/115000293426-Scheduling-Tracking-Fields).
 *
 * **Prerequisites:**
 * * A Business, Education, API or higher plan.
 *
 * **Scopes:** `tracking_fields:write:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
 */
export const patchTrackingFieldsFieldId = (variables: PatchTrackingFieldsFieldIdVariables, signal?: AbortSignal) =>
  fetch<
    undefined,
    PatchTrackingFieldsFieldIdError,
    Record<string, any>,
    PatchTrackingFieldsFieldIdHeaders,
    {},
    PatchTrackingFieldsFieldIdPathParams
  >({ url: '/tracking_fields/{fieldId}', method: 'patch', ...variables, signal });

export type GetTrackingFieldsHeaders = {
  Accept?: string;
};

export type GetTrackingFieldsError = Fetcher.ErrorWrapper<undefined>;

export type GetTrackingFieldsVariables = {
  headers?: GetTrackingFieldsHeaders;
} & FetcherExtraProps;

/**
 * Use this API to list all the [tracking fields](https://support.zoom.us/hc/en-us/articles/115000293426-Scheduling-Tracking-Fields) on your Zoom account. Tracking fields let you analyze usage by various fields within an organization.
 *
 * **Prerequisites:**
 * * A Business, Education, API or higher plan.
 *
 * **Scopes:** `tracking_fields:read:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`
 */
export const getTrackingFields = (variables: GetTrackingFieldsVariables, signal?: AbortSignal) =>
  fetch<Record<string, any>, GetTrackingFieldsError, undefined, GetTrackingFieldsHeaders, {}, {}>({
    url: '/tracking_fields',
    method: 'get',
    ...variables,
    signal
  });

export type PostTrackingFieldsHeaders = {
  ['Content-Type']?: string;
  Accept?: string;
};

export type PostTrackingFieldsError = Fetcher.ErrorWrapper<undefined>;

export type PostTrackingFieldsVariables = {
  body?: Record<string, any>;
  headers?: PostTrackingFieldsHeaders;
} & FetcherExtraProps;

/**
 * Use this API to create a new [tracking field](https://support.zoom.us/hc/en-us/articles/115000293426-Scheduling-Tracking-Fields). Tracking fields let you analyze usage by various fields within an organization. When scheduling a meeting, tracking fields will be included in the meeting options.
 *
 * **Prerequisites:**
 * * A Business, Education, API or higher plan.
 *
 * **Scopes:** `tracking_fields:write:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
 */
export const postTrackingFields = (variables: PostTrackingFieldsVariables, signal?: AbortSignal) =>
  fetch<Record<string, any>, PostTrackingFieldsError, Record<string, any>, PostTrackingFieldsHeaders, {}, {}>({
    url: '/tracking_fields',
    method: 'post',
    ...variables,
    signal
  });

export type DeleteLiveWebinarsWebinarIdChatMessagesMessageIdPathParams = {
  /**
   * (Required) The webinar's ID.
   */
  webinarId: string;
  /**
   * (Required) The live webinar chat message's unique identifier (UUID), in base64-encoded format.
   */
  messageId: string;
};

export type DeleteLiveWebinarsWebinarIdChatMessagesMessageIdQueryParams = {
  /**
   * The live webinar chat file's universally unique identifier (UUID), in base64-encoded format. Separate multiple values with commas.
   */
  file_ids?: string;
};

export type DeleteLiveWebinarsWebinarIdChatMessagesMessageIdError = Fetcher.ErrorWrapper<undefined>;

export type DeleteLiveWebinarsWebinarIdChatMessagesMessageIdVariables = {
  pathParams: DeleteLiveWebinarsWebinarIdChatMessagesMessageIdPathParams;
  queryParams?: DeleteLiveWebinarsWebinarIdChatMessagesMessageIdQueryParams;
} & FetcherExtraProps;

/**
 * Deletes a message in a live webinar based on ID.
 *
 * **Prerequisites:**
 * * Have Zoom enable the DLP for the in-meeting chat feature to use this API.
 *
 * **Scopes:** `webinar:write`,`webinar:write:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
 */
export const deleteLiveWebinarsWebinarIdChatMessagesMessageId = (
  variables: DeleteLiveWebinarsWebinarIdChatMessagesMessageIdVariables,
  signal?: AbortSignal
) =>
  fetch<
    undefined,
    DeleteLiveWebinarsWebinarIdChatMessagesMessageIdError,
    undefined,
    {},
    DeleteLiveWebinarsWebinarIdChatMessagesMessageIdQueryParams,
    DeleteLiveWebinarsWebinarIdChatMessagesMessageIdPathParams
  >({ url: '/live_webinars/{webinarId}/chat/messages/{messageId}', method: 'delete', ...variables, signal });

export type GetPastWebinarsWebinarIdAbsenteesPathParams = {
  /**
   * (Required) The webinar's ID or universally unique ID (UUID).
   * * If you provide a webinar ID, the API will return a response for the latest webinar instance.
   * * If you provide a webinar UUID that begins with a `/` character or contains the `//` characters, you **must** [double encode](https://developers.zoom.us/docs/api/rest/using-zoom-apis/#meeting-id-and-uuid) the webinar UUID before making an API request.
   */
  webinarId: string;
};

export type GetPastWebinarsWebinarIdAbsenteesQueryParams = {
  /**
   * The meeting or webinar occurrence ID.
   */
  occurrence_id?: string;
  /**
   * The number of records returned within a single API call.
   */
  page_size?: number;
  /**
   * Use the next page token to paginate through large result sets. A next page token is returned whenever the set of available results exceeds the current page size. This token's expiration period is 15 minutes.
   */
  next_page_token?: string;
};

export type GetPastWebinarsWebinarIdAbsenteesHeaders = {
  Accept?: string;
};

export type GetPastWebinarsWebinarIdAbsenteesError = Fetcher.ErrorWrapper<undefined>;

export type GetPastWebinarsWebinarIdAbsenteesVariables = {
  headers?: GetPastWebinarsWebinarIdAbsenteesHeaders;
  pathParams: GetPastWebinarsWebinarIdAbsenteesPathParams;
  queryParams?: GetPastWebinarsWebinarIdAbsenteesQueryParams;
} & FetcherExtraProps;

/**
 * List absentees of a webinar.
 *
 *
 *
 *
 * **Scopes:** `webinar:read:admin`,`webinar:read`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `HEAVY`
 */
export const getPastWebinarsWebinarIdAbsentees = (
  variables: GetPastWebinarsWebinarIdAbsenteesVariables,
  signal?: AbortSignal
) =>
  fetch<
    Record<string, any>,
    GetPastWebinarsWebinarIdAbsenteesError,
    undefined,
    GetPastWebinarsWebinarIdAbsenteesHeaders,
    GetPastWebinarsWebinarIdAbsenteesQueryParams,
    GetPastWebinarsWebinarIdAbsenteesPathParams
  >({ url: '/past_webinars/{webinarId}/absentees', method: 'get', ...variables, signal });

export type GetPastWebinarsWebinarIdInstancesPathParams = {
  /**
   * (Required) The webinar's ID.
   */
  webinarId: string;
};

export type GetPastWebinarsWebinarIdInstancesHeaders = {
  Accept?: string;
};

export type GetPastWebinarsWebinarIdInstancesError = Fetcher.ErrorWrapper<undefined>;

export type GetPastWebinarsWebinarIdInstancesVariables = {
  headers?: GetPastWebinarsWebinarIdInstancesHeaders;
  pathParams: GetPastWebinarsWebinarIdInstancesPathParams;
} & FetcherExtraProps;

/**
 * List past webinar instances.
 *
 *
 *
 *
 * **Scopes:** `webinar:read:admin`,`webinar:read`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
 */
export const getPastWebinarsWebinarIdInstances = (
  variables: GetPastWebinarsWebinarIdInstancesVariables,
  signal?: AbortSignal
) =>
  fetch<
    Record<string, any>,
    GetPastWebinarsWebinarIdInstancesError,
    undefined,
    GetPastWebinarsWebinarIdInstancesHeaders,
    {},
    GetPastWebinarsWebinarIdInstancesPathParams
  >({ url: '/past_webinars/{webinarId}/instances', method: 'get', ...variables, signal });

export type GetPastWebinarsWebinarIdParticipantsPathParams = {
  /**
   * (Required) The webinar's ID or universally unique ID (UUID).
   * * If you provide a webinar ID, the API returns a response for the latest webinar instance.
   * * If you provide a webinar UUID that begins with a `/` character or contains the `//` characters, you **must** [double encode](https://developers.zoom.us/docs/api/rest/using-zoom-apis/#meeting-id-and-uuid) the webinar UUID before making an API request.
   */
  webinarId: string;
};

export type GetPastWebinarsWebinarIdParticipantsQueryParams = {
  /**
   * The number of records returned within a single API call.
   */
  page_size?: number;
  /**
   * Use the next page token to paginate through large result sets. A next page token is returned whenever the set of available results exceeds the current page size. This token's expiration period is 15 minutes.
   */
  next_page_token?: string;
};

export type GetPastWebinarsWebinarIdParticipantsHeaders = {
  Accept?: string;
};

export type GetPastWebinarsWebinarIdParticipantsError = Fetcher.ErrorWrapper<undefined>;

export type GetPastWebinarsWebinarIdParticipantsVariables = {
  headers?: GetPastWebinarsWebinarIdParticipantsHeaders;
  pathParams: GetPastWebinarsWebinarIdParticipantsPathParams;
  queryParams?: GetPastWebinarsWebinarIdParticipantsQueryParams;
} & FetcherExtraProps;

/**
 * Retrieve a list of all the participants who attended a webinar hosted in the past.
 *
 * **Prerequisites:**
 * * A Pro or higher plan with a webinar add-on.
 *
 * **Scopes:** `webinar:read:admin`,`webinar:read`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
 */
export const getPastWebinarsWebinarIdParticipants = (
  variables: GetPastWebinarsWebinarIdParticipantsVariables,
  signal?: AbortSignal
) =>
  fetch<
    Record<string, any>,
    GetPastWebinarsWebinarIdParticipantsError,
    undefined,
    GetPastWebinarsWebinarIdParticipantsHeaders,
    GetPastWebinarsWebinarIdParticipantsQueryParams,
    GetPastWebinarsWebinarIdParticipantsPathParams
  >({ url: '/past_webinars/{webinarId}/participants', method: 'get', ...variables, signal });

export type GetPastWebinarsWebinarIdPollsPathParams = {
  /**
   * (Required) The webinar's ID or universally unique ID (UUID).
   * * If you provide a webinar ID, the API returns a response for the latest webinar instance.
   * * If you provide a webinar UUID that begins with a `/` character or contains the `//` characters, you **must** [double encode](https://developers.zoom.us/docs/api/rest/using-zoom-apis/#meeting-id-and-uuid) the webinar UUID before making an API request.
   */
  webinarId: string;
};

export type GetPastWebinarsWebinarIdPollsHeaders = {
  Accept?: string;
};

export type GetPastWebinarsWebinarIdPollsError = Fetcher.ErrorWrapper<undefined>;

export type GetPastWebinarsWebinarIdPollsVariables = {
  headers?: GetPastWebinarsWebinarIdPollsHeaders;
  pathParams: GetPastWebinarsWebinarIdPollsPathParams;
} & FetcherExtraProps;

/**
 * The polling feature for webinar lets you create single-choice or multiple-choice polling questions for your webinars. This API endpoint retrieves the results for webinar polls of a specific webinar.
 *
 * **Prerequisites:**
 *
 * * [Webinar license](https://zoom.us/webinar)
 *
 *
 *
 * **Scopes:** `webinar:read:admin`,`webinar:read`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
 */
export const getPastWebinarsWebinarIdPolls = (
  variables: GetPastWebinarsWebinarIdPollsVariables,
  signal?: AbortSignal
) =>
  fetch<
    Record<string, any>,
    GetPastWebinarsWebinarIdPollsError,
    undefined,
    GetPastWebinarsWebinarIdPollsHeaders,
    {},
    GetPastWebinarsWebinarIdPollsPathParams
  >({ url: '/past_webinars/{webinarId}/polls', method: 'get', ...variables, signal });

export type GetPastWebinarsWebinarIdQaPathParams = {
  /**
   * (Required) The webinar's ID or universally unique ID (UUID).
   * * If you provide a webinar ID, the API returns a response for the latest webinar instance.
   * * If you provide a webinar UUID that begins with a `/` character or contains the `//` characters, you **must** [double encode](https://developers.zoom.us/docs/api/rest/using-zoom-apis/#meeting-id-and-uuid) the webinar UUID before making an API request.
   */
  webinarId: string;
};

export type GetPastWebinarsWebinarIdQaHeaders = {
  Accept?: string;
};

export type GetPastWebinarsWebinarIdQaError = Fetcher.ErrorWrapper<undefined>;

export type GetPastWebinarsWebinarIdQaVariables = {
  headers?: GetPastWebinarsWebinarIdQaHeaders;
  pathParams: GetPastWebinarsWebinarIdQaPathParams;
} & FetcherExtraProps;

/**
 * List the Q&amp;A of a specific past webinar.
 *
 * The [question &amp; answer (Q&amp;A)](https://support.zoom.us/hc/en-us/articles/203686015-Getting-Started-with-Question-Answer) feature for webinars lets attendees ask questions during the webinar and for the panelists, co-hosts and host to answer their questions.
 *
 * **Prerequisites**
 *
 * * [Webinar license](https://zoom.us/webinar)
 *
 *
 *
 * **Scopes:** `webinar:read:admin`,`webinar:read`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
 */
export const getPastWebinarsWebinarIdQa = (variables: GetPastWebinarsWebinarIdQaVariables, signal?: AbortSignal) =>
  fetch<
    Record<string, any>,
    GetPastWebinarsWebinarIdQaError,
    undefined,
    GetPastWebinarsWebinarIdQaHeaders,
    {},
    GetPastWebinarsWebinarIdQaPathParams
  >({ url: '/past_webinars/{webinarId}/qa', method: 'get', ...variables, signal });

export type PostWebinarsWebinarIdBatchRegistrantsPathParams = {
  /**
   * (Required) The webinar's unique identifier.
   */
  webinarId: string;
};

export type PostWebinarsWebinarIdBatchRegistrantsHeaders = {
  ['Content-Type']?: string;
  Accept?: string;
};

export type PostWebinarsWebinarIdBatchRegistrantsError = Fetcher.ErrorWrapper<undefined>;

export type PostWebinarsWebinarIdBatchRegistrantsVariables = {
  body?: Record<string, any>;
  headers?: PostWebinarsWebinarIdBatchRegistrantsHeaders;
  pathParams: PostWebinarsWebinarIdBatchRegistrantsPathParams;
} & FetcherExtraProps;

/**
 * Register up to 30 registrants at once for a scheduled webinar that requires [registration](https://support.zoom.us/hc/en-us/articles/204619915-Scheduling-a-webinar-with-registration).
 *
 *
 * **Prerequisites:**
 *
 * * The webinar host must be a licensed user.
 * * The webinar should be type `5`, a scheduled webinar. Other types of webinars are not supported by this API.
 *
 *
 *
 *
 * **Scopes:** `webinar:write`,`webinar:write:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `HEAVY`
 */
export const postWebinarsWebinarIdBatchRegistrants = (
  variables: PostWebinarsWebinarIdBatchRegistrantsVariables,
  signal?: AbortSignal
) =>
  fetch<
    Record<string, any>,
    PostWebinarsWebinarIdBatchRegistrantsError,
    Record<string, any>,
    PostWebinarsWebinarIdBatchRegistrantsHeaders,
    {},
    PostWebinarsWebinarIdBatchRegistrantsPathParams
  >({ url: '/webinars/{webinarId}/batch_registrants', method: 'post', ...variables, signal });

export type PatchWebinarsWebinarIdBrandingNameTagsNameTagIdPathParams = {
  /**
   * (Required) The webinar's ID.
   */
  webinarId: string;
  /**
   * (Required) The name tag's ID.
   */
  nameTagId: string;
};

export type PatchWebinarsWebinarIdBrandingNameTagsNameTagIdHeaders = {
  ['Content-Type']?: string;
};

export type PatchWebinarsWebinarIdBrandingNameTagsNameTagIdError = Fetcher.ErrorWrapper<undefined>;

export type PatchWebinarsWebinarIdBrandingNameTagsNameTagIdVariables = {
  body?: Record<string, any>;
  headers?: PatchWebinarsWebinarIdBrandingNameTagsNameTagIdHeaders;
  pathParams: PatchWebinarsWebinarIdBrandingNameTagsNameTagIdPathParams;
} & FetcherExtraProps;

/**
 * Use this API to update a webinar's [Session Branding](https://support.zoom.us/hc/en-us/articles/4836268732045-Using-Webinar-Session-Branding) name tag. **Prerequisites:**
 * *  The **Webinar Session Branding** setting enabled.
 *
 * **Scopes:** `webinar:write`,`webinar:write:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`
 */
export const patchWebinarsWebinarIdBrandingNameTagsNameTagId = (
  variables: PatchWebinarsWebinarIdBrandingNameTagsNameTagIdVariables,
  signal?: AbortSignal
) =>
  fetch<
    undefined,
    PatchWebinarsWebinarIdBrandingNameTagsNameTagIdError,
    Record<string, any>,
    PatchWebinarsWebinarIdBrandingNameTagsNameTagIdHeaders,
    {},
    PatchWebinarsWebinarIdBrandingNameTagsNameTagIdPathParams
  >({ url: '/webinars/{webinarId}/branding/name_tags/{nameTagId}', method: 'patch', ...variables, signal });

export type PostWebinarsWebinarIdBrandingNameTagsPathParams = {
  /**
   * (Required) The webinar's ID.
   */
  webinarId: string;
};

export type PostWebinarsWebinarIdBrandingNameTagsHeaders = {
  ['Content-Type']?: string;
  Accept?: string;
};

export type PostWebinarsWebinarIdBrandingNameTagsError = Fetcher.ErrorWrapper<undefined>;

export type PostWebinarsWebinarIdBrandingNameTagsVariables = {
  body?: Record<string, any>;
  headers?: PostWebinarsWebinarIdBrandingNameTagsHeaders;
  pathParams: PostWebinarsWebinarIdBrandingNameTagsPathParams;
} & FetcherExtraProps;

/**
 * Use this API to create a webinar's [Session Branding](https://support.zoom.us/hc/en-us/articles/4836268732045-Using-Webinar-Session-Branding) name tag. There's a limit of 20 name tags per webinar. **Prerequisites:**
 * *  The **Webinar Session Branding** setting enabled.
 *
 * **Scopes:** `webinar:write`,`webinar:write:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`
 */
export const postWebinarsWebinarIdBrandingNameTags = (
  variables: PostWebinarsWebinarIdBrandingNameTagsVariables,
  signal?: AbortSignal
) =>
  fetch<
    Record<string, any>,
    PostWebinarsWebinarIdBrandingNameTagsError,
    Record<string, any>,
    PostWebinarsWebinarIdBrandingNameTagsHeaders,
    {},
    PostWebinarsWebinarIdBrandingNameTagsPathParams
  >({ url: '/webinars/{webinarId}/branding/name_tags', method: 'post', ...variables, signal });

export type DeleteWebinarsWebinarIdBrandingNameTagsPathParams = {
  /**
   * (Required) The webinar's ID.
   */
  webinarId: string;
};

export type DeleteWebinarsWebinarIdBrandingNameTagsQueryParams = {
  /**
   * A comma-separated list of the name tag IDs to delete.
   */
  name_tag_ids?: string;
};

export type DeleteWebinarsWebinarIdBrandingNameTagsError = Fetcher.ErrorWrapper<undefined>;

export type DeleteWebinarsWebinarIdBrandingNameTagsVariables = {
  pathParams: DeleteWebinarsWebinarIdBrandingNameTagsPathParams;
  queryParams?: DeleteWebinarsWebinarIdBrandingNameTagsQueryParams;
} & FetcherExtraProps;

/**
 * Use this API to delete a webinar's [Session Branding](https://support.zoom.us/hc/en-us/articles/4836268732045-Using-Webinar-Session-Branding) name tag.
 *
 *  **Prerequisites:**
 * * The **Webinar Session Branding** setting enabled.
 *
 * **Scopes:** `webinar:write`,`webinar:write:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
 */
export const deleteWebinarsWebinarIdBrandingNameTags = (
  variables: DeleteWebinarsWebinarIdBrandingNameTagsVariables,
  signal?: AbortSignal
) =>
  fetch<
    undefined,
    DeleteWebinarsWebinarIdBrandingNameTagsError,
    undefined,
    {},
    DeleteWebinarsWebinarIdBrandingNameTagsQueryParams,
    DeleteWebinarsWebinarIdBrandingNameTagsPathParams
  >({ url: '/webinars/{webinarId}/branding/name_tags', method: 'delete', ...variables, signal });

export type PostWebinarsWebinarIdBrandingVirtualBackgroundsPathParams = {
  /**
   * (Required) The webinar's ID.
   */
  webinarId: string;
};

export type PostWebinarsWebinarIdBrandingVirtualBackgroundsHeaders = {
  ['Content-Type']?: string;
  Accept?: string;
};

export type PostWebinarsWebinarIdBrandingVirtualBackgroundsError = Fetcher.ErrorWrapper<undefined>;

export type PostWebinarsWebinarIdBrandingVirtualBackgroundsRequestBody = {
  /**
   * (Required) The Virtual Background's file path, in binary format.
   *
   * @example <string>
   */
  file?: string;
  /**
   * Whether set the file as the default Virtual Background file.
   *
   * @example false
   */
  ['default']?: boolean;
  /**
   * Whether to set the Virtual Background file as the new default for all panelists. This includes panelists not currently assigned a default Virtual Background.
   *
   * @example true
   */
  set_default_for_all_panelists?: boolean;
};

export type PostWebinarsWebinarIdBrandingVirtualBackgroundsVariables = {
  body?: PostWebinarsWebinarIdBrandingVirtualBackgroundsRequestBody;
  headers?: PostWebinarsWebinarIdBrandingVirtualBackgroundsHeaders;
  pathParams: PostWebinarsWebinarIdBrandingVirtualBackgroundsPathParams;
} & FetcherExtraProps;

/**
 * Use this API to upload a webinar's session branding [Virtual Background](https://support.zoom.us/hc/en-us/articles/210707503-Virtual-Background). Hosts and panelists can select and use these Virtual Backgrounds during the webinar. Branding Virtual Background files have the following restrictions:
 * * A webinar cannot exceed more than 10 Virtual Background files.
 * * You can only upload image files that are in JPG/JPEG, GIF or PNG format.
 * * The Virtual Background file size cannot exceed 15 megabytes (MB).
 *
 *  **Prerequisites:**
 * *  The **Webinar Session Branding** setting enabled.
 *
 * **Scopes:** `webinar:write`,`webinar:write:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`
 */
export const postWebinarsWebinarIdBrandingVirtualBackgrounds = (
  variables: PostWebinarsWebinarIdBrandingVirtualBackgroundsVariables,
  signal?: AbortSignal
) =>
  fetch<
    Record<string, any>,
    PostWebinarsWebinarIdBrandingVirtualBackgroundsError,
    PostWebinarsWebinarIdBrandingVirtualBackgroundsRequestBody,
    PostWebinarsWebinarIdBrandingVirtualBackgroundsHeaders,
    {},
    PostWebinarsWebinarIdBrandingVirtualBackgroundsPathParams
  >({ url: '/webinars/{webinarId}/branding/virtual_backgrounds', method: 'post', ...variables, signal });

export type DeleteWebinarsWebinarIdBrandingVirtualBackgroundsPathParams = {
  /**
   * (Required) The webinar's ID.
   */
  webinarId: string;
};

export type DeleteWebinarsWebinarIdBrandingVirtualBackgroundsQueryParams = {
  /**
   * A comma-separated list of the Virtual Background file IDs to delete.
   */
  ids?: string;
};

export type DeleteWebinarsWebinarIdBrandingVirtualBackgroundsError = Fetcher.ErrorWrapper<undefined>;

export type DeleteWebinarsWebinarIdBrandingVirtualBackgroundsVariables = {
  pathParams: DeleteWebinarsWebinarIdBrandingVirtualBackgroundsPathParams;
  queryParams?: DeleteWebinarsWebinarIdBrandingVirtualBackgroundsQueryParams;
} & FetcherExtraProps;

/**
 * Use this API to delete a webinar's session branding [Virtual Background](https://support.zoom.us/hc/en-us/articles/210707503-Virtual-Background).
 *
 *  **Prerequisites:**
 * * The **Webinar Session Branding** setting enabled.
 *
 * **Scopes:** `webinar:write`,`webinar:write:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
 */
export const deleteWebinarsWebinarIdBrandingVirtualBackgrounds = (
  variables: DeleteWebinarsWebinarIdBrandingVirtualBackgroundsVariables,
  signal?: AbortSignal
) =>
  fetch<
    undefined,
    DeleteWebinarsWebinarIdBrandingVirtualBackgroundsError,
    undefined,
    {},
    DeleteWebinarsWebinarIdBrandingVirtualBackgroundsQueryParams,
    DeleteWebinarsWebinarIdBrandingVirtualBackgroundsPathParams
  >({ url: '/webinars/{webinarId}/branding/virtual_backgrounds', method: 'delete', ...variables, signal });

export type PatchWebinarsWebinarIdBrandingVirtualBackgroundsPathParams = {
  /**
   * (Required) The webinar's ID.
   */
  webinarId: string;
};

export type PatchWebinarsWebinarIdBrandingVirtualBackgroundsQueryParams = {
  /**
   * The Virtual Background file ID to update.
   */
  id?: string;
  /**
   * Whether to set the Virtual Background file as the new default for all panelists. This includes panelists not currently assigned a default Virtual Background.
   */
  set_default_for_all_panelists?: string;
};

export type PatchWebinarsWebinarIdBrandingVirtualBackgroundsError = Fetcher.ErrorWrapper<undefined>;

export type PatchWebinarsWebinarIdBrandingVirtualBackgroundsVariables = {
  pathParams: PatchWebinarsWebinarIdBrandingVirtualBackgroundsPathParams;
  queryParams?: PatchWebinarsWebinarIdBrandingVirtualBackgroundsQueryParams;
} & FetcherExtraProps;

/**
 * Use this API to set a webinar's default session branding [Virtual Background](https://support.zoom.us/hc/en-us/articles/210707503-Virtual-Background).
 *
 *  **Prerequisites:**
 * * The **Webinar Session Branding** setting enabled.
 *
 * **Scopes:** `webinar:write`,`webinar:write:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
 */
export const patchWebinarsWebinarIdBrandingVirtualBackgrounds = (
  variables: PatchWebinarsWebinarIdBrandingVirtualBackgroundsVariables,
  signal?: AbortSignal
) =>
  fetch<
    undefined,
    PatchWebinarsWebinarIdBrandingVirtualBackgroundsError,
    undefined,
    {},
    PatchWebinarsWebinarIdBrandingVirtualBackgroundsQueryParams,
    PatchWebinarsWebinarIdBrandingVirtualBackgroundsPathParams
  >({ url: '/webinars/{webinarId}/branding/virtual_backgrounds', method: 'patch', ...variables, signal });

export type PostWebinarsWebinarIdBrandingWallpaperPathParams = {
  /**
   * (Required) The webinar's ID.
   */
  webinarId: string;
};

export type PostWebinarsWebinarIdBrandingWallpaperHeaders = {
  ['Content-Type']?: string;
  Accept?: string;
};

export type PostWebinarsWebinarIdBrandingWallpaperError = Fetcher.ErrorWrapper<undefined>;

export type PostWebinarsWebinarIdBrandingWallpaperRequestBody = {
  /**
   * (Required) The wallpaper's file path, in binary format.
   *
   * @example <string>
   */
  file?: string;
};

export type PostWebinarsWebinarIdBrandingWallpaperVariables = {
  body?: PostWebinarsWebinarIdBrandingWallpaperRequestBody;
  headers?: PostWebinarsWebinarIdBrandingWallpaperHeaders;
  pathParams: PostWebinarsWebinarIdBrandingWallpaperPathParams;
} & FetcherExtraProps;

/**
 * Use this API to upload a webinar's session branding wallpaper file. Webinar branding wallpaper files have the following requirements:
 * * A webinar can only have one wallpaper file.
 * * You can only upload image files that are in JPG/JPEG, GIF, or PNG format.
 * * Image files must be 16:9 ratio. The recommended image size is 1920 x 1080 pixels (px).
 * * The wallpaper file size cannot exceed 15 megabytes (MB).
 *
 *  **Prerequisites:**
 * *  The **Webinar Session Branding** setting enabled.
 *
 * **Scopes:** `webinar:write`,`webinar:write:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`
 */
export const postWebinarsWebinarIdBrandingWallpaper = (
  variables: PostWebinarsWebinarIdBrandingWallpaperVariables,
  signal?: AbortSignal
) =>
  fetch<
    Record<string, any>,
    PostWebinarsWebinarIdBrandingWallpaperError,
    PostWebinarsWebinarIdBrandingWallpaperRequestBody,
    PostWebinarsWebinarIdBrandingWallpaperHeaders,
    {},
    PostWebinarsWebinarIdBrandingWallpaperPathParams
  >({ url: '/webinars/{webinarId}/branding/wallpaper', method: 'post', ...variables, signal });

export type DeleteWebinarsWebinarIdBrandingWallpaperPathParams = {
  /**
   * (Required) The webinar's ID.
   */
  webinarId: string;
};

export type DeleteWebinarsWebinarIdBrandingWallpaperError = Fetcher.ErrorWrapper<undefined>;

export type DeleteWebinarsWebinarIdBrandingWallpaperVariables = {
  pathParams: DeleteWebinarsWebinarIdBrandingWallpaperPathParams;
} & FetcherExtraProps;

/**
 * Use this API to delete a webinar's session branding wallpaper file.
 *
 *  **Prerequisites:**
 * * The **Webinar Session Branding** setting enabled.
 *
 * **Scopes:** `webinar:write`,`webinar:write:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
 */
export const deleteWebinarsWebinarIdBrandingWallpaper = (
  variables: DeleteWebinarsWebinarIdBrandingWallpaperVariables,
  signal?: AbortSignal
) =>
  fetch<
    undefined,
    DeleteWebinarsWebinarIdBrandingWallpaperError,
    undefined,
    {},
    {},
    DeleteWebinarsWebinarIdBrandingWallpaperPathParams
  >({ url: '/webinars/{webinarId}/branding/wallpaper', method: 'delete', ...variables, signal });

export type GetWebinarsWebinarIdBrandingPathParams = {
  /**
   * (Required) The webinar's ID.
   */
  webinarId: string;
};

export type GetWebinarsWebinarIdBrandingHeaders = {
  Accept?: string;
};

export type GetWebinarsWebinarIdBrandingError = Fetcher.ErrorWrapper<undefined>;

export type GetWebinarsWebinarIdBrandingVariables = {
  headers?: GetWebinarsWebinarIdBrandingHeaders;
  pathParams: GetWebinarsWebinarIdBrandingPathParams;
} & FetcherExtraProps;

/**
 * Use this API to get the webinar's [Session Branding](https://support.zoom.us/hc/en-us/articles/4836268732045-Using-Webinar-Session-Branding) information. Session branding lets hosts visually customize a webinar by setting a webinar wallpaper that displays behind video tiles. Session branding also lets hosts set the Virtual Background for and apply name tags to hosts, alternative hosts, panelists, interpreters, and speakers.
 *
 *  **Prerequisites:**
 * * A Pro or higher plan with the Webinar add-on.
 * * The **Webinar Session Branding** setting enabled.
 *
 * **Scopes:** `webinar:read`,`webinar:read:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
 */
export const getWebinarsWebinarIdBranding = (variables: GetWebinarsWebinarIdBrandingVariables, signal?: AbortSignal) =>
  fetch<
    Record<string, any>,
    GetWebinarsWebinarIdBrandingError,
    undefined,
    GetWebinarsWebinarIdBrandingHeaders,
    {},
    GetWebinarsWebinarIdBrandingPathParams
  >({ url: '/webinars/{webinarId}/branding', method: 'get', ...variables, signal });

export type PostWebinarsWebinarIdInviteLinksPathParams = {
  /**
   * (Required) The webinar's ID.
   */
  webinarId: string;
};

export type PostWebinarsWebinarIdInviteLinksHeaders = {
  ['Content-Type']?: string;
  Accept?: string;
};

export type PostWebinarsWebinarIdInviteLinksError = Fetcher.ErrorWrapper<undefined>;

export type PostWebinarsWebinarIdInviteLinksVariables = {
  body?: Record<string, any>;
  headers?: PostWebinarsWebinarIdInviteLinksHeaders;
  pathParams: PostWebinarsWebinarIdInviteLinksPathParams;
} & FetcherExtraProps;

/**
 * Create a batch of invitation links for a webinar.
 *
 * **Prerequisites:**
 *
 * * Business, Education or API Plan with the Webinar add-on.
 *
 * **Scopes:** `webinar:write`,`webinar:write:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
 */
export const postWebinarsWebinarIdInviteLinks = (
  variables: PostWebinarsWebinarIdInviteLinksVariables,
  signal?: AbortSignal
) =>
  fetch<
    Record<string, any>,
    PostWebinarsWebinarIdInviteLinksError,
    Record<string, any>,
    PostWebinarsWebinarIdInviteLinksHeaders,
    {},
    PostWebinarsWebinarIdInviteLinksPathParams
  >({ url: '/webinars/{webinarId}/invite_links', method: 'post', ...variables, signal });

export type GetWebinarsWebinarIdJointokenLiveStreamingPathParams = {
  /**
   * (Required) The webinar's ID.
   */
  webinarId: string;
};

export type GetWebinarsWebinarIdJointokenLiveStreamingHeaders = {
  Accept?: string;
};

export type GetWebinarsWebinarIdJointokenLiveStreamingError = Fetcher.ErrorWrapper<undefined>;

export type GetWebinarsWebinarIdJointokenLiveStreamingVariables = {
  headers?: GetWebinarsWebinarIdJointokenLiveStreamingHeaders;
  pathParams: GetWebinarsWebinarIdJointokenLiveStreamingPathParams;
} & FetcherExtraProps;

/**
 * Use this API to get a webinar's archive token to allow live streaming. The join token allows a recording bot implemented using Zoom meeting SDK to connect to a Zoom meeting &quot;hosted by the issuer of the token&quot;, and can call the streaming method automatically. It supports both regular live streaming, and raw streaming.
 *
 *  **Prerequisites:**
 * * A Pro or higher plan with a Webinar Add-on.
 * * The **Allow livestreaming of webinars** user setting enabled in the Zoom web portal.
 *
 * **Scopes:** `webinar_token:read:admin:live_streaming`,`webinar_token:read:live_streaming`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
 */
export const getWebinarsWebinarIdJointokenLiveStreaming = (
  variables: GetWebinarsWebinarIdJointokenLiveStreamingVariables,
  signal?: AbortSignal
) =>
  fetch<
    Record<string, any>,
    GetWebinarsWebinarIdJointokenLiveStreamingError,
    undefined,
    GetWebinarsWebinarIdJointokenLiveStreamingHeaders,
    {},
    GetWebinarsWebinarIdJointokenLiveStreamingPathParams
  >({ url: '/webinars/{webinarId}/jointoken/live_streaming', method: 'get', ...variables, signal });

export type GetWebinarsWebinarIdJointokenLocalArchivingPathParams = {
  /**
   * (Required) The webinar's ID.
   */
  webinarId: string;
};

export type GetWebinarsWebinarIdJointokenLocalArchivingHeaders = {
  Accept?: string;
};

export type GetWebinarsWebinarIdJointokenLocalArchivingError = Fetcher.ErrorWrapper<undefined>;

export type GetWebinarsWebinarIdJointokenLocalArchivingVariables = {
  headers?: GetWebinarsWebinarIdJointokenLocalArchivingHeaders;
  pathParams: GetWebinarsWebinarIdJointokenLocalArchivingPathParams;
} & FetcherExtraProps;

/**
 * Use this API to get a webinar's archive token to allow local archiving. The archive token allows a meeting SDK app or bot to get archive permission to access the webinar's raw audio and video media stream in real-time.
 *
 *  **Prerequisites:**
 * * A Pro or higher plan with a Webinar Add-on.
 * * The **Archive meetings and webinars** account setting enabled in the Zoom web portal.
 *
 * **Scopes:** `webinar_token:read:admin:local_archiving`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
 */
export const getWebinarsWebinarIdJointokenLocalArchiving = (
  variables: GetWebinarsWebinarIdJointokenLocalArchivingVariables,
  signal?: AbortSignal
) =>
  fetch<
    Record<string, any>,
    GetWebinarsWebinarIdJointokenLocalArchivingError,
    undefined,
    GetWebinarsWebinarIdJointokenLocalArchivingHeaders,
    {},
    GetWebinarsWebinarIdJointokenLocalArchivingPathParams
  >({ url: '/webinars/{webinarId}/jointoken/local_archiving', method: 'get', ...variables, signal });

export type GetWebinarsWebinarIdJointokenLocalRecordingPathParams = {
  /**
   * (Required) The webinar's ID.
   */
  webinarId: string;
};

export type GetWebinarsWebinarIdJointokenLocalRecordingHeaders = {
  Accept?: string;
};

export type GetWebinarsWebinarIdJointokenLocalRecordingError = Fetcher.ErrorWrapper<undefined>;

export type GetWebinarsWebinarIdJointokenLocalRecordingVariables = {
  headers?: GetWebinarsWebinarIdJointokenLocalRecordingHeaders;
  pathParams: GetWebinarsWebinarIdJointokenLocalRecordingPathParams;
} & FetcherExtraProps;

/**
 * Use this API to get a webinar's join token to allow for local recording. The join token lets a recording bot implemented using Zoom Meeting SDK to connect to a Zoom webinar. The recording bot can then automatically start locally recording. This supports both regular and raw local recording types.
 *
 *  **Prerequisites:**
 * * A Pro or higher plan with a Webinar Add-on.
 * * The **Local recording** user setting enabled in the Zoom web portal.
 *
 * **Scopes:** `webinar_token:read:admin:local_recording`,`webinar_token:read:local_recording`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
 */
export const getWebinarsWebinarIdJointokenLocalRecording = (
  variables: GetWebinarsWebinarIdJointokenLocalRecordingVariables,
  signal?: AbortSignal
) =>
  fetch<
    Record<string, any>,
    GetWebinarsWebinarIdJointokenLocalRecordingError,
    undefined,
    GetWebinarsWebinarIdJointokenLocalRecordingHeaders,
    {},
    GetWebinarsWebinarIdJointokenLocalRecordingPathParams
  >({ url: '/webinars/{webinarId}/jointoken/local_recording', method: 'get', ...variables, signal });

export type PatchWebinarsWebinarIdLivestreamStatusPathParams = {
  /**
   * (Required) The webinar's ID.
   */
  webinarId: string;
};

export type PatchWebinarsWebinarIdLivestreamStatusHeaders = {
  ['Content-Type']?: string;
};

export type PatchWebinarsWebinarIdLivestreamStatusError = Fetcher.ErrorWrapper<undefined>;

export type PatchWebinarsWebinarIdLivestreamStatusVariables = {
  body?: Record<string, any>;
  headers?: PatchWebinarsWebinarIdLivestreamStatusHeaders;
  pathParams: PatchWebinarsWebinarIdLivestreamStatusPathParams;
} & FetcherExtraProps;

/**
 * Let users [live stream a webinar](https://support.zoom.us/hc/en-us/articles/115001777826-Live-Streaming-Meetings-or-Webinars-Using-a-Custom-Service) to a custom platform. Update the status of a webinar's live stream.
 *
 *
 * **Prerequisites:**
 *
 * * Pro or higher plan with a Webinar Add-on.
 *
 * * Live streaming details must be [configured](https://support.zoom.us/hc/en-us/articles/115001777826-Live-Streaming-Meetings-or-Webinars-Using-a-Custom-Service#h_01589a6f-a40a-4e18-a448-cb746e52ebc5) for the webinar.
 *
 *
 *
 *
 * **Scopes:** `webinar:write`,`webinar:write:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
 */
export const patchWebinarsWebinarIdLivestreamStatus = (
  variables: PatchWebinarsWebinarIdLivestreamStatusVariables,
  signal?: AbortSignal
) =>
  fetch<
    undefined,
    PatchWebinarsWebinarIdLivestreamStatusError,
    Record<string, any>,
    PatchWebinarsWebinarIdLivestreamStatusHeaders,
    {},
    PatchWebinarsWebinarIdLivestreamStatusPathParams
  >({ url: '/webinars/{webinarId}/livestream/status', method: 'patch', ...variables, signal });

export type GetWebinarsWebinarIdLivestreamPathParams = {
  /**
   * (Required) The webinar's unique ID.
   */
  webinarId: string;
};

export type GetWebinarsWebinarIdLivestreamHeaders = {
  Accept?: string;
};

export type GetWebinarsWebinarIdLivestreamError = Fetcher.ErrorWrapper<undefined>;

export type GetWebinarsWebinarIdLivestreamVariables = {
  headers?: GetWebinarsWebinarIdLivestreamHeaders;
  pathParams: GetWebinarsWebinarIdLivestreamPathParams;
} & FetcherExtraProps;

/**
 * Get a webinar's live stream configuration details, such as Stream URL, Stream Key and Page URL.
 *
 * Zoom allows users to [live stream a webinar](https://support.zoom.us/hc/en-us/articles/115001777826-Live-Streaming-Meetings-or-Webinars-Using-a-Custom-Service) to a custom platform.
 *
 *
 * **Prerequisites:**
 *
 * * Pro or higher plan with the webinar add-on.
 *
 * * Live streaming details must have been [configured](https://support.zoom.us/hc/en-us/articles/115001777826-Live-Streaming-Meetings-or-Webinars-Using-a-Custom-Service#h_01589a6f-a40a-4e18-a448-cb746e52ebc5) for the webinar.
 *
 *
 *
 *
 * **Scopes:** `webinar:read:admin`,`webinar:read`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
 */
export const getWebinarsWebinarIdLivestream = (
  variables: GetWebinarsWebinarIdLivestreamVariables,
  signal?: AbortSignal
) =>
  fetch<
    Record<string, any>,
    GetWebinarsWebinarIdLivestreamError,
    undefined,
    GetWebinarsWebinarIdLivestreamHeaders,
    {},
    GetWebinarsWebinarIdLivestreamPathParams
  >({ url: '/webinars/{webinarId}/livestream', method: 'get', ...variables, signal });

export type PatchWebinarsWebinarIdLivestreamPathParams = {
  /**
   * (Required) The webinar's ID.
   */
  webinarId: string;
};

export type PatchWebinarsWebinarIdLivestreamHeaders = {
  ['Content-Type']?: string;
};

export type PatchWebinarsWebinarIdLivestreamError = Fetcher.ErrorWrapper<undefined>;

export type PatchWebinarsWebinarIdLivestreamVariables = {
  body?: Record<string, any>;
  headers?: PatchWebinarsWebinarIdLivestreamHeaders;
  pathParams: PatchWebinarsWebinarIdLivestreamPathParams;
} & FetcherExtraProps;

/**
 * Update a webinar's live stream information.
 *
 *
 * **Prerequisites:**
 *
 * * Pro or higher plan with the webinar add-on.
 *
 * * Live streaming details must be [configured](https://support.zoom.us/hc/en-us/articles/115001777826-Live-Streaming-Meetings-or-Webinars-Using-a-Custom-Service#h_01589a6f-a40a-4e18-a448-cb746e52ebc5) for the webinar.
 *
 *
 *
 *
 * **Scopes:** `webinar:write`,`webinar:write:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
 */
export const patchWebinarsWebinarIdLivestream = (
  variables: PatchWebinarsWebinarIdLivestreamVariables,
  signal?: AbortSignal
) =>
  fetch<
    undefined,
    PatchWebinarsWebinarIdLivestreamError,
    Record<string, any>,
    PatchWebinarsWebinarIdLivestreamHeaders,
    {},
    PatchWebinarsWebinarIdLivestreamPathParams
  >({ url: '/webinars/{webinarId}/livestream', method: 'patch', ...variables, signal });

export type DeleteWebinarsWebinarIdPanelistsPanelistIdPathParams = {
  /**
   * (Required) The webinar's ID.
   */
  webinarId: string;
  /**
   * (Required) The panelist's ID or email.
   */
  panelistId: string;
};

export type DeleteWebinarsWebinarIdPanelistsPanelistIdError = Fetcher.ErrorWrapper<undefined>;

export type DeleteWebinarsWebinarIdPanelistsPanelistIdVariables = {
  pathParams: DeleteWebinarsWebinarIdPanelistsPanelistIdPathParams;
} & FetcherExtraProps;

/**
 * [Remove](https://support.zoom.us/hc/en-us/articles/115005657826-Inviting-Panelists-to-a-Webinar#h_de31f237-a91c-4fb2-912b-ecfba8ec5ffb) a single panelist from a webinar.
 *   Retrieve the `panelistId` by calling **List Panelists API**.
 *
 *
 * **Prerequisites:**
 *
 * * Pro or a higher plan with the [webinar add-on](https://zoom.us/webinar).
 *
 *
 * **Scopes:** `webinar:write`,`webinar:write:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
 */
export const deleteWebinarsWebinarIdPanelistsPanelistId = (
  variables: DeleteWebinarsWebinarIdPanelistsPanelistIdVariables,
  signal?: AbortSignal
) =>
  fetch<
    undefined,
    DeleteWebinarsWebinarIdPanelistsPanelistIdError,
    undefined,
    {},
    {},
    DeleteWebinarsWebinarIdPanelistsPanelistIdPathParams
  >({ url: '/webinars/{webinarId}/panelists/{panelistId}', method: 'delete', ...variables, signal });

export type GetWebinarsWebinarIdPanelistsPathParams = {
  /**
   * (Required) The webinar's ID.
   */
  webinarId: string;
};

export type GetWebinarsWebinarIdPanelistsHeaders = {
  Accept?: string;
};

export type GetWebinarsWebinarIdPanelistsError = Fetcher.ErrorWrapper<undefined>;

export type GetWebinarsWebinarIdPanelistsVariables = {
  headers?: GetWebinarsWebinarIdPanelistsHeaders;
  pathParams: GetWebinarsWebinarIdPanelistsPathParams;
} & FetcherExtraProps;

/**
 * List all of a webinar's panelists.
 *
 * Webinar panelists can view and send video, screen share, annotate, and do much more compared to webinar attendees.
 *
 *
 * **Prerequisites:**
 *
 * * Pro or a higher plan with [Webinar Add-on](https://zoom.us/webinar).
 *
 *
 * **Scopes:** `webinar:read:admin`,`webinar:read`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
 */
export const getWebinarsWebinarIdPanelists = (
  variables: GetWebinarsWebinarIdPanelistsVariables,
  signal?: AbortSignal
) =>
  fetch<
    Record<string, any>,
    GetWebinarsWebinarIdPanelistsError,
    undefined,
    GetWebinarsWebinarIdPanelistsHeaders,
    {},
    GetWebinarsWebinarIdPanelistsPathParams
  >({ url: '/webinars/{webinarId}/panelists', method: 'get', ...variables, signal });

export type PostWebinarsWebinarIdPanelistsPathParams = {
  /**
   * (Required) The webinar's ID.
   */
  webinarId: string;
};

export type PostWebinarsWebinarIdPanelistsHeaders = {
  ['Content-Type']?: string;
  Accept?: string;
};

export type PostWebinarsWebinarIdPanelistsError = Fetcher.ErrorWrapper<undefined>;

export type PostWebinarsWebinarIdPanelistsVariables = {
  body?: Record<string, any>;
  headers?: PostWebinarsWebinarIdPanelistsHeaders;
  pathParams: PostWebinarsWebinarIdPanelistsPathParams;
} & FetcherExtraProps;

/**
 * Panelists in a webinar can view and send video, screen share, annotate, and do much more compared to attendees in a webinar.
 *  [Add panelists](https://support.zoom.us/hc/en-us/articles/115005657826-Inviting-Panelists-to-a-Webinar#h_7550d59e-23f5-4703-9e22-e76bded1ed70) to a scheduled webinar.
 *
 *
 * **Prerequisites:**
 * * Pro or a higher plan with the [Webinar Add-on](https://zoom.us/webinar).
 *
 *
 * **Scopes:** `webinar:write`,`webinar:write:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
 */
export const postWebinarsWebinarIdPanelists = (
  variables: PostWebinarsWebinarIdPanelistsVariables,
  signal?: AbortSignal
) =>
  fetch<
    Record<string, any>,
    PostWebinarsWebinarIdPanelistsError,
    Record<string, any>,
    PostWebinarsWebinarIdPanelistsHeaders,
    {},
    PostWebinarsWebinarIdPanelistsPathParams
  >({ url: '/webinars/{webinarId}/panelists', method: 'post', ...variables, signal });

export type DeleteWebinarsWebinarIdPanelistsPathParams = {
  /**
   * (Required) The webinar's ID.
   */
  webinarId: string;
};

export type DeleteWebinarsWebinarIdPanelistsError = Fetcher.ErrorWrapper<undefined>;

export type DeleteWebinarsWebinarIdPanelistsVariables = {
  pathParams: DeleteWebinarsWebinarIdPanelistsPathParams;
} & FetcherExtraProps;

/**
 * Remove all the panelists from a webinar.
 *
 * **Prerequisites:**
 *
 * * Pro or a higher plan with the [webinar add-on](https://zoom.us/webinar).
 *
 *
 * **Scopes:** `webinar:write`,`webinar:write:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
 */
export const deleteWebinarsWebinarIdPanelists = (
  variables: DeleteWebinarsWebinarIdPanelistsVariables,
  signal?: AbortSignal
) =>
  fetch<
    undefined,
    DeleteWebinarsWebinarIdPanelistsError,
    undefined,
    {},
    {},
    DeleteWebinarsWebinarIdPanelistsPathParams
  >({ url: '/webinars/{webinarId}/panelists', method: 'delete', ...variables, signal });

export type GetWebinarsWebinarIdPollsPollIdPathParams = {
  /**
   * (Required) The webinar's ID.
   */
  webinarId: string;
  /**
   * (Required) The poll ID
   */
  pollId: string;
};

export type GetWebinarsWebinarIdPollsPollIdHeaders = {
  Accept?: string;
};

export type GetWebinarsWebinarIdPollsPollIdError = Fetcher.ErrorWrapper<undefined>;

export type GetWebinarsWebinarIdPollsPollIdVariables = {
  headers?: GetWebinarsWebinarIdPollsPollIdHeaders;
  pathParams: GetWebinarsWebinarIdPollsPollIdPathParams;
} & FetcherExtraProps;

/**
 * Get a webinar's [poll](https://support.zoom.us/hc/en-us/articles/203749865-Polling-for-Webinars) details.
 *
 *
 *
 *
 * **Scopes:** `webinar:read:admin`,`webinar:read`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
 */
export const getWebinarsWebinarIdPollsPollId = (
  variables: GetWebinarsWebinarIdPollsPollIdVariables,
  signal?: AbortSignal
) =>
  fetch<
    Record<string, any>,
    GetWebinarsWebinarIdPollsPollIdError,
    undefined,
    GetWebinarsWebinarIdPollsPollIdHeaders,
    {},
    GetWebinarsWebinarIdPollsPollIdPathParams
  >({ url: '/webinars/{webinarId}/polls/{pollId}', method: 'get', ...variables, signal });

export type PutWebinarsWebinarIdPollsPollIdPathParams = {
  /**
   * (Required) The webinar's ID.
   */
  webinarId: string;
  /**
   * (Required) The poll ID
   */
  pollId: string;
};

export type PutWebinarsWebinarIdPollsPollIdHeaders = {
  ['Content-Type']?: string;
};

export type PutWebinarsWebinarIdPollsPollIdError = Fetcher.ErrorWrapper<undefined>;

export type PutWebinarsWebinarIdPollsPollIdVariables = {
  body?: Record<string, any>;
  headers?: PutWebinarsWebinarIdPollsPollIdHeaders;
  pathParams: PutWebinarsWebinarIdPollsPollIdPathParams;
} & FetcherExtraProps;

/**
 * Update a webinar's [poll](https://support.zoom.us/hc/en-us/articles/203749865-Polling-for-Webinars).
 *
 *
 *
 *
 * **Scopes:** `webinar:write`,`webinar:write:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
 */
export const putWebinarsWebinarIdPollsPollId = (
  variables: PutWebinarsWebinarIdPollsPollIdVariables,
  signal?: AbortSignal
) =>
  fetch<
    undefined,
    PutWebinarsWebinarIdPollsPollIdError,
    Record<string, any>,
    PutWebinarsWebinarIdPollsPollIdHeaders,
    {},
    PutWebinarsWebinarIdPollsPollIdPathParams
  >({ url: '/webinars/{webinarId}/polls/{pollId}', method: 'put', ...variables, signal });

export type DeleteWebinarsWebinarIdPollsPollIdPathParams = {
  /**
   * (Required) The webinar's ID.
   */
  webinarId: string;
  /**
   * (Required) The poll ID
   */
  pollId: string;
};

export type DeleteWebinarsWebinarIdPollsPollIdError = Fetcher.ErrorWrapper<undefined>;

export type DeleteWebinarsWebinarIdPollsPollIdVariables = {
  pathParams: DeleteWebinarsWebinarIdPollsPollIdPathParams;
} & FetcherExtraProps;

/**
 * Delete a webinar's [poll](https://support.zoom.us/hc/en-us/articles/203749865-Polling-for-Webinars).
 *
 *
 *
 *
 * **Scopes:** `webinar:write`,`webinar:write:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
 */
export const deleteWebinarsWebinarIdPollsPollId = (
  variables: DeleteWebinarsWebinarIdPollsPollIdVariables,
  signal?: AbortSignal
) =>
  fetch<
    undefined,
    DeleteWebinarsWebinarIdPollsPollIdError,
    undefined,
    {},
    {},
    DeleteWebinarsWebinarIdPollsPollIdPathParams
  >({ url: '/webinars/{webinarId}/polls/{pollId}', method: 'delete', ...variables, signal });

export type GetWebinarsWebinarIdPollsPathParams = {
  /**
   * (Required) The webinar's ID.
   */
  webinarId: string;
};

export type GetWebinarsWebinarIdPollsQueryParams = {
  /**
   * Whether to query for polls with the **Anonymous** option enabled:
   * * `true` &mdash; Query for polls with the **Anonymous** option enabled.
   * * `false` &mdash; Do not query for polls with the **Anonymous** option enabled.
   */
  anonymous?: string;
};

export type GetWebinarsWebinarIdPollsHeaders = {
  Accept?: string;
};

export type GetWebinarsWebinarIdPollsError = Fetcher.ErrorWrapper<undefined>;

export type GetWebinarsWebinarIdPollsVariables = {
  headers?: GetWebinarsWebinarIdPollsHeaders;
  pathParams: GetWebinarsWebinarIdPollsPathParams;
  queryParams?: GetWebinarsWebinarIdPollsQueryParams;
} & FetcherExtraProps;

/**
 * List all the [polls](https://support.zoom.us/hc/en-us/articles/203749865-Polling-for-Webinars) of a Webinar.
 *
 *
 *
 *
 * **Scopes:** `webinar:read:admin`,`webinar:read`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
 */
export const getWebinarsWebinarIdPolls = (variables: GetWebinarsWebinarIdPollsVariables, signal?: AbortSignal) =>
  fetch<
    Record<string, any>,
    GetWebinarsWebinarIdPollsError,
    undefined,
    GetWebinarsWebinarIdPollsHeaders,
    GetWebinarsWebinarIdPollsQueryParams,
    GetWebinarsWebinarIdPollsPathParams
  >({ url: '/webinars/{webinarId}/polls', method: 'get', ...variables, signal });

export type PostWebinarsWebinarIdPollsPathParams = {
  /**
   * (Required) The webinar's ID.
   */
  webinarId: string;
};

export type PostWebinarsWebinarIdPollsHeaders = {
  ['Content-Type']?: string;
  Accept?: string;
};

export type PostWebinarsWebinarIdPollsError = Fetcher.ErrorWrapper<undefined>;

export type PostWebinarsWebinarIdPollsVariables = {
  body?: Record<string, any>;
  headers?: PostWebinarsWebinarIdPollsHeaders;
  pathParams: PostWebinarsWebinarIdPollsPathParams;
} & FetcherExtraProps;

/**
 * Create a [poll](https://support.zoom.us/hc/en-us/articles/203749865-Polling-for-Webinars) for a webinar.
 *
 *
 *
 *
 * **Scopes:** `webinar:write`,`webinar:write:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
 */
export const postWebinarsWebinarIdPolls = (variables: PostWebinarsWebinarIdPollsVariables, signal?: AbortSignal) =>
  fetch<
    Record<string, any>,
    PostWebinarsWebinarIdPollsError,
    Record<string, any>,
    PostWebinarsWebinarIdPollsHeaders,
    {},
    PostWebinarsWebinarIdPollsPathParams
  >({ url: '/webinars/{webinarId}/polls', method: 'post', ...variables, signal });

export type GetWebinarsWebinarIdRegistrantsQuestionsPathParams = {
  /**
   * (Required) The webinar's ID.
   */
  webinarId: string;
};

export type GetWebinarsWebinarIdRegistrantsQuestionsHeaders = {
  Accept?: string;
};

export type GetWebinarsWebinarIdRegistrantsQuestionsError = Fetcher.ErrorWrapper<undefined>;

export type GetWebinarsWebinarIdRegistrantsQuestionsVariables = {
  headers?: GetWebinarsWebinarIdRegistrantsQuestionsHeaders;
  pathParams: GetWebinarsWebinarIdRegistrantsQuestionsPathParams;
} & FetcherExtraProps;

/**
 * List registration questions and fields that are to be answered by users while registering for a webinar.
 *
 *  Scheduling a [webinar with registration](https://support.zoom.us/hc/en-us/articles/204619915-Scheduling-a-Webinar-with-Registration) requires your registrants to complete a brief form with fields and questions before they can receive the link to join the webinar.
 *
 * **Prerequisites:**
 *
 * * Pro or higher plan with the webinar add-on.
 *
 *
 * **Scopes:** `webinar:read:admin`,`webinar:read`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
 */
export const getWebinarsWebinarIdRegistrantsQuestions = (
  variables: GetWebinarsWebinarIdRegistrantsQuestionsVariables,
  signal?: AbortSignal
) =>
  fetch<
    Record<string, any>,
    GetWebinarsWebinarIdRegistrantsQuestionsError,
    undefined,
    GetWebinarsWebinarIdRegistrantsQuestionsHeaders,
    {},
    GetWebinarsWebinarIdRegistrantsQuestionsPathParams
  >({ url: '/webinars/{webinarId}/registrants/questions', method: 'get', ...variables, signal });

export type PatchWebinarsWebinarIdRegistrantsQuestionsPathParams = {
  /**
   * (Required) The webinar's ID.
   */
  webinarId: string;
};

export type PatchWebinarsWebinarIdRegistrantsQuestionsHeaders = {
  ['Content-Type']?: string;
};

export type PatchWebinarsWebinarIdRegistrantsQuestionsError = Fetcher.ErrorWrapper<undefined>;

export type PatchWebinarsWebinarIdRegistrantsQuestionsVariables = {
  body?: Record<string, any>;
  headers?: PatchWebinarsWebinarIdRegistrantsQuestionsHeaders;
  pathParams: PatchWebinarsWebinarIdRegistrantsQuestionsPathParams;
} & FetcherExtraProps;

/**
 * Update registration questions and fields of a scheduled webinar for users to answer during webinar registration. Scheduling a [webinar with registration](https://support.zoom.us/hc/en-us/articles/204619915-Scheduling-a-Webinar-with-Registration) requires your registrants to complete a brief form with fields and questions before they can receive the link to join the webinar.
 *
 *
 * **Prerequisites:**
 *
 * * Pro or higher plan with a Webinar Add-on.
 * * Registration option for Webinar should be set as required to use this API.
 *
 *
 * **Scopes:** `webinar:write`,`webinar:write:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
 */
export const patchWebinarsWebinarIdRegistrantsQuestions = (
  variables: PatchWebinarsWebinarIdRegistrantsQuestionsVariables,
  signal?: AbortSignal
) =>
  fetch<
    undefined,
    PatchWebinarsWebinarIdRegistrantsQuestionsError,
    Record<string, any>,
    PatchWebinarsWebinarIdRegistrantsQuestionsHeaders,
    {},
    PatchWebinarsWebinarIdRegistrantsQuestionsPathParams
  >({ url: '/webinars/{webinarId}/registrants/questions', method: 'patch', ...variables, signal });

export type PutWebinarsWebinarIdRegistrantsStatusPathParams = {
  /**
   * (Required) The webinar's ID.
   */
  webinarId: string;
};

export type PutWebinarsWebinarIdRegistrantsStatusQueryParams = {
  /**
   * The meeting or webinar occurrence ID.
   */
  occurrence_id?: string;
};

export type PutWebinarsWebinarIdRegistrantsStatusHeaders = {
  ['Content-Type']?: string;
};

export type PutWebinarsWebinarIdRegistrantsStatusError = Fetcher.ErrorWrapper<undefined>;

export type PutWebinarsWebinarIdRegistrantsStatusVariables = {
  body?: Record<string, any>;
  headers?: PutWebinarsWebinarIdRegistrantsStatusHeaders;
  pathParams: PutWebinarsWebinarIdRegistrantsStatusPathParams;
  queryParams?: PutWebinarsWebinarIdRegistrantsStatusQueryParams;
} & FetcherExtraProps;

/**
 * Update webinar registrants' registration status. You can approve or deny a registrant, or revoke a registrant's approval.
 *
 * **Scopes:** `webinar:write`,`webinar:write:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
 */
export const putWebinarsWebinarIdRegistrantsStatus = (
  variables: PutWebinarsWebinarIdRegistrantsStatusVariables,
  signal?: AbortSignal
) =>
  fetch<
    undefined,
    PutWebinarsWebinarIdRegistrantsStatusError,
    Record<string, any>,
    PutWebinarsWebinarIdRegistrantsStatusHeaders,
    PutWebinarsWebinarIdRegistrantsStatusQueryParams,
    PutWebinarsWebinarIdRegistrantsStatusPathParams
  >({ url: '/webinars/{webinarId}/registrants/status', method: 'put', ...variables, signal });

export type GetWebinarsWebinarIdRegistrantsRegistrantIdPathParams = {
  /**
   * (Required) The webinar's ID.
   */
  webinarId: string;
  /**
   * (Required) The registrant ID.
   */
  registrantId: string;
};

export type GetWebinarsWebinarIdRegistrantsRegistrantIdQueryParams = {
  /**
   * The meeting or webinar occurrence ID.
   */
  occurrence_id?: string;
};

export type GetWebinarsWebinarIdRegistrantsRegistrantIdHeaders = {
  Accept?: string;
};

export type GetWebinarsWebinarIdRegistrantsRegistrantIdError = Fetcher.ErrorWrapper<undefined>;

export type GetWebinarsWebinarIdRegistrantsRegistrantIdVariables = {
  headers?: GetWebinarsWebinarIdRegistrantsRegistrantIdHeaders;
  pathParams: GetWebinarsWebinarIdRegistrantsRegistrantIdPathParams;
  queryParams?: GetWebinarsWebinarIdRegistrantsRegistrantIdQueryParams;
} & FetcherExtraProps;

/**
 * Zoom users with a [webinar plan](https://zoom.us/webinar) have access to creating and managing webinars. The webinar feature lets a host broadcast a Zoom meeting to up to 10,000 attendees. Scheduling a [webinar with registration](https://support.zoom.us/hc/en-us/articles/204619915-Scheduling-a-Webinar-with-Registration) requires your registrants to complete a brief form before receiving the link to join the webinar.
 *  Use this API to get details on a specific user who has registered for the webinar.
 *
 *
 * **Prerequisites:**
 *
 * * The account must have a webinar plan.
 *
 * **Scopes:** `webinar:read:admin`,`webinar:read`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
 */
export const getWebinarsWebinarIdRegistrantsRegistrantId = (
  variables: GetWebinarsWebinarIdRegistrantsRegistrantIdVariables,
  signal?: AbortSignal
) =>
  fetch<
    Record<string, any>,
    GetWebinarsWebinarIdRegistrantsRegistrantIdError,
    undefined,
    GetWebinarsWebinarIdRegistrantsRegistrantIdHeaders,
    GetWebinarsWebinarIdRegistrantsRegistrantIdQueryParams,
    GetWebinarsWebinarIdRegistrantsRegistrantIdPathParams
  >({ url: '/webinars/{webinarId}/registrants/{registrantId}', method: 'get', ...variables, signal });

export type DeleteWebinarsWebinarIdRegistrantsRegistrantIdPathParams = {
  /**
   * (Required) The webinar ID.
   */
  webinarId: string;
  /**
   * (Required) The registrant ID.
   */
  registrantId: string;
};

export type DeleteWebinarsWebinarIdRegistrantsRegistrantIdQueryParams = {
  /**
   * The webinar occurrence ID.
   */
  occurrence_id?: string;
};

export type DeleteWebinarsWebinarIdRegistrantsRegistrantIdError = Fetcher.ErrorWrapper<undefined>;

export type DeleteWebinarsWebinarIdRegistrantsRegistrantIdVariables = {
  pathParams: DeleteWebinarsWebinarIdRegistrantsRegistrantIdPathParams;
  queryParams?: DeleteWebinarsWebinarIdRegistrantsRegistrantIdQueryParams;
} & FetcherExtraProps;

/**
 * Delete a webinar registrant.
 *
 *
 *
 *
 * **Scopes:** `webinar:write`,`webinar:write:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
 */
export const deleteWebinarsWebinarIdRegistrantsRegistrantId = (
  variables: DeleteWebinarsWebinarIdRegistrantsRegistrantIdVariables,
  signal?: AbortSignal
) =>
  fetch<
    undefined,
    DeleteWebinarsWebinarIdRegistrantsRegistrantIdError,
    undefined,
    {},
    DeleteWebinarsWebinarIdRegistrantsRegistrantIdQueryParams,
    DeleteWebinarsWebinarIdRegistrantsRegistrantIdPathParams
  >({ url: '/webinars/{webinarId}/registrants/{registrantId}', method: 'delete', ...variables, signal });

export type GetWebinarsWebinarIdRegistrantsPathParams = {
  /**
   * (Required) The webinar's ID.
   */
  webinarId: string;
};

export type GetWebinarsWebinarIdRegistrantsQueryParams = {
  /**
   * The meeting or webinar occurrence ID.
   */
  occurrence_id?: string;
  /**
   * Query by the registrant's status.
   * * `pending` - The registration is pending.
   * * `approved` - The registrant is approved.
   * * `denied` - The registration is denied.
   */
  status?: string;
  /**
   * The tracking source ID for the registrants. Useful if you share the webinar registration page in multiple locations. See [Creating source tracking links for webinar registration](https://support.zoom.us/hc/en-us/articles/360000315683-Creating-source-tracking-links-for-webinar-registration) for details.
   */
  tracking_source_id?: string;
  /**
   * The number of records returned within a single API call.
   */
  page_size?: number;
  /**
   * **Deprecated** This field will be deprecated. We will no longer support this field in a future release. Instead, use the `next_page_token` for pagination.
   */
  page_number?: number;
  /**
   * Use the next page token to paginate through large result sets. A next page token is returned whenever the set of available results exceeds the current page size. This token's expiration period is 15 minutes.
   */
  next_page_token?: string;
};

export type GetWebinarsWebinarIdRegistrantsHeaders = {
  Accept?: string;
};

export type GetWebinarsWebinarIdRegistrantsError = Fetcher.ErrorWrapper<undefined>;

export type GetWebinarsWebinarIdRegistrantsVariables = {
  headers?: GetWebinarsWebinarIdRegistrantsHeaders;
  pathParams: GetWebinarsWebinarIdRegistrantsPathParams;
  queryParams?: GetWebinarsWebinarIdRegistrantsQueryParams;
} & FetcherExtraProps;

/**
 * List all users that have registered for a given webinar. Zoom users with a [webinar plan](https://zoom.us/webinar) have access to creating and managing webinars. The webinar functionality lets a host broadcast a Zoom meeting to up to 10,000 attendees. Scheduling a [webinar with registration](https://support.zoom.us/hc/en-us/articles/204619915-Scheduling-a-Webinar-with-Registration) requires your registrants to complete a brief form before receiving the link to join the webinar.
 *
 *
 * **Prerequisites**
 * * Pro or higher plan with a Webinar Add-on.
 *
 *
 *
 * **Scopes:** `webinar:read:admin`,`webinar:read`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
 */
export const getWebinarsWebinarIdRegistrants = (
  variables: GetWebinarsWebinarIdRegistrantsVariables,
  signal?: AbortSignal
) =>
  fetch<
    Record<string, any>,
    GetWebinarsWebinarIdRegistrantsError,
    undefined,
    GetWebinarsWebinarIdRegistrantsHeaders,
    GetWebinarsWebinarIdRegistrantsQueryParams,
    GetWebinarsWebinarIdRegistrantsPathParams
  >({ url: '/webinars/{webinarId}/registrants', method: 'get', ...variables, signal });

export type PostWebinarsWebinarIdRegistrantsPathParams = {
  /**
   * (Required) The webinar's ID.
   */
  webinarId: string;
};

export type PostWebinarsWebinarIdRegistrantsQueryParams = {
  /**
   * A comma-separated list of webinar occurrence IDs. Get this value with the [Get a webinar](/docs/api/rest/reference/zoom-api/methods/#operation/webinar) API. Make sure the `registration_type` is 3 if updating multiple occurrences with this API.
   */
  occurrence_ids?: string;
};

export type PostWebinarsWebinarIdRegistrantsHeaders = {
  ['Content-Type']?: string;
  Accept?: string;
};

export type PostWebinarsWebinarIdRegistrantsError = Fetcher.ErrorWrapper<undefined>;

export type PostWebinarsWebinarIdRegistrantsVariables = {
  body?: Record<string, any>;
  headers?: PostWebinarsWebinarIdRegistrantsHeaders;
  pathParams: PostWebinarsWebinarIdRegistrantsPathParams;
  queryParams?: PostWebinarsWebinarIdRegistrantsQueryParams;
} & FetcherExtraProps;

/**
 * Create and submit a user's registration for a webinar. Zoom users with a [Webinar plan](https://zoom.us/webinar) have access to creating and managing webinars. Webinars allow hosts to broadcast a Zoom meeting to up to 10,000 attendees. Scheduling a [webinar with registration](https://support.zoom.us/hc/en-us/articles/204619915-Scheduling-a-Webinar-with-Registration) requires your registrants to complete a brief form before receiving the link to join the webinar.
 *
 * **Prerequisites:**
 * * A Pro or higher plan with the Webinar add-on.
 *
 * **Scopes:** `webinar:write`,`webinar:write:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
 */
export const postWebinarsWebinarIdRegistrants = (
  variables: PostWebinarsWebinarIdRegistrantsVariables,
  signal?: AbortSignal
) =>
  fetch<
    Record<string, any>,
    PostWebinarsWebinarIdRegistrantsError,
    Record<string, any>,
    PostWebinarsWebinarIdRegistrantsHeaders,
    PostWebinarsWebinarIdRegistrantsQueryParams,
    PostWebinarsWebinarIdRegistrantsPathParams
  >({ url: '/webinars/{webinarId}/registrants', method: 'post', ...variables, signal });

export type PostWebinarsWebinarIdSipDialingPathParams = {
  /**
   * (Required) The webinar's ID.
   *
   *  When storing this value in your database, store it as a long format integer and **not** an integer. Webinar IDs can exceed 10 digits.
   */
  webinarId: string;
};

export type PostWebinarsWebinarIdSipDialingHeaders = {
  ['Content-Type']?: string;
  Accept?: string;
};

export type PostWebinarsWebinarIdSipDialingError = Fetcher.ErrorWrapper<undefined>;

export type PostWebinarsWebinarIdSipDialingVariables = {
  body?: Record<string, any>;
  headers?: PostWebinarsWebinarIdSipDialingHeaders;
  pathParams: PostWebinarsWebinarIdSipDialingPathParams;
} & FetcherExtraProps;

/**
 * Get a webinar's SIP URI. The URI consists of the webinar ID, an optional user-supplied passcode, and participant identifier code. The API return data also includes additional fields to indicate whether the API caller has a valid Cloud Room Connector subscription, the participant identifier code from the URI, and the SIP URI validity period in seconds.
 *
 * **Scopes:** `webinar:write:admin:sip_dialing`,`webinar:write:sip_dialing`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
 */
export const postWebinarsWebinarIdSipDialing = (
  variables: PostWebinarsWebinarIdSipDialingVariables,
  signal?: AbortSignal
) =>
  fetch<
    Record<string, any>,
    PostWebinarsWebinarIdSipDialingError,
    Record<string, any>,
    PostWebinarsWebinarIdSipDialingHeaders,
    {},
    PostWebinarsWebinarIdSipDialingPathParams
  >({ url: '/webinars/{webinarId}/sip_dialing', method: 'post', ...variables, signal });

export type PutWebinarsWebinarIdStatusPathParams = {
  /**
   * (Required) The webinar's ID.
   */
  webinarId: string;
};

export type PutWebinarsWebinarIdStatusHeaders = {
  ['Content-Type']?: string;
  Accept?: string;
};

export type PutWebinarsWebinarIdStatusError = Fetcher.ErrorWrapper<undefined>;

export type PutWebinarsWebinarIdStatusVariables = {
  body?: Record<string, any>;
  headers?: PutWebinarsWebinarIdStatusHeaders;
  pathParams: PutWebinarsWebinarIdStatusPathParams;
} & FetcherExtraProps;

/**
 * Update a webinar's status. Use this API to end an ongoing webinar.
 *
 *
 * **Prerequisites:**
 *
 * * The account must hold a valid [Webinar plan](https://zoom.us/webinar).
 *
 * **Scopes:** `webinar:write`,`webinar:write:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
 */
export const putWebinarsWebinarIdStatus = (variables: PutWebinarsWebinarIdStatusVariables, signal?: AbortSignal) =>
  fetch<
    Record<string, any>,
    PutWebinarsWebinarIdStatusError,
    Record<string, any>,
    PutWebinarsWebinarIdStatusHeaders,
    {},
    PutWebinarsWebinarIdStatusPathParams
  >({ url: '/webinars/{webinarId}/status', method: 'put', ...variables, signal });

export type GetWebinarsWebinarIdSurveyPathParams = {
  /**
   * (Required) The webinar's ID.
   */
  webinarId: string;
};

export type GetWebinarsWebinarIdSurveyHeaders = {
  Accept?: string;
};

export type GetWebinarsWebinarIdSurveyError = Fetcher.ErrorWrapper<undefined>;

export type GetWebinarsWebinarIdSurveyVariables = {
  headers?: GetWebinarsWebinarIdSurveyHeaders;
  pathParams: GetWebinarsWebinarIdSurveyPathParams;
} & FetcherExtraProps;

/**
 * Return information about a [webinar survey](https://support.zoom.us/hc/en-us/articles/360048745651).
 *
 *  **Prerequisites:**
 * * A Pro or higher plan with the Webinar add-on.
 * * The [**Webinar Survey**](https://support.zoom.us/hc/en-us/articles/360061293191-Enabling-webinar-survey) feature enabled in the host's account.
 *
 * **Scopes:** `webinar:read:admin`,`webinar:read`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
 */
export const getWebinarsWebinarIdSurvey = (variables: GetWebinarsWebinarIdSurveyVariables, signal?: AbortSignal) =>
  fetch<
    Record<string, any>,
    GetWebinarsWebinarIdSurveyError,
    undefined,
    GetWebinarsWebinarIdSurveyHeaders,
    {},
    GetWebinarsWebinarIdSurveyPathParams
  >({ url: '/webinars/{webinarId}/survey', method: 'get', ...variables, signal });

export type DeleteWebinarsWebinarIdSurveyPathParams = {
  /**
   * (Required) The webinar's ID.
   */
  webinarId: string;
};

export type DeleteWebinarsWebinarIdSurveyError = Fetcher.ErrorWrapper<undefined>;

export type DeleteWebinarsWebinarIdSurveyVariables = {
  pathParams: DeleteWebinarsWebinarIdSurveyPathParams;
} & FetcherExtraProps;

/**
 * Use this API to delete a [webinar survey](https://support.zoom.us/hc/en-us/articles/360048745651).
 *
 *  **Prerequisites:**
 * * A Pro or higher plan with the Webinar Add-on.
 * * The [**Webinar Survey**](https://support.zoom.us/hc/en-us/articles/360061293191-Enabling-webinar-survey) feature enabled in the host's account.
 *
 * **Scopes:** `webinar:write`,`webinar:write:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
 */
export const deleteWebinarsWebinarIdSurvey = (
  variables: DeleteWebinarsWebinarIdSurveyVariables,
  signal?: AbortSignal
) =>
  fetch<undefined, DeleteWebinarsWebinarIdSurveyError, undefined, {}, {}, DeleteWebinarsWebinarIdSurveyPathParams>({
    url: '/webinars/{webinarId}/survey',
    method: 'delete',
    ...variables,
    signal
  });

export type PatchWebinarsWebinarIdSurveyPathParams = {
  /**
   * (Required) The webinar's ID.
   */
  webinarId: string;
};

export type PatchWebinarsWebinarIdSurveyHeaders = {
  ['Content-Type']?: string;
};

export type PatchWebinarsWebinarIdSurveyError = Fetcher.ErrorWrapper<undefined>;

export type PatchWebinarsWebinarIdSurveyVariables = {
  body?: Record<string, any>;
  headers?: PatchWebinarsWebinarIdSurveyHeaders;
  pathParams: PatchWebinarsWebinarIdSurveyPathParams;
} & FetcherExtraProps;

/**
 * Update a [webinar survey](https://support.zoom.us/hc/en-us/articles/360048745651).  **Prerequisites:** * A Pro or higher plan with the Webinar add-on. * Enable the [**Webinar Survey**](https://support.zoom.us/hc/en-us/articles/360061293191-Enabling-webinar-survey) feature in the host's account.
 *
 * **Scopes:** `webinar:write`,`webinar:write:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
 */
export const patchWebinarsWebinarIdSurvey = (variables: PatchWebinarsWebinarIdSurveyVariables, signal?: AbortSignal) =>
  fetch<
    undefined,
    PatchWebinarsWebinarIdSurveyError,
    Record<string, any>,
    PatchWebinarsWebinarIdSurveyHeaders,
    {},
    PatchWebinarsWebinarIdSurveyPathParams
  >({ url: '/webinars/{webinarId}/survey', method: 'patch', ...variables, signal });

export type GetWebinarsWebinarIdTokenPathParams = {
  /**
   * (Required) The webinar's ID.
   */
  webinarId: string;
};

export type GetWebinarsWebinarIdTokenQueryParams = {
  /**
   * The webinar token type:
   * * `closed_caption_token` &mdash; The third-party closed caption API token.
   *
   * This defaults to `closed_caption_token`.
   */
  type?: string;
};

export type GetWebinarsWebinarIdTokenHeaders = {
  Accept?: string;
};

export type GetWebinarsWebinarIdTokenError = Fetcher.ErrorWrapper<undefined>;

export type GetWebinarsWebinarIdTokenVariables = {
  headers?: GetWebinarsWebinarIdTokenHeaders;
  pathParams: GetWebinarsWebinarIdTokenPathParams;
  queryParams?: GetWebinarsWebinarIdTokenQueryParams;
} & FetcherExtraProps;

/**
 * Use this API to get a webinar's [closed caption token (caption URL)](https://support.zoom.us/hc/en-us/articles/115002212983-Using-a-third-party-closed-captioning-service). This token lets you use a third-party service to stream text to their closed captioning software to the Zoom webinar.
 *
 * **Prerequisites:**
 * * A Pro or higher plan with the Webinar add-on.
 * * The **Closed captioning** setting enabled in the Zoom web portal.
 * *
 * * The **Allow use of caption API Token to integrate with 3rd-party Closed Captioning services** setting enabled.
 *
 * **Scopes:** `webinar:read`,`webinar:read:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
 */
export const getWebinarsWebinarIdToken = (variables: GetWebinarsWebinarIdTokenVariables, signal?: AbortSignal) =>
  fetch<
    Record<string, any>,
    GetWebinarsWebinarIdTokenError,
    undefined,
    GetWebinarsWebinarIdTokenHeaders,
    GetWebinarsWebinarIdTokenQueryParams,
    GetWebinarsWebinarIdTokenPathParams
  >({ url: '/webinars/{webinarId}/token', method: 'get', ...variables, signal });

export type GetWebinarsWebinarIdTrackingSourcesPathParams = {
  /**
   * (Required) The webinar's ID.
   */
  webinarId: string;
};

export type GetWebinarsWebinarIdTrackingSourcesHeaders = {
  Accept?: string;
};

export type GetWebinarsWebinarIdTrackingSourcesError = Fetcher.ErrorWrapper<undefined>;

export type GetWebinarsWebinarIdTrackingSourcesVariables = {
  headers?: GetWebinarsWebinarIdTrackingSourcesHeaders;
  pathParams: GetWebinarsWebinarIdTrackingSourcesPathParams;
} & FetcherExtraProps;

/**
 * [Webinar Registration Tracking Sources](https://support.zoom.us/hc/en-us/articles/360000315683-Webinar-Registration-Source-Tracking) allow you to see where your registrants are coming from if you share the webinar registration page in multiple platforms. You can then use the source tracking to see the number of registrants generated from each platform.
 *   Use this API to list information on all the tracking sources of a Webinar.
 *
 * **Prerequisites**:
 *
 * * [Webinar license](https://zoom.us/webinar).
 * * Registration must be required for the Webinar.
 *
 *
 * **Scopes:** `webinar:read:admin`,`webinar:read`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
 */
export const getWebinarsWebinarIdTrackingSources = (
  variables: GetWebinarsWebinarIdTrackingSourcesVariables,
  signal?: AbortSignal
) =>
  fetch<
    Record<string, any>,
    GetWebinarsWebinarIdTrackingSourcesError,
    undefined,
    GetWebinarsWebinarIdTrackingSourcesHeaders,
    {},
    GetWebinarsWebinarIdTrackingSourcesPathParams
  >({ url: '/webinars/{webinarId}/tracking_sources', method: 'get', ...variables, signal });

export type GetWebinarsWebinarIdPathParams = {
  /**
   * (Required) The webinar's ID or universally unique ID (UUID).
   */
  webinarId: string;
};

export type GetWebinarsWebinarIdQueryParams = {
  /**
   * Unique identifier for an occurrence of a recurring webinar. [Recurring webinars](https://support.zoom.us/hc/en-us/articles/216354763-How-to-Schedule-A-Recurring-Webinar) can have a maximum of 50 occurrences. When you create a recurring Webinar using [**Create a webinar**](/docs/api-reference/zoom-api/methods#operation/webinarCreate) API, you can retrieve the Occurrence ID from the response of the API call.
   */
  occurrence_id?: string;
  /**
   * Set the value of this field to `true` if you would like to view Webinar details of all previous occurrences of a recurring Webinar.
   */
  show_previous_occurrences?: string;
};

export type GetWebinarsWebinarIdHeaders = {
  Accept?: string;
};

export type GetWebinarsWebinarIdError = Fetcher.ErrorWrapper<undefined>;

export type GetWebinarsWebinarIdVariables = {
  headers?: GetWebinarsWebinarIdHeaders;
  pathParams: GetWebinarsWebinarIdPathParams;
  queryParams?: GetWebinarsWebinarIdQueryParams;
} & FetcherExtraProps;

/**
 * Get details for a scheduled Zoom Webinar.
 *
 *
 *
 * **Prerequisites:**
 * * Pro or higher plan with a Webinar add-on.
 *
 * **Scopes:** `webinar:read:admin`,`webinar:read`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
 */
export const getWebinarsWebinarId = (variables: GetWebinarsWebinarIdVariables, signal?: AbortSignal) =>
  fetch<
    Record<string, any>,
    GetWebinarsWebinarIdError,
    undefined,
    GetWebinarsWebinarIdHeaders,
    GetWebinarsWebinarIdQueryParams,
    GetWebinarsWebinarIdPathParams
  >({ url: '/webinars/{webinarId}', method: 'get', ...variables, signal });

export type DeleteWebinarsWebinarIdPathParams = {
  /**
   * (Required) The webinar's ID.
   */
  webinarId: string;
};

export type DeleteWebinarsWebinarIdQueryParams = {
  /**
   * The meeting or webinar occurrence ID.
   */
  occurrence_id?: string;
  /**
   * `true` - Notify panelists and registrants about the webinar cancellation via email.
   *
   * `false` - Do not send any email notification to webinar registrants and panelists.
   *
   * The default value of this field is `false`.
   */
  cancel_webinar_reminder?: string;
};

export type DeleteWebinarsWebinarIdError = Fetcher.ErrorWrapper<undefined>;

export type DeleteWebinarsWebinarIdVariables = {
  pathParams: DeleteWebinarsWebinarIdPathParams;
  queryParams?: DeleteWebinarsWebinarIdQueryParams;
} & FetcherExtraProps;

/**
 * Delete a webinar.
 *
 *
 * **Prerequisites:**
 *
 * * Pro or higher plan with the webinar add-on.
 *
 * **Scopes:** `webinar:write`,`webinar:write:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
 */
export const deleteWebinarsWebinarId = (variables: DeleteWebinarsWebinarIdVariables, signal?: AbortSignal) =>
  fetch<
    undefined,
    DeleteWebinarsWebinarIdError,
    undefined,
    {},
    DeleteWebinarsWebinarIdQueryParams,
    DeleteWebinarsWebinarIdPathParams
  >({ url: '/webinars/{webinarId}', method: 'delete', ...variables, signal });

export type PatchWebinarsWebinarIdPathParams = {
  /**
   * (Required) The webinar's ID.
   */
  webinarId: string;
};

export type PatchWebinarsWebinarIdQueryParams = {
  /**
   * Webinar occurrence ID. Support change of agenda, start time, duration, and settings `host_video`, `panelist_video`, `hd_video, watermark`, `auto_recording`.
   */
  occurrence_id?: string;
};

export type PatchWebinarsWebinarIdHeaders = {
  ['Content-Type']?: string;
};

export type PatchWebinarsWebinarIdError = Fetcher.ErrorWrapper<undefined>;

export type PatchWebinarsWebinarIdVariables = {
  body?: Record<string, any>;
  headers?: PatchWebinarsWebinarIdHeaders;
  pathParams: PatchWebinarsWebinarIdPathParams;
  queryParams?: PatchWebinarsWebinarIdQueryParams;
} & FetcherExtraProps;

/**
 * Make updates to a scheduled webinar.
 *
 * **100 requests per day**. The rate limit is applied to the `userId` of the **webinar host** used to make the request.
 *
 * **Prerequisites**
 * * A Pro or higher plan with a webinar add-on.
 *
 * **Scopes:** `webinar:write`,`webinar:write:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
 */
export const patchWebinarsWebinarId = (variables: PatchWebinarsWebinarIdVariables, signal?: AbortSignal) =>
  fetch<
    undefined,
    PatchWebinarsWebinarIdError,
    Record<string, any>,
    PatchWebinarsWebinarIdHeaders,
    PatchWebinarsWebinarIdQueryParams,
    PatchWebinarsWebinarIdPathParams
  >({ url: '/webinars/{webinarId}', method: 'patch', ...variables, signal });

export type DeleteH323DevicesDeviceIdPathParams = {
  /**
   * (Required) The device ID.
   */
  deviceId: string;
};

export type DeleteH323DevicesDeviceIdError = Fetcher.ErrorWrapper<undefined>;

export type DeleteH323DevicesDeviceIdVariables = {
  pathParams: DeleteH323DevicesDeviceIdPathParams;
} & FetcherExtraProps;

/**
 * A H.323 or SIP device can make a video call to a [Room Connector](https://support.zoom.us/hc/en-us/articles/201363273-Getting-Started-With-H-323-SIP-Room-Connector) to join a Zoom cloud meeting. A Room Connector can also call out to a H.323 or SIP device to join a Zoom cloud meeting. Use this API to delete a H.323/SIP device from your Zoom account.
 *
 *
 *
 *
 * **Scopes:** `h323:write:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
 */
export const deleteH323DevicesDeviceId = (variables: DeleteH323DevicesDeviceIdVariables, signal?: AbortSignal) =>
  fetch<undefined, DeleteH323DevicesDeviceIdError, undefined, {}, {}, DeleteH323DevicesDeviceIdPathParams>({
    url: '/h323/devices/{deviceId}',
    method: 'delete',
    ...variables,
    signal
  });

export type PatchH323DevicesDeviceIdPathParams = {
  /**
   * (Required) The device ID.
   */
  deviceId: string;
};

export type PatchH323DevicesDeviceIdHeaders = {
  ['Content-Type']?: string;
};

export type PatchH323DevicesDeviceIdError = Fetcher.ErrorWrapper<undefined>;

export type PatchH323DevicesDeviceIdVariables = {
  body?: Record<string, any>;
  headers?: PatchH323DevicesDeviceIdHeaders;
  pathParams: PatchH323DevicesDeviceIdPathParams;
} & FetcherExtraProps;

/**
 * A H.323 or SIP device can make a video call to a [Room Connector](https://support.zoom.us/hc/en-us/articles/201363273-Getting-Started-With-H-323-SIP-Room-Connector) to join a Zoom cloud meeting. A Room Connector can also call out to a H.323 or SIP device to join a Zoom cloud meeting. Use this API to edit information of a H.323/SIP device from your Zoom account.
 *
 *
 *
 *
 * **Scopes:** `h323:write:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
 */
export const patchH323DevicesDeviceId = (variables: PatchH323DevicesDeviceIdVariables, signal?: AbortSignal) =>
  fetch<
    undefined,
    PatchH323DevicesDeviceIdError,
    Record<string, any>,
    PatchH323DevicesDeviceIdHeaders,
    {},
    PatchH323DevicesDeviceIdPathParams
  >({ url: '/h323/devices/{deviceId}', method: 'patch', ...variables, signal });

export type GetH323DevicesQueryParams = {
  /**
   * The number of records returned within a single API call.
   */
  page_size?: number;
  /**
   * **Deprecated.** We will no longer support this field in a future release. Instead, use the `next_page_token` for pagination.
   */
  page_number?: number;
  /**
   * Use the next page token to paginate through large result sets. A next page token is returned whenever the set of available results exceeds the current page size. This token's expiration period is 15 minutes.
   */
  next_page_token?: string;
};

export type GetH323DevicesHeaders = {
  Accept?: string;
};

export type GetH323DevicesError = Fetcher.ErrorWrapper<undefined>;

export type GetH323DevicesVariables = {
  headers?: GetH323DevicesHeaders;
  queryParams?: GetH323DevicesQueryParams;
} & FetcherExtraProps;

/**
 * A H.323 or SIP device can make a video call to a [Room Connector](https://support.zoom.us/hc/en-us/articles/201363273-Getting-Started-With-H-323-SIP-Room-Connector) to join a Zoom cloud meeting. A Room Connector can also call out to a H.323 or SIP device to join a Zoom cloud meeting. Use this API to list all H.323/SIP Devices on a Zoom account.
 *
 *
 *
 *
 * **Scopes:** `h323:read:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`
 */
export const getH323Devices = (variables: GetH323DevicesVariables, signal?: AbortSignal) =>
  fetch<Record<string, any>, GetH323DevicesError, undefined, GetH323DevicesHeaders, GetH323DevicesQueryParams, {}>({
    url: '/h323/devices',
    method: 'get',
    ...variables,
    signal
  });

export type PostH323DevicesHeaders = {
  ['Content-Type']?: string;
  Accept?: string;
};

export type PostH323DevicesError = Fetcher.ErrorWrapper<undefined>;

export type PostH323DevicesVariables = {
  body?: Record<string, any>;
  headers?: PostH323DevicesHeaders;
} & FetcherExtraProps;

/**
 * A H.323 or SIP device can make a video call to a [Room Connector](https://support.zoom.us/hc/en-us/articles/201363273-Getting-Started-With-H-323-SIP-Room-Connector) to join a Zoom cloud meeting. A Room Connector can also call out to a H.323 or SIP device to join a Zoom cloud meeting. Use this API to add a H.323/SIP device to your Zoom account
 *
 *
 *
 *
 * **Scopes:** `h323:write:admin`
 *
 * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
 */
export const postH323Devices = (variables: PostH323DevicesVariables, signal?: AbortSignal) =>
  fetch<Record<string, any>, PostH323DevicesError, Record<string, any>, PostH323DevicesHeaders, {}, {}>({
    url: '/h323/devices',
    method: 'post',
    ...variables,
    signal
  });

export const operationsByTag = {
  archiveFilesStatistics: { getArchiveFilesStatistics },
  archiveFilesFileId: { patchArchiveFilesFileId },
  archiveFiles: { getArchiveFiles },
  pastMeetingsMeetingUUIDArchiveFiles: {
    getPastMeetingsMeetingUUIDArchiveFiles,
    deletePastMeetingsMeetingUUIDArchiveFiles
  },
  pastMeetingsMeetingIdInstances: { getPastMeetingsMeetingIdInstances },
  pastMeetingsMeetingIdParticipants: { getPastMeetingsMeetingIdParticipants },
  pastMeetingsMeetingIdPolls: { getPastMeetingsMeetingIdPolls },
  pastMeetingsMeetingIdQa: { getPastMeetingsMeetingIdQa },
  pastMeetingsMeetingId: { getPastMeetingsMeetingId },
  devicesGroups: { getDevicesGroups },
  devicesZpaAssignment: { postDevicesZpaAssignment },
  devicesZpaUpgrade: { postDevicesZpaUpgrade },
  devicesZpaVendorsVendorMacAddressesMacAddress: { deleteDevicesZpaVendorsVendorMacAddressesMacAddress },
  devicesZpaZdmGroupsZdmGroupIdVersions: { getDevicesZpaZdmGroupsZdmGroupIdVersions },
  devicesDeviceIdAssignment: { patchDevicesDeviceIdAssignment },
  devicesDeviceId: { getDevicesDeviceId, deleteDevicesDeviceId, patchDevicesDeviceId },
  devices: { getDevices, postDevices },
  usersUserIdRecordings: { getUsersUserIdRecordings },
  usersUserIdMeetingTemplates: { getUsersUserIdMeetingTemplates, postUsersUserIdMeetingTemplates },
  usersUserIdMeetings: { getUsersUserIdMeetings, postUsersUserIdMeetings },
  usersUserIdUpcomingMeetings: { getUsersUserIdUpcomingMeetings },
  usersUserIdPac: { getUsersUserIdPac },
  usersUserIdTspSettings: { patchUsersUserIdTspSettings },
  usersUserIdTspTspId: { getUsersUserIdTspTspId, deleteUsersUserIdTspTspId, patchUsersUserIdTspTspId },
  usersUserIdTsp: { getUsersUserIdTsp, postUsersUserIdTsp },
  usersUserIdWebinarTemplates: { getUsersUserIdWebinarTemplates, postUsersUserIdWebinarTemplates },
  usersUserIdWebinars: { getUsersUserIdWebinars, postUsersUserIdWebinars },
  meetingsMeetingIdRecordingsAnalyticsDetails: { getMeetingsMeetingIdRecordingsAnalyticsDetails },
  meetingsMeetingIdRecordingsAnalyticsSummary: { getMeetingsMeetingIdRecordingsAnalyticsSummary },
  meetingsMeetingIdRecordingsRegistrantsQuestions: {
    getMeetingsMeetingIdRecordingsRegistrantsQuestions,
    patchMeetingsMeetingIdRecordingsRegistrantsQuestions
  },
  meetingsMeetingIdRecordingsRegistrantsStatus: { putMeetingsMeetingIdRecordingsRegistrantsStatus },
  meetingsMeetingIdRecordingsRegistrants: {
    getMeetingsMeetingIdRecordingsRegistrants,
    postMeetingsMeetingIdRecordingsRegistrants
  },
  meetingsMeetingIdRecordingsSettings: {
    getMeetingsMeetingIdRecordingsSettings,
    patchMeetingsMeetingIdRecordingsSettings
  },
  meetingsMeetingIdRecordingsRecordingIdStatus: { putMeetingsMeetingIdRecordingsRecordingIdStatus },
  meetingsMeetingIdRecordingsRecordingId: { deleteMeetingsMeetingIdRecordingsRecordingId },
  meetingsMeetingIdRecordings: { getMeetingsMeetingIdRecordings, deleteMeetingsMeetingIdRecordings },
  meetingsMeetingIdBatchPolls: { postMeetingsMeetingIdBatchPolls },
  meetingsMeetingIdBatchRegistrants: { postMeetingsMeetingIdBatchRegistrants },
  meetingsMeetingIdInvitation: { getMeetingsMeetingIdInvitation },
  meetingsMeetingIdInviteLinks: { postMeetingsMeetingIdInviteLinks },
  meetingsMeetingIdJointokenLiveStreaming: { getMeetingsMeetingIdJointokenLiveStreaming },
  meetingsMeetingIdJointokenLocalArchiving: { getMeetingsMeetingIdJointokenLocalArchiving },
  meetingsMeetingIdJointokenLocalRecording: { getMeetingsMeetingIdJointokenLocalRecording },
  meetingsMeetingIdLivestreamStatus: { patchMeetingsMeetingIdLivestreamStatus },
  meetingsMeetingIdLivestream: { getMeetingsMeetingIdLivestream, patchMeetingsMeetingIdLivestream },
  meetingsMeetingIdMeetingSummary: { getMeetingsMeetingIdMeetingSummary },
  meetingsMeetingIdPollsPollId: {
    getMeetingsMeetingIdPollsPollId,
    putMeetingsMeetingIdPollsPollId,
    deleteMeetingsMeetingIdPollsPollId
  },
  meetingsMeetingIdPolls: { getMeetingsMeetingIdPolls, postMeetingsMeetingIdPolls },
  meetingsMeetingIdRegistrantsQuestions: {
    getMeetingsMeetingIdRegistrantsQuestions,
    patchMeetingsMeetingIdRegistrantsQuestions
  },
  meetingsMeetingIdRegistrantsStatus: { putMeetingsMeetingIdRegistrantsStatus },
  meetingsMeetingIdRegistrantsRegistrantId: {
    getMeetingsMeetingIdRegistrantsRegistrantId,
    deleteMeetingsMeetingIdRegistrantsRegistrantId
  },
  meetingsMeetingIdRegistrants: { getMeetingsMeetingIdRegistrants, postMeetingsMeetingIdRegistrants },
  meetingsMeetingIdSipDialing: { postMeetingsMeetingIdSipDialing },
  meetingsMeetingIdStatus: { putMeetingsMeetingIdStatus },
  meetingsMeetingIdSurvey: { getMeetingsMeetingIdSurvey, deleteMeetingsMeetingIdSurvey, patchMeetingsMeetingIdSurvey },
  meetingsMeetingIdToken: { getMeetingsMeetingIdToken },
  meetingsMeetingId: { getMeetingsMeetingId, deleteMeetingsMeetingId, patchMeetingsMeetingId },
  meetingsMeetingUUIDRecordingsStatus: { putMeetingsMeetingUUIDRecordingsStatus },
  meetingsMeetingSummaries: { getMeetingsMeetingSummaries },
  liveMeetingsMeetingIdChatMessagesMessageId: {
    deleteLiveMeetingsMeetingIdChatMessagesMessageId,
    patchLiveMeetingsMeetingIdChatMessagesMessageId
  },
  liveMeetingsMeetingIdEvents: { patchLiveMeetingsMeetingIdEvents },
  reportActivities: { getReportActivities },
  reportBillingInvoices: { getReportBillingInvoices },
  reportBilling: { getReportBilling },
  reportCloudRecording: { getReportCloudRecording },
  reportDaily: { getReportDaily },
  reportMeetingsMeetingIdParticipants: { getReportMeetingsMeetingIdParticipants },
  reportMeetingsMeetingIdPolls: { getReportMeetingsMeetingIdPolls },
  reportMeetingsMeetingIdQa: { getReportMeetingsMeetingIdQa },
  reportMeetingsMeetingIdSurvey: { getReportMeetingsMeetingIdSurvey },
  reportMeetingsMeetingId: { getReportMeetingsMeetingId },
  reportOperationlogs: { getReportOperationlogs },
  reportTelephone: { getReportTelephone },
  reportUpcomingEvents: { getReportUpcomingEvents },
  reportUsersUserIdMeetings: { getReportUsersUserIdMeetings },
  reportUsers: { getReportUsers },
  reportWebinarsWebinarIdParticipants: { getReportWebinarsWebinarIdParticipants },
  reportWebinarsWebinarIdPolls: { getReportWebinarsWebinarIdPolls },
  reportWebinarsWebinarIdQa: { getReportWebinarsWebinarIdQa },
  reportWebinarsWebinarIdSurvey: { getReportWebinarsWebinarIdSurvey },
  reportWebinarsWebinarId: { getReportWebinarsWebinarId },
  sipPhonesPhoneId: { deleteSipPhonesPhoneId, patchSipPhonesPhoneId },
  sipPhones: { getSipPhones, postSipPhones },
  tsp: { getTsp, patchTsp },
  trackingFieldsFieldId: { getTrackingFieldsFieldId, deleteTrackingFieldsFieldId, patchTrackingFieldsFieldId },
  trackingFields: { getTrackingFields, postTrackingFields },
  liveWebinarsWebinarIdChatMessagesMessageId: { deleteLiveWebinarsWebinarIdChatMessagesMessageId },
  pastWebinarsWebinarIdAbsentees: { getPastWebinarsWebinarIdAbsentees },
  pastWebinarsWebinarIdInstances: { getPastWebinarsWebinarIdInstances },
  pastWebinarsWebinarIdParticipants: { getPastWebinarsWebinarIdParticipants },
  pastWebinarsWebinarIdPolls: { getPastWebinarsWebinarIdPolls },
  pastWebinarsWebinarIdQa: { getPastWebinarsWebinarIdQa },
  webinarsWebinarIdBatchRegistrants: { postWebinarsWebinarIdBatchRegistrants },
  webinarsWebinarIdBrandingNameTagsNameTagId: { patchWebinarsWebinarIdBrandingNameTagsNameTagId },
  webinarsWebinarIdBrandingNameTags: { postWebinarsWebinarIdBrandingNameTags, deleteWebinarsWebinarIdBrandingNameTags },
  webinarsWebinarIdBrandingVirtualBackgrounds: {
    postWebinarsWebinarIdBrandingVirtualBackgrounds,
    deleteWebinarsWebinarIdBrandingVirtualBackgrounds,
    patchWebinarsWebinarIdBrandingVirtualBackgrounds
  },
  webinarsWebinarIdBrandingWallpaper: {
    postWebinarsWebinarIdBrandingWallpaper,
    deleteWebinarsWebinarIdBrandingWallpaper
  },
  webinarsWebinarIdBranding: { getWebinarsWebinarIdBranding },
  webinarsWebinarIdInviteLinks: { postWebinarsWebinarIdInviteLinks },
  webinarsWebinarIdJointokenLiveStreaming: { getWebinarsWebinarIdJointokenLiveStreaming },
  webinarsWebinarIdJointokenLocalArchiving: { getWebinarsWebinarIdJointokenLocalArchiving },
  webinarsWebinarIdJointokenLocalRecording: { getWebinarsWebinarIdJointokenLocalRecording },
  webinarsWebinarIdLivestreamStatus: { patchWebinarsWebinarIdLivestreamStatus },
  webinarsWebinarIdLivestream: { getWebinarsWebinarIdLivestream, patchWebinarsWebinarIdLivestream },
  webinarsWebinarIdPanelistsPanelistId: { deleteWebinarsWebinarIdPanelistsPanelistId },
  webinarsWebinarIdPanelists: {
    getWebinarsWebinarIdPanelists,
    postWebinarsWebinarIdPanelists,
    deleteWebinarsWebinarIdPanelists
  },
  webinarsWebinarIdPollsPollId: {
    getWebinarsWebinarIdPollsPollId,
    putWebinarsWebinarIdPollsPollId,
    deleteWebinarsWebinarIdPollsPollId
  },
  webinarsWebinarIdPolls: { getWebinarsWebinarIdPolls, postWebinarsWebinarIdPolls },
  webinarsWebinarIdRegistrantsQuestions: {
    getWebinarsWebinarIdRegistrantsQuestions,
    patchWebinarsWebinarIdRegistrantsQuestions
  },
  webinarsWebinarIdRegistrantsStatus: { putWebinarsWebinarIdRegistrantsStatus },
  webinarsWebinarIdRegistrantsRegistrantId: {
    getWebinarsWebinarIdRegistrantsRegistrantId,
    deleteWebinarsWebinarIdRegistrantsRegistrantId
  },
  webinarsWebinarIdRegistrants: { getWebinarsWebinarIdRegistrants, postWebinarsWebinarIdRegistrants },
  webinarsWebinarIdSipDialing: { postWebinarsWebinarIdSipDialing },
  webinarsWebinarIdStatus: { putWebinarsWebinarIdStatus },
  webinarsWebinarIdSurvey: { getWebinarsWebinarIdSurvey, deleteWebinarsWebinarIdSurvey, patchWebinarsWebinarIdSurvey },
  webinarsWebinarIdToken: { getWebinarsWebinarIdToken },
  webinarsWebinarIdTrackingSources: { getWebinarsWebinarIdTrackingSources },
  webinarsWebinarId: { getWebinarsWebinarId, deleteWebinarsWebinarId, patchWebinarsWebinarId },
  h323DevicesDeviceId: { deleteH323DevicesDeviceId, patchH323DevicesDeviceId },
  h323Devices: { getH323Devices, postH323Devices }
};
