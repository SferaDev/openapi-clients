/**
 * Generated by @openapi-codegen
 *
 * @version 3.10.2
 */
import type * as Fetcher from "./fetcher";
import { fetch, FetcherExtraProps } from "./fetcher";
import type * as Schemas from "./schemas";
import type * as RequestBodies from "./requestBodies";

export type GetAccountsResourceError = Fetcher.ErrorWrapper<undefined>;

export type GetAccountsResourceVariables = FetcherExtraProps;

export const getAccountsResource = (
  variables: GetAccountsResourceVariables,
  signal?: AbortSignal,
) =>
  fetch<Schemas.MyAccount, GetAccountsResourceError, undefined, {}, {}, {}>({
    url: "/account",
    method: "get",
    ...variables,
    signal,
  });

export type PostAccountsResourceQueryParams = {
  /**
   * If false existing API tokens are not deleted if the password is changed
   *
   * @default true
   */
  deleteApiTokens?: boolean;
};

export type PostAccountsResourceError = Fetcher.ErrorWrapper<undefined>;

export type PostAccountsResourceVariables = {
  body: Schemas.AccountUpdate;
  queryParams?: PostAccountsResourceQueryParams;
} & FetcherExtraProps;

export const postAccountsResource = (
  variables: PostAccountsResourceVariables,
  signal?: AbortSignal,
) =>
  fetch<
    undefined,
    PostAccountsResourceError,
    Schemas.AccountUpdate,
    {},
    PostAccountsResourceQueryParams,
    {}
  >({ url: "/account", method: "post", ...variables, signal });

export type DeleteAccountsResourceError = Fetcher.ErrorWrapper<undefined>;

export type DeleteAccountsResourceVariables = FetcherExtraProps;

export const deleteAccountsResource = (
  variables: DeleteAccountsResourceVariables,
  signal?: AbortSignal,
) =>
  fetch<undefined, DeleteAccountsResourceError, undefined, {}, {}, {}>({
    url: "/account",
    method: "delete",
    ...variables,
    signal,
  });

export type PostAccountEmailChangeResourceError =
  Fetcher.ErrorWrapper<undefined>;

export type PostAccountEmailChangeResourceVariables = {
  body: Schemas.AccountEmailChange;
} & FetcherExtraProps;

export const postAccountEmailChangeResource = (
  variables: PostAccountEmailChangeResourceVariables,
  signal?: AbortSignal,
) =>
  fetch<
    undefined,
    PostAccountEmailChangeResourceError,
    Schemas.AccountEmailChange,
    {},
    {},
    {}
  >({ url: "/account/email/change", method: "post", ...variables, signal });

export type PostAccountEmailVerifyResourceError =
  Fetcher.ErrorWrapper<undefined>;

export type PostAccountEmailVerifyResourceVariables = FetcherExtraProps;

export const postAccountEmailVerifyResource = (
  variables: PostAccountEmailVerifyResourceVariables,
  signal?: AbortSignal,
) =>
  fetch<undefined, PostAccountEmailVerifyResourceError, undefined, {}, {}, {}>({
    url: "/account/email/verify",
    method: "post",
    ...variables,
    signal,
  });

export type GetAccountIntegrationsResourceError =
  Fetcher.ErrorWrapper<undefined>;

export type GetAccountIntegrationsResourceResponse =
  Schemas.AccountIntegration[];

export type GetAccountIntegrationsResourceVariables = FetcherExtraProps;

export const getAccountIntegrationsResource = (
  variables: GetAccountIntegrationsResourceVariables,
  signal?: AbortSignal,
) =>
  fetch<
    GetAccountIntegrationsResourceResponse,
    GetAccountIntegrationsResourceError,
    undefined,
    {},
    {},
    {}
  >({ url: "/account/integration", method: "get", ...variables, signal });

export type DeleteAccountIntegrationsResourceQueryParams = {
  /**
   * The api key id to delete (this also removes all tokens if no specific tokenId is given)
   */
  apiKeyId?: number;
  /**
   * The token id if a specific token has to be deleted but not the full api key
   */
  tokenId?: number;
};

export type DeleteAccountIntegrationsResourceError =
  Fetcher.ErrorWrapper<undefined>;

export type DeleteAccountIntegrationsResourceVariables = {
  queryParams?: DeleteAccountIntegrationsResourceQueryParams;
} & FetcherExtraProps;

export const deleteAccountIntegrationsResource = (
  variables: DeleteAccountIntegrationsResourceVariables,
  signal?: AbortSignal,
) =>
  fetch<
    undefined,
    DeleteAccountIntegrationsResourceError,
    undefined,
    {},
    DeleteAccountIntegrationsResourceQueryParams,
    {}
  >({ url: "/account/integration", method: "delete", ...variables, signal });

export type PostAccountOtpResourceError = Fetcher.ErrorWrapper<undefined>;

export type PostAccountOtpResourceVariables = {
  body: Schemas.AccountOtpEnable;
} & FetcherExtraProps;

export const postAccountOtpResource = (
  variables: PostAccountOtpResourceVariables,
  signal?: AbortSignal,
) =>
  fetch<
    undefined,
    PostAccountOtpResourceError,
    Schemas.AccountOtpEnable,
    {},
    {},
    {}
  >({ url: "/account/otp", method: "post", ...variables, signal });

export type PutAccountOtpResourceError = Fetcher.ErrorWrapper<undefined>;

export type PutAccountOtpResourceVariables = FetcherExtraProps;

export const putAccountOtpResource = (
  variables: PutAccountOtpResourceVariables,
  signal?: AbortSignal,
) =>
  fetch<string, PutAccountOtpResourceError, undefined, {}, {}, {}>({
    url: "/account/otp",
    method: "put",
    ...variables,
    signal,
  });

export type DeleteAccountOtpResourceError = Fetcher.ErrorWrapper<undefined>;

export type DeleteAccountOtpResourceVariables = FetcherExtraProps;

export const deleteAccountOtpResource = (
  variables: DeleteAccountOtpResourceVariables,
  signal?: AbortSignal,
) =>
  fetch<undefined, DeleteAccountOtpResourceError, undefined, {}, {}, {}>({
    url: "/account/otp",
    method: "delete",
    ...variables,
    signal,
  });

export type PostAccountPasswordResetResourceError =
  Fetcher.ErrorWrapper<undefined>;

export type PostAccountPasswordResetResourceVariables = {
  body: Schemas.AccountPasswordReset;
} & FetcherExtraProps;

export const postAccountPasswordResetResource = (
  variables: PostAccountPasswordResetResourceVariables,
  signal?: AbortSignal,
) =>
  fetch<
    undefined,
    PostAccountPasswordResetResourceError,
    Schemas.AccountPasswordReset,
    {},
    {},
    {}
  >({ url: "/account/password/reset", method: "post", ...variables, signal });

export type GetAccountSettingResourceError = Fetcher.ErrorWrapper<undefined>;

export type GetAccountSettingResourceVariables = FetcherExtraProps;

export const getAccountSettingResource = (
  variables: GetAccountSettingResourceVariables,
  signal?: AbortSignal,
) =>
  fetch<
    Schemas.AccountSetting,
    GetAccountSettingResourceError,
    undefined,
    {},
    {},
    {}
  >({ url: "/account/setting", method: "get", ...variables, signal });

export type PutAccountSettingResourceError = Fetcher.ErrorWrapper<undefined>;

export type PutAccountSettingResourceVariables = {
  body?: Schemas.AccountSetting;
} & FetcherExtraProps;

export const putAccountSettingResource = (
  variables: PutAccountSettingResourceVariables,
  signal?: AbortSignal,
) =>
  fetch<
    Schemas.AccountSetting,
    PutAccountSettingResourceError,
    Schemas.AccountSetting,
    {},
    {},
    {}
  >({ url: "/account/setting", method: "put", ...variables, signal });

export type DeleteAccountSettingResourceError = Fetcher.ErrorWrapper<undefined>;

export type DeleteAccountSettingResourceVariables = FetcherExtraProps;

export const deleteAccountSettingResource = (
  variables: DeleteAccountSettingResourceVariables,
  signal?: AbortSignal,
) =>
  fetch<undefined, DeleteAccountSettingResourceError, undefined, {}, {}, {}>({
    url: "/account/setting",
    method: "delete",
    ...variables,
    signal,
  });

export type GetAccountSubsResourceQueryParams = {
  /**
   * The optional email (regex)
   */
  email?: string;
};

export type GetAccountSubsResourceError = Fetcher.ErrorWrapper<undefined>;

export type GetAccountSubsResourceVariables = {
  queryParams?: GetAccountSubsResourceQueryParams;
} & FetcherExtraProps;

export const getAccountSubsResource = (
  variables: GetAccountSubsResourceVariables,
  signal?: AbortSignal,
) =>
  fetch<
    Schemas.Account,
    GetAccountSubsResourceError,
    undefined,
    {},
    GetAccountSubsResourceQueryParams,
    {}
  >({ url: "/account/sub", method: "get", ...variables, signal });

export type PutAccountSubsResourceError = Fetcher.ErrorWrapper<undefined>;

export type PutAccountSubsResourceVariables = {
  body: Schemas.AccountSubCreate;
} & FetcherExtraProps;

export const putAccountSubsResource = (
  variables: PutAccountSubsResourceVariables,
  signal?: AbortSignal,
) =>
  fetch<
    Schemas.MyAccount,
    PutAccountSubsResourceError,
    Schemas.AccountSubCreate,
    {},
    {},
    {}
  >({ url: "/account/sub", method: "put", ...variables, signal });

export type GetAccountSubResourcePathParams = {
  /**
   * The account id
   */
  accountId: number;
};

export type GetAccountSubResourceError = Fetcher.ErrorWrapper<undefined>;

export type GetAccountSubResourceVariables = {
  pathParams: GetAccountSubResourcePathParams;
} & FetcherExtraProps;

export const getAccountSubResource = (
  variables: GetAccountSubResourceVariables,
  signal?: AbortSignal,
) =>
  fetch<
    Schemas.Account,
    GetAccountSubResourceError,
    undefined,
    {},
    {},
    GetAccountSubResourcePathParams
  >({ url: "/account/sub/{accountId}", method: "get", ...variables, signal });

export type PostAccountSubResourcePathParams = {
  /**
   * The account id
   */
  accountId: number;
};

export type PostAccountSubResourceError = Fetcher.ErrorWrapper<undefined>;

export type PostAccountSubResourceVariables = {
  body: Schemas.AccountSubUpdate;
  pathParams: PostAccountSubResourcePathParams;
} & FetcherExtraProps;

export const postAccountSubResource = (
  variables: PostAccountSubResourceVariables,
  signal?: AbortSignal,
) =>
  fetch<
    undefined,
    PostAccountSubResourceError,
    Schemas.AccountSubUpdate,
    {},
    {},
    PostAccountSubResourcePathParams
  >({ url: "/account/sub/{accountId}", method: "post", ...variables, signal });

export type DeleteAccountSubResourcePathParams = {
  /**
   * The account id
   */
  accountId: number;
};

export type DeleteAccountSubResourceError = Fetcher.ErrorWrapper<undefined>;

export type DeleteAccountSubResourceVariables = {
  pathParams: DeleteAccountSubResourcePathParams;
} & FetcherExtraProps;

export const deleteAccountSubResource = (
  variables: DeleteAccountSubResourceVariables,
  signal?: AbortSignal,
) =>
  fetch<
    undefined,
    DeleteAccountSubResourceError,
    undefined,
    {},
    {},
    DeleteAccountSubResourcePathParams
  >({
    url: "/account/sub/{accountId}",
    method: "delete",
    ...variables,
    signal,
  });

export type GetAccountUsersResourceQueryParams = {
  /**
   * Filter for email
   */
  email?: string;
  /**
   * The offset of the first user in the collection to return
   */
  offset?: void;
  /**
   * The maximum number of users to return. If the value exceeds the maximum, then the maximum value will be used.
   */
  limit?: void;
};

export type GetAccountUsersResourceError = Fetcher.ErrorWrapper<undefined>;

export type GetAccountUsersResourceResponse = Schemas.AccountUser[];

export type GetAccountUsersResourceVariables = {
  queryParams?: GetAccountUsersResourceQueryParams;
} & FetcherExtraProps;

export const getAccountUsersResource = (
  variables: GetAccountUsersResourceVariables,
  signal?: AbortSignal,
) =>
  fetch<
    GetAccountUsersResourceResponse,
    GetAccountUsersResourceError,
    undefined,
    {},
    GetAccountUsersResourceQueryParams,
    {}
  >({ url: "/account/user", method: "get", ...variables, signal });

export type PutAccountUsersResourceError = Fetcher.ErrorWrapper<undefined>;

export type PutAccountUsersResourceVariables = {
  body: Schemas.AccountUserCreate;
} & FetcherExtraProps;

export const putAccountUsersResource = (
  variables: PutAccountUsersResourceVariables,
  signal?: AbortSignal,
) =>
  fetch<
    Schemas.AccountUser,
    PutAccountUsersResourceError,
    Schemas.AccountUserCreate,
    {},
    {},
    {}
  >({ url: "/account/user", method: "put", ...variables, signal });

export type GetAccountUserResourcePathParams = {
  /**
   * The account user id
   */
  accountUserId: number;
};

export type GetAccountUserResourceError = Fetcher.ErrorWrapper<undefined>;

export type GetAccountUserResourceVariables = {
  pathParams: GetAccountUserResourcePathParams;
} & FetcherExtraProps;

export const getAccountUserResource = (
  variables: GetAccountUserResourceVariables,
  signal?: AbortSignal,
) =>
  fetch<
    Schemas.AccountUser,
    GetAccountUserResourceError,
    undefined,
    {},
    {},
    GetAccountUserResourcePathParams
  >({
    url: "/account/user/{accountUserId}",
    method: "get",
    ...variables,
    signal,
  });

export type PostAccountUserResourcePathParams = {
  /**
   * The account user id
   */
  accountUserId: number;
};

export type PostAccountUserResourceError = Fetcher.ErrorWrapper<undefined>;

export type PostAccountUserResourceVariables = {
  body?: Schemas.AccountUserUpdate;
  pathParams: PostAccountUserResourcePathParams;
} & FetcherExtraProps;

export const postAccountUserResource = (
  variables: PostAccountUserResourceVariables,
  signal?: AbortSignal,
) =>
  fetch<
    Schemas.AccountUser,
    PostAccountUserResourceError,
    Schemas.AccountUserUpdate,
    {},
    {},
    PostAccountUserResourcePathParams
  >({
    url: "/account/user/{accountUserId}",
    method: "post",
    ...variables,
    signal,
  });

export type DeleteAccountUserResourcePathParams = {
  /**
   * The account user id
   */
  accountUserId: number;
};

export type DeleteAccountUserResourceError = Fetcher.ErrorWrapper<undefined>;

export type DeleteAccountUserResourceVariables = {
  pathParams: DeleteAccountUserResourcePathParams;
} & FetcherExtraProps;

export const deleteAccountUserResource = (
  variables: DeleteAccountUserResourceVariables,
  signal?: AbortSignal,
) =>
  fetch<
    undefined,
    DeleteAccountUserResourceError,
    undefined,
    {},
    {},
    DeleteAccountUserResourcePathParams
  >({
    url: "/account/user/{accountUserId}",
    method: "delete",
    ...variables,
    signal,
  });

export type GetAddressesResourceError = Fetcher.ErrorWrapper<undefined>;

export type GetAddressesResourceResponse = Schemas.Address[];

export type GetAddressesResourceVariables = FetcherExtraProps;

export const getAddressesResource = (
  variables: GetAddressesResourceVariables,
  signal?: AbortSignal,
) =>
  fetch<
    GetAddressesResourceResponse,
    GetAddressesResourceError,
    undefined,
    {},
    {},
    {}
  >({ url: "/address", method: "get", ...variables, signal });

export type PutAddressesResourceError = Fetcher.ErrorWrapper<undefined>;

export type PutAddressesResourceVariables = {
  body: Schemas.AddressCreate;
} & FetcherExtraProps;

export const putAddressesResource = (
  variables: PutAddressesResourceVariables,
  signal?: AbortSignal,
) =>
  fetch<
    Schemas.Address,
    PutAddressesResourceError,
    Schemas.AddressCreate,
    {},
    {},
    {}
  >({ url: "/address", method: "put", ...variables, signal });

export type GetAddressTokenResourcePathParams = {
  /**
   * The token id
   */
  id: string;
};

export type GetAddressTokenResourceError = Fetcher.ErrorWrapper<undefined>;

export type GetAddressTokenResourceVariables = {
  pathParams: GetAddressTokenResourcePathParams;
} & FetcherExtraProps;

export const getAddressTokenResource = (
  variables: GetAddressTokenResourceVariables,
  signal?: AbortSignal,
) =>
  fetch<
    Schemas.AddressTokenInfo,
    GetAddressTokenResourceError,
    undefined,
    {},
    {},
    GetAddressTokenResourcePathParams
  >({ url: "/address/token/{id}", method: "get", ...variables, signal });

export type GetAddressTokenRedeemResourcePathParams = {
  /**
   * The token id
   */
  id: string;
};

export type GetAddressTokenRedeemResourceError =
  Fetcher.ErrorWrapper<undefined>;

export type GetAddressTokenRedeemResourceVariables = {
  pathParams: GetAddressTokenRedeemResourcePathParams;
} & FetcherExtraProps;

export const getAddressTokenRedeemResource = (
  variables: GetAddressTokenRedeemResourceVariables,
  signal?: AbortSignal,
) =>
  fetch<
    Schemas.AddressToken,
    GetAddressTokenRedeemResourceError,
    undefined,
    {},
    {},
    GetAddressTokenRedeemResourcePathParams
  >({ url: "/address/token/{id}/redeem", method: "get", ...variables, signal });

export type PostAddressTokenRedeemResourcePathParams = {
  /**
   * The token id
   */
  id: string;
};

export type PostAddressTokenRedeemResourceQueryParams = {
  /**
   * If false no email will be send
   */
  email?: boolean;
};

export type PostAddressTokenRedeemResourceError =
  Fetcher.ErrorWrapper<undefined>;

export type PostAddressTokenRedeemResourceVariables = {
  pathParams: PostAddressTokenRedeemResourcePathParams;
  queryParams?: PostAddressTokenRedeemResourceQueryParams;
} & FetcherExtraProps;

export const postAddressTokenRedeemResource = (
  variables: PostAddressTokenRedeemResourceVariables,
  signal?: AbortSignal,
) =>
  fetch<
    undefined,
    PostAddressTokenRedeemResourceError,
    undefined,
    {},
    PostAddressTokenRedeemResourceQueryParams,
    PostAddressTokenRedeemResourcePathParams
  >({
    url: "/address/token/{id}/redeem",
    method: "post",
    ...variables,
    signal,
  });

export type PostAddressResourcePathParams = {
  /**
   * The address id
   */
  addressId: number;
};

export type PostAddressResourceError = Fetcher.ErrorWrapper<undefined>;

export type PostAddressResourceVariables = {
  body?: Schemas.AddressUpdate;
  pathParams: PostAddressResourcePathParams;
} & FetcherExtraProps;

export const postAddressResource = (
  variables: PostAddressResourceVariables,
  signal?: AbortSignal,
) =>
  fetch<
    undefined,
    PostAddressResourceError,
    Schemas.AddressUpdate,
    {},
    {},
    PostAddressResourcePathParams
  >({ url: "/address/{addressId}", method: "post", ...variables, signal });

export type DeleteAddressResourcePathParams = {
  /**
   * The address id
   */
  addressId: number;
};

export type DeleteAddressResourceError = Fetcher.ErrorWrapper<undefined>;

export type DeleteAddressResourceVariables = {
  pathParams: DeleteAddressResourcePathParams;
} & FetcherExtraProps;

export const deleteAddressResource = (
  variables: DeleteAddressResourceVariables,
  signal?: AbortSignal,
) =>
  fetch<
    undefined,
    DeleteAddressResourceError,
    undefined,
    {},
    {},
    DeleteAddressResourcePathParams
  >({ url: "/address/{addressId}", method: "delete", ...variables, signal });

export type GetAddressReservationsResourcePathParams = {
  /**
   * The address id
   */
  addressId: number;
};

export type GetAddressReservationsResourceError =
  Fetcher.ErrorWrapper<undefined>;

export type GetAddressReservationsResourceResponse =
  Schemas.AddressReservation[];

export type GetAddressReservationsResourceVariables = {
  pathParams: GetAddressReservationsResourcePathParams;
} & FetcherExtraProps;

export const getAddressReservationsResource = (
  variables: GetAddressReservationsResourceVariables,
  signal?: AbortSignal,
) =>
  fetch<
    GetAddressReservationsResourceResponse,
    GetAddressReservationsResourceError,
    undefined,
    {},
    {},
    GetAddressReservationsResourcePathParams
  >({
    url: "/address/{addressId}/reservation",
    method: "get",
    ...variables,
    signal,
  });

export type PostAddressReservationIssueResourcePathParams = {
  /**
   * The address id
   */
  addressId: number;
  /**
   * The address reservation id
   */
  id: string;
};

export type PostAddressReservationIssueResourceError =
  Fetcher.ErrorWrapper<undefined>;

export type PostAddressReservationIssueResourceVariables = {
  pathParams: PostAddressReservationIssueResourcePathParams;
} & FetcherExtraProps;

export const postAddressReservationIssueResource = (
  variables: PostAddressReservationIssueResourceVariables,
  signal?: AbortSignal,
) =>
  fetch<
    undefined,
    PostAddressReservationIssueResourceError,
    undefined,
    {},
    {},
    PostAddressReservationIssueResourcePathParams
  >({
    url: "/address/{addressId}/reservation/{id}/issue",
    method: "post",
    ...variables,
    signal,
  });

export type PostAddressReservationRevokeResourcePathParams = {
  /**
   * The address id
   */
  addressId: number;
  /**
   * The address reservation id
   */
  id: string;
};

export type PostAddressReservationRevokeResourceError =
  Fetcher.ErrorWrapper<undefined>;

export type PostAddressReservationRevokeResourceVariables = {
  pathParams: PostAddressReservationRevokeResourcePathParams;
} & FetcherExtraProps;

export const postAddressReservationRevokeResource = (
  variables: PostAddressReservationRevokeResourceVariables,
  signal?: AbortSignal,
) =>
  fetch<
    undefined,
    PostAddressReservationRevokeResourceError,
    undefined,
    {},
    {},
    PostAddressReservationRevokeResourcePathParams
  >({
    url: "/address/{addressId}/reservation/{id}/revoke",
    method: "post",
    ...variables,
    signal,
  });

export type PostReservationAccessTimesUpdateResourcePathParams = {
  /**
   * The address id
   */
  addressId: number;
  /**
   * The reservation id
   */
  id: string;
};

export type PostReservationAccessTimesUpdateResourceError =
  Fetcher.ErrorWrapper<undefined>;

export type PostReservationAccessTimesUpdateResourceVariables = {
  body?: Schemas.ReservationAccessTimesUpdate;
  pathParams: PostReservationAccessTimesUpdateResourcePathParams;
} & FetcherExtraProps;

export const postReservationAccessTimesUpdateResource = (
  variables: PostReservationAccessTimesUpdateResourceVariables,
  signal?: AbortSignal,
) =>
  fetch<
    undefined,
    PostReservationAccessTimesUpdateResourceError,
    Schemas.ReservationAccessTimesUpdate,
    {},
    {},
    PostReservationAccessTimesUpdateResourcePathParams
  >({
    url: "/address/{addressId}/reservation/{id}/update/accesstimes",
    method: "post",
    ...variables,
    signal,
  });

export type GetAddressTokensResourcePathParams = {
  /**
   * The address id
   */
  addressId: number;
};

export type GetAddressTokensResourceError = Fetcher.ErrorWrapper<undefined>;

export type GetAddressTokensResourceResponse = Schemas.AddressToken[];

export type GetAddressTokensResourceVariables = {
  pathParams: GetAddressTokensResourcePathParams;
} & FetcherExtraProps;

export const getAddressTokensResource = (
  variables: GetAddressTokensResourceVariables,
  signal?: AbortSignal,
) =>
  fetch<
    GetAddressTokensResourceResponse,
    GetAddressTokensResourceError,
    undefined,
    {},
    {},
    GetAddressTokensResourcePathParams
  >({ url: "/address/{addressId}/token", method: "get", ...variables, signal });

export type GetAddressUnitsResourcePathParams = {
  /**
   * The address id
   */
  addressId: number;
};

export type GetAddressUnitsResourceError = Fetcher.ErrorWrapper<undefined>;

export type GetAddressUnitsResourceResponse = Schemas.AddressUnitResponse[];

export type GetAddressUnitsResourceVariables = {
  pathParams: GetAddressUnitsResourcePathParams;
} & FetcherExtraProps;

export const getAddressUnitsResource = (
  variables: GetAddressUnitsResourceVariables,
  signal?: AbortSignal,
) =>
  fetch<
    GetAddressUnitsResourceResponse,
    GetAddressUnitsResourceError,
    undefined,
    {},
    {},
    GetAddressUnitsResourcePathParams
  >({ url: "/address/{addressId}/unit", method: "get", ...variables, signal });

export type PutAddressUnitsResourcePathParams = {
  /**
   * The address id
   */
  addressId: number;
};

export type PutAddressUnitsResourceError = Fetcher.ErrorWrapper<undefined>;

export type PutAddressUnitsResourceVariables = {
  body: Schemas.AddressUnit;
  pathParams: PutAddressUnitsResourcePathParams;
} & FetcherExtraProps;

export const putAddressUnitsResource = (
  variables: PutAddressUnitsResourceVariables,
  signal?: AbortSignal,
) =>
  fetch<
    Schemas.AddressUnitResponse,
    PutAddressUnitsResourceError,
    Schemas.AddressUnit,
    {},
    {},
    PutAddressUnitsResourcePathParams
  >({ url: "/address/{addressId}/unit", method: "put", ...variables, signal });

export type DeleteAddressUnitsResourcePathParams = {
  /**
   * The address id
   */
  addressId: number;
};

export type DeleteAddressUnitsResourceError = Fetcher.ErrorWrapper<undefined>;

export type DeleteAddressUnitsResourceRequestBody = string[];

export type DeleteAddressUnitsResourceVariables = {
  body?: DeleteAddressUnitsResourceRequestBody;
  pathParams: DeleteAddressUnitsResourcePathParams;
} & FetcherExtraProps;

export const deleteAddressUnitsResource = (
  variables: DeleteAddressUnitsResourceVariables,
  signal?: AbortSignal,
) =>
  fetch<
    Schemas.AdvancedConfirmationResponse,
    DeleteAddressUnitsResourceError,
    DeleteAddressUnitsResourceRequestBody,
    {},
    {},
    DeleteAddressUnitsResourcePathParams
  >({
    url: "/address/{addressId}/unit",
    method: "delete",
    ...variables,
    signal,
  });

export type DeleteAddressUnitResourcePathParams = {
  /**
   * The address id
   */
  addressId: number;
  /**
   * The address unit id
   */
  id: string;
};

export type DeleteAddressUnitResourceError = Fetcher.ErrorWrapper<undefined>;

export type DeleteAddressUnitResourceVariables = {
  pathParams: DeleteAddressUnitResourcePathParams;
} & FetcherExtraProps;

export const deleteAddressUnitResource = (
  variables: DeleteAddressUnitResourceVariables,
  signal?: AbortSignal,
) =>
  fetch<
    Schemas.AdvancedConfirmationResponse,
    DeleteAddressUnitResourceError,
    undefined,
    {},
    {},
    DeleteAddressUnitResourcePathParams
  >({
    url: "/address/{addressId}/unit/{id}",
    method: "delete",
    ...variables,
    signal,
  });

export type GetDecentralWebhooksResourceError = Fetcher.ErrorWrapper<undefined>;

export type GetDecentralWebhooksResourceResponse = Schemas.DecentralWebhook[];

export type GetDecentralWebhooksResourceVariables = FetcherExtraProps;

export const getDecentralWebhooksResource = (
  variables: GetDecentralWebhooksResourceVariables,
  signal?: AbortSignal,
) =>
  fetch<
    GetDecentralWebhooksResourceResponse,
    GetDecentralWebhooksResourceError,
    undefined,
    {},
    {},
    {}
  >({ url: "/api/decentralWebhook", method: "get", ...variables, signal });

export type PutDecentralWebhooksResourceError = Fetcher.ErrorWrapper<undefined>;

export type PutDecentralWebhooksResourceVariables = {
  body: Schemas.DecentralWebhook;
} & FetcherExtraProps;

export const putDecentralWebhooksResource = (
  variables: PutDecentralWebhooksResourceVariables,
  signal?: AbortSignal,
) =>
  fetch<
    Schemas.DecentralWebhook,
    PutDecentralWebhooksResourceError,
    Schemas.DecentralWebhook,
    {},
    {},
    {}
  >({ url: "/api/decentralWebhook", method: "put", ...variables, signal });

export type DeleteDecentralWebhookResourcePathParams = {
  /**
   * The ID of the decentral webhook
   */
  id: number;
};

export type DeleteDecentralWebhookResourceError =
  Fetcher.ErrorWrapper<undefined>;

export type DeleteDecentralWebhookResourceVariables = {
  pathParams: DeleteDecentralWebhookResourcePathParams;
} & FetcherExtraProps;

export const deleteDecentralWebhookResource = (
  variables: DeleteDecentralWebhookResourceVariables,
  signal?: AbortSignal,
) =>
  fetch<
    undefined,
    DeleteDecentralWebhookResourceError,
    undefined,
    {},
    {},
    DeleteDecentralWebhookResourcePathParams
  >({
    url: "/api/decentralWebhook/{id}",
    method: "delete",
    ...variables,
    signal,
  });

export type GetApiKeysResourceError = Fetcher.ErrorWrapper<undefined>;

export type GetApiKeysResourceResponse = Schemas.ApiKey[];

export type GetApiKeysResourceVariables = FetcherExtraProps;

export const getApiKeysResource = (
  variables: GetApiKeysResourceVariables,
  signal?: AbortSignal,
) =>
  fetch<
    GetApiKeysResourceResponse,
    GetApiKeysResourceError,
    undefined,
    {},
    {},
    {}
  >({ url: "/api/key", method: "get", ...variables, signal });

export type PutApiKeysResourceError = Fetcher.ErrorWrapper<undefined>;

export type PutApiKeysResourceVariables = {
  body?: Schemas.ApiKeyCreate;
} & FetcherExtraProps;

export const putApiKeysResource = (
  variables: PutApiKeysResourceVariables,
  signal?: AbortSignal,
) =>
  fetch<
    Schemas.ApiKey,
    PutApiKeysResourceError,
    Schemas.ApiKeyCreate,
    {},
    {},
    {}
  >({ url: "/api/key", method: "put", ...variables, signal });

export type PostApiKeyResourcePathParams = {
  /**
   * The api key id
   */
  apiKeyId: number;
};

export type PostApiKeyResourceError = Fetcher.ErrorWrapper<undefined>;

export type PostApiKeyResourceVariables = {
  body?: Schemas.ApiKeyUpdate;
  pathParams: PostApiKeyResourcePathParams;
} & FetcherExtraProps;

export const postApiKeyResource = (
  variables: PostApiKeyResourceVariables,
  signal?: AbortSignal,
) =>
  fetch<
    undefined,
    PostApiKeyResourceError,
    Schemas.ApiKeyUpdate,
    {},
    {},
    PostApiKeyResourcePathParams
  >({ url: "/api/key/{apiKeyId}", method: "post", ...variables, signal });

export type DeleteApiKeyResourcePathParams = {
  /**
   * The api key id
   */
  apiKeyId: number;
};

export type DeleteApiKeyResourceError = Fetcher.ErrorWrapper<undefined>;

export type DeleteApiKeyResourceVariables = {
  pathParams: DeleteApiKeyResourcePathParams;
} & FetcherExtraProps;

export const deleteApiKeyResource = (
  variables: DeleteApiKeyResourceVariables,
  signal?: AbortSignal,
) =>
  fetch<
    undefined,
    DeleteApiKeyResourceError,
    undefined,
    {},
    {},
    DeleteApiKeyResourcePathParams
  >({ url: "/api/key/{apiKeyId}", method: "delete", ...variables, signal });

export type GetApiKeyAdvancedResourcePathParams = {
  /**
   * The api key id
   */
  apiKeyId: number;
};

export type GetApiKeyAdvancedResourceError = Fetcher.ErrorWrapper<undefined>;

export type GetApiKeyAdvancedResourceVariables = {
  pathParams: GetApiKeyAdvancedResourcePathParams;
} & FetcherExtraProps;

export const getApiKeyAdvancedResource = (
  variables: GetApiKeyAdvancedResourceVariables,
  signal?: AbortSignal,
) =>
  fetch<
    Schemas.AdvancedApiKey,
    GetApiKeyAdvancedResourceError,
    undefined,
    {},
    {},
    GetApiKeyAdvancedResourcePathParams
  >({
    url: "/api/key/{apiKeyId}/advanced",
    method: "get",
    ...variables,
    signal,
  });

export type PostApiKeyAdvancedResourcePathParams = {
  /**
   * The api key id
   */
  apiKeyId: number;
};

export type PostApiKeyAdvancedResourceError = Fetcher.ErrorWrapper<undefined>;

export type PostApiKeyAdvancedResourceVariables = {
  body: Schemas.AdvancedApiKeyUpdate;
  pathParams: PostApiKeyAdvancedResourcePathParams;
} & FetcherExtraProps;

export const postApiKeyAdvancedResource = (
  variables: PostApiKeyAdvancedResourceVariables,
  signal?: AbortSignal,
) =>
  fetch<
    undefined,
    PostApiKeyAdvancedResourceError,
    Schemas.AdvancedApiKeyUpdate,
    {},
    {},
    PostApiKeyAdvancedResourcePathParams
  >({
    url: "/api/key/{apiKeyId}/advanced",
    method: "post",
    ...variables,
    signal,
  });

export type PutApiKeyAdvancedResourcePathParams = {
  /**
   * The api key id
   */
  apiKeyId: number;
};

export type PutApiKeyAdvancedResourceError = Fetcher.ErrorWrapper<undefined>;

export type PutApiKeyAdvancedResourceVariables = {
  body: Schemas.AdvancedApiKeyCreate;
  pathParams: PutApiKeyAdvancedResourcePathParams;
} & FetcherExtraProps;

export const putApiKeyAdvancedResource = (
  variables: PutApiKeyAdvancedResourceVariables,
  signal?: AbortSignal,
) =>
  fetch<
    undefined,
    PutApiKeyAdvancedResourceError,
    Schemas.AdvancedApiKeyCreate,
    {},
    {},
    PutApiKeyAdvancedResourcePathParams
  >({
    url: "/api/key/{apiKeyId}/advanced",
    method: "put",
    ...variables,
    signal,
  });

export type DeleteApiKeyAdvancedResourcePathParams = {
  /**
   * The api key id
   */
  apiKeyId: number;
};

export type DeleteApiKeyAdvancedResourceError = Fetcher.ErrorWrapper<undefined>;

export type DeleteApiKeyAdvancedResourceVariables = {
  pathParams: DeleteApiKeyAdvancedResourcePathParams;
} & FetcherExtraProps;

export const deleteApiKeyAdvancedResource = (
  variables: DeleteApiKeyAdvancedResourceVariables,
  signal?: AbortSignal,
) =>
  fetch<
    undefined,
    DeleteApiKeyAdvancedResourceError,
    undefined,
    {},
    {},
    DeleteApiKeyAdvancedResourcePathParams
  >({
    url: "/api/key/{apiKeyId}/advanced",
    method: "delete",
    ...variables,
    signal,
  });

export type PostApiKeyAdvancedReactivateResourcePathParams = {
  /**
   * The api key id
   */
  apiKeyId: number;
};

export type PostApiKeyAdvancedReactivateResourceError =
  Fetcher.ErrorWrapper<undefined>;

export type PostApiKeyAdvancedReactivateResourceVariables = {
  pathParams: PostApiKeyAdvancedReactivateResourcePathParams;
} & FetcherExtraProps;

export const postApiKeyAdvancedReactivateResource = (
  variables: PostApiKeyAdvancedReactivateResourceVariables,
  signal?: AbortSignal,
) =>
  fetch<
    undefined,
    PostApiKeyAdvancedReactivateResourceError,
    undefined,
    {},
    {},
    PostApiKeyAdvancedReactivateResourcePathParams
  >({
    url: "/api/key/{apiKeyId}/advanced/reactivate",
    method: "post",
    ...variables,
    signal,
  });

export type GetApiKeyTokensResourcePathParams = {
  /**
   * The api key id
   */
  apiKeyId: number;
};

export type GetApiKeyTokensResourceError = Fetcher.ErrorWrapper<undefined>;

export type GetApiKeyTokensResourceResponse = Schemas.ApiKeyToken[];

export type GetApiKeyTokensResourceVariables = {
  pathParams: GetApiKeyTokensResourcePathParams;
} & FetcherExtraProps;

export const getApiKeyTokensResource = (
  variables: GetApiKeyTokensResourceVariables,
  signal?: AbortSignal,
) =>
  fetch<
    GetApiKeyTokensResourceResponse,
    GetApiKeyTokensResourceError,
    undefined,
    {},
    {},
    GetApiKeyTokensResourcePathParams
  >({ url: "/api/key/{apiKeyId}/token", method: "get", ...variables, signal });

export type PutApiKeyTokensResourcePathParams = {
  /**
   * The api key id
   */
  apiKeyId: number;
};

export type PutApiKeyTokensResourceError = Fetcher.ErrorWrapper<undefined>;

export type PutApiKeyTokensResourceVariables = {
  body?: Schemas.ApiKeyTokenCreate;
  pathParams: PutApiKeyTokensResourcePathParams;
} & FetcherExtraProps;

export const putApiKeyTokensResource = (
  variables: PutApiKeyTokensResourceVariables,
  signal?: AbortSignal,
) =>
  fetch<
    Schemas.ApiKeyToken,
    PutApiKeyTokensResourceError,
    Schemas.ApiKeyTokenCreate,
    {},
    {},
    PutApiKeyTokensResourcePathParams
  >({ url: "/api/key/{apiKeyId}/token", method: "put", ...variables, signal });

export type PostApiKeyTokenResourcePathParams = {
  /**
   * The api key id
   */
  apiKeyId: number;
  /**
   * The api key token id
   */
  id: string;
};

export type PostApiKeyTokenResourceError = Fetcher.ErrorWrapper<undefined>;

export type PostApiKeyTokenResourceVariables = {
  body?: Schemas.ApiKeyTokenUpdate;
  pathParams: PostApiKeyTokenResourcePathParams;
} & FetcherExtraProps;

export const postApiKeyTokenResource = (
  variables: PostApiKeyTokenResourceVariables,
  signal?: AbortSignal,
) =>
  fetch<
    undefined,
    PostApiKeyTokenResourceError,
    Schemas.ApiKeyTokenUpdate,
    {},
    {},
    PostApiKeyTokenResourcePathParams
  >({
    url: "/api/key/{apiKeyId}/token/{id}",
    method: "post",
    ...variables,
    signal,
  });

export type DeleteApiKeyTokenResourcePathParams = {
  /**
   * The api key id
   */
  apiKeyId: number;
  /**
   * The api key token id
   */
  id: string;
};

export type DeleteApiKeyTokenResourceError = Fetcher.ErrorWrapper<undefined>;

export type DeleteApiKeyTokenResourceVariables = {
  pathParams: DeleteApiKeyTokenResourcePathParams;
} & FetcherExtraProps;

export const deleteApiKeyTokenResource = (
  variables: DeleteApiKeyTokenResourceVariables,
  signal?: AbortSignal,
) =>
  fetch<
    undefined,
    DeleteApiKeyTokenResourceError,
    undefined,
    {},
    {},
    DeleteApiKeyTokenResourcePathParams
  >({
    url: "/api/key/{apiKeyId}/token/{id}",
    method: "delete",
    ...variables,
    signal,
  });

export type GetWebhookLogsResourcePathParams = {
  /**
   * The api key id
   */
  apiKeyId: number;
};

export type GetWebhookLogsResourceQueryParams = {
  /**
   * Optionally filter for older logs
   */
  id?: string;
  /**
   * Amount of logs (max: 100)
   *
   * @default 50
   */
  limit?: number;
};

export type GetWebhookLogsResourceError = Fetcher.ErrorWrapper<undefined>;

export type GetWebhookLogsResourceResponse = Schemas.WebhookLog[];

export type GetWebhookLogsResourceVariables = {
  pathParams: GetWebhookLogsResourcePathParams;
  queryParams?: GetWebhookLogsResourceQueryParams;
} & FetcherExtraProps;

export const getWebhookLogsResource = (
  variables: GetWebhookLogsResourceVariables,
  signal?: AbortSignal,
) =>
  fetch<
    GetWebhookLogsResourceResponse,
    GetWebhookLogsResourceError,
    undefined,
    {},
    GetWebhookLogsResourceQueryParams,
    GetWebhookLogsResourcePathParams
  >({
    url: "/api/key/{apiKeyId}/webhook/logs",
    method: "get",
    ...variables,
    signal,
  });

export type PostSmartlockBulkWebConfigResourceError =
  Fetcher.ErrorWrapper<undefined>;

export type PostSmartlockBulkWebConfigResourceVariables = {
  body?: Schemas.BulkWebConfigRequest;
} & FetcherExtraProps;

export const postSmartlockBulkWebConfigResource = (
  variables: PostSmartlockBulkWebConfigResourceVariables,
  signal?: AbortSignal,
) =>
  fetch<
    undefined,
    PostSmartlockBulkWebConfigResourceError,
    Schemas.BulkWebConfigRequest,
    {},
    {},
    {}
  >({ url: "/bulk-web-config", method: "post", ...variables, signal });

export type GetCompaniesResourceError = Fetcher.ErrorWrapper<undefined>;

export type GetCompaniesResourceResponse = Schemas.Company[];

export type GetCompaniesResourceVariables = FetcherExtraProps;

export const getCompaniesResource = (
  variables: GetCompaniesResourceVariables,
  signal?: AbortSignal,
) =>
  fetch<
    GetCompaniesResourceResponse,
    GetCompaniesResourceError,
    undefined,
    {},
    {},
    {}
  >({ url: "/company", method: "get", ...variables, signal });

export type GetNotificationsResourceQueryParams = {
  /**
   * The reference ID to the third party system
   */
  referenceId?: string;
};

export type GetNotificationsResourceError = Fetcher.ErrorWrapper<undefined>;

export type GetNotificationsResourceResponse = Schemas.Notification[];

export type GetNotificationsResourceVariables = {
  queryParams?: GetNotificationsResourceQueryParams;
} & FetcherExtraProps;

export const getNotificationsResource = (
  variables: GetNotificationsResourceVariables,
  signal?: AbortSignal,
) =>
  fetch<
    GetNotificationsResourceResponse,
    GetNotificationsResourceError,
    undefined,
    {},
    GetNotificationsResourceQueryParams,
    {}
  >({ url: "/notification", method: "get", ...variables, signal });

export type PutNotificationsResourceError = Fetcher.ErrorWrapper<undefined>;

export type PutNotificationsResourceVariables = {
  body: Schemas.Notification;
} & FetcherExtraProps;

export const putNotificationsResource = (
  variables: PutNotificationsResourceVariables,
  signal?: AbortSignal,
) =>
  fetch<
    Schemas.Notification,
    PutNotificationsResourceError,
    Schemas.Notification,
    {},
    {},
    {}
  >({ url: "/notification", method: "put", ...variables, signal });

export type GetNotificationResourcePathParams = {
  /**
   * The unique notification ID
   */
  notificationId: string;
};

export type GetNotificationResourceError = Fetcher.ErrorWrapper<undefined>;

export type GetNotificationResourceVariables = {
  pathParams: GetNotificationResourcePathParams;
} & FetcherExtraProps;

export const getNotificationResource = (
  variables: GetNotificationResourceVariables,
  signal?: AbortSignal,
) =>
  fetch<
    Schemas.Notification,
    GetNotificationResourceError,
    undefined,
    {},
    {},
    GetNotificationResourcePathParams
  >({
    url: "/notification/{notificationId}",
    method: "get",
    ...variables,
    signal,
  });

export type PostNotificationResourcePathParams = {
  /**
   * The unique notification ID
   */
  notificationId: string;
};

export type PostNotificationResourceError = Fetcher.ErrorWrapper<undefined>;

export type PostNotificationResourceVariables = {
  body: Schemas.Notification;
  pathParams: PostNotificationResourcePathParams;
} & FetcherExtraProps;

export const postNotificationResource = (
  variables: PostNotificationResourceVariables,
  signal?: AbortSignal,
) =>
  fetch<
    Schemas.Notification,
    PostNotificationResourceError,
    Schemas.Notification,
    {},
    {},
    PostNotificationResourcePathParams
  >({
    url: "/notification/{notificationId}",
    method: "post",
    ...variables,
    signal,
  });

export type DeleteNotificationResourcePathParams = {
  /**
   * The unique notification ID
   */
  notificationId: string;
};

export type DeleteNotificationResourceError = Fetcher.ErrorWrapper<undefined>;

export type DeleteNotificationResourceVariables = {
  pathParams: DeleteNotificationResourcePathParams;
} & FetcherExtraProps;

export const deleteNotificationResource = (
  variables: DeleteNotificationResourceVariables,
  signal?: AbortSignal,
) =>
  fetch<
    undefined,
    DeleteNotificationResourceError,
    undefined,
    {},
    {},
    DeleteNotificationResourcePathParams
  >({
    url: "/notification/{notificationId}",
    method: "delete",
    ...variables,
    signal,
  });

export type GetOpenerBrandsResourceError = Fetcher.ErrorWrapper<undefined>;

export type GetOpenerBrandsResourceResponse = Schemas.OpenerIntercomBrand[];

export type GetOpenerBrandsResourceVariables = FetcherExtraProps;

export const getOpenerBrandsResource = (
  variables: GetOpenerBrandsResourceVariables,
  signal?: AbortSignal,
) =>
  fetch<
    GetOpenerBrandsResourceResponse,
    GetOpenerBrandsResourceError,
    undefined,
    {},
    {},
    {}
  >({ url: "/opener/brand", method: "get", ...variables, signal });

export type GetOpenerBrandResourcePathParams = {
  /**
   * The brand ID
   */
  brandId: number;
};

export type GetOpenerBrandResourceError = Fetcher.ErrorWrapper<undefined>;

export type GetOpenerBrandResourceVariables = {
  pathParams: GetOpenerBrandResourcePathParams;
} & FetcherExtraProps;

export const getOpenerBrandResource = (
  variables: GetOpenerBrandResourceVariables,
  signal?: AbortSignal,
) =>
  fetch<
    Schemas.OpenerIntercomBrand,
    GetOpenerBrandResourceError,
    undefined,
    {},
    {},
    GetOpenerBrandResourcePathParams
  >({ url: "/opener/brand/{brandId}", method: "get", ...variables, signal });

export type GetOpenerIntercomsResourceQueryParams = {
  /**
   * Filter for brandId. Required if 'recentlyChanged' is not set
   */
  brandId?: number;
  /**
   * If true, return intercoms ignoring their verified value
   */
  ignoreVerified?: boolean;
  /**
   * If true, return all intercoms which recently were updated
   */
  recentlyChanged?: boolean;
};

export type GetOpenerIntercomsResourceError = Fetcher.ErrorWrapper<undefined>;

export type GetOpenerIntercomsResourceResponse = Schemas.OpenerIntercomModel[];

export type GetOpenerIntercomsResourceVariables = {
  queryParams?: GetOpenerIntercomsResourceQueryParams;
} & FetcherExtraProps;

export const getOpenerIntercomsResource = (
  variables: GetOpenerIntercomsResourceVariables,
  signal?: AbortSignal,
) =>
  fetch<
    GetOpenerIntercomsResourceResponse,
    GetOpenerIntercomsResourceError,
    undefined,
    {},
    GetOpenerIntercomsResourceQueryParams,
    {}
  >({ url: "/opener/intercom", method: "get", ...variables, signal });

export type GetOpenerIntercomResourcePathParams = {
  /**
   * The intercom ID
   */
  intercomId: number;
};

export type GetOpenerIntercomResourceError = Fetcher.ErrorWrapper<undefined>;

export type GetOpenerIntercomResourceVariables = {
  pathParams: GetOpenerIntercomResourcePathParams;
} & FetcherExtraProps;

export const getOpenerIntercomResource = (
  variables: GetOpenerIntercomResourceVariables,
  signal?: AbortSignal,
) =>
  fetch<
    Schemas.OpenerIntercomModel,
    GetOpenerIntercomResourceError,
    undefined,
    {},
    {},
    GetOpenerIntercomResourcePathParams
  >({
    url: "/opener/intercom/{intercomId}",
    method: "get",
    ...variables,
    signal,
  });

export type GetServicesResourceQueryParams = {
  /**
   * Filter for service IDs (comma-separated eg: airbnb,guesty,smoobu)
   */
  serviceIds?: string;
};

export type GetServicesResourceError = Fetcher.ErrorWrapper<undefined>;

export type GetServicesResourceResponse = Schemas.Service[];

export type GetServicesResourceVariables = {
  queryParams?: GetServicesResourceQueryParams;
} & FetcherExtraProps;

export const getServicesResource = (
  variables: GetServicesResourceVariables,
  signal?: AbortSignal,
) =>
  fetch<
    GetServicesResourceResponse,
    GetServicesResourceError,
    undefined,
    {},
    GetServicesResourceQueryParams,
    {}
  >({ url: "/service", method: "get", ...variables, signal });

export type GetServiceResourcePathParams = {
  /**
   * The service id
   */
  serviceId: string;
};

export type GetServiceResourceError = Fetcher.ErrorWrapper<undefined>;

export type GetServiceResourceVariables = {
  pathParams: GetServiceResourcePathParams;
} & FetcherExtraProps;

export const getServiceResource = (
  variables: GetServiceResourceVariables,
  signal?: AbortSignal,
) =>
  fetch<
    Schemas.Service,
    GetServiceResourceError,
    undefined,
    {},
    {},
    GetServiceResourcePathParams
  >({ url: "/service/{serviceId}", method: "get", ...variables, signal });

export type PostServiceLinkResourcePathParams = {
  /**
   * The service id
   */
  serviceId: string;
};

export type PostServiceLinkResourceError = Fetcher.ErrorWrapper<undefined>;

export type PostServiceLinkResourceVariables = {
  pathParams: PostServiceLinkResourcePathParams;
} & FetcherExtraProps;

export const postServiceLinkResource = (
  variables: PostServiceLinkResourceVariables,
  signal?: AbortSignal,
) =>
  fetch<
    string,
    PostServiceLinkResourceError,
    undefined,
    {},
    {},
    PostServiceLinkResourcePathParams
  >({ url: "/service/{serviceId}/link", method: "post", ...variables, signal });

export type PostServiceSyncResourcePathParams = {
  /**
   * The service id
   */
  serviceId: string;
};

export type PostServiceSyncResourceError = Fetcher.ErrorWrapper<undefined>;

export type PostServiceSyncResourceVariables = {
  pathParams: PostServiceSyncResourcePathParams;
} & FetcherExtraProps;

export const postServiceSyncResource = (
  variables: PostServiceSyncResourceVariables,
  signal?: AbortSignal,
) =>
  fetch<
    undefined,
    PostServiceSyncResourceError,
    undefined,
    {},
    {},
    PostServiceSyncResourcePathParams
  >({ url: "/service/{serviceId}/sync", method: "post", ...variables, signal });

export type PostServiceUnlinkResourcePathParams = {
  /**
   * The service id
   */
  serviceId: string;
};

export type PostServiceUnlinkResourceError = Fetcher.ErrorWrapper<undefined>;

export type PostServiceUnlinkResourceVariables = {
  pathParams: PostServiceUnlinkResourcePathParams;
} & FetcherExtraProps;

export const postServiceUnlinkResource = (
  variables: PostServiceUnlinkResourceVariables,
  signal?: AbortSignal,
) =>
  fetch<
    undefined,
    PostServiceUnlinkResourceError,
    undefined,
    {},
    {},
    PostServiceUnlinkResourcePathParams
  >({
    url: "/service/{serviceId}/unlink",
    method: "post",
    ...variables,
    signal,
  });

export type GetSmartlocksResourceQueryParams = {
  /**
   * Filter for authId
   */
  authId?: number;
  /**
   * Filter for type
   */
  type?: number;
};

export type GetSmartlocksResourceError = Fetcher.ErrorWrapper<undefined>;

export type GetSmartlocksResourceResponse = Schemas.Smartlock[];

export type GetSmartlocksResourceVariables = {
  queryParams?: GetSmartlocksResourceQueryParams;
} & FetcherExtraProps;

export const getSmartlocksResource = (
  variables: GetSmartlocksResourceVariables,
  signal?: AbortSignal,
) =>
  fetch<
    GetSmartlocksResourceResponse,
    GetSmartlocksResourceError,
    undefined,
    {},
    GetSmartlocksResourceQueryParams,
    {}
  >({ url: "/smartlock", method: "get", ...variables, signal });

export type GetSmartlocksAuthsResourceQueryParams = {
  /**
   * Filter for account users:  set to a positive number will filter for authorizations with this specific accountUserId, set to a negative number will filter without set accountUserId
   */
  accountUserId?: number;
  /**
   * Filter for authorization's types (comma-separated eg: 0,2,3)
   */
  types?: string;
};

export type GetSmartlocksAuthsResourceError = Fetcher.ErrorWrapper<undefined>;

export type GetSmartlocksAuthsResourceResponse = Schemas.SmartlockAuth[];

export type GetSmartlocksAuthsResourceVariables = {
  queryParams?: GetSmartlocksAuthsResourceQueryParams;
} & FetcherExtraProps;

export const getSmartlocksAuthsResource = (
  variables: GetSmartlocksAuthsResourceVariables,
  signal?: AbortSignal,
) =>
  fetch<
    GetSmartlocksAuthsResourceResponse,
    GetSmartlocksAuthsResourceError,
    undefined,
    {},
    GetSmartlocksAuthsResourceQueryParams,
    {}
  >({ url: "/smartlock/auth", method: "get", ...variables, signal });

export type PostSmartlocksAuthsResourceError = Fetcher.ErrorWrapper<undefined>;

export type PostSmartlocksAuthsResourceRequestBody =
  Schemas.SmartlockAuthMultiUpdate[];

export type PostSmartlocksAuthsResourceVariables = {
  body?: PostSmartlocksAuthsResourceRequestBody;
} & FetcherExtraProps;

export const postSmartlocksAuthsResource = (
  variables: PostSmartlocksAuthsResourceVariables,
  signal?: AbortSignal,
) =>
  fetch<
    undefined,
    PostSmartlocksAuthsResourceError,
    PostSmartlocksAuthsResourceRequestBody,
    {},
    {},
    {}
  >({ url: "/smartlock/auth", method: "post", ...variables, signal });

export type PutSmartlocksAuthsResourceError = Fetcher.ErrorWrapper<undefined>;

export type PutSmartlocksAuthsResourceVariables = {
  body: Schemas.SmartlocksAuthCreate;
} & FetcherExtraProps;

export const putSmartlocksAuthsResource = (
  variables: PutSmartlocksAuthsResourceVariables,
  signal?: AbortSignal,
) =>
  fetch<
    undefined,
    PutSmartlocksAuthsResourceError,
    Schemas.SmartlocksAuthCreate,
    {},
    {},
    {}
  >({ url: "/smartlock/auth", method: "put", ...variables, signal });

export type DeleteSmartlocksAuthsResourceError =
  Fetcher.ErrorWrapper<undefined>;

export type DeleteSmartlocksAuthsResourceRequestBody = string[];

export type DeleteSmartlocksAuthsResourceVariables = {
  body?: DeleteSmartlocksAuthsResourceRequestBody;
} & FetcherExtraProps;

export const deleteSmartlocksAuthsResource = (
  variables: DeleteSmartlocksAuthsResourceVariables,
  signal?: AbortSignal,
) =>
  fetch<
    undefined,
    DeleteSmartlocksAuthsResourceError,
    DeleteSmartlocksAuthsResourceRequestBody,
    {},
    {},
    {}
  >({ url: "/smartlock/auth", method: "delete", ...variables, signal });

export type PutSmartlockAuthsAdvancedResourceError =
  Fetcher.ErrorWrapper<undefined>;

export type PutSmartlockAuthsAdvancedResourceVariables = {
  body: Schemas.SmartlocksAuthAdvancedCreate;
} & FetcherExtraProps;

export const putSmartlockAuthsAdvancedResource = (
  variables: PutSmartlockAuthsAdvancedResourceVariables,
  signal?: AbortSignal,
) =>
  fetch<
    Schemas.AdvancedConfirmationResponse,
    PutSmartlockAuthsAdvancedResourceError,
    Schemas.SmartlocksAuthAdvancedCreate,
    {},
    {},
    {}
  >({ url: "/smartlock/auth/advanced", method: "put", ...variables, signal });

export type GetSmartlocksLogsResourceQueryParams = {
  /**
   * Filter for account users
   */
  accountUserId?: number;
  /**
   * Filter for date (RFC3339)
   */
  fromDate?: string;
  /**
   * Filter for date (RFC3339)
   */
  toDate?: string;
  /**
   * Filter for action
   */
  action?: number;
  /**
   * Filter for older logs
   */
  id?: string;
  /**
   * Amount of logs (max: 50)
   *
   * @default 20
   */
  limit?: number;
};

export type GetSmartlocksLogsResourceError = Fetcher.ErrorWrapper<undefined>;

export type GetSmartlocksLogsResourceResponse = Schemas.SmartlockLog[];

export type GetSmartlocksLogsResourceVariables = {
  queryParams?: GetSmartlocksLogsResourceQueryParams;
} & FetcherExtraProps;

export const getSmartlocksLogsResource = (
  variables: GetSmartlocksLogsResourceVariables,
  signal?: AbortSignal,
) =>
  fetch<
    GetSmartlocksLogsResourceResponse,
    GetSmartlocksLogsResourceError,
    undefined,
    {},
    GetSmartlocksLogsResourceQueryParams,
    {}
  >({ url: "/smartlock/log", method: "get", ...variables, signal });

export type GetSmartlockResourcePathParams = {
  /**
   * The smartlock id
   */
  smartlockId: number;
};

export type GetSmartlockResourceError = Fetcher.ErrorWrapper<undefined>;

export type GetSmartlockResourceVariables = {
  pathParams: GetSmartlockResourcePathParams;
} & FetcherExtraProps;

export const getSmartlockResource = (
  variables: GetSmartlockResourceVariables,
  signal?: AbortSignal,
) =>
  fetch<
    Schemas.Smartlock,
    GetSmartlockResourceError,
    undefined,
    {},
    {},
    GetSmartlockResourcePathParams
  >({ url: "/smartlock/{smartlockId}", method: "get", ...variables, signal });

export type PostSmartlockResourcePathParams = {
  /**
   * The smartlock id
   */
  smartlockId: number;
};

export type PostSmartlockResourceError = Fetcher.ErrorWrapper<undefined>;

export type PostSmartlockResourceVariables = {
  body?: Schemas.SmartlockUpdate;
  pathParams: PostSmartlockResourcePathParams;
} & FetcherExtraProps;

export const postSmartlockResource = (
  variables: PostSmartlockResourceVariables,
  signal?: AbortSignal,
) =>
  fetch<
    undefined,
    PostSmartlockResourceError,
    Schemas.SmartlockUpdate,
    {},
    {},
    PostSmartlockResourcePathParams
  >({ url: "/smartlock/{smartlockId}", method: "post", ...variables, signal });

export type DeleteSmartlockResourcePathParams = {
  /**
   * The smartlock id
   */
  smartlockId: number;
};

export type DeleteSmartlockResourceError = Fetcher.ErrorWrapper<undefined>;

export type DeleteSmartlockResourceVariables = {
  pathParams: DeleteSmartlockResourcePathParams;
} & FetcherExtraProps;

export const deleteSmartlockResource = (
  variables: DeleteSmartlockResourceVariables,
  signal?: AbortSignal,
) =>
  fetch<
    undefined,
    DeleteSmartlockResourceError,
    undefined,
    {},
    {},
    DeleteSmartlockResourcePathParams
  >({
    url: "/smartlock/{smartlockId}",
    method: "delete",
    ...variables,
    signal,
  });

export type PostSmartlockActionResourcePathParams = {
  /**
   * The smartlock id
   */
  smartlockId: string;
};

export type PostSmartlockActionResourceError = Fetcher.ErrorWrapper<undefined>;

export type PostSmartlockActionResourceVariables = {
  body: RequestBodies.SmartlockAction;
  pathParams: PostSmartlockActionResourcePathParams;
} & FetcherExtraProps;

export const postSmartlockActionResource = (
  variables: PostSmartlockActionResourceVariables,
  signal?: AbortSignal,
) =>
  fetch<
    undefined,
    PostSmartlockActionResourceError,
    RequestBodies.SmartlockAction,
    {},
    {},
    PostSmartlockActionResourcePathParams
  >({
    url: "/smartlock/{smartlockId}/action",
    method: "post",
    ...variables,
    signal,
  });

export type PostSmartlockActionAdvancedResourcePathParams = {
  /**
   * The smartlock id
   */
  smartlockId: string;
};

export type PostSmartlockActionAdvancedResourceError =
  Fetcher.ErrorWrapper<undefined>;

export type PostSmartlockActionAdvancedResourceVariables = {
  body: RequestBodies.SmartlockAction;
  pathParams: PostSmartlockActionAdvancedResourcePathParams;
} & FetcherExtraProps;

export const postSmartlockActionAdvancedResource = (
  variables: PostSmartlockActionAdvancedResourceVariables,
  signal?: AbortSignal,
) =>
  fetch<
    Schemas.AdvancedConfirmationResponse,
    PostSmartlockActionAdvancedResourceError,
    RequestBodies.SmartlockAction,
    {},
    {},
    PostSmartlockActionAdvancedResourcePathParams
  >({
    url: "/smartlock/{smartlockId}/action/advanced",
    method: "post",
    ...variables,
    signal,
  });

export type PostSmartlockLockActionResourcePathParams = {
  /**
   * The smartlock id
   */
  smartlockId: string;
};

export type PostSmartlockLockActionResourceError =
  Fetcher.ErrorWrapper<undefined>;

export type PostSmartlockLockActionResourceVariables = {
  pathParams: PostSmartlockLockActionResourcePathParams;
} & FetcherExtraProps;

export const postSmartlockLockActionResource = (
  variables: PostSmartlockLockActionResourceVariables,
  signal?: AbortSignal,
) =>
  fetch<
    undefined,
    PostSmartlockLockActionResourceError,
    undefined,
    {},
    {},
    PostSmartlockLockActionResourcePathParams
  >({
    url: "/smartlock/{smartlockId}/action/lock",
    method: "post",
    ...variables,
    signal,
  });

export type PostSmartlockLockActionAdvancedResourcePathParams = {
  /**
   * The smartlock id
   */
  smartlockId: string;
};

export type PostSmartlockLockActionAdvancedResourceError =
  Fetcher.ErrorWrapper<undefined>;

export type PostSmartlockLockActionAdvancedResourceVariables = {
  pathParams: PostSmartlockLockActionAdvancedResourcePathParams;
} & FetcherExtraProps;

export const postSmartlockLockActionAdvancedResource = (
  variables: PostSmartlockLockActionAdvancedResourceVariables,
  signal?: AbortSignal,
) =>
  fetch<
    Schemas.AdvancedConfirmationResponse,
    PostSmartlockLockActionAdvancedResourceError,
    undefined,
    {},
    {},
    PostSmartlockLockActionAdvancedResourcePathParams
  >({
    url: "/smartlock/{smartlockId}/action/lock/advanced",
    method: "post",
    ...variables,
    signal,
  });

export type PostSmartlockUnlockActionResourcePathParams = {
  /**
   * The smartlock id
   */
  smartlockId: string;
};

export type PostSmartlockUnlockActionResourceError =
  Fetcher.ErrorWrapper<undefined>;

export type PostSmartlockUnlockActionResourceVariables = {
  pathParams: PostSmartlockUnlockActionResourcePathParams;
} & FetcherExtraProps;

export const postSmartlockUnlockActionResource = (
  variables: PostSmartlockUnlockActionResourceVariables,
  signal?: AbortSignal,
) =>
  fetch<
    undefined,
    PostSmartlockUnlockActionResourceError,
    undefined,
    {},
    {},
    PostSmartlockUnlockActionResourcePathParams
  >({
    url: "/smartlock/{smartlockId}/action/unlock",
    method: "post",
    ...variables,
    signal,
  });

export type PostSmartlockUnlockActionAdvancedResourcePathParams = {
  /**
   * The smartlock id
   */
  smartlockId: string;
};

export type PostSmartlockUnlockActionAdvancedResourceError =
  Fetcher.ErrorWrapper<undefined>;

export type PostSmartlockUnlockActionAdvancedResourceVariables = {
  pathParams: PostSmartlockUnlockActionAdvancedResourcePathParams;
} & FetcherExtraProps;

export const postSmartlockUnlockActionAdvancedResource = (
  variables: PostSmartlockUnlockActionAdvancedResourceVariables,
  signal?: AbortSignal,
) =>
  fetch<
    Schemas.AdvancedConfirmationResponse,
    PostSmartlockUnlockActionAdvancedResourceError,
    undefined,
    {},
    {},
    PostSmartlockUnlockActionAdvancedResourcePathParams
  >({
    url: "/smartlock/{smartlockId}/action/unlock/advanced",
    method: "post",
    ...variables,
    signal,
  });

export type PostSmartlockAdminPinResourcePathParams = {
  /**
   * The smartlock id
   */
  smartlockId: number;
};

export type PostSmartlockAdminPinResourceError =
  Fetcher.ErrorWrapper<undefined>;

export type PostSmartlockAdminPinResourceVariables = {
  body: Schemas.SmartlockAdminPinUpdate;
  pathParams: PostSmartlockAdminPinResourcePathParams;
} & FetcherExtraProps;

export const postSmartlockAdminPinResource = (
  variables: PostSmartlockAdminPinResourceVariables,
  signal?: AbortSignal,
) =>
  fetch<
    undefined,
    PostSmartlockAdminPinResourceError,
    Schemas.SmartlockAdminPinUpdate,
    {},
    {},
    PostSmartlockAdminPinResourcePathParams
  >({
    url: "/smartlock/{smartlockId}/admin/pin",
    method: "post",
    ...variables,
    signal,
  });

export type PostSmartlockAdvancedConfigResourcePathParams = {
  /**
   * The smartlock id
   */
  smartlockId: number;
};

export type PostSmartlockAdvancedConfigResourceError =
  Fetcher.ErrorWrapper<undefined>;

export type PostSmartlockAdvancedConfigResourceVariables = {
  body: Schemas.SmartlockAdvancedConfig;
  pathParams: PostSmartlockAdvancedConfigResourcePathParams;
} & FetcherExtraProps;

export const postSmartlockAdvancedConfigResource = (
  variables: PostSmartlockAdvancedConfigResourceVariables,
  signal?: AbortSignal,
) =>
  fetch<
    undefined,
    PostSmartlockAdvancedConfigResourceError,
    Schemas.SmartlockAdvancedConfig,
    {},
    {},
    PostSmartlockAdvancedConfigResourcePathParams
  >({
    url: "/smartlock/{smartlockId}/advanced/config",
    method: "post",
    ...variables,
    signal,
  });

export type PostSmartlockOpenerAdvancedConfigResourcePathParams = {
  /**
   * The smartlock (opener) id
   */
  smartlockId: number;
};

export type PostSmartlockOpenerAdvancedConfigResourceError =
  Fetcher.ErrorWrapper<undefined>;

export type PostSmartlockOpenerAdvancedConfigResourceVariables = {
  body: Schemas.SmartlockOpenerAdvancedConfig;
  pathParams: PostSmartlockOpenerAdvancedConfigResourcePathParams;
} & FetcherExtraProps;

export const postSmartlockOpenerAdvancedConfigResource = (
  variables: PostSmartlockOpenerAdvancedConfigResourceVariables,
  signal?: AbortSignal,
) =>
  fetch<
    undefined,
    PostSmartlockOpenerAdvancedConfigResourceError,
    Schemas.SmartlockOpenerAdvancedConfig,
    {},
    {},
    PostSmartlockOpenerAdvancedConfigResourcePathParams
  >({
    url: "/smartlock/{smartlockId}/advanced/openerconfig",
    method: "post",
    ...variables,
    signal,
  });

export type PostSmartdoorAdvancedConfigResourcePathParams = {
  /**
   * The smartdoor id
   */
  smartlockId: number;
};

export type PostSmartdoorAdvancedConfigResourceError =
  Fetcher.ErrorWrapper<undefined>;

export type PostSmartdoorAdvancedConfigResourceVariables = {
  body: Schemas.SmartlockSmartdoorAdvancedConfig;
  pathParams: PostSmartdoorAdvancedConfigResourcePathParams;
} & FetcherExtraProps;

export const postSmartdoorAdvancedConfigResource = (
  variables: PostSmartdoorAdvancedConfigResourceVariables,
  signal?: AbortSignal,
) =>
  fetch<
    undefined,
    PostSmartdoorAdvancedConfigResourceError,
    Schemas.SmartlockSmartdoorAdvancedConfig,
    {},
    {},
    PostSmartdoorAdvancedConfigResourcePathParams
  >({
    url: "/smartlock/{smartlockId}/advanced/smartdoorconfig",
    method: "post",
    ...variables,
    signal,
  });

export type GetSmartlockAuthsResourcePathParams = {
  /**
   * The smartlock id
   */
  smartlockId: number;
};

export type GetSmartlockAuthsResourceQueryParams = {
  /**
   * Filter for smartlock authorization's types (comma-separated eg: 0,2,3)
   */
  types?: string;
};

export type GetSmartlockAuthsResourceError = Fetcher.ErrorWrapper<undefined>;

export type GetSmartlockAuthsResourceResponse = Schemas.SmartlockAuth[];

export type GetSmartlockAuthsResourceVariables = {
  pathParams: GetSmartlockAuthsResourcePathParams;
  queryParams?: GetSmartlockAuthsResourceQueryParams;
} & FetcherExtraProps;

export const getSmartlockAuthsResource = (
  variables: GetSmartlockAuthsResourceVariables,
  signal?: AbortSignal,
) =>
  fetch<
    GetSmartlockAuthsResourceResponse,
    GetSmartlockAuthsResourceError,
    undefined,
    {},
    GetSmartlockAuthsResourceQueryParams,
    GetSmartlockAuthsResourcePathParams
  >({
    url: "/smartlock/{smartlockId}/auth",
    method: "get",
    ...variables,
    signal,
  });

export type PutSmartlockAuthsResourcePathParams = {
  /**
   * The smartlock id
   */
  smartlockId: number;
};

export type PutSmartlockAuthsResourceError = Fetcher.ErrorWrapper<undefined>;

export type PutSmartlockAuthsResourceVariables = {
  body: Schemas.SmartlockAuthCreate;
  pathParams: PutSmartlockAuthsResourcePathParams;
} & FetcherExtraProps;

export const putSmartlockAuthsResource = (
  variables: PutSmartlockAuthsResourceVariables,
  signal?: AbortSignal,
) =>
  fetch<
    undefined,
    PutSmartlockAuthsResourceError,
    Schemas.SmartlockAuthCreate,
    {},
    {},
    PutSmartlockAuthsResourcePathParams
  >({
    url: "/smartlock/{smartlockId}/auth",
    method: "put",
    ...variables,
    signal,
  });

export type PostSmartlockAuthWithSharedKeyResourcePathParams = {
  /**
   * The smartlock id
   */
  smartlockId: number;
};

export type PostSmartlockAuthWithSharedKeyResourceError =
  Fetcher.ErrorWrapper<undefined>;

export type PostSmartlockAuthWithSharedKeyResourceResponse =
  Schemas.SmartlockAuth[];

export type PostSmartlockAuthWithSharedKeyResourceVariables = {
  body: Schemas.SmartlockAuthWithSharedKeyCreate;
  pathParams: PostSmartlockAuthWithSharedKeyResourcePathParams;
} & FetcherExtraProps;

export const postSmartlockAuthWithSharedKeyResource = (
  variables: PostSmartlockAuthWithSharedKeyResourceVariables,
  signal?: AbortSignal,
) =>
  fetch<
    PostSmartlockAuthWithSharedKeyResourceResponse,
    PostSmartlockAuthWithSharedKeyResourceError,
    Schemas.SmartlockAuthWithSharedKeyCreate,
    {},
    {},
    PostSmartlockAuthWithSharedKeyResourcePathParams
  >({
    url: "/smartlock/{smartlockId}/auth/advanced/sharedkey",
    method: "post",
    ...variables,
    signal,
  });

export type GetSmartlockAuthResourcePathParams = {
  /**
   * The smartlock id
   */
  smartlockId: number;
  /**
   * The smartlock auth unique id
   */
  id: string;
};

export type GetSmartlockAuthResourceError = Fetcher.ErrorWrapper<undefined>;

export type GetSmartlockAuthResourceVariables = {
  pathParams: GetSmartlockAuthResourcePathParams;
} & FetcherExtraProps;

export const getSmartlockAuthResource = (
  variables: GetSmartlockAuthResourceVariables,
  signal?: AbortSignal,
) =>
  fetch<
    Schemas.SmartlockAuth,
    GetSmartlockAuthResourceError,
    undefined,
    {},
    {},
    GetSmartlockAuthResourcePathParams
  >({
    url: "/smartlock/{smartlockId}/auth/{id}",
    method: "get",
    ...variables,
    signal,
  });

export type PostSmartlockAuthResourcePathParams = {
  /**
   * The smartlock id
   */
  smartlockId: number;
  /**
   * The smartlock authorization unique id
   */
  id: string;
};

export type PostSmartlockAuthResourceError = Fetcher.ErrorWrapper<undefined>;

export type PostSmartlockAuthResourceVariables = {
  body: Schemas.SmartlockAuthUpdate;
  pathParams: PostSmartlockAuthResourcePathParams;
} & FetcherExtraProps;

export const postSmartlockAuthResource = (
  variables: PostSmartlockAuthResourceVariables,
  signal?: AbortSignal,
) =>
  fetch<
    undefined,
    PostSmartlockAuthResourceError,
    Schemas.SmartlockAuthUpdate,
    {},
    {},
    PostSmartlockAuthResourcePathParams
  >({
    url: "/smartlock/{smartlockId}/auth/{id}",
    method: "post",
    ...variables,
    signal,
  });

export type DeleteSmartlockAuthResourcePathParams = {
  /**
   * The smartlock id
   */
  smartlockId: number;
  /**
   * The smartlock authorization unique id
   */
  id: string;
};

export type DeleteSmartlockAuthResourceError = Fetcher.ErrorWrapper<undefined>;

export type DeleteSmartlockAuthResourceVariables = {
  pathParams: DeleteSmartlockAuthResourcePathParams;
} & FetcherExtraProps;

export const deleteSmartlockAuthResource = (
  variables: DeleteSmartlockAuthResourceVariables,
  signal?: AbortSignal,
) =>
  fetch<
    undefined,
    DeleteSmartlockAuthResourceError,
    undefined,
    {},
    {},
    DeleteSmartlockAuthResourcePathParams
  >({
    url: "/smartlock/{smartlockId}/auth/{id}",
    method: "delete",
    ...variables,
    signal,
  });

export type PostSmartlockConfigResourcePathParams = {
  /**
   * The smartlock id
   */
  smartlockId: number;
};

export type PostSmartlockConfigResourceError = Fetcher.ErrorWrapper<undefined>;

export type PostSmartlockConfigResourceVariables = {
  body: Schemas.SmartlockConfig;
  pathParams: PostSmartlockConfigResourcePathParams;
} & FetcherExtraProps;

export const postSmartlockConfigResource = (
  variables: PostSmartlockConfigResourceVariables,
  signal?: AbortSignal,
) =>
  fetch<
    undefined,
    PostSmartlockConfigResourceError,
    Schemas.SmartlockConfig,
    {},
    {},
    PostSmartlockConfigResourcePathParams
  >({
    url: "/smartlock/{smartlockId}/config",
    method: "post",
    ...variables,
    signal,
  });

export type GetSmartlockLogsResourcePathParams = {
  /**
   * The smartlock id
   */
  smartlockId: number;
};

export type GetSmartlockLogsResourceQueryParams = {
  /**
   * Filter for auths
   */
  authId?: string;
  /**
   * Filter for account users
   */
  accountUserId?: number;
  /**
   * Filter for date (RFC3339)
   */
  fromDate?: string;
  /**
   * Filter for date (RFC3339)
   */
  toDate?: string;
  /**
   * Filter for action
   */
  action?: number;
  /**
   * Filter for older logs
   */
  id?: string;
  /**
   * Amount of logs (max: 50)
   *
   * @default 20
   */
  limit?: number;
};

export type GetSmartlockLogsResourceError = Fetcher.ErrorWrapper<undefined>;

export type GetSmartlockLogsResourceResponse = Schemas.SmartlockLog[];

export type GetSmartlockLogsResourceVariables = {
  pathParams: GetSmartlockLogsResourcePathParams;
  queryParams?: GetSmartlockLogsResourceQueryParams;
} & FetcherExtraProps;

export const getSmartlockLogsResource = (
  variables: GetSmartlockLogsResourceVariables,
  signal?: AbortSignal,
) =>
  fetch<
    GetSmartlockLogsResourceResponse,
    GetSmartlockLogsResourceError,
    undefined,
    {},
    GetSmartlockLogsResourceQueryParams,
    GetSmartlockLogsResourcePathParams
  >({
    url: "/smartlock/{smartlockId}/log",
    method: "get",
    ...variables,
    signal,
  });

export type PostSmartlockSyncResourcePathParams = {
  /**
   * The smartlock id
   */
  smartlockId: string;
};

export type PostSmartlockSyncResourceError = Fetcher.ErrorWrapper<undefined>;

export type PostSmartlockSyncResourceVariables = {
  pathParams: PostSmartlockSyncResourcePathParams;
} & FetcherExtraProps;

export const postSmartlockSyncResource = (
  variables: PostSmartlockSyncResourceVariables,
  signal?: AbortSignal,
) =>
  fetch<
    undefined,
    PostSmartlockSyncResourceError,
    undefined,
    {},
    {},
    PostSmartlockSyncResourcePathParams
  >({
    url: "/smartlock/{smartlockId}/sync",
    method: "post",
    ...variables,
    signal,
  });

export type PostSmartlockWebConfigResourcePathParams = {
  /**
   * The smartlock id
   */
  smartlockId: number;
};

export type PostSmartlockWebConfigResourceError =
  Fetcher.ErrorWrapper<undefined>;

export type PostSmartlockWebConfigResourceVariables = {
  body?: Schemas.SmartlockWebConfig;
  pathParams: PostSmartlockWebConfigResourcePathParams;
} & FetcherExtraProps;

export const postSmartlockWebConfigResource = (
  variables: PostSmartlockWebConfigResourceVariables,
  signal?: AbortSignal,
) =>
  fetch<
    undefined,
    PostSmartlockWebConfigResourceError,
    Schemas.SmartlockWebConfig,
    {},
    {},
    PostSmartlockWebConfigResourcePathParams
  >({
    url: "/smartlock/{smartlockId}/web/config",
    method: "post",
    ...variables,
    signal,
  });

export const operationsByTag = {
  account: {
    getAccountsResource,
    postAccountsResource,
    deleteAccountsResource,
    postAccountEmailChangeResource,
    postAccountEmailVerifyResource,
    getAccountIntegrationsResource,
    deleteAccountIntegrationsResource,
    postAccountOtpResource,
    putAccountOtpResource,
    deleteAccountOtpResource,
    postAccountPasswordResetResource,
    getAccountSettingResource,
    putAccountSettingResource,
    deleteAccountSettingResource,
    getAccountSubsResource,
    putAccountSubsResource,
    getAccountSubResource,
    postAccountSubResource,
    deleteAccountSubResource,
  },
  accountUser: {
    getAccountUsersResource,
    putAccountUsersResource,
    getAccountUserResource,
    postAccountUserResource,
    deleteAccountUserResource,
  },
  address: {
    getAddressesResource,
    putAddressesResource,
    postAddressResource,
    deleteAddressResource,
    getAddressUnitsResource,
    putAddressUnitsResource,
    deleteAddressUnitsResource,
    deleteAddressUnitResource,
  },
  addressToken: {
    getAddressTokenResource,
    getAddressTokenRedeemResource,
    postAddressTokenRedeemResource,
    getAddressTokensResource,
  },
  addressReservation: {
    getAddressReservationsResource,
    postAddressReservationIssueResource,
    postAddressReservationRevokeResource,
    postReservationAccessTimesUpdateResource,
  },
  advancedApi: {
    getDecentralWebhooksResource,
    putDecentralWebhooksResource,
    deleteDecentralWebhookResource,
    getWebhookLogsResource,
    putSmartlockAuthsAdvancedResource,
    postSmartlockActionAdvancedResource,
    postSmartlockLockActionAdvancedResource,
    postSmartlockUnlockActionAdvancedResource,
  },
  apiKey: {
    getApiKeysResource,
    putApiKeysResource,
    postApiKeyResource,
    deleteApiKeyResource,
    getApiKeyAdvancedResource,
    postApiKeyAdvancedResource,
    putApiKeyAdvancedResource,
    deleteApiKeyAdvancedResource,
    postApiKeyAdvancedReactivateResource,
    getApiKeyTokensResource,
    putApiKeyTokensResource,
    postApiKeyTokenResource,
    deleteApiKeyTokenResource,
  },
  smartlock: {
    postSmartlockBulkWebConfigResource,
    getSmartlocksResource,
    getSmartlockResource,
    postSmartlockResource,
    deleteSmartlockResource,
    postSmartlockActionResource,
    postSmartlockLockActionResource,
    postSmartlockUnlockActionResource,
    postSmartlockAdminPinResource,
    postSmartlockAdvancedConfigResource,
    postSmartlockOpenerAdvancedConfigResource,
    postSmartdoorAdvancedConfigResource,
    postSmartlockConfigResource,
    postSmartlockSyncResource,
    postSmartlockWebConfigResource,
  },
  company: { getCompaniesResource },
  notification: {
    getNotificationsResource,
    putNotificationsResource,
    getNotificationResource,
    postNotificationResource,
    deleteNotificationResource,
  },
  opener: {
    getOpenerBrandsResource,
    getOpenerBrandResource,
    getOpenerIntercomsResource,
    getOpenerIntercomResource,
  },
  service: {
    getServicesResource,
    getServiceResource,
    postServiceLinkResource,
    postServiceSyncResource,
    postServiceUnlinkResource,
  },
  smartlockAuth: {
    getSmartlocksAuthsResource,
    postSmartlocksAuthsResource,
    putSmartlocksAuthsResource,
    deleteSmartlocksAuthsResource,
    getSmartlockAuthsResource,
    putSmartlockAuthsResource,
    postSmartlockAuthWithSharedKeyResource,
    getSmartlockAuthResource,
    postSmartlockAuthResource,
    deleteSmartlockAuthResource,
  },
  smartlockLog: { getSmartlocksLogsResource, getSmartlockLogsResource },
};
