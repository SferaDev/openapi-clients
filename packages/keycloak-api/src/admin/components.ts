/**
 * Generated by @openapi-codegen
 *
 * @version 1.0
 */
import type * as Fetcher from './fetcher';
import { fetch, FetcherExtraProps } from './fetcher';
import type * as Schemas from './schemas';

export type GetAdminRealmsQueryParams = {
  /**
   * @default false
   */
  briefRepresentation?: boolean;
};

export type GetAdminRealmsError = Fetcher.ErrorWrapper<undefined>;

export type GetAdminRealmsResponse = Schemas.RealmRepresentation[];

export type GetAdminRealmsVariables = {
  queryParams?: GetAdminRealmsQueryParams;
} & FetcherExtraProps;

export const getAdminRealms = (variables: GetAdminRealmsVariables, signal?: AbortSignal) =>
  fetch<GetAdminRealmsResponse, GetAdminRealmsError, undefined, {}, GetAdminRealmsQueryParams, {}>({
    url: '/admin/realms',
    method: 'get',
    ...variables,
    signal
  });

export type PostAdminRealmsError = Fetcher.ErrorWrapper<undefined>;

export type PostAdminRealmsVariables = {
  body?: Blob;
} & FetcherExtraProps;

/**
 * Realm name must be unique.
 */
export const postAdminRealms = (variables: PostAdminRealmsVariables, signal?: AbortSignal) =>
  fetch<undefined, PostAdminRealmsError, Blob, {}, {}, {}>({
    url: '/admin/realms',
    method: 'post',
    ...variables,
    signal
  });

export type GetAdminRealmsRealmPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
};

export type GetAdminRealmsRealmError = Fetcher.ErrorWrapper<undefined>;

export type GetAdminRealmsRealmVariables = {
  pathParams: GetAdminRealmsRealmPathParams;
} & FetcherExtraProps;

export const getAdminRealmsRealm = (variables: GetAdminRealmsRealmVariables, signal?: AbortSignal) =>
  fetch<Schemas.RealmRepresentation, GetAdminRealmsRealmError, undefined, {}, {}, GetAdminRealmsRealmPathParams>({
    url: '/admin/realms/{realm}',
    method: 'get',
    ...variables,
    signal
  });

export type PutAdminRealmsRealmPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
};

export type PutAdminRealmsRealmError = Fetcher.ErrorWrapper<undefined>;

export type PutAdminRealmsRealmVariables = {
  body?: Schemas.RealmRepresentation;
  pathParams: PutAdminRealmsRealmPathParams;
} & FetcherExtraProps;

/**
 * This will only update top-level attributes of the realm.
 */
export const putAdminRealmsRealm = (variables: PutAdminRealmsRealmVariables, signal?: AbortSignal) =>
  fetch<undefined, PutAdminRealmsRealmError, Schemas.RealmRepresentation, {}, {}, PutAdminRealmsRealmPathParams>({
    url: '/admin/realms/{realm}',
    method: 'put',
    ...variables,
    signal
  });

export type DeleteAdminRealmsRealmPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
};

export type DeleteAdminRealmsRealmError = Fetcher.ErrorWrapper<undefined>;

export type DeleteAdminRealmsRealmVariables = {
  pathParams: DeleteAdminRealmsRealmPathParams;
} & FetcherExtraProps;

export const deleteAdminRealmsRealm = (variables: DeleteAdminRealmsRealmVariables, signal?: AbortSignal) =>
  fetch<undefined, DeleteAdminRealmsRealmError, undefined, {}, {}, DeleteAdminRealmsRealmPathParams>({
    url: '/admin/realms/{realm}',
    method: 'delete',
    ...variables,
    signal
  });

export type GetAdminRealmsRealmAdminEventsPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
};

export type GetAdminRealmsRealmAdminEventsQueryParams = {
  authClient?: string;
  authIpAddress?: string;
  authRealm?: string;
  /**
   * user id
   */
  authUser?: string;
  /**
   * From (inclusive) date (yyyy-MM-dd) or time in Epoch timestamp millis (number of milliseconds since January 1, 1970, 00:00:00 GMT)
   */
  dateFrom?: string;
  /**
   * To (inclusive) date (yyyy-MM-dd) or time in Epoch timestamp millis (number of milliseconds since January 1, 1970, 00:00:00 GMT)
   */
  dateTo?: string;
  /**
   * The direction to sort events by (asc or desc)
   */
  direction?: string;
  /**
   * @format int32
   */
  first?: number;
  /**
   * Maximum results size (defaults to 100)
   *
   * @format int32
   */
  max?: number;
  operationTypes?: string[];
  resourcePath?: string;
  resourceTypes?: string[];
};

export type GetAdminRealmsRealmAdminEventsError = Fetcher.ErrorWrapper<undefined>;

export type GetAdminRealmsRealmAdminEventsResponse = Schemas.AdminEventRepresentation[];

export type GetAdminRealmsRealmAdminEventsVariables = {
  pathParams: GetAdminRealmsRealmAdminEventsPathParams;
  queryParams?: GetAdminRealmsRealmAdminEventsQueryParams;
} & FetcherExtraProps;

export const getAdminRealmsRealmAdminEvents = (
  variables: GetAdminRealmsRealmAdminEventsVariables,
  signal?: AbortSignal
) =>
  fetch<
    GetAdminRealmsRealmAdminEventsResponse,
    GetAdminRealmsRealmAdminEventsError,
    undefined,
    {},
    GetAdminRealmsRealmAdminEventsQueryParams,
    GetAdminRealmsRealmAdminEventsPathParams
  >({ url: '/admin/realms/{realm}/admin-events', method: 'get', ...variables, signal });

export type DeleteAdminRealmsRealmAdminEventsPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
};

export type DeleteAdminRealmsRealmAdminEventsError = Fetcher.ErrorWrapper<undefined>;

export type DeleteAdminRealmsRealmAdminEventsVariables = {
  pathParams: DeleteAdminRealmsRealmAdminEventsPathParams;
} & FetcherExtraProps;

export const deleteAdminRealmsRealmAdminEvents = (
  variables: DeleteAdminRealmsRealmAdminEventsVariables,
  signal?: AbortSignal
) =>
  fetch<
    undefined,
    DeleteAdminRealmsRealmAdminEventsError,
    undefined,
    {},
    {},
    DeleteAdminRealmsRealmAdminEventsPathParams
  >({ url: '/admin/realms/{realm}/admin-events', method: 'delete', ...variables, signal });

export type DeleteAdminRealmsRealmAttackDetectionBruteForceUsersPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
};

export type DeleteAdminRealmsRealmAttackDetectionBruteForceUsersError = Fetcher.ErrorWrapper<undefined>;

export type DeleteAdminRealmsRealmAttackDetectionBruteForceUsersVariables = {
  pathParams: DeleteAdminRealmsRealmAttackDetectionBruteForceUsersPathParams;
} & FetcherExtraProps;

export const deleteAdminRealmsRealmAttackDetectionBruteForceUsers = (
  variables: DeleteAdminRealmsRealmAttackDetectionBruteForceUsersVariables,
  signal?: AbortSignal
) =>
  fetch<
    undefined,
    DeleteAdminRealmsRealmAttackDetectionBruteForceUsersError,
    undefined,
    {},
    {},
    DeleteAdminRealmsRealmAttackDetectionBruteForceUsersPathParams
  >({ url: '/admin/realms/{realm}/attack-detection/brute-force/users', method: 'delete', ...variables, signal });

export type GetAdminRealmsRealmAttackDetectionBruteForceUsersUserIdPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  userId: string;
};

export type GetAdminRealmsRealmAttackDetectionBruteForceUsersUserIdError = Fetcher.ErrorWrapper<undefined>;

export type GetAdminRealmsRealmAttackDetectionBruteForceUsersUserIdResponse = {
  [key: string]: any;
};

export type GetAdminRealmsRealmAttackDetectionBruteForceUsersUserIdVariables = {
  pathParams: GetAdminRealmsRealmAttackDetectionBruteForceUsersUserIdPathParams;
} & FetcherExtraProps;

export const getAdminRealmsRealmAttackDetectionBruteForceUsersUserId = (
  variables: GetAdminRealmsRealmAttackDetectionBruteForceUsersUserIdVariables,
  signal?: AbortSignal
) =>
  fetch<
    GetAdminRealmsRealmAttackDetectionBruteForceUsersUserIdResponse,
    GetAdminRealmsRealmAttackDetectionBruteForceUsersUserIdError,
    undefined,
    {},
    {},
    GetAdminRealmsRealmAttackDetectionBruteForceUsersUserIdPathParams
  >({ url: '/admin/realms/{realm}/attack-detection/brute-force/users/{userId}', method: 'get', ...variables, signal });

export type DeleteAdminRealmsRealmAttackDetectionBruteForceUsersUserIdPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  userId: string;
};

export type DeleteAdminRealmsRealmAttackDetectionBruteForceUsersUserIdError = Fetcher.ErrorWrapper<undefined>;

export type DeleteAdminRealmsRealmAttackDetectionBruteForceUsersUserIdVariables = {
  pathParams: DeleteAdminRealmsRealmAttackDetectionBruteForceUsersUserIdPathParams;
} & FetcherExtraProps;

export const deleteAdminRealmsRealmAttackDetectionBruteForceUsersUserId = (
  variables: DeleteAdminRealmsRealmAttackDetectionBruteForceUsersUserIdVariables,
  signal?: AbortSignal
) =>
  fetch<
    undefined,
    DeleteAdminRealmsRealmAttackDetectionBruteForceUsersUserIdError,
    undefined,
    {},
    {},
    DeleteAdminRealmsRealmAttackDetectionBruteForceUsersUserIdPathParams
  >({
    url: '/admin/realms/{realm}/attack-detection/brute-force/users/{userId}',
    method: 'delete',
    ...variables,
    signal
  });

export type GetAdminRealmsRealmAuthenticationAuthenticatorProvidersPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
};

export type GetAdminRealmsRealmAuthenticationAuthenticatorProvidersError = Fetcher.ErrorWrapper<undefined>;

export type GetAdminRealmsRealmAuthenticationAuthenticatorProvidersResponse = {
  [key: string]: any;
}[];

export type GetAdminRealmsRealmAuthenticationAuthenticatorProvidersVariables = {
  pathParams: GetAdminRealmsRealmAuthenticationAuthenticatorProvidersPathParams;
} & FetcherExtraProps;

export const getAdminRealmsRealmAuthenticationAuthenticatorProviders = (
  variables: GetAdminRealmsRealmAuthenticationAuthenticatorProvidersVariables,
  signal?: AbortSignal
) =>
  fetch<
    GetAdminRealmsRealmAuthenticationAuthenticatorProvidersResponse,
    GetAdminRealmsRealmAuthenticationAuthenticatorProvidersError,
    undefined,
    {},
    {},
    GetAdminRealmsRealmAuthenticationAuthenticatorProvidersPathParams
  >({ url: '/admin/realms/{realm}/authentication/authenticator-providers', method: 'get', ...variables, signal });

export type GetAdminRealmsRealmAuthenticationClientAuthenticatorProvidersPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
};

export type GetAdminRealmsRealmAuthenticationClientAuthenticatorProvidersError = Fetcher.ErrorWrapper<undefined>;

export type GetAdminRealmsRealmAuthenticationClientAuthenticatorProvidersResponse = {
  [key: string]: any;
}[];

export type GetAdminRealmsRealmAuthenticationClientAuthenticatorProvidersVariables = {
  pathParams: GetAdminRealmsRealmAuthenticationClientAuthenticatorProvidersPathParams;
} & FetcherExtraProps;

export const getAdminRealmsRealmAuthenticationClientAuthenticatorProviders = (
  variables: GetAdminRealmsRealmAuthenticationClientAuthenticatorProvidersVariables,
  signal?: AbortSignal
) =>
  fetch<
    GetAdminRealmsRealmAuthenticationClientAuthenticatorProvidersResponse,
    GetAdminRealmsRealmAuthenticationClientAuthenticatorProvidersError,
    undefined,
    {},
    {},
    GetAdminRealmsRealmAuthenticationClientAuthenticatorProvidersPathParams
  >({
    url: '/admin/realms/{realm}/authentication/client-authenticator-providers',
    method: 'get',
    ...variables,
    signal
  });

export type PostAdminRealmsRealmAuthenticationConfigPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
};

export type PostAdminRealmsRealmAuthenticationConfigError = Fetcher.ErrorWrapper<undefined>;

export type PostAdminRealmsRealmAuthenticationConfigVariables = {
  body?: Schemas.AuthenticatorConfigRepresentation;
  pathParams: PostAdminRealmsRealmAuthenticationConfigPathParams;
} & FetcherExtraProps;

export const postAdminRealmsRealmAuthenticationConfig = (
  variables: PostAdminRealmsRealmAuthenticationConfigVariables,
  signal?: AbortSignal
) =>
  fetch<
    undefined,
    PostAdminRealmsRealmAuthenticationConfigError,
    Schemas.AuthenticatorConfigRepresentation,
    {},
    {},
    PostAdminRealmsRealmAuthenticationConfigPathParams
  >({ url: '/admin/realms/{realm}/authentication/config', method: 'post', ...variables, signal });

export type GetAdminRealmsRealmAuthenticationConfigDescriptionProviderIdPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  providerId: string;
};

export type GetAdminRealmsRealmAuthenticationConfigDescriptionProviderIdError = Fetcher.ErrorWrapper<undefined>;

export type GetAdminRealmsRealmAuthenticationConfigDescriptionProviderIdVariables = {
  pathParams: GetAdminRealmsRealmAuthenticationConfigDescriptionProviderIdPathParams;
} & FetcherExtraProps;

export const getAdminRealmsRealmAuthenticationConfigDescriptionProviderId = (
  variables: GetAdminRealmsRealmAuthenticationConfigDescriptionProviderIdVariables,
  signal?: AbortSignal
) =>
  fetch<
    Schemas.AuthenticatorConfigInfoRepresentation,
    GetAdminRealmsRealmAuthenticationConfigDescriptionProviderIdError,
    undefined,
    {},
    {},
    GetAdminRealmsRealmAuthenticationConfigDescriptionProviderIdPathParams
  >({
    url: '/admin/realms/{realm}/authentication/config-description/{providerId}',
    method: 'get',
    ...variables,
    signal
  });

export type GetAdminRealmsRealmAuthenticationConfigIdPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  /**
   * Configuration id
   */
  id: string;
};

export type GetAdminRealmsRealmAuthenticationConfigIdError = Fetcher.ErrorWrapper<undefined>;

export type GetAdminRealmsRealmAuthenticationConfigIdVariables = {
  pathParams: GetAdminRealmsRealmAuthenticationConfigIdPathParams;
} & FetcherExtraProps;

export const getAdminRealmsRealmAuthenticationConfigId = (
  variables: GetAdminRealmsRealmAuthenticationConfigIdVariables,
  signal?: AbortSignal
) =>
  fetch<
    Schemas.AuthenticatorConfigRepresentation,
    GetAdminRealmsRealmAuthenticationConfigIdError,
    undefined,
    {},
    {},
    GetAdminRealmsRealmAuthenticationConfigIdPathParams
  >({ url: '/admin/realms/{realm}/authentication/config/{id}', method: 'get', ...variables, signal });

export type PutAdminRealmsRealmAuthenticationConfigIdPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  /**
   * Configuration id
   */
  id: string;
};

export type PutAdminRealmsRealmAuthenticationConfigIdError = Fetcher.ErrorWrapper<undefined>;

export type PutAdminRealmsRealmAuthenticationConfigIdVariables = {
  body?: Schemas.AuthenticatorConfigRepresentation;
  pathParams: PutAdminRealmsRealmAuthenticationConfigIdPathParams;
} & FetcherExtraProps;

export const putAdminRealmsRealmAuthenticationConfigId = (
  variables: PutAdminRealmsRealmAuthenticationConfigIdVariables,
  signal?: AbortSignal
) =>
  fetch<
    undefined,
    PutAdminRealmsRealmAuthenticationConfigIdError,
    Schemas.AuthenticatorConfigRepresentation,
    {},
    {},
    PutAdminRealmsRealmAuthenticationConfigIdPathParams
  >({ url: '/admin/realms/{realm}/authentication/config/{id}', method: 'put', ...variables, signal });

export type DeleteAdminRealmsRealmAuthenticationConfigIdPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  /**
   * Configuration id
   */
  id: string;
};

export type DeleteAdminRealmsRealmAuthenticationConfigIdError = Fetcher.ErrorWrapper<undefined>;

export type DeleteAdminRealmsRealmAuthenticationConfigIdVariables = {
  pathParams: DeleteAdminRealmsRealmAuthenticationConfigIdPathParams;
} & FetcherExtraProps;

export const deleteAdminRealmsRealmAuthenticationConfigId = (
  variables: DeleteAdminRealmsRealmAuthenticationConfigIdVariables,
  signal?: AbortSignal
) =>
  fetch<
    undefined,
    DeleteAdminRealmsRealmAuthenticationConfigIdError,
    undefined,
    {},
    {},
    DeleteAdminRealmsRealmAuthenticationConfigIdPathParams
  >({ url: '/admin/realms/{realm}/authentication/config/{id}', method: 'delete', ...variables, signal });

export type PostAdminRealmsRealmAuthenticationExecutionsPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
};

export type PostAdminRealmsRealmAuthenticationExecutionsError = Fetcher.ErrorWrapper<undefined>;

export type PostAdminRealmsRealmAuthenticationExecutionsVariables = {
  body?: Schemas.AuthenticationExecutionRepresentation;
  pathParams: PostAdminRealmsRealmAuthenticationExecutionsPathParams;
} & FetcherExtraProps;

export const postAdminRealmsRealmAuthenticationExecutions = (
  variables: PostAdminRealmsRealmAuthenticationExecutionsVariables,
  signal?: AbortSignal
) =>
  fetch<
    undefined,
    PostAdminRealmsRealmAuthenticationExecutionsError,
    Schemas.AuthenticationExecutionRepresentation,
    {},
    {},
    PostAdminRealmsRealmAuthenticationExecutionsPathParams
  >({ url: '/admin/realms/{realm}/authentication/executions', method: 'post', ...variables, signal });

export type GetAdminRealmsRealmAuthenticationExecutionsExecutionIdPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  executionId: string;
};

export type GetAdminRealmsRealmAuthenticationExecutionsExecutionIdError = Fetcher.ErrorWrapper<undefined>;

export type GetAdminRealmsRealmAuthenticationExecutionsExecutionIdVariables = {
  pathParams: GetAdminRealmsRealmAuthenticationExecutionsExecutionIdPathParams;
} & FetcherExtraProps;

export const getAdminRealmsRealmAuthenticationExecutionsExecutionId = (
  variables: GetAdminRealmsRealmAuthenticationExecutionsExecutionIdVariables,
  signal?: AbortSignal
) =>
  fetch<
    Schemas.AuthenticationExecutionRepresentation,
    GetAdminRealmsRealmAuthenticationExecutionsExecutionIdError,
    undefined,
    {},
    {},
    GetAdminRealmsRealmAuthenticationExecutionsExecutionIdPathParams
  >({ url: '/admin/realms/{realm}/authentication/executions/{executionId}', method: 'get', ...variables, signal });

export type DeleteAdminRealmsRealmAuthenticationExecutionsExecutionIdPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  /**
   * Execution id
   */
  executionId: string;
};

export type DeleteAdminRealmsRealmAuthenticationExecutionsExecutionIdError = Fetcher.ErrorWrapper<undefined>;

export type DeleteAdminRealmsRealmAuthenticationExecutionsExecutionIdVariables = {
  pathParams: DeleteAdminRealmsRealmAuthenticationExecutionsExecutionIdPathParams;
} & FetcherExtraProps;

export const deleteAdminRealmsRealmAuthenticationExecutionsExecutionId = (
  variables: DeleteAdminRealmsRealmAuthenticationExecutionsExecutionIdVariables,
  signal?: AbortSignal
) =>
  fetch<
    undefined,
    DeleteAdminRealmsRealmAuthenticationExecutionsExecutionIdError,
    undefined,
    {},
    {},
    DeleteAdminRealmsRealmAuthenticationExecutionsExecutionIdPathParams
  >({ url: '/admin/realms/{realm}/authentication/executions/{executionId}', method: 'delete', ...variables, signal });

export type PostAdminRealmsRealmAuthenticationExecutionsExecutionIdConfigPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  /**
   * Execution id
   */
  executionId: string;
};

export type PostAdminRealmsRealmAuthenticationExecutionsExecutionIdConfigError = Fetcher.ErrorWrapper<undefined>;

export type PostAdminRealmsRealmAuthenticationExecutionsExecutionIdConfigVariables = {
  body?: Schemas.AuthenticatorConfigRepresentation;
  pathParams: PostAdminRealmsRealmAuthenticationExecutionsExecutionIdConfigPathParams;
} & FetcherExtraProps;

export const postAdminRealmsRealmAuthenticationExecutionsExecutionIdConfig = (
  variables: PostAdminRealmsRealmAuthenticationExecutionsExecutionIdConfigVariables,
  signal?: AbortSignal
) =>
  fetch<
    undefined,
    PostAdminRealmsRealmAuthenticationExecutionsExecutionIdConfigError,
    Schemas.AuthenticatorConfigRepresentation,
    {},
    {},
    PostAdminRealmsRealmAuthenticationExecutionsExecutionIdConfigPathParams
  >({
    url: '/admin/realms/{realm}/authentication/executions/{executionId}/config',
    method: 'post',
    ...variables,
    signal
  });

export type GetAdminRealmsRealmAuthenticationExecutionsExecutionIdConfigIdPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  /**
   * Execution id
   */
  executionId: string;
  /**
   * Configuration id
   */
  id: string;
};

export type GetAdminRealmsRealmAuthenticationExecutionsExecutionIdConfigIdError = Fetcher.ErrorWrapper<undefined>;

export type GetAdminRealmsRealmAuthenticationExecutionsExecutionIdConfigIdVariables = {
  pathParams: GetAdminRealmsRealmAuthenticationExecutionsExecutionIdConfigIdPathParams;
} & FetcherExtraProps;

export const getAdminRealmsRealmAuthenticationExecutionsExecutionIdConfigId = (
  variables: GetAdminRealmsRealmAuthenticationExecutionsExecutionIdConfigIdVariables,
  signal?: AbortSignal
) =>
  fetch<
    Schemas.AuthenticatorConfigRepresentation,
    GetAdminRealmsRealmAuthenticationExecutionsExecutionIdConfigIdError,
    undefined,
    {},
    {},
    GetAdminRealmsRealmAuthenticationExecutionsExecutionIdConfigIdPathParams
  >({
    url: '/admin/realms/{realm}/authentication/executions/{executionId}/config/{id}',
    method: 'get',
    ...variables,
    signal
  });

export type PostAdminRealmsRealmAuthenticationExecutionsExecutionIdLowerPriorityPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  /**
   * Execution id
   */
  executionId: string;
};

export type PostAdminRealmsRealmAuthenticationExecutionsExecutionIdLowerPriorityError = Fetcher.ErrorWrapper<undefined>;

export type PostAdminRealmsRealmAuthenticationExecutionsExecutionIdLowerPriorityVariables = {
  pathParams: PostAdminRealmsRealmAuthenticationExecutionsExecutionIdLowerPriorityPathParams;
} & FetcherExtraProps;

export const postAdminRealmsRealmAuthenticationExecutionsExecutionIdLowerPriority = (
  variables: PostAdminRealmsRealmAuthenticationExecutionsExecutionIdLowerPriorityVariables,
  signal?: AbortSignal
) =>
  fetch<
    undefined,
    PostAdminRealmsRealmAuthenticationExecutionsExecutionIdLowerPriorityError,
    undefined,
    {},
    {},
    PostAdminRealmsRealmAuthenticationExecutionsExecutionIdLowerPriorityPathParams
  >({
    url: '/admin/realms/{realm}/authentication/executions/{executionId}/lower-priority',
    method: 'post',
    ...variables,
    signal
  });

export type PostAdminRealmsRealmAuthenticationExecutionsExecutionIdRaisePriorityPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  /**
   * Execution id
   */
  executionId: string;
};

export type PostAdminRealmsRealmAuthenticationExecutionsExecutionIdRaisePriorityError = Fetcher.ErrorWrapper<undefined>;

export type PostAdminRealmsRealmAuthenticationExecutionsExecutionIdRaisePriorityVariables = {
  pathParams: PostAdminRealmsRealmAuthenticationExecutionsExecutionIdRaisePriorityPathParams;
} & FetcherExtraProps;

export const postAdminRealmsRealmAuthenticationExecutionsExecutionIdRaisePriority = (
  variables: PostAdminRealmsRealmAuthenticationExecutionsExecutionIdRaisePriorityVariables,
  signal?: AbortSignal
) =>
  fetch<
    undefined,
    PostAdminRealmsRealmAuthenticationExecutionsExecutionIdRaisePriorityError,
    undefined,
    {},
    {},
    PostAdminRealmsRealmAuthenticationExecutionsExecutionIdRaisePriorityPathParams
  >({
    url: '/admin/realms/{realm}/authentication/executions/{executionId}/raise-priority',
    method: 'post',
    ...variables,
    signal
  });

export type GetAdminRealmsRealmAuthenticationFlowsPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
};

export type GetAdminRealmsRealmAuthenticationFlowsError = Fetcher.ErrorWrapper<undefined>;

export type GetAdminRealmsRealmAuthenticationFlowsResponse = Schemas.AuthenticationFlowRepresentation[];

export type GetAdminRealmsRealmAuthenticationFlowsVariables = {
  pathParams: GetAdminRealmsRealmAuthenticationFlowsPathParams;
} & FetcherExtraProps;

export const getAdminRealmsRealmAuthenticationFlows = (
  variables: GetAdminRealmsRealmAuthenticationFlowsVariables,
  signal?: AbortSignal
) =>
  fetch<
    GetAdminRealmsRealmAuthenticationFlowsResponse,
    GetAdminRealmsRealmAuthenticationFlowsError,
    undefined,
    {},
    {},
    GetAdminRealmsRealmAuthenticationFlowsPathParams
  >({ url: '/admin/realms/{realm}/authentication/flows', method: 'get', ...variables, signal });

export type PostAdminRealmsRealmAuthenticationFlowsPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
};

export type PostAdminRealmsRealmAuthenticationFlowsError = Fetcher.ErrorWrapper<undefined>;

export type PostAdminRealmsRealmAuthenticationFlowsVariables = {
  body?: Schemas.AuthenticationFlowRepresentation;
  pathParams: PostAdminRealmsRealmAuthenticationFlowsPathParams;
} & FetcherExtraProps;

export const postAdminRealmsRealmAuthenticationFlows = (
  variables: PostAdminRealmsRealmAuthenticationFlowsVariables,
  signal?: AbortSignal
) =>
  fetch<
    undefined,
    PostAdminRealmsRealmAuthenticationFlowsError,
    Schemas.AuthenticationFlowRepresentation,
    {},
    {},
    PostAdminRealmsRealmAuthenticationFlowsPathParams
  >({ url: '/admin/realms/{realm}/authentication/flows', method: 'post', ...variables, signal });

export type PostAdminRealmsRealmAuthenticationFlowsFlowAliasCopyPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  /**
   * name of the existing authentication flow
   */
  flowAlias: string;
};

export type PostAdminRealmsRealmAuthenticationFlowsFlowAliasCopyError = Fetcher.ErrorWrapper<undefined>;

export type PostAdminRealmsRealmAuthenticationFlowsFlowAliasCopyRequestBody = {
  [key: string]: string;
};

export type PostAdminRealmsRealmAuthenticationFlowsFlowAliasCopyVariables = {
  body?: PostAdminRealmsRealmAuthenticationFlowsFlowAliasCopyRequestBody;
  pathParams: PostAdminRealmsRealmAuthenticationFlowsFlowAliasCopyPathParams;
} & FetcherExtraProps;

export const postAdminRealmsRealmAuthenticationFlowsFlowAliasCopy = (
  variables: PostAdminRealmsRealmAuthenticationFlowsFlowAliasCopyVariables,
  signal?: AbortSignal
) =>
  fetch<
    undefined,
    PostAdminRealmsRealmAuthenticationFlowsFlowAliasCopyError,
    PostAdminRealmsRealmAuthenticationFlowsFlowAliasCopyRequestBody,
    {},
    {},
    PostAdminRealmsRealmAuthenticationFlowsFlowAliasCopyPathParams
  >({ url: '/admin/realms/{realm}/authentication/flows/{flowAlias}/copy', method: 'post', ...variables, signal });

export type GetAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  /**
   * Flow alias
   */
  flowAlias: string;
};

export type GetAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsError = Fetcher.ErrorWrapper<undefined>;

export type GetAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsResponse =
  Schemas.AuthenticationExecutionInfoRepresentation[];

export type GetAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsVariables = {
  pathParams: GetAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsPathParams;
} & FetcherExtraProps;

export const getAdminRealmsRealmAuthenticationFlowsFlowAliasExecutions = (
  variables: GetAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsVariables,
  signal?: AbortSignal
) =>
  fetch<
    GetAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsResponse,
    GetAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsError,
    undefined,
    {},
    {},
    GetAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsPathParams
  >({ url: '/admin/realms/{realm}/authentication/flows/{flowAlias}/executions', method: 'get', ...variables, signal });

export type PutAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  /**
   * Flow alias
   */
  flowAlias: string;
};

export type PutAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsError = Fetcher.ErrorWrapper<undefined>;

export type PutAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsVariables = {
  body?: Schemas.AuthenticationExecutionInfoRepresentation;
  pathParams: PutAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsPathParams;
} & FetcherExtraProps;

export const putAdminRealmsRealmAuthenticationFlowsFlowAliasExecutions = (
  variables: PutAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsVariables,
  signal?: AbortSignal
) =>
  fetch<
    undefined,
    PutAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsError,
    Schemas.AuthenticationExecutionInfoRepresentation,
    {},
    {},
    PutAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsPathParams
  >({ url: '/admin/realms/{realm}/authentication/flows/{flowAlias}/executions', method: 'put', ...variables, signal });

export type PostAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsExecutionPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  /**
   * Alias of parent flow
   */
  flowAlias: string;
};

export type PostAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsExecutionError = Fetcher.ErrorWrapper<undefined>;

export type PostAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsExecutionRequestBody = {
  [key: string]: any;
};

export type PostAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsExecutionVariables = {
  body?: PostAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsExecutionRequestBody;
  pathParams: PostAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsExecutionPathParams;
} & FetcherExtraProps;

export const postAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsExecution = (
  variables: PostAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsExecutionVariables,
  signal?: AbortSignal
) =>
  fetch<
    undefined,
    PostAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsExecutionError,
    PostAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsExecutionRequestBody,
    {},
    {},
    PostAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsExecutionPathParams
  >({
    url: '/admin/realms/{realm}/authentication/flows/{flowAlias}/executions/execution',
    method: 'post',
    ...variables,
    signal
  });

export type PostAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsFlowPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  /**
   * Alias of parent authentication flow
   */
  flowAlias: string;
};

export type PostAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsFlowError = Fetcher.ErrorWrapper<undefined>;

export type PostAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsFlowRequestBody = {
  [key: string]: any;
};

export type PostAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsFlowVariables = {
  body?: PostAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsFlowRequestBody;
  pathParams: PostAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsFlowPathParams;
} & FetcherExtraProps;

export const postAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsFlow = (
  variables: PostAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsFlowVariables,
  signal?: AbortSignal
) =>
  fetch<
    undefined,
    PostAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsFlowError,
    PostAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsFlowRequestBody,
    {},
    {},
    PostAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsFlowPathParams
  >({
    url: '/admin/realms/{realm}/authentication/flows/{flowAlias}/executions/flow',
    method: 'post',
    ...variables,
    signal
  });

export type GetAdminRealmsRealmAuthenticationFlowsIdPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  /**
   * Flow id
   */
  id: string;
};

export type GetAdminRealmsRealmAuthenticationFlowsIdError = Fetcher.ErrorWrapper<undefined>;

export type GetAdminRealmsRealmAuthenticationFlowsIdVariables = {
  pathParams: GetAdminRealmsRealmAuthenticationFlowsIdPathParams;
} & FetcherExtraProps;

export const getAdminRealmsRealmAuthenticationFlowsId = (
  variables: GetAdminRealmsRealmAuthenticationFlowsIdVariables,
  signal?: AbortSignal
) =>
  fetch<
    Schemas.AuthenticationFlowRepresentation,
    GetAdminRealmsRealmAuthenticationFlowsIdError,
    undefined,
    {},
    {},
    GetAdminRealmsRealmAuthenticationFlowsIdPathParams
  >({ url: '/admin/realms/{realm}/authentication/flows/{id}', method: 'get', ...variables, signal });

export type PutAdminRealmsRealmAuthenticationFlowsIdPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  id: string;
};

export type PutAdminRealmsRealmAuthenticationFlowsIdError = Fetcher.ErrorWrapper<undefined>;

export type PutAdminRealmsRealmAuthenticationFlowsIdVariables = {
  body?: Schemas.AuthenticationFlowRepresentation;
  pathParams: PutAdminRealmsRealmAuthenticationFlowsIdPathParams;
} & FetcherExtraProps;

export const putAdminRealmsRealmAuthenticationFlowsId = (
  variables: PutAdminRealmsRealmAuthenticationFlowsIdVariables,
  signal?: AbortSignal
) =>
  fetch<
    undefined,
    PutAdminRealmsRealmAuthenticationFlowsIdError,
    Schemas.AuthenticationFlowRepresentation,
    {},
    {},
    PutAdminRealmsRealmAuthenticationFlowsIdPathParams
  >({ url: '/admin/realms/{realm}/authentication/flows/{id}', method: 'put', ...variables, signal });

export type DeleteAdminRealmsRealmAuthenticationFlowsIdPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  /**
   * Flow id
   */
  id: string;
};

export type DeleteAdminRealmsRealmAuthenticationFlowsIdError = Fetcher.ErrorWrapper<undefined>;

export type DeleteAdminRealmsRealmAuthenticationFlowsIdVariables = {
  pathParams: DeleteAdminRealmsRealmAuthenticationFlowsIdPathParams;
} & FetcherExtraProps;

export const deleteAdminRealmsRealmAuthenticationFlowsId = (
  variables: DeleteAdminRealmsRealmAuthenticationFlowsIdVariables,
  signal?: AbortSignal
) =>
  fetch<
    undefined,
    DeleteAdminRealmsRealmAuthenticationFlowsIdError,
    undefined,
    {},
    {},
    DeleteAdminRealmsRealmAuthenticationFlowsIdPathParams
  >({ url: '/admin/realms/{realm}/authentication/flows/{id}', method: 'delete', ...variables, signal });

export type GetAdminRealmsRealmAuthenticationFormActionProvidersPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
};

export type GetAdminRealmsRealmAuthenticationFormActionProvidersError = Fetcher.ErrorWrapper<undefined>;

export type GetAdminRealmsRealmAuthenticationFormActionProvidersResponse = {
  [key: string]: any;
}[];

export type GetAdminRealmsRealmAuthenticationFormActionProvidersVariables = {
  pathParams: GetAdminRealmsRealmAuthenticationFormActionProvidersPathParams;
} & FetcherExtraProps;

export const getAdminRealmsRealmAuthenticationFormActionProviders = (
  variables: GetAdminRealmsRealmAuthenticationFormActionProvidersVariables,
  signal?: AbortSignal
) =>
  fetch<
    GetAdminRealmsRealmAuthenticationFormActionProvidersResponse,
    GetAdminRealmsRealmAuthenticationFormActionProvidersError,
    undefined,
    {},
    {},
    GetAdminRealmsRealmAuthenticationFormActionProvidersPathParams
  >({ url: '/admin/realms/{realm}/authentication/form-action-providers', method: 'get', ...variables, signal });

export type GetAdminRealmsRealmAuthenticationFormProvidersPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
};

export type GetAdminRealmsRealmAuthenticationFormProvidersError = Fetcher.ErrorWrapper<undefined>;

export type GetAdminRealmsRealmAuthenticationFormProvidersResponse = {
  [key: string]: any;
}[];

export type GetAdminRealmsRealmAuthenticationFormProvidersVariables = {
  pathParams: GetAdminRealmsRealmAuthenticationFormProvidersPathParams;
} & FetcherExtraProps;

export const getAdminRealmsRealmAuthenticationFormProviders = (
  variables: GetAdminRealmsRealmAuthenticationFormProvidersVariables,
  signal?: AbortSignal
) =>
  fetch<
    GetAdminRealmsRealmAuthenticationFormProvidersResponse,
    GetAdminRealmsRealmAuthenticationFormProvidersError,
    undefined,
    {},
    {},
    GetAdminRealmsRealmAuthenticationFormProvidersPathParams
  >({ url: '/admin/realms/{realm}/authentication/form-providers', method: 'get', ...variables, signal });

export type GetAdminRealmsRealmAuthenticationPerClientConfigDescriptionPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
};

export type GetAdminRealmsRealmAuthenticationPerClientConfigDescriptionError = Fetcher.ErrorWrapper<undefined>;

export type GetAdminRealmsRealmAuthenticationPerClientConfigDescriptionResponse = {
  [key: string]: Schemas.ConfigPropertyRepresentation[];
};

export type GetAdminRealmsRealmAuthenticationPerClientConfigDescriptionVariables = {
  pathParams: GetAdminRealmsRealmAuthenticationPerClientConfigDescriptionPathParams;
} & FetcherExtraProps;

export const getAdminRealmsRealmAuthenticationPerClientConfigDescription = (
  variables: GetAdminRealmsRealmAuthenticationPerClientConfigDescriptionVariables,
  signal?: AbortSignal
) =>
  fetch<
    GetAdminRealmsRealmAuthenticationPerClientConfigDescriptionResponse,
    GetAdminRealmsRealmAuthenticationPerClientConfigDescriptionError,
    undefined,
    {},
    {},
    GetAdminRealmsRealmAuthenticationPerClientConfigDescriptionPathParams
  >({ url: '/admin/realms/{realm}/authentication/per-client-config-description', method: 'get', ...variables, signal });

export type PostAdminRealmsRealmAuthenticationRegisterRequiredActionPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
};

export type PostAdminRealmsRealmAuthenticationRegisterRequiredActionError = Fetcher.ErrorWrapper<undefined>;

export type PostAdminRealmsRealmAuthenticationRegisterRequiredActionRequestBody = {
  [key: string]: string;
};

export type PostAdminRealmsRealmAuthenticationRegisterRequiredActionVariables = {
  body?: PostAdminRealmsRealmAuthenticationRegisterRequiredActionRequestBody;
  pathParams: PostAdminRealmsRealmAuthenticationRegisterRequiredActionPathParams;
} & FetcherExtraProps;

export const postAdminRealmsRealmAuthenticationRegisterRequiredAction = (
  variables: PostAdminRealmsRealmAuthenticationRegisterRequiredActionVariables,
  signal?: AbortSignal
) =>
  fetch<
    undefined,
    PostAdminRealmsRealmAuthenticationRegisterRequiredActionError,
    PostAdminRealmsRealmAuthenticationRegisterRequiredActionRequestBody,
    {},
    {},
    PostAdminRealmsRealmAuthenticationRegisterRequiredActionPathParams
  >({ url: '/admin/realms/{realm}/authentication/register-required-action', method: 'post', ...variables, signal });

export type GetAdminRealmsRealmAuthenticationRequiredActionsPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
};

export type GetAdminRealmsRealmAuthenticationRequiredActionsError = Fetcher.ErrorWrapper<undefined>;

export type GetAdminRealmsRealmAuthenticationRequiredActionsResponse = Schemas.RequiredActionProviderRepresentation[];

export type GetAdminRealmsRealmAuthenticationRequiredActionsVariables = {
  pathParams: GetAdminRealmsRealmAuthenticationRequiredActionsPathParams;
} & FetcherExtraProps;

export const getAdminRealmsRealmAuthenticationRequiredActions = (
  variables: GetAdminRealmsRealmAuthenticationRequiredActionsVariables,
  signal?: AbortSignal
) =>
  fetch<
    GetAdminRealmsRealmAuthenticationRequiredActionsResponse,
    GetAdminRealmsRealmAuthenticationRequiredActionsError,
    undefined,
    {},
    {},
    GetAdminRealmsRealmAuthenticationRequiredActionsPathParams
  >({ url: '/admin/realms/{realm}/authentication/required-actions', method: 'get', ...variables, signal });

export type GetAdminRealmsRealmAuthenticationRequiredActionsAliasPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  /**
   * Alias of required action
   */
  alias: string;
};

export type GetAdminRealmsRealmAuthenticationRequiredActionsAliasError = Fetcher.ErrorWrapper<undefined>;

export type GetAdminRealmsRealmAuthenticationRequiredActionsAliasVariables = {
  pathParams: GetAdminRealmsRealmAuthenticationRequiredActionsAliasPathParams;
} & FetcherExtraProps;

export const getAdminRealmsRealmAuthenticationRequiredActionsAlias = (
  variables: GetAdminRealmsRealmAuthenticationRequiredActionsAliasVariables,
  signal?: AbortSignal
) =>
  fetch<
    Schemas.RequiredActionProviderRepresentation,
    GetAdminRealmsRealmAuthenticationRequiredActionsAliasError,
    undefined,
    {},
    {},
    GetAdminRealmsRealmAuthenticationRequiredActionsAliasPathParams
  >({ url: '/admin/realms/{realm}/authentication/required-actions/{alias}', method: 'get', ...variables, signal });

export type PutAdminRealmsRealmAuthenticationRequiredActionsAliasPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  /**
   * Alias of required action
   */
  alias: string;
};

export type PutAdminRealmsRealmAuthenticationRequiredActionsAliasError = Fetcher.ErrorWrapper<undefined>;

export type PutAdminRealmsRealmAuthenticationRequiredActionsAliasVariables = {
  body?: Schemas.RequiredActionProviderRepresentation;
  pathParams: PutAdminRealmsRealmAuthenticationRequiredActionsAliasPathParams;
} & FetcherExtraProps;

export const putAdminRealmsRealmAuthenticationRequiredActionsAlias = (
  variables: PutAdminRealmsRealmAuthenticationRequiredActionsAliasVariables,
  signal?: AbortSignal
) =>
  fetch<
    undefined,
    PutAdminRealmsRealmAuthenticationRequiredActionsAliasError,
    Schemas.RequiredActionProviderRepresentation,
    {},
    {},
    PutAdminRealmsRealmAuthenticationRequiredActionsAliasPathParams
  >({ url: '/admin/realms/{realm}/authentication/required-actions/{alias}', method: 'put', ...variables, signal });

export type DeleteAdminRealmsRealmAuthenticationRequiredActionsAliasPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  /**
   * Alias of required action
   */
  alias: string;
};

export type DeleteAdminRealmsRealmAuthenticationRequiredActionsAliasError = Fetcher.ErrorWrapper<undefined>;

export type DeleteAdminRealmsRealmAuthenticationRequiredActionsAliasVariables = {
  pathParams: DeleteAdminRealmsRealmAuthenticationRequiredActionsAliasPathParams;
} & FetcherExtraProps;

export const deleteAdminRealmsRealmAuthenticationRequiredActionsAlias = (
  variables: DeleteAdminRealmsRealmAuthenticationRequiredActionsAliasVariables,
  signal?: AbortSignal
) =>
  fetch<
    undefined,
    DeleteAdminRealmsRealmAuthenticationRequiredActionsAliasError,
    undefined,
    {},
    {},
    DeleteAdminRealmsRealmAuthenticationRequiredActionsAliasPathParams
  >({ url: '/admin/realms/{realm}/authentication/required-actions/{alias}', method: 'delete', ...variables, signal });

export type GetAdminRealmsRealmAuthenticationRequiredActionsAliasConfigPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  /**
   * Alias of required action
   */
  alias: string;
};

export type GetAdminRealmsRealmAuthenticationRequiredActionsAliasConfigError = Fetcher.ErrorWrapper<undefined>;

export type GetAdminRealmsRealmAuthenticationRequiredActionsAliasConfigVariables = {
  pathParams: GetAdminRealmsRealmAuthenticationRequiredActionsAliasConfigPathParams;
} & FetcherExtraProps;

export const getAdminRealmsRealmAuthenticationRequiredActionsAliasConfig = (
  variables: GetAdminRealmsRealmAuthenticationRequiredActionsAliasConfigVariables,
  signal?: AbortSignal
) =>
  fetch<
    Schemas.RequiredActionConfigRepresentation,
    GetAdminRealmsRealmAuthenticationRequiredActionsAliasConfigError,
    undefined,
    {},
    {},
    GetAdminRealmsRealmAuthenticationRequiredActionsAliasConfigPathParams
  >({
    url: '/admin/realms/{realm}/authentication/required-actions/{alias}/config',
    method: 'get',
    ...variables,
    signal
  });

export type PutAdminRealmsRealmAuthenticationRequiredActionsAliasConfigPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  /**
   * Alias of required action
   */
  alias: string;
};

export type PutAdminRealmsRealmAuthenticationRequiredActionsAliasConfigError = Fetcher.ErrorWrapper<undefined>;

export type PutAdminRealmsRealmAuthenticationRequiredActionsAliasConfigVariables = {
  body?: Schemas.RequiredActionConfigRepresentation;
  pathParams: PutAdminRealmsRealmAuthenticationRequiredActionsAliasConfigPathParams;
} & FetcherExtraProps;

export const putAdminRealmsRealmAuthenticationRequiredActionsAliasConfig = (
  variables: PutAdminRealmsRealmAuthenticationRequiredActionsAliasConfigVariables,
  signal?: AbortSignal
) =>
  fetch<
    undefined,
    PutAdminRealmsRealmAuthenticationRequiredActionsAliasConfigError,
    Schemas.RequiredActionConfigRepresentation,
    {},
    {},
    PutAdminRealmsRealmAuthenticationRequiredActionsAliasConfigPathParams
  >({
    url: '/admin/realms/{realm}/authentication/required-actions/{alias}/config',
    method: 'put',
    ...variables,
    signal
  });

export type DeleteAdminRealmsRealmAuthenticationRequiredActionsAliasConfigPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  /**
   * Alias of required action
   */
  alias: string;
};

export type DeleteAdminRealmsRealmAuthenticationRequiredActionsAliasConfigError = Fetcher.ErrorWrapper<undefined>;

export type DeleteAdminRealmsRealmAuthenticationRequiredActionsAliasConfigVariables = {
  pathParams: DeleteAdminRealmsRealmAuthenticationRequiredActionsAliasConfigPathParams;
} & FetcherExtraProps;

export const deleteAdminRealmsRealmAuthenticationRequiredActionsAliasConfig = (
  variables: DeleteAdminRealmsRealmAuthenticationRequiredActionsAliasConfigVariables,
  signal?: AbortSignal
) =>
  fetch<
    undefined,
    DeleteAdminRealmsRealmAuthenticationRequiredActionsAliasConfigError,
    undefined,
    {},
    {},
    DeleteAdminRealmsRealmAuthenticationRequiredActionsAliasConfigPathParams
  >({
    url: '/admin/realms/{realm}/authentication/required-actions/{alias}/config',
    method: 'delete',
    ...variables,
    signal
  });

export type GetAdminRealmsRealmAuthenticationRequiredActionsAliasConfigDescriptionPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  /**
   * Alias of required action
   */
  alias: string;
};

export type GetAdminRealmsRealmAuthenticationRequiredActionsAliasConfigDescriptionError =
  Fetcher.ErrorWrapper<undefined>;

export type GetAdminRealmsRealmAuthenticationRequiredActionsAliasConfigDescriptionVariables = {
  pathParams: GetAdminRealmsRealmAuthenticationRequiredActionsAliasConfigDescriptionPathParams;
} & FetcherExtraProps;

export const getAdminRealmsRealmAuthenticationRequiredActionsAliasConfigDescription = (
  variables: GetAdminRealmsRealmAuthenticationRequiredActionsAliasConfigDescriptionVariables,
  signal?: AbortSignal
) =>
  fetch<
    Schemas.RequiredActionConfigInfoRepresentation,
    GetAdminRealmsRealmAuthenticationRequiredActionsAliasConfigDescriptionError,
    undefined,
    {},
    {},
    GetAdminRealmsRealmAuthenticationRequiredActionsAliasConfigDescriptionPathParams
  >({
    url: '/admin/realms/{realm}/authentication/required-actions/{alias}/config-description',
    method: 'get',
    ...variables,
    signal
  });

export type PostAdminRealmsRealmAuthenticationRequiredActionsAliasLowerPriorityPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  /**
   * Alias of required action
   */
  alias: string;
};

export type PostAdminRealmsRealmAuthenticationRequiredActionsAliasLowerPriorityError = Fetcher.ErrorWrapper<undefined>;

export type PostAdminRealmsRealmAuthenticationRequiredActionsAliasLowerPriorityVariables = {
  pathParams: PostAdminRealmsRealmAuthenticationRequiredActionsAliasLowerPriorityPathParams;
} & FetcherExtraProps;

export const postAdminRealmsRealmAuthenticationRequiredActionsAliasLowerPriority = (
  variables: PostAdminRealmsRealmAuthenticationRequiredActionsAliasLowerPriorityVariables,
  signal?: AbortSignal
) =>
  fetch<
    undefined,
    PostAdminRealmsRealmAuthenticationRequiredActionsAliasLowerPriorityError,
    undefined,
    {},
    {},
    PostAdminRealmsRealmAuthenticationRequiredActionsAliasLowerPriorityPathParams
  >({
    url: '/admin/realms/{realm}/authentication/required-actions/{alias}/lower-priority',
    method: 'post',
    ...variables,
    signal
  });

export type PostAdminRealmsRealmAuthenticationRequiredActionsAliasRaisePriorityPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  /**
   * Alias of required action
   */
  alias: string;
};

export type PostAdminRealmsRealmAuthenticationRequiredActionsAliasRaisePriorityError = Fetcher.ErrorWrapper<undefined>;

export type PostAdminRealmsRealmAuthenticationRequiredActionsAliasRaisePriorityVariables = {
  pathParams: PostAdminRealmsRealmAuthenticationRequiredActionsAliasRaisePriorityPathParams;
} & FetcherExtraProps;

export const postAdminRealmsRealmAuthenticationRequiredActionsAliasRaisePriority = (
  variables: PostAdminRealmsRealmAuthenticationRequiredActionsAliasRaisePriorityVariables,
  signal?: AbortSignal
) =>
  fetch<
    undefined,
    PostAdminRealmsRealmAuthenticationRequiredActionsAliasRaisePriorityError,
    undefined,
    {},
    {},
    PostAdminRealmsRealmAuthenticationRequiredActionsAliasRaisePriorityPathParams
  >({
    url: '/admin/realms/{realm}/authentication/required-actions/{alias}/raise-priority',
    method: 'post',
    ...variables,
    signal
  });

export type GetAdminRealmsRealmAuthenticationUnregisteredRequiredActionsPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
};

export type GetAdminRealmsRealmAuthenticationUnregisteredRequiredActionsError = Fetcher.ErrorWrapper<undefined>;

export type GetAdminRealmsRealmAuthenticationUnregisteredRequiredActionsResponse = {
  [key: string]: string;
}[];

export type GetAdminRealmsRealmAuthenticationUnregisteredRequiredActionsVariables = {
  pathParams: GetAdminRealmsRealmAuthenticationUnregisteredRequiredActionsPathParams;
} & FetcherExtraProps;

export const getAdminRealmsRealmAuthenticationUnregisteredRequiredActions = (
  variables: GetAdminRealmsRealmAuthenticationUnregisteredRequiredActionsVariables,
  signal?: AbortSignal
) =>
  fetch<
    GetAdminRealmsRealmAuthenticationUnregisteredRequiredActionsResponse,
    GetAdminRealmsRealmAuthenticationUnregisteredRequiredActionsError,
    undefined,
    {},
    {},
    GetAdminRealmsRealmAuthenticationUnregisteredRequiredActionsPathParams
  >({ url: '/admin/realms/{realm}/authentication/unregistered-required-actions', method: 'get', ...variables, signal });

export type PostAdminRealmsRealmClientDescriptionConverterPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
};

export type PostAdminRealmsRealmClientDescriptionConverterError = Fetcher.ErrorWrapper<undefined>;

export type PostAdminRealmsRealmClientDescriptionConverterVariables = {
  body?: string;
  pathParams: PostAdminRealmsRealmClientDescriptionConverterPathParams;
} & FetcherExtraProps;

export const postAdminRealmsRealmClientDescriptionConverter = (
  variables: PostAdminRealmsRealmClientDescriptionConverterVariables,
  signal?: AbortSignal
) =>
  fetch<
    Schemas.ClientRepresentation,
    PostAdminRealmsRealmClientDescriptionConverterError,
    string,
    {},
    {},
    PostAdminRealmsRealmClientDescriptionConverterPathParams
  >({ url: '/admin/realms/{realm}/client-description-converter', method: 'post', ...variables, signal });

export type GetAdminRealmsRealmClientPoliciesPoliciesPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
};

export type GetAdminRealmsRealmClientPoliciesPoliciesQueryParams = {
  ['include-global-policies']?: boolean;
};

export type GetAdminRealmsRealmClientPoliciesPoliciesError = Fetcher.ErrorWrapper<undefined>;

export type GetAdminRealmsRealmClientPoliciesPoliciesVariables = {
  pathParams: GetAdminRealmsRealmClientPoliciesPoliciesPathParams;
  queryParams?: GetAdminRealmsRealmClientPoliciesPoliciesQueryParams;
} & FetcherExtraProps;

export const getAdminRealmsRealmClientPoliciesPolicies = (
  variables: GetAdminRealmsRealmClientPoliciesPoliciesVariables,
  signal?: AbortSignal
) =>
  fetch<
    Schemas.ClientPoliciesRepresentation,
    GetAdminRealmsRealmClientPoliciesPoliciesError,
    undefined,
    {},
    GetAdminRealmsRealmClientPoliciesPoliciesQueryParams,
    GetAdminRealmsRealmClientPoliciesPoliciesPathParams
  >({ url: '/admin/realms/{realm}/client-policies/policies', method: 'get', ...variables, signal });

export type PutAdminRealmsRealmClientPoliciesPoliciesPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
};

export type PutAdminRealmsRealmClientPoliciesPoliciesError = Fetcher.ErrorWrapper<undefined>;

export type PutAdminRealmsRealmClientPoliciesPoliciesVariables = {
  body?: Schemas.ClientPoliciesRepresentation;
  pathParams: PutAdminRealmsRealmClientPoliciesPoliciesPathParams;
} & FetcherExtraProps;

export const putAdminRealmsRealmClientPoliciesPolicies = (
  variables: PutAdminRealmsRealmClientPoliciesPoliciesVariables,
  signal?: AbortSignal
) =>
  fetch<
    undefined,
    PutAdminRealmsRealmClientPoliciesPoliciesError,
    Schemas.ClientPoliciesRepresentation,
    {},
    {},
    PutAdminRealmsRealmClientPoliciesPoliciesPathParams
  >({ url: '/admin/realms/{realm}/client-policies/policies', method: 'put', ...variables, signal });

export type GetAdminRealmsRealmClientPoliciesProfilesPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
};

export type GetAdminRealmsRealmClientPoliciesProfilesQueryParams = {
  ['include-global-profiles']?: boolean;
};

export type GetAdminRealmsRealmClientPoliciesProfilesError = Fetcher.ErrorWrapper<undefined>;

export type GetAdminRealmsRealmClientPoliciesProfilesVariables = {
  pathParams: GetAdminRealmsRealmClientPoliciesProfilesPathParams;
  queryParams?: GetAdminRealmsRealmClientPoliciesProfilesQueryParams;
} & FetcherExtraProps;

export const getAdminRealmsRealmClientPoliciesProfiles = (
  variables: GetAdminRealmsRealmClientPoliciesProfilesVariables,
  signal?: AbortSignal
) =>
  fetch<
    Schemas.ClientProfilesRepresentation,
    GetAdminRealmsRealmClientPoliciesProfilesError,
    undefined,
    {},
    GetAdminRealmsRealmClientPoliciesProfilesQueryParams,
    GetAdminRealmsRealmClientPoliciesProfilesPathParams
  >({ url: '/admin/realms/{realm}/client-policies/profiles', method: 'get', ...variables, signal });

export type PutAdminRealmsRealmClientPoliciesProfilesPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
};

export type PutAdminRealmsRealmClientPoliciesProfilesError = Fetcher.ErrorWrapper<undefined>;

export type PutAdminRealmsRealmClientPoliciesProfilesVariables = {
  body?: Schemas.ClientProfilesRepresentation;
  pathParams: PutAdminRealmsRealmClientPoliciesProfilesPathParams;
} & FetcherExtraProps;

export const putAdminRealmsRealmClientPoliciesProfiles = (
  variables: PutAdminRealmsRealmClientPoliciesProfilesVariables,
  signal?: AbortSignal
) =>
  fetch<
    undefined,
    PutAdminRealmsRealmClientPoliciesProfilesError,
    Schemas.ClientProfilesRepresentation,
    {},
    {},
    PutAdminRealmsRealmClientPoliciesProfilesPathParams
  >({ url: '/admin/realms/{realm}/client-policies/profiles', method: 'put', ...variables, signal });

export type GetAdminRealmsRealmClientRegistrationPolicyProvidersPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
};

export type GetAdminRealmsRealmClientRegistrationPolicyProvidersError = Fetcher.ErrorWrapper<undefined>;

export type GetAdminRealmsRealmClientRegistrationPolicyProvidersResponse = Schemas.ComponentTypeRepresentation[];

export type GetAdminRealmsRealmClientRegistrationPolicyProvidersVariables = {
  pathParams: GetAdminRealmsRealmClientRegistrationPolicyProvidersPathParams;
} & FetcherExtraProps;

export const getAdminRealmsRealmClientRegistrationPolicyProviders = (
  variables: GetAdminRealmsRealmClientRegistrationPolicyProvidersVariables,
  signal?: AbortSignal
) =>
  fetch<
    GetAdminRealmsRealmClientRegistrationPolicyProvidersResponse,
    GetAdminRealmsRealmClientRegistrationPolicyProvidersError,
    undefined,
    {},
    {},
    GetAdminRealmsRealmClientRegistrationPolicyProvidersPathParams
  >({ url: '/admin/realms/{realm}/client-registration-policy/providers', method: 'get', ...variables, signal });

export type GetAdminRealmsRealmClientScopesPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
};

export type GetAdminRealmsRealmClientScopesError = Fetcher.ErrorWrapper<undefined>;

export type GetAdminRealmsRealmClientScopesResponse = Schemas.ClientScopeRepresentation[];

export type GetAdminRealmsRealmClientScopesVariables = {
  pathParams: GetAdminRealmsRealmClientScopesPathParams;
} & FetcherExtraProps;

export const getAdminRealmsRealmClientScopes = (
  variables: GetAdminRealmsRealmClientScopesVariables,
  signal?: AbortSignal
) =>
  fetch<
    GetAdminRealmsRealmClientScopesResponse,
    GetAdminRealmsRealmClientScopesError,
    undefined,
    {},
    {},
    GetAdminRealmsRealmClientScopesPathParams
  >({ url: '/admin/realms/{realm}/client-scopes', method: 'get', ...variables, signal });

export type PostAdminRealmsRealmClientScopesPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
};

export type PostAdminRealmsRealmClientScopesError = Fetcher.ErrorWrapper<undefined>;

export type PostAdminRealmsRealmClientScopesVariables = {
  body?: Schemas.ClientScopeRepresentation;
  pathParams: PostAdminRealmsRealmClientScopesPathParams;
} & FetcherExtraProps;

export const postAdminRealmsRealmClientScopes = (
  variables: PostAdminRealmsRealmClientScopesVariables,
  signal?: AbortSignal
) =>
  fetch<
    undefined,
    PostAdminRealmsRealmClientScopesError,
    Schemas.ClientScopeRepresentation,
    {},
    {},
    PostAdminRealmsRealmClientScopesPathParams
  >({ url: '/admin/realms/{realm}/client-scopes', method: 'post', ...variables, signal });

export type GetAdminRealmsRealmClientScopesClientScopeIdPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  clientScopeId: string;
};

export type GetAdminRealmsRealmClientScopesClientScopeIdError = Fetcher.ErrorWrapper<undefined>;

export type GetAdminRealmsRealmClientScopesClientScopeIdVariables = {
  pathParams: GetAdminRealmsRealmClientScopesClientScopeIdPathParams;
} & FetcherExtraProps;

export const getAdminRealmsRealmClientScopesClientScopeId = (
  variables: GetAdminRealmsRealmClientScopesClientScopeIdVariables,
  signal?: AbortSignal
) =>
  fetch<
    Schemas.ClientScopeRepresentation,
    GetAdminRealmsRealmClientScopesClientScopeIdError,
    undefined,
    {},
    {},
    GetAdminRealmsRealmClientScopesClientScopeIdPathParams
  >({ url: '/admin/realms/{realm}/client-scopes/{clientScopeId}', method: 'get', ...variables, signal });

export type PutAdminRealmsRealmClientScopesClientScopeIdPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  clientScopeId: string;
};

export type PutAdminRealmsRealmClientScopesClientScopeIdError = Fetcher.ErrorWrapper<undefined>;

export type PutAdminRealmsRealmClientScopesClientScopeIdVariables = {
  body?: Schemas.ClientScopeRepresentation;
  pathParams: PutAdminRealmsRealmClientScopesClientScopeIdPathParams;
} & FetcherExtraProps;

export const putAdminRealmsRealmClientScopesClientScopeId = (
  variables: PutAdminRealmsRealmClientScopesClientScopeIdVariables,
  signal?: AbortSignal
) =>
  fetch<
    undefined,
    PutAdminRealmsRealmClientScopesClientScopeIdError,
    Schemas.ClientScopeRepresentation,
    {},
    {},
    PutAdminRealmsRealmClientScopesClientScopeIdPathParams
  >({ url: '/admin/realms/{realm}/client-scopes/{clientScopeId}', method: 'put', ...variables, signal });

export type DeleteAdminRealmsRealmClientScopesClientScopeIdPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  clientScopeId: string;
};

export type DeleteAdminRealmsRealmClientScopesClientScopeIdError = Fetcher.ErrorWrapper<undefined>;

export type DeleteAdminRealmsRealmClientScopesClientScopeIdVariables = {
  pathParams: DeleteAdminRealmsRealmClientScopesClientScopeIdPathParams;
} & FetcherExtraProps;

export const deleteAdminRealmsRealmClientScopesClientScopeId = (
  variables: DeleteAdminRealmsRealmClientScopesClientScopeIdVariables,
  signal?: AbortSignal
) =>
  fetch<
    undefined,
    DeleteAdminRealmsRealmClientScopesClientScopeIdError,
    undefined,
    {},
    {},
    DeleteAdminRealmsRealmClientScopesClientScopeIdPathParams
  >({ url: '/admin/realms/{realm}/client-scopes/{clientScopeId}', method: 'delete', ...variables, signal });

export type PostAdminRealmsRealmClientScopesClientScopeIdProtocolMappersAddModelsPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  clientScopeId: string;
};

export type PostAdminRealmsRealmClientScopesClientScopeIdProtocolMappersAddModelsError =
  Fetcher.ErrorWrapper<undefined>;

export type PostAdminRealmsRealmClientScopesClientScopeIdProtocolMappersAddModelsRequestBody =
  Schemas.ProtocolMapperRepresentation[];

export type PostAdminRealmsRealmClientScopesClientScopeIdProtocolMappersAddModelsVariables = {
  body?: PostAdminRealmsRealmClientScopesClientScopeIdProtocolMappersAddModelsRequestBody;
  pathParams: PostAdminRealmsRealmClientScopesClientScopeIdProtocolMappersAddModelsPathParams;
} & FetcherExtraProps;

export const postAdminRealmsRealmClientScopesClientScopeIdProtocolMappersAddModels = (
  variables: PostAdminRealmsRealmClientScopesClientScopeIdProtocolMappersAddModelsVariables,
  signal?: AbortSignal
) =>
  fetch<
    undefined,
    PostAdminRealmsRealmClientScopesClientScopeIdProtocolMappersAddModelsError,
    PostAdminRealmsRealmClientScopesClientScopeIdProtocolMappersAddModelsRequestBody,
    {},
    {},
    PostAdminRealmsRealmClientScopesClientScopeIdProtocolMappersAddModelsPathParams
  >({
    url: '/admin/realms/{realm}/client-scopes/{clientScopeId}/protocol-mappers/add-models',
    method: 'post',
    ...variables,
    signal
  });

export type GetAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  clientScopeId: string;
};

export type GetAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsError = Fetcher.ErrorWrapper<undefined>;

export type GetAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsResponse =
  Schemas.ProtocolMapperRepresentation[];

export type GetAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsVariables = {
  pathParams: GetAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsPathParams;
} & FetcherExtraProps;

export const getAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModels = (
  variables: GetAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsVariables,
  signal?: AbortSignal
) =>
  fetch<
    GetAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsResponse,
    GetAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsError,
    undefined,
    {},
    {},
    GetAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsPathParams
  >({
    url: '/admin/realms/{realm}/client-scopes/{clientScopeId}/protocol-mappers/models',
    method: 'get',
    ...variables,
    signal
  });

export type PostAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  clientScopeId: string;
};

export type PostAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsError = Fetcher.ErrorWrapper<undefined>;

export type PostAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsVariables = {
  body?: Schemas.ProtocolMapperRepresentation;
  pathParams: PostAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsPathParams;
} & FetcherExtraProps;

export const postAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModels = (
  variables: PostAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsVariables,
  signal?: AbortSignal
) =>
  fetch<
    undefined,
    PostAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsError,
    Schemas.ProtocolMapperRepresentation,
    {},
    {},
    PostAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsPathParams
  >({
    url: '/admin/realms/{realm}/client-scopes/{clientScopeId}/protocol-mappers/models',
    method: 'post',
    ...variables,
    signal
  });

export type GetAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  clientScopeId: string;
  /**
   * Mapper id
   */
  id: string;
};

export type GetAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdError = Fetcher.ErrorWrapper<undefined>;

export type GetAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdVariables = {
  pathParams: GetAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdPathParams;
} & FetcherExtraProps;

export const getAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsId = (
  variables: GetAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdVariables,
  signal?: AbortSignal
) =>
  fetch<
    Schemas.ProtocolMapperRepresentation,
    GetAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdError,
    undefined,
    {},
    {},
    GetAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdPathParams
  >({
    url: '/admin/realms/{realm}/client-scopes/{clientScopeId}/protocol-mappers/models/{id}',
    method: 'get',
    ...variables,
    signal
  });

export type PutAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  clientScopeId: string;
  /**
   * Mapper id
   */
  id: string;
};

export type PutAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdError = Fetcher.ErrorWrapper<undefined>;

export type PutAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdVariables = {
  body?: Schemas.ProtocolMapperRepresentation;
  pathParams: PutAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdPathParams;
} & FetcherExtraProps;

export const putAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsId = (
  variables: PutAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdVariables,
  signal?: AbortSignal
) =>
  fetch<
    undefined,
    PutAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdError,
    Schemas.ProtocolMapperRepresentation,
    {},
    {},
    PutAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdPathParams
  >({
    url: '/admin/realms/{realm}/client-scopes/{clientScopeId}/protocol-mappers/models/{id}',
    method: 'put',
    ...variables,
    signal
  });

export type DeleteAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  clientScopeId: string;
  /**
   * Mapper id
   */
  id: string;
};

export type DeleteAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdError =
  Fetcher.ErrorWrapper<undefined>;

export type DeleteAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdVariables = {
  pathParams: DeleteAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdPathParams;
} & FetcherExtraProps;

export const deleteAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsId = (
  variables: DeleteAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdVariables,
  signal?: AbortSignal
) =>
  fetch<
    undefined,
    DeleteAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdError,
    undefined,
    {},
    {},
    DeleteAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdPathParams
  >({
    url: '/admin/realms/{realm}/client-scopes/{clientScopeId}/protocol-mappers/models/{id}',
    method: 'delete',
    ...variables,
    signal
  });

export type GetAdminRealmsRealmClientScopesClientScopeIdProtocolMappersProtocolProtocolPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  clientScopeId: string;
  protocol: string;
};

export type GetAdminRealmsRealmClientScopesClientScopeIdProtocolMappersProtocolProtocolError =
  Fetcher.ErrorWrapper<undefined>;

export type GetAdminRealmsRealmClientScopesClientScopeIdProtocolMappersProtocolProtocolResponse =
  Schemas.ProtocolMapperRepresentation[];

export type GetAdminRealmsRealmClientScopesClientScopeIdProtocolMappersProtocolProtocolVariables = {
  pathParams: GetAdminRealmsRealmClientScopesClientScopeIdProtocolMappersProtocolProtocolPathParams;
} & FetcherExtraProps;

export const getAdminRealmsRealmClientScopesClientScopeIdProtocolMappersProtocolProtocol = (
  variables: GetAdminRealmsRealmClientScopesClientScopeIdProtocolMappersProtocolProtocolVariables,
  signal?: AbortSignal
) =>
  fetch<
    GetAdminRealmsRealmClientScopesClientScopeIdProtocolMappersProtocolProtocolResponse,
    GetAdminRealmsRealmClientScopesClientScopeIdProtocolMappersProtocolProtocolError,
    undefined,
    {},
    {},
    GetAdminRealmsRealmClientScopesClientScopeIdProtocolMappersProtocolProtocolPathParams
  >({
    url: '/admin/realms/{realm}/client-scopes/{clientScopeId}/protocol-mappers/protocol/{protocol}',
    method: 'get',
    ...variables,
    signal
  });

export type GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  clientScopeId: string;
};

export type GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsError = Fetcher.ErrorWrapper<undefined>;

export type GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsVariables = {
  pathParams: GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsPathParams;
} & FetcherExtraProps;

export const getAdminRealmsRealmClientScopesClientScopeIdScopeMappings = (
  variables: GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsVariables,
  signal?: AbortSignal
) =>
  fetch<
    Schemas.MappingsRepresentation,
    GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsError,
    undefined,
    {},
    {},
    GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsPathParams
  >({ url: '/admin/realms/{realm}/client-scopes/{clientScopeId}/scope-mappings', method: 'get', ...variables, signal });

export type GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  clientScopeId: string;
  client: string;
};

export type GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientError =
  Fetcher.ErrorWrapper<undefined>;

export type GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientResponse =
  Schemas.RoleRepresentation[];

export type GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientVariables = {
  pathParams: GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientPathParams;
} & FetcherExtraProps;

export const getAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClient = (
  variables: GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientVariables,
  signal?: AbortSignal
) =>
  fetch<
    GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientResponse,
    GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientError,
    undefined,
    {},
    {},
    GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientPathParams
  >({
    url: '/admin/realms/{realm}/client-scopes/{clientScopeId}/scope-mappings/clients/{client}',
    method: 'get',
    ...variables,
    signal
  });

export type PostAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  clientScopeId: string;
  client: string;
};

export type PostAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientError =
  Fetcher.ErrorWrapper<undefined>;

export type PostAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientRequestBody =
  Schemas.RoleRepresentation[];

export type PostAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientVariables = {
  body?: PostAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientRequestBody;
  pathParams: PostAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientPathParams;
} & FetcherExtraProps;

export const postAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClient = (
  variables: PostAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientVariables,
  signal?: AbortSignal
) =>
  fetch<
    undefined,
    PostAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientError,
    PostAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientRequestBody,
    {},
    {},
    PostAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientPathParams
  >({
    url: '/admin/realms/{realm}/client-scopes/{clientScopeId}/scope-mappings/clients/{client}',
    method: 'post',
    ...variables,
    signal
  });

export type DeleteAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  clientScopeId: string;
  client: string;
};

export type DeleteAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientError =
  Fetcher.ErrorWrapper<undefined>;

export type DeleteAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientRequestBody =
  Schemas.RoleRepresentation[];

export type DeleteAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientVariables = {
  body?: DeleteAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientRequestBody;
  pathParams: DeleteAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientPathParams;
} & FetcherExtraProps;

export const deleteAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClient = (
  variables: DeleteAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientVariables,
  signal?: AbortSignal
) =>
  fetch<
    undefined,
    DeleteAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientError,
    DeleteAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientRequestBody,
    {},
    {},
    DeleteAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientPathParams
  >({
    url: '/admin/realms/{realm}/client-scopes/{clientScopeId}/scope-mappings/clients/{client}',
    method: 'delete',
    ...variables,
    signal
  });

export type GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientAvailablePathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  clientScopeId: string;
  client: string;
};

export type GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientAvailableError =
  Fetcher.ErrorWrapper<undefined>;

export type GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientAvailableResponse =
  Schemas.RoleRepresentation[];

export type GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientAvailableVariables = {
  pathParams: GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientAvailablePathParams;
} & FetcherExtraProps;

export const getAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientAvailable = (
  variables: GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientAvailableVariables,
  signal?: AbortSignal
) =>
  fetch<
    GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientAvailableResponse,
    GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientAvailableError,
    undefined,
    {},
    {},
    GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientAvailablePathParams
  >({
    url: '/admin/realms/{realm}/client-scopes/{clientScopeId}/scope-mappings/clients/{client}/available',
    method: 'get',
    ...variables,
    signal
  });

export type GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientCompositePathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  clientScopeId: string;
  client: string;
};

export type GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientCompositeQueryParams = {
  /**
   * if false, return roles with their attributes
   *
   * @default true
   */
  briefRepresentation?: boolean;
};

export type GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientCompositeError =
  Fetcher.ErrorWrapper<undefined>;

export type GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientCompositeResponse =
  Schemas.RoleRepresentation[];

export type GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientCompositeVariables = {
  pathParams: GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientCompositePathParams;
  queryParams?: GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientCompositeQueryParams;
} & FetcherExtraProps;

export const getAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientComposite = (
  variables: GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientCompositeVariables,
  signal?: AbortSignal
) =>
  fetch<
    GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientCompositeResponse,
    GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientCompositeError,
    undefined,
    {},
    GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientCompositeQueryParams,
    GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientCompositePathParams
  >({
    url: '/admin/realms/{realm}/client-scopes/{clientScopeId}/scope-mappings/clients/{client}/composite',
    method: 'get',
    ...variables,
    signal
  });

export type GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  clientScopeId: string;
};

export type GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmError = Fetcher.ErrorWrapper<undefined>;

export type GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmResponse = Schemas.RoleRepresentation[];

export type GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmVariables = {
  pathParams: GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmPathParams;
} & FetcherExtraProps;

export const getAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealm = (
  variables: GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmVariables,
  signal?: AbortSignal
) =>
  fetch<
    GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmResponse,
    GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmError,
    undefined,
    {},
    {},
    GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmPathParams
  >({
    url: '/admin/realms/{realm}/client-scopes/{clientScopeId}/scope-mappings/realm',
    method: 'get',
    ...variables,
    signal
  });

export type PostAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  clientScopeId: string;
};

export type PostAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmError = Fetcher.ErrorWrapper<undefined>;

export type PostAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmRequestBody = Schemas.RoleRepresentation[];

export type PostAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmVariables = {
  body?: PostAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmRequestBody;
  pathParams: PostAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmPathParams;
} & FetcherExtraProps;

export const postAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealm = (
  variables: PostAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmVariables,
  signal?: AbortSignal
) =>
  fetch<
    undefined,
    PostAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmError,
    PostAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmRequestBody,
    {},
    {},
    PostAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmPathParams
  >({
    url: '/admin/realms/{realm}/client-scopes/{clientScopeId}/scope-mappings/realm',
    method: 'post',
    ...variables,
    signal
  });

export type DeleteAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  clientScopeId: string;
};

export type DeleteAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmError = Fetcher.ErrorWrapper<undefined>;

export type DeleteAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmRequestBody = Schemas.RoleRepresentation[];

export type DeleteAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmVariables = {
  body?: DeleteAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmRequestBody;
  pathParams: DeleteAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmPathParams;
} & FetcherExtraProps;

export const deleteAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealm = (
  variables: DeleteAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmVariables,
  signal?: AbortSignal
) =>
  fetch<
    undefined,
    DeleteAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmError,
    DeleteAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmRequestBody,
    {},
    {},
    DeleteAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmPathParams
  >({
    url: '/admin/realms/{realm}/client-scopes/{clientScopeId}/scope-mappings/realm',
    method: 'delete',
    ...variables,
    signal
  });

export type GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmAvailablePathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  clientScopeId: string;
};

export type GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmAvailableError =
  Fetcher.ErrorWrapper<undefined>;

export type GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmAvailableResponse =
  Schemas.RoleRepresentation[];

export type GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmAvailableVariables = {
  pathParams: GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmAvailablePathParams;
} & FetcherExtraProps;

export const getAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmAvailable = (
  variables: GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmAvailableVariables,
  signal?: AbortSignal
) =>
  fetch<
    GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmAvailableResponse,
    GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmAvailableError,
    undefined,
    {},
    {},
    GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmAvailablePathParams
  >({
    url: '/admin/realms/{realm}/client-scopes/{clientScopeId}/scope-mappings/realm/available',
    method: 'get',
    ...variables,
    signal
  });

export type GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmCompositePathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  clientScopeId: string;
};

export type GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmCompositeQueryParams = {
  /**
   * if false, return roles with their attributes
   *
   * @default true
   */
  briefRepresentation?: boolean;
};

export type GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmCompositeError =
  Fetcher.ErrorWrapper<undefined>;

export type GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmCompositeResponse =
  Schemas.RoleRepresentation[];

export type GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmCompositeVariables = {
  pathParams: GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmCompositePathParams;
  queryParams?: GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmCompositeQueryParams;
} & FetcherExtraProps;

/**
 * The method is really to show a comprehensive total view of realm-level roles associated with the client.
 */
export const getAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmComposite = (
  variables: GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmCompositeVariables,
  signal?: AbortSignal
) =>
  fetch<
    GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmCompositeResponse,
    GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmCompositeError,
    undefined,
    {},
    GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmCompositeQueryParams,
    GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmCompositePathParams
  >({
    url: '/admin/realms/{realm}/client-scopes/{clientScopeId}/scope-mappings/realm/composite',
    method: 'get',
    ...variables,
    signal
  });

export type GetAdminRealmsRealmClientSessionStatsPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
};

export type GetAdminRealmsRealmClientSessionStatsError = Fetcher.ErrorWrapper<undefined>;

export type GetAdminRealmsRealmClientSessionStatsResponse = {
  [key: string]: string;
}[];

export type GetAdminRealmsRealmClientSessionStatsVariables = {
  pathParams: GetAdminRealmsRealmClientSessionStatsPathParams;
} & FetcherExtraProps;

/**
 * The key is the client id, the value is the number of sessions that currently are active with that client. Only clients that actually have a session associated with them will be in this map.
 */
export const getAdminRealmsRealmClientSessionStats = (
  variables: GetAdminRealmsRealmClientSessionStatsVariables,
  signal?: AbortSignal
) =>
  fetch<
    GetAdminRealmsRealmClientSessionStatsResponse,
    GetAdminRealmsRealmClientSessionStatsError,
    undefined,
    {},
    {},
    GetAdminRealmsRealmClientSessionStatsPathParams
  >({ url: '/admin/realms/{realm}/client-session-stats', method: 'get', ...variables, signal });

export type GetAdminRealmsRealmClientTemplatesPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
};

export type GetAdminRealmsRealmClientTemplatesError = Fetcher.ErrorWrapper<undefined>;

export type GetAdminRealmsRealmClientTemplatesResponse = Schemas.ClientScopeRepresentation[];

export type GetAdminRealmsRealmClientTemplatesVariables = {
  pathParams: GetAdminRealmsRealmClientTemplatesPathParams;
} & FetcherExtraProps;

export const getAdminRealmsRealmClientTemplates = (
  variables: GetAdminRealmsRealmClientTemplatesVariables,
  signal?: AbortSignal
) =>
  fetch<
    GetAdminRealmsRealmClientTemplatesResponse,
    GetAdminRealmsRealmClientTemplatesError,
    undefined,
    {},
    {},
    GetAdminRealmsRealmClientTemplatesPathParams
  >({ url: '/admin/realms/{realm}/client-templates', method: 'get', ...variables, signal });

export type PostAdminRealmsRealmClientTemplatesPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
};

export type PostAdminRealmsRealmClientTemplatesError = Fetcher.ErrorWrapper<undefined>;

export type PostAdminRealmsRealmClientTemplatesVariables = {
  body?: Schemas.ClientScopeRepresentation;
  pathParams: PostAdminRealmsRealmClientTemplatesPathParams;
} & FetcherExtraProps;

export const postAdminRealmsRealmClientTemplates = (
  variables: PostAdminRealmsRealmClientTemplatesVariables,
  signal?: AbortSignal
) =>
  fetch<
    undefined,
    PostAdminRealmsRealmClientTemplatesError,
    Schemas.ClientScopeRepresentation,
    {},
    {},
    PostAdminRealmsRealmClientTemplatesPathParams
  >({ url: '/admin/realms/{realm}/client-templates', method: 'post', ...variables, signal });

export type GetAdminRealmsRealmClientTemplatesClientScopeIdPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  clientScopeId: string;
};

export type GetAdminRealmsRealmClientTemplatesClientScopeIdError = Fetcher.ErrorWrapper<undefined>;

export type GetAdminRealmsRealmClientTemplatesClientScopeIdVariables = {
  pathParams: GetAdminRealmsRealmClientTemplatesClientScopeIdPathParams;
} & FetcherExtraProps;

export const getAdminRealmsRealmClientTemplatesClientScopeId = (
  variables: GetAdminRealmsRealmClientTemplatesClientScopeIdVariables,
  signal?: AbortSignal
) =>
  fetch<
    Schemas.ClientScopeRepresentation,
    GetAdminRealmsRealmClientTemplatesClientScopeIdError,
    undefined,
    {},
    {},
    GetAdminRealmsRealmClientTemplatesClientScopeIdPathParams
  >({ url: '/admin/realms/{realm}/client-templates/{clientScopeId}', method: 'get', ...variables, signal });

export type PutAdminRealmsRealmClientTemplatesClientScopeIdPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  clientScopeId: string;
};

export type PutAdminRealmsRealmClientTemplatesClientScopeIdError = Fetcher.ErrorWrapper<undefined>;

export type PutAdminRealmsRealmClientTemplatesClientScopeIdVariables = {
  body?: Schemas.ClientScopeRepresentation;
  pathParams: PutAdminRealmsRealmClientTemplatesClientScopeIdPathParams;
} & FetcherExtraProps;

export const putAdminRealmsRealmClientTemplatesClientScopeId = (
  variables: PutAdminRealmsRealmClientTemplatesClientScopeIdVariables,
  signal?: AbortSignal
) =>
  fetch<
    undefined,
    PutAdminRealmsRealmClientTemplatesClientScopeIdError,
    Schemas.ClientScopeRepresentation,
    {},
    {},
    PutAdminRealmsRealmClientTemplatesClientScopeIdPathParams
  >({ url: '/admin/realms/{realm}/client-templates/{clientScopeId}', method: 'put', ...variables, signal });

export type DeleteAdminRealmsRealmClientTemplatesClientScopeIdPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  clientScopeId: string;
};

export type DeleteAdminRealmsRealmClientTemplatesClientScopeIdError = Fetcher.ErrorWrapper<undefined>;

export type DeleteAdminRealmsRealmClientTemplatesClientScopeIdVariables = {
  pathParams: DeleteAdminRealmsRealmClientTemplatesClientScopeIdPathParams;
} & FetcherExtraProps;

export const deleteAdminRealmsRealmClientTemplatesClientScopeId = (
  variables: DeleteAdminRealmsRealmClientTemplatesClientScopeIdVariables,
  signal?: AbortSignal
) =>
  fetch<
    undefined,
    DeleteAdminRealmsRealmClientTemplatesClientScopeIdError,
    undefined,
    {},
    {},
    DeleteAdminRealmsRealmClientTemplatesClientScopeIdPathParams
  >({ url: '/admin/realms/{realm}/client-templates/{clientScopeId}', method: 'delete', ...variables, signal });

export type PostAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersAddModelsPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  clientScopeId: string;
};

export type PostAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersAddModelsError =
  Fetcher.ErrorWrapper<undefined>;

export type PostAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersAddModelsRequestBody =
  Schemas.ProtocolMapperRepresentation[];

export type PostAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersAddModelsVariables = {
  body?: PostAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersAddModelsRequestBody;
  pathParams: PostAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersAddModelsPathParams;
} & FetcherExtraProps;

export const postAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersAddModels = (
  variables: PostAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersAddModelsVariables,
  signal?: AbortSignal
) =>
  fetch<
    undefined,
    PostAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersAddModelsError,
    PostAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersAddModelsRequestBody,
    {},
    {},
    PostAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersAddModelsPathParams
  >({
    url: '/admin/realms/{realm}/client-templates/{clientScopeId}/protocol-mappers/add-models',
    method: 'post',
    ...variables,
    signal
  });

export type GetAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  clientScopeId: string;
};

export type GetAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsError = Fetcher.ErrorWrapper<undefined>;

export type GetAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsResponse =
  Schemas.ProtocolMapperRepresentation[];

export type GetAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsVariables = {
  pathParams: GetAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsPathParams;
} & FetcherExtraProps;

export const getAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModels = (
  variables: GetAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsVariables,
  signal?: AbortSignal
) =>
  fetch<
    GetAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsResponse,
    GetAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsError,
    undefined,
    {},
    {},
    GetAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsPathParams
  >({
    url: '/admin/realms/{realm}/client-templates/{clientScopeId}/protocol-mappers/models',
    method: 'get',
    ...variables,
    signal
  });

export type PostAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  clientScopeId: string;
};

export type PostAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsError =
  Fetcher.ErrorWrapper<undefined>;

export type PostAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsVariables = {
  body?: Schemas.ProtocolMapperRepresentation;
  pathParams: PostAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsPathParams;
} & FetcherExtraProps;

export const postAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModels = (
  variables: PostAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsVariables,
  signal?: AbortSignal
) =>
  fetch<
    undefined,
    PostAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsError,
    Schemas.ProtocolMapperRepresentation,
    {},
    {},
    PostAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsPathParams
  >({
    url: '/admin/realms/{realm}/client-templates/{clientScopeId}/protocol-mappers/models',
    method: 'post',
    ...variables,
    signal
  });

export type GetAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  clientScopeId: string;
  /**
   * Mapper id
   */
  id: string;
};

export type GetAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdError =
  Fetcher.ErrorWrapper<undefined>;

export type GetAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdVariables = {
  pathParams: GetAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdPathParams;
} & FetcherExtraProps;

export const getAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsId = (
  variables: GetAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdVariables,
  signal?: AbortSignal
) =>
  fetch<
    Schemas.ProtocolMapperRepresentation,
    GetAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdError,
    undefined,
    {},
    {},
    GetAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdPathParams
  >({
    url: '/admin/realms/{realm}/client-templates/{clientScopeId}/protocol-mappers/models/{id}',
    method: 'get',
    ...variables,
    signal
  });

export type PutAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  clientScopeId: string;
  /**
   * Mapper id
   */
  id: string;
};

export type PutAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdError =
  Fetcher.ErrorWrapper<undefined>;

export type PutAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdVariables = {
  body?: Schemas.ProtocolMapperRepresentation;
  pathParams: PutAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdPathParams;
} & FetcherExtraProps;

export const putAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsId = (
  variables: PutAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdVariables,
  signal?: AbortSignal
) =>
  fetch<
    undefined,
    PutAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdError,
    Schemas.ProtocolMapperRepresentation,
    {},
    {},
    PutAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdPathParams
  >({
    url: '/admin/realms/{realm}/client-templates/{clientScopeId}/protocol-mappers/models/{id}',
    method: 'put',
    ...variables,
    signal
  });

export type DeleteAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  clientScopeId: string;
  /**
   * Mapper id
   */
  id: string;
};

export type DeleteAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdError =
  Fetcher.ErrorWrapper<undefined>;

export type DeleteAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdVariables = {
  pathParams: DeleteAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdPathParams;
} & FetcherExtraProps;

export const deleteAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsId = (
  variables: DeleteAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdVariables,
  signal?: AbortSignal
) =>
  fetch<
    undefined,
    DeleteAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdError,
    undefined,
    {},
    {},
    DeleteAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdPathParams
  >({
    url: '/admin/realms/{realm}/client-templates/{clientScopeId}/protocol-mappers/models/{id}',
    method: 'delete',
    ...variables,
    signal
  });

export type GetAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersProtocolProtocolPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  clientScopeId: string;
  protocol: string;
};

export type GetAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersProtocolProtocolError =
  Fetcher.ErrorWrapper<undefined>;

export type GetAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersProtocolProtocolResponse =
  Schemas.ProtocolMapperRepresentation[];

export type GetAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersProtocolProtocolVariables = {
  pathParams: GetAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersProtocolProtocolPathParams;
} & FetcherExtraProps;

export const getAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersProtocolProtocol = (
  variables: GetAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersProtocolProtocolVariables,
  signal?: AbortSignal
) =>
  fetch<
    GetAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersProtocolProtocolResponse,
    GetAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersProtocolProtocolError,
    undefined,
    {},
    {},
    GetAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersProtocolProtocolPathParams
  >({
    url: '/admin/realms/{realm}/client-templates/{clientScopeId}/protocol-mappers/protocol/{protocol}',
    method: 'get',
    ...variables,
    signal
  });

export type GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  clientScopeId: string;
};

export type GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsError = Fetcher.ErrorWrapper<undefined>;

export type GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsVariables = {
  pathParams: GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsPathParams;
} & FetcherExtraProps;

export const getAdminRealmsRealmClientTemplatesClientScopeIdScopeMappings = (
  variables: GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsVariables,
  signal?: AbortSignal
) =>
  fetch<
    Schemas.MappingsRepresentation,
    GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsError,
    undefined,
    {},
    {},
    GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsPathParams
  >({
    url: '/admin/realms/{realm}/client-templates/{clientScopeId}/scope-mappings',
    method: 'get',
    ...variables,
    signal
  });

export type GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  clientScopeId: string;
  client: string;
};

export type GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientError =
  Fetcher.ErrorWrapper<undefined>;

export type GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientResponse =
  Schemas.RoleRepresentation[];

export type GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientVariables = {
  pathParams: GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientPathParams;
} & FetcherExtraProps;

export const getAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClient = (
  variables: GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientVariables,
  signal?: AbortSignal
) =>
  fetch<
    GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientResponse,
    GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientError,
    undefined,
    {},
    {},
    GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientPathParams
  >({
    url: '/admin/realms/{realm}/client-templates/{clientScopeId}/scope-mappings/clients/{client}',
    method: 'get',
    ...variables,
    signal
  });

export type PostAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  clientScopeId: string;
  client: string;
};

export type PostAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientError =
  Fetcher.ErrorWrapper<undefined>;

export type PostAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientRequestBody =
  Schemas.RoleRepresentation[];

export type PostAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientVariables = {
  body?: PostAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientRequestBody;
  pathParams: PostAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientPathParams;
} & FetcherExtraProps;

export const postAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClient = (
  variables: PostAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientVariables,
  signal?: AbortSignal
) =>
  fetch<
    undefined,
    PostAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientError,
    PostAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientRequestBody,
    {},
    {},
    PostAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientPathParams
  >({
    url: '/admin/realms/{realm}/client-templates/{clientScopeId}/scope-mappings/clients/{client}',
    method: 'post',
    ...variables,
    signal
  });

export type DeleteAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  clientScopeId: string;
  client: string;
};

export type DeleteAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientError =
  Fetcher.ErrorWrapper<undefined>;

export type DeleteAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientRequestBody =
  Schemas.RoleRepresentation[];

export type DeleteAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientVariables = {
  body?: DeleteAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientRequestBody;
  pathParams: DeleteAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientPathParams;
} & FetcherExtraProps;

export const deleteAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClient = (
  variables: DeleteAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientVariables,
  signal?: AbortSignal
) =>
  fetch<
    undefined,
    DeleteAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientError,
    DeleteAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientRequestBody,
    {},
    {},
    DeleteAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientPathParams
  >({
    url: '/admin/realms/{realm}/client-templates/{clientScopeId}/scope-mappings/clients/{client}',
    method: 'delete',
    ...variables,
    signal
  });

export type GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientAvailablePathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  clientScopeId: string;
  client: string;
};

export type GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientAvailableError =
  Fetcher.ErrorWrapper<undefined>;

export type GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientAvailableResponse =
  Schemas.RoleRepresentation[];

export type GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientAvailableVariables = {
  pathParams: GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientAvailablePathParams;
} & FetcherExtraProps;

export const getAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientAvailable = (
  variables: GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientAvailableVariables,
  signal?: AbortSignal
) =>
  fetch<
    GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientAvailableResponse,
    GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientAvailableError,
    undefined,
    {},
    {},
    GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientAvailablePathParams
  >({
    url: '/admin/realms/{realm}/client-templates/{clientScopeId}/scope-mappings/clients/{client}/available',
    method: 'get',
    ...variables,
    signal
  });

export type GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientCompositePathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  clientScopeId: string;
  client: string;
};

export type GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientCompositeQueryParams = {
  /**
   * if false, return roles with their attributes
   *
   * @default true
   */
  briefRepresentation?: boolean;
};

export type GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientCompositeError =
  Fetcher.ErrorWrapper<undefined>;

export type GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientCompositeResponse =
  Schemas.RoleRepresentation[];

export type GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientCompositeVariables = {
  pathParams: GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientCompositePathParams;
  queryParams?: GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientCompositeQueryParams;
} & FetcherExtraProps;

export const getAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientComposite = (
  variables: GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientCompositeVariables,
  signal?: AbortSignal
) =>
  fetch<
    GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientCompositeResponse,
    GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientCompositeError,
    undefined,
    {},
    GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientCompositeQueryParams,
    GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientCompositePathParams
  >({
    url: '/admin/realms/{realm}/client-templates/{clientScopeId}/scope-mappings/clients/{client}/composite',
    method: 'get',
    ...variables,
    signal
  });

export type GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  clientScopeId: string;
};

export type GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmError = Fetcher.ErrorWrapper<undefined>;

export type GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmResponse = Schemas.RoleRepresentation[];

export type GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmVariables = {
  pathParams: GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmPathParams;
} & FetcherExtraProps;

export const getAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealm = (
  variables: GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmVariables,
  signal?: AbortSignal
) =>
  fetch<
    GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmResponse,
    GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmError,
    undefined,
    {},
    {},
    GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmPathParams
  >({
    url: '/admin/realms/{realm}/client-templates/{clientScopeId}/scope-mappings/realm',
    method: 'get',
    ...variables,
    signal
  });

export type PostAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  clientScopeId: string;
};

export type PostAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmError = Fetcher.ErrorWrapper<undefined>;

export type PostAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmRequestBody =
  Schemas.RoleRepresentation[];

export type PostAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmVariables = {
  body?: PostAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmRequestBody;
  pathParams: PostAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmPathParams;
} & FetcherExtraProps;

export const postAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealm = (
  variables: PostAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmVariables,
  signal?: AbortSignal
) =>
  fetch<
    undefined,
    PostAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmError,
    PostAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmRequestBody,
    {},
    {},
    PostAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmPathParams
  >({
    url: '/admin/realms/{realm}/client-templates/{clientScopeId}/scope-mappings/realm',
    method: 'post',
    ...variables,
    signal
  });

export type DeleteAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  clientScopeId: string;
};

export type DeleteAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmError = Fetcher.ErrorWrapper<undefined>;

export type DeleteAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmRequestBody =
  Schemas.RoleRepresentation[];

export type DeleteAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmVariables = {
  body?: DeleteAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmRequestBody;
  pathParams: DeleteAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmPathParams;
} & FetcherExtraProps;

export const deleteAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealm = (
  variables: DeleteAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmVariables,
  signal?: AbortSignal
) =>
  fetch<
    undefined,
    DeleteAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmError,
    DeleteAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmRequestBody,
    {},
    {},
    DeleteAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmPathParams
  >({
    url: '/admin/realms/{realm}/client-templates/{clientScopeId}/scope-mappings/realm',
    method: 'delete',
    ...variables,
    signal
  });

export type GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmAvailablePathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  clientScopeId: string;
};

export type GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmAvailableError =
  Fetcher.ErrorWrapper<undefined>;

export type GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmAvailableResponse =
  Schemas.RoleRepresentation[];

export type GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmAvailableVariables = {
  pathParams: GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmAvailablePathParams;
} & FetcherExtraProps;

export const getAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmAvailable = (
  variables: GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmAvailableVariables,
  signal?: AbortSignal
) =>
  fetch<
    GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmAvailableResponse,
    GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmAvailableError,
    undefined,
    {},
    {},
    GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmAvailablePathParams
  >({
    url: '/admin/realms/{realm}/client-templates/{clientScopeId}/scope-mappings/realm/available',
    method: 'get',
    ...variables,
    signal
  });

export type GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmCompositePathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  clientScopeId: string;
};

export type GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmCompositeQueryParams = {
  /**
   * if false, return roles with their attributes
   *
   * @default true
   */
  briefRepresentation?: boolean;
};

export type GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmCompositeError =
  Fetcher.ErrorWrapper<undefined>;

export type GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmCompositeResponse =
  Schemas.RoleRepresentation[];

export type GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmCompositeVariables = {
  pathParams: GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmCompositePathParams;
  queryParams?: GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmCompositeQueryParams;
} & FetcherExtraProps;

/**
 * The method is really to show a comprehensive total view of realm-level roles associated with the client.
 */
export const getAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmComposite = (
  variables: GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmCompositeVariables,
  signal?: AbortSignal
) =>
  fetch<
    GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmCompositeResponse,
    GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmCompositeError,
    undefined,
    {},
    GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmCompositeQueryParams,
    GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmCompositePathParams
  >({
    url: '/admin/realms/{realm}/client-templates/{clientScopeId}/scope-mappings/realm/composite',
    method: 'get',
    ...variables,
    signal
  });

export type GetAdminRealmsRealmClientTypesPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
};

export type GetAdminRealmsRealmClientTypesError = Fetcher.ErrorWrapper<undefined>;

export type GetAdminRealmsRealmClientTypesVariables = {
  pathParams: GetAdminRealmsRealmClientTypesPathParams;
} & FetcherExtraProps;

/**
 * This endpoint returns a list of both global and realm level client types and the attributes they set
 */
export const getAdminRealmsRealmClientTypes = (
  variables: GetAdminRealmsRealmClientTypesVariables,
  signal?: AbortSignal
) =>
  fetch<
    Schemas.ClientTypesRepresentation,
    GetAdminRealmsRealmClientTypesError,
    undefined,
    {},
    {},
    GetAdminRealmsRealmClientTypesPathParams
  >({ url: '/admin/realms/{realm}/client-types', method: 'get', ...variables, signal });

export type PutAdminRealmsRealmClientTypesPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
};

export type PutAdminRealmsRealmClientTypesError = Fetcher.ErrorWrapper<undefined>;

export type PutAdminRealmsRealmClientTypesVariables = {
  body?: Schemas.ClientTypesRepresentation;
  pathParams: PutAdminRealmsRealmClientTypesPathParams;
} & FetcherExtraProps;

/**
 * This endpoint allows you to update a realm level client type
 */
export const putAdminRealmsRealmClientTypes = (
  variables: PutAdminRealmsRealmClientTypesVariables,
  signal?: AbortSignal
) =>
  fetch<
    undefined,
    PutAdminRealmsRealmClientTypesError,
    Schemas.ClientTypesRepresentation,
    {},
    {},
    PutAdminRealmsRealmClientTypesPathParams
  >({ url: '/admin/realms/{realm}/client-types', method: 'put', ...variables, signal });

export type GetAdminRealmsRealmClientsPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
};

export type GetAdminRealmsRealmClientsQueryParams = {
  /**
   * filter by clientId
   */
  clientId?: string;
  /**
   * the first result
   *
   * @format int32
   */
  first?: number;
  /**
   * the max results to return
   *
   * @format int32
   */
  max?: number;
  q?: string;
  /**
   * whether this is a search query or a getClientById query
   *
   * @default false
   */
  search?: boolean;
  /**
   * filter clients that cannot be viewed in full by admin
   *
   * @default false
   */
  viewableOnly?: boolean;
};

export type GetAdminRealmsRealmClientsError = Fetcher.ErrorWrapper<undefined>;

export type GetAdminRealmsRealmClientsResponse = Schemas.ClientRepresentation[];

export type GetAdminRealmsRealmClientsVariables = {
  pathParams: GetAdminRealmsRealmClientsPathParams;
  queryParams?: GetAdminRealmsRealmClientsQueryParams;
} & FetcherExtraProps;

/**
 * If a client can’t be retrieved from the storage due to a problem with the underlying storage, it is silently removed from the returned list. This ensures that concurrent modifications to the list don’t prevent callers from retrieving this list.
 */
export const getAdminRealmsRealmClients = (variables: GetAdminRealmsRealmClientsVariables, signal?: AbortSignal) =>
  fetch<
    GetAdminRealmsRealmClientsResponse,
    GetAdminRealmsRealmClientsError,
    undefined,
    {},
    GetAdminRealmsRealmClientsQueryParams,
    GetAdminRealmsRealmClientsPathParams
  >({ url: '/admin/realms/{realm}/clients', method: 'get', ...variables, signal });

export type PostAdminRealmsRealmClientsPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
};

export type PostAdminRealmsRealmClientsError = Fetcher.ErrorWrapper<undefined>;

export type PostAdminRealmsRealmClientsVariables = {
  body?: Schemas.ClientRepresentation;
  pathParams: PostAdminRealmsRealmClientsPathParams;
} & FetcherExtraProps;

export const postAdminRealmsRealmClients = (variables: PostAdminRealmsRealmClientsVariables, signal?: AbortSignal) =>
  fetch<
    undefined,
    PostAdminRealmsRealmClientsError,
    Schemas.ClientRepresentation,
    {},
    {},
    PostAdminRealmsRealmClientsPathParams
  >({ url: '/admin/realms/{realm}/clients', method: 'post', ...variables, signal });

export type GetAdminRealmsRealmClientsInitialAccessPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
};

export type GetAdminRealmsRealmClientsInitialAccessError = Fetcher.ErrorWrapper<undefined>;

export type GetAdminRealmsRealmClientsInitialAccessResponse = Schemas.ClientInitialAccessPresentation[];

export type GetAdminRealmsRealmClientsInitialAccessVariables = {
  pathParams: GetAdminRealmsRealmClientsInitialAccessPathParams;
} & FetcherExtraProps;

export const getAdminRealmsRealmClientsInitialAccess = (
  variables: GetAdminRealmsRealmClientsInitialAccessVariables,
  signal?: AbortSignal
) =>
  fetch<
    GetAdminRealmsRealmClientsInitialAccessResponse,
    GetAdminRealmsRealmClientsInitialAccessError,
    undefined,
    {},
    {},
    GetAdminRealmsRealmClientsInitialAccessPathParams
  >({ url: '/admin/realms/{realm}/clients-initial-access', method: 'get', ...variables, signal });

export type PostAdminRealmsRealmClientsInitialAccessPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
};

export type PostAdminRealmsRealmClientsInitialAccessError = Fetcher.ErrorWrapper<undefined>;

export type PostAdminRealmsRealmClientsInitialAccessVariables = {
  body?: Schemas.ClientInitialAccessCreatePresentation;
  pathParams: PostAdminRealmsRealmClientsInitialAccessPathParams;
} & FetcherExtraProps;

export const postAdminRealmsRealmClientsInitialAccess = (
  variables: PostAdminRealmsRealmClientsInitialAccessVariables,
  signal?: AbortSignal
) =>
  fetch<
    Schemas.ClientInitialAccessCreatePresentation,
    PostAdminRealmsRealmClientsInitialAccessError,
    Schemas.ClientInitialAccessCreatePresentation,
    {},
    {},
    PostAdminRealmsRealmClientsInitialAccessPathParams
  >({ url: '/admin/realms/{realm}/clients-initial-access', method: 'post', ...variables, signal });

export type DeleteAdminRealmsRealmClientsInitialAccessIdPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  id: string;
};

export type DeleteAdminRealmsRealmClientsInitialAccessIdError = Fetcher.ErrorWrapper<undefined>;

export type DeleteAdminRealmsRealmClientsInitialAccessIdVariables = {
  pathParams: DeleteAdminRealmsRealmClientsInitialAccessIdPathParams;
} & FetcherExtraProps;

export const deleteAdminRealmsRealmClientsInitialAccessId = (
  variables: DeleteAdminRealmsRealmClientsInitialAccessIdVariables,
  signal?: AbortSignal
) =>
  fetch<
    undefined,
    DeleteAdminRealmsRealmClientsInitialAccessIdError,
    undefined,
    {},
    {},
    DeleteAdminRealmsRealmClientsInitialAccessIdPathParams
  >({ url: '/admin/realms/{realm}/clients-initial-access/{id}', method: 'delete', ...variables, signal });

export type GetAdminRealmsRealmClientsClientUuidPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  /**
   * id of client (not client-id!)
   */
  clientUuid: string;
};

export type GetAdminRealmsRealmClientsClientUuidError = Fetcher.ErrorWrapper<undefined>;

export type GetAdminRealmsRealmClientsClientUuidVariables = {
  pathParams: GetAdminRealmsRealmClientsClientUuidPathParams;
} & FetcherExtraProps;

export const getAdminRealmsRealmClientsClientUuid = (
  variables: GetAdminRealmsRealmClientsClientUuidVariables,
  signal?: AbortSignal
) =>
  fetch<
    Schemas.ClientRepresentation,
    GetAdminRealmsRealmClientsClientUuidError,
    undefined,
    {},
    {},
    GetAdminRealmsRealmClientsClientUuidPathParams
  >({ url: '/admin/realms/{realm}/clients/{clientUuid}', method: 'get', ...variables, signal });

export type PutAdminRealmsRealmClientsClientUuidPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  /**
   * id of client (not client-id!)
   */
  clientUuid: string;
};

export type PutAdminRealmsRealmClientsClientUuidError = Fetcher.ErrorWrapper<undefined>;

export type PutAdminRealmsRealmClientsClientUuidVariables = {
  body?: Schemas.ClientRepresentation;
  pathParams: PutAdminRealmsRealmClientsClientUuidPathParams;
} & FetcherExtraProps;

export const putAdminRealmsRealmClientsClientUuid = (
  variables: PutAdminRealmsRealmClientsClientUuidVariables,
  signal?: AbortSignal
) =>
  fetch<
    undefined,
    PutAdminRealmsRealmClientsClientUuidError,
    Schemas.ClientRepresentation,
    {},
    {},
    PutAdminRealmsRealmClientsClientUuidPathParams
  >({ url: '/admin/realms/{realm}/clients/{clientUuid}', method: 'put', ...variables, signal });

export type DeleteAdminRealmsRealmClientsClientUuidPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  /**
   * id of client (not client-id!)
   */
  clientUuid: string;
};

export type DeleteAdminRealmsRealmClientsClientUuidError = Fetcher.ErrorWrapper<undefined>;

export type DeleteAdminRealmsRealmClientsClientUuidVariables = {
  pathParams: DeleteAdminRealmsRealmClientsClientUuidPathParams;
} & FetcherExtraProps;

export const deleteAdminRealmsRealmClientsClientUuid = (
  variables: DeleteAdminRealmsRealmClientsClientUuidVariables,
  signal?: AbortSignal
) =>
  fetch<
    undefined,
    DeleteAdminRealmsRealmClientsClientUuidError,
    undefined,
    {},
    {},
    DeleteAdminRealmsRealmClientsClientUuidPathParams
  >({ url: '/admin/realms/{realm}/clients/{clientUuid}', method: 'delete', ...variables, signal });

export type GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  /**
   * id of client (not client-id!)
   */
  clientUuid: string;
};

export type GetAdminRealmsRealmClientsClientUuidAuthzResourceServerError = Fetcher.ErrorWrapper<undefined>;

export type GetAdminRealmsRealmClientsClientUuidAuthzResourceServerVariables = {
  pathParams: GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPathParams;
} & FetcherExtraProps;

export const getAdminRealmsRealmClientsClientUuidAuthzResourceServer = (
  variables: GetAdminRealmsRealmClientsClientUuidAuthzResourceServerVariables,
  signal?: AbortSignal
) =>
  fetch<
    Schemas.ResourceServerRepresentation,
    GetAdminRealmsRealmClientsClientUuidAuthzResourceServerError,
    undefined,
    {},
    {},
    GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPathParams
  >({ url: '/admin/realms/{realm}/clients/{clientUuid}/authz/resource-server', method: 'get', ...variables, signal });

export type PutAdminRealmsRealmClientsClientUuidAuthzResourceServerPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  /**
   * id of client (not client-id!)
   */
  clientUuid: string;
};

export type PutAdminRealmsRealmClientsClientUuidAuthzResourceServerError = Fetcher.ErrorWrapper<undefined>;

export type PutAdminRealmsRealmClientsClientUuidAuthzResourceServerVariables = {
  body?: Schemas.ResourceServerRepresentation;
  pathParams: PutAdminRealmsRealmClientsClientUuidAuthzResourceServerPathParams;
} & FetcherExtraProps;

export const putAdminRealmsRealmClientsClientUuidAuthzResourceServer = (
  variables: PutAdminRealmsRealmClientsClientUuidAuthzResourceServerVariables,
  signal?: AbortSignal
) =>
  fetch<
    undefined,
    PutAdminRealmsRealmClientsClientUuidAuthzResourceServerError,
    Schemas.ResourceServerRepresentation,
    {},
    {},
    PutAdminRealmsRealmClientsClientUuidAuthzResourceServerPathParams
  >({ url: '/admin/realms/{realm}/clients/{clientUuid}/authz/resource-server', method: 'put', ...variables, signal });

export type PostAdminRealmsRealmClientsClientUuidAuthzResourceServerImportPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  /**
   * id of client (not client-id!)
   */
  clientUuid: string;
};

export type PostAdminRealmsRealmClientsClientUuidAuthzResourceServerImportError = Fetcher.ErrorWrapper<undefined>;

export type PostAdminRealmsRealmClientsClientUuidAuthzResourceServerImportVariables = {
  body?: Schemas.ResourceServerRepresentation;
  pathParams: PostAdminRealmsRealmClientsClientUuidAuthzResourceServerImportPathParams;
} & FetcherExtraProps;

export const postAdminRealmsRealmClientsClientUuidAuthzResourceServerImport = (
  variables: PostAdminRealmsRealmClientsClientUuidAuthzResourceServerImportVariables,
  signal?: AbortSignal
) =>
  fetch<
    undefined,
    PostAdminRealmsRealmClientsClientUuidAuthzResourceServerImportError,
    Schemas.ResourceServerRepresentation,
    {},
    {},
    PostAdminRealmsRealmClientsClientUuidAuthzResourceServerImportPathParams
  >({
    url: '/admin/realms/{realm}/clients/{clientUuid}/authz/resource-server/import',
    method: 'post',
    ...variables,
    signal
  });

export type GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  /**
   * id of client (not client-id!)
   */
  clientUuid: string;
};

export type GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionQueryParams = {
  fields?: string;
  /**
   * @format int32
   */
  first?: number;
  /**
   * @format int32
   */
  max?: number;
  name?: string;
  owner?: string;
  permission?: boolean;
  policyId?: string;
  resource?: string;
  resourceType?: string;
  scope?: string;
  type?: string;
};

export type GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionError = Fetcher.ErrorWrapper<undefined>;

export type GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionResponse =
  Schemas.AbstractPolicyRepresentation[];

export type GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionVariables = {
  pathParams: GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionPathParams;
  queryParams?: GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionQueryParams;
} & FetcherExtraProps;

export const getAdminRealmsRealmClientsClientUuidAuthzResourceServerPermission = (
  variables: GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionVariables,
  signal?: AbortSignal
) =>
  fetch<
    GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionResponse,
    GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionError,
    undefined,
    {},
    GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionQueryParams,
    GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionPathParams
  >({
    url: '/admin/realms/{realm}/clients/{clientUuid}/authz/resource-server/permission',
    method: 'get',
    ...variables,
    signal
  });

export type PostAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  /**
   * id of client (not client-id!)
   */
  clientUuid: string;
};

export type PostAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionError = Fetcher.ErrorWrapper<undefined>;

export type PostAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionVariables = {
  body?: string;
  pathParams: PostAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionPathParams;
} & FetcherExtraProps;

export const postAdminRealmsRealmClientsClientUuidAuthzResourceServerPermission = (
  variables: PostAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionVariables,
  signal?: AbortSignal
) =>
  fetch<
    undefined,
    PostAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionError,
    string,
    {},
    {},
    PostAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionPathParams
  >({
    url: '/admin/realms/{realm}/clients/{clientUuid}/authz/resource-server/permission',
    method: 'post',
    ...variables,
    signal
  });

export type PostAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionEvaluatePathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  /**
   * id of client (not client-id!)
   */
  clientUuid: string;
};

export type PostAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionEvaluateError =
  Fetcher.ErrorWrapper<undefined>;

export type PostAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionEvaluateVariables = {
  body?: Schemas.PolicyEvaluationRequest;
  pathParams: PostAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionEvaluatePathParams;
} & FetcherExtraProps;

export const postAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionEvaluate = (
  variables: PostAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionEvaluateVariables,
  signal?: AbortSignal
) =>
  fetch<
    Schemas.PolicyEvaluationResponse,
    PostAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionEvaluateError,
    Schemas.PolicyEvaluationRequest,
    {},
    {},
    PostAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionEvaluatePathParams
  >({
    url: '/admin/realms/{realm}/clients/{clientUuid}/authz/resource-server/permission/evaluate',
    method: 'post',
    ...variables,
    signal
  });

export type GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionProvidersPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  /**
   * id of client (not client-id!)
   */
  clientUuid: string;
};

export type GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionProvidersError =
  Fetcher.ErrorWrapper<undefined>;

export type GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionProvidersResponse =
  Schemas.PolicyProviderRepresentation[];

export type GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionProvidersVariables = {
  pathParams: GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionProvidersPathParams;
} & FetcherExtraProps;

export const getAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionProviders = (
  variables: GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionProvidersVariables,
  signal?: AbortSignal
) =>
  fetch<
    GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionProvidersResponse,
    GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionProvidersError,
    undefined,
    {},
    {},
    GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionProvidersPathParams
  >({
    url: '/admin/realms/{realm}/clients/{clientUuid}/authz/resource-server/permission/providers',
    method: 'get',
    ...variables,
    signal
  });

export type GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionSearchPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  /**
   * id of client (not client-id!)
   */
  clientUuid: string;
};

export type GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionSearchQueryParams = {
  fields?: string;
  name?: string;
};

export type GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionSearchError =
  Fetcher.ErrorWrapper<undefined>;

export type GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionSearchVariables = {
  pathParams: GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionSearchPathParams;
  queryParams?: GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionSearchQueryParams;
} & FetcherExtraProps;

export const getAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionSearch = (
  variables: GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionSearchVariables,
  signal?: AbortSignal
) =>
  fetch<
    Schemas.AbstractPolicyRepresentation,
    GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionSearchError,
    undefined,
    {},
    GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionSearchQueryParams,
    GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionSearchPathParams
  >({
    url: '/admin/realms/{realm}/clients/{clientUuid}/authz/resource-server/permission/search',
    method: 'get',
    ...variables,
    signal
  });

export type GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  /**
   * id of client (not client-id!)
   */
  clientUuid: string;
};

export type GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyQueryParams = {
  fields?: string;
  /**
   * @format int32
   */
  first?: number;
  /**
   * @format int32
   */
  max?: number;
  name?: string;
  owner?: string;
  permission?: boolean;
  policyId?: string;
  resource?: string;
  resourceType?: string;
  scope?: string;
  type?: string;
};

export type GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyError = Fetcher.ErrorWrapper<undefined>;

export type GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyResponse =
  Schemas.AbstractPolicyRepresentation[];

export type GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyVariables = {
  pathParams: GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyPathParams;
  queryParams?: GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyQueryParams;
} & FetcherExtraProps;

export const getAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicy = (
  variables: GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyVariables,
  signal?: AbortSignal
) =>
  fetch<
    GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyResponse,
    GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyError,
    undefined,
    {},
    GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyQueryParams,
    GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyPathParams
  >({
    url: '/admin/realms/{realm}/clients/{clientUuid}/authz/resource-server/policy',
    method: 'get',
    ...variables,
    signal
  });

export type PostAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  /**
   * id of client (not client-id!)
   */
  clientUuid: string;
};

export type PostAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyError = Fetcher.ErrorWrapper<undefined>;

export type PostAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyVariables = {
  body?: string;
  pathParams: PostAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyPathParams;
} & FetcherExtraProps;

export const postAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicy = (
  variables: PostAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyVariables,
  signal?: AbortSignal
) =>
  fetch<
    undefined,
    PostAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyError,
    string,
    {},
    {},
    PostAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyPathParams
  >({
    url: '/admin/realms/{realm}/clients/{clientUuid}/authz/resource-server/policy',
    method: 'post',
    ...variables,
    signal
  });

export type PostAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyEvaluatePathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  /**
   * id of client (not client-id!)
   */
  clientUuid: string;
};

export type PostAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyEvaluateError =
  Fetcher.ErrorWrapper<undefined>;

export type PostAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyEvaluateVariables = {
  body?: Schemas.PolicyEvaluationRequest;
  pathParams: PostAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyEvaluatePathParams;
} & FetcherExtraProps;

export const postAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyEvaluate = (
  variables: PostAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyEvaluateVariables,
  signal?: AbortSignal
) =>
  fetch<
    Schemas.PolicyEvaluationResponse,
    PostAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyEvaluateError,
    Schemas.PolicyEvaluationRequest,
    {},
    {},
    PostAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyEvaluatePathParams
  >({
    url: '/admin/realms/{realm}/clients/{clientUuid}/authz/resource-server/policy/evaluate',
    method: 'post',
    ...variables,
    signal
  });

export type GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyProvidersPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  /**
   * id of client (not client-id!)
   */
  clientUuid: string;
};

export type GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyProvidersError =
  Fetcher.ErrorWrapper<undefined>;

export type GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyProvidersResponse =
  Schemas.PolicyProviderRepresentation[];

export type GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyProvidersVariables = {
  pathParams: GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyProvidersPathParams;
} & FetcherExtraProps;

export const getAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyProviders = (
  variables: GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyProvidersVariables,
  signal?: AbortSignal
) =>
  fetch<
    GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyProvidersResponse,
    GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyProvidersError,
    undefined,
    {},
    {},
    GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyProvidersPathParams
  >({
    url: '/admin/realms/{realm}/clients/{clientUuid}/authz/resource-server/policy/providers',
    method: 'get',
    ...variables,
    signal
  });

export type GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicySearchPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  /**
   * id of client (not client-id!)
   */
  clientUuid: string;
};

export type GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicySearchQueryParams = {
  fields?: string;
  name?: string;
};

export type GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicySearchError = Fetcher.ErrorWrapper<undefined>;

export type GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicySearchVariables = {
  pathParams: GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicySearchPathParams;
  queryParams?: GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicySearchQueryParams;
} & FetcherExtraProps;

export const getAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicySearch = (
  variables: GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicySearchVariables,
  signal?: AbortSignal
) =>
  fetch<
    Schemas.AbstractPolicyRepresentation,
    GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicySearchError,
    undefined,
    {},
    GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicySearchQueryParams,
    GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicySearchPathParams
  >({
    url: '/admin/realms/{realm}/clients/{clientUuid}/authz/resource-server/policy/search',
    method: 'get',
    ...variables,
    signal
  });

export type GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourcePathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  /**
   * id of client (not client-id!)
   */
  clientUuid: string;
};

export type GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceQueryParams = {
  _id?: string;
  deep?: boolean;
  exactName?: boolean;
  /**
   * @format int32
   */
  first?: number;
  matchingUri?: boolean;
  /**
   * @format int32
   */
  max?: number;
  name?: string;
  owner?: string;
  scope?: string;
  type?: string;
  uri?: string;
};

export type GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceError = Fetcher.ErrorWrapper<undefined>;

export type GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResponse = Schemas.ResourceRepresentation[];

export type GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceVariables = {
  pathParams: GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourcePathParams;
  queryParams?: GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceQueryParams;
} & FetcherExtraProps;

export const getAdminRealmsRealmClientsClientUuidAuthzResourceServerResource = (
  variables: GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceVariables,
  signal?: AbortSignal
) =>
  fetch<
    GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResponse,
    GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceError,
    undefined,
    {},
    GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceQueryParams,
    GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourcePathParams
  >({
    url: '/admin/realms/{realm}/clients/{clientUuid}/authz/resource-server/resource',
    method: 'get',
    ...variables,
    signal
  });

export type PostAdminRealmsRealmClientsClientUuidAuthzResourceServerResourcePathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  /**
   * id of client (not client-id!)
   */
  clientUuid: string;
};

export type PostAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceQueryParams = {
  _id?: string;
  deep?: boolean;
  exactName?: boolean;
  /**
   * @format int32
   */
  first?: number;
  matchingUri?: boolean;
  /**
   * @format int32
   */
  max?: number;
  name?: string;
  owner?: string;
  scope?: string;
  type?: string;
  uri?: string;
};

export type PostAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceError = Fetcher.ErrorWrapper<undefined>;

export type PostAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceVariables = {
  body?: Schemas.ResourceRepresentation;
  pathParams: PostAdminRealmsRealmClientsClientUuidAuthzResourceServerResourcePathParams;
  queryParams?: PostAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceQueryParams;
} & FetcherExtraProps;

export const postAdminRealmsRealmClientsClientUuidAuthzResourceServerResource = (
  variables: PostAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceVariables,
  signal?: AbortSignal
) =>
  fetch<
    Schemas.ResourceRepresentation,
    PostAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceError,
    Schemas.ResourceRepresentation,
    {},
    PostAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceQueryParams,
    PostAdminRealmsRealmClientsClientUuidAuthzResourceServerResourcePathParams
  >({
    url: '/admin/realms/{realm}/clients/{clientUuid}/authz/resource-server/resource',
    method: 'post',
    ...variables,
    signal
  });

export type GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearchPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  /**
   * id of client (not client-id!)
   */
  clientUuid: string;
};

export type GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearchQueryParams = {
  _id?: string;
  deep?: boolean;
  exactName?: boolean;
  /**
   * @format int32
   */
  first?: number;
  matchingUri?: boolean;
  /**
   * @format int32
   */
  max?: number;
  name?: string;
  owner?: string;
  scope?: string;
  type?: string;
  uri?: string;
};

export type GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearchError =
  Fetcher.ErrorWrapper<undefined>;

export type GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearchVariables = {
  pathParams: GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearchPathParams;
  queryParams?: GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearchQueryParams;
} & FetcherExtraProps;

export const getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearch = (
  variables: GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearchVariables,
  signal?: AbortSignal
) =>
  fetch<
    Schemas.ResourceRepresentation,
    GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearchError,
    undefined,
    {},
    GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearchQueryParams,
    GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearchPathParams
  >({
    url: '/admin/realms/{realm}/clients/{clientUuid}/authz/resource-server/resource/search',
    method: 'get',
    ...variables,
    signal
  });

export type GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  /**
   * id of client (not client-id!)
   */
  clientUuid: string;
  resourceId: string;
};

export type GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdQueryParams = {
  _id?: string;
  deep?: boolean;
  exactName?: boolean;
  /**
   * @format int32
   */
  first?: number;
  matchingUri?: boolean;
  /**
   * @format int32
   */
  max?: number;
  name?: string;
  owner?: string;
  scope?: string;
  type?: string;
  uri?: string;
};

export type GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdError =
  Fetcher.ErrorWrapper<undefined>;

export type GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdVariables = {
  pathParams: GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPathParams;
  queryParams?: GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdQueryParams;
} & FetcherExtraProps;

export const getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceId = (
  variables: GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdVariables,
  signal?: AbortSignal
) =>
  fetch<
    Schemas.ResourceRepresentation,
    GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdError,
    undefined,
    {},
    GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdQueryParams,
    GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPathParams
  >({
    url: '/admin/realms/{realm}/clients/{clientUuid}/authz/resource-server/resource/{resourceId}',
    method: 'get',
    ...variables,
    signal
  });

export type PutAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  /**
   * id of client (not client-id!)
   */
  clientUuid: string;
  resourceId: string;
};

export type PutAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdQueryParams = {
  _id?: string;
  deep?: boolean;
  exactName?: boolean;
  /**
   * @format int32
   */
  first?: number;
  matchingUri?: boolean;
  /**
   * @format int32
   */
  max?: number;
  name?: string;
  owner?: string;
  scope?: string;
  type?: string;
  uri?: string;
};

export type PutAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdError =
  Fetcher.ErrorWrapper<undefined>;

export type PutAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdVariables = {
  body?: Schemas.ResourceRepresentation;
  pathParams: PutAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPathParams;
  queryParams?: PutAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdQueryParams;
} & FetcherExtraProps;

export const putAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceId = (
  variables: PutAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdVariables,
  signal?: AbortSignal
) =>
  fetch<
    undefined,
    PutAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdError,
    Schemas.ResourceRepresentation,
    {},
    PutAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdQueryParams,
    PutAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPathParams
  >({
    url: '/admin/realms/{realm}/clients/{clientUuid}/authz/resource-server/resource/{resourceId}',
    method: 'put',
    ...variables,
    signal
  });

export type DeleteAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  /**
   * id of client (not client-id!)
   */
  clientUuid: string;
  resourceId: string;
};

export type DeleteAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdQueryParams = {
  _id?: string;
  deep?: boolean;
  exactName?: boolean;
  /**
   * @format int32
   */
  first?: number;
  matchingUri?: boolean;
  /**
   * @format int32
   */
  max?: number;
  name?: string;
  owner?: string;
  scope?: string;
  type?: string;
  uri?: string;
};

export type DeleteAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdError =
  Fetcher.ErrorWrapper<undefined>;

export type DeleteAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdVariables = {
  pathParams: DeleteAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPathParams;
  queryParams?: DeleteAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdQueryParams;
} & FetcherExtraProps;

export const deleteAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceId = (
  variables: DeleteAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdVariables,
  signal?: AbortSignal
) =>
  fetch<
    undefined,
    DeleteAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdError,
    undefined,
    {},
    DeleteAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdQueryParams,
    DeleteAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPathParams
  >({
    url: '/admin/realms/{realm}/clients/{clientUuid}/authz/resource-server/resource/{resourceId}',
    method: 'delete',
    ...variables,
    signal
  });

export type GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributesPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  /**
   * id of client (not client-id!)
   */
  clientUuid: string;
  resourceId: string;
};

export type GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributesQueryParams = {
  _id?: string;
  deep?: boolean;
  exactName?: boolean;
  /**
   * @format int32
   */
  first?: number;
  matchingUri?: boolean;
  /**
   * @format int32
   */
  max?: number;
  name?: string;
  owner?: string;
  scope?: string;
  type?: string;
  uri?: string;
};

export type GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributesError =
  Fetcher.ErrorWrapper<undefined>;

export type GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributesVariables = {
  pathParams: GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributesPathParams;
  queryParams?: GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributesQueryParams;
} & FetcherExtraProps;

export const getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributes = (
  variables: GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributesVariables,
  signal?: AbortSignal
) =>
  fetch<
    undefined,
    GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributesError,
    undefined,
    {},
    GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributesQueryParams,
    GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributesPathParams
  >({
    url: '/admin/realms/{realm}/clients/{clientUuid}/authz/resource-server/resource/{resourceId}/attributes',
    method: 'get',
    ...variables,
    signal
  });

export type GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissionsPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  /**
   * id of client (not client-id!)
   */
  clientUuid: string;
  resourceId: string;
};

export type GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissionsQueryParams = {
  _id?: string;
  deep?: boolean;
  exactName?: boolean;
  /**
   * @format int32
   */
  first?: number;
  matchingUri?: boolean;
  /**
   * @format int32
   */
  max?: number;
  name?: string;
  owner?: string;
  scope?: string;
  type?: string;
  uri?: string;
};

export type GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissionsError =
  Fetcher.ErrorWrapper<undefined>;

export type GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissionsResponse =
  Schemas.PolicyRepresentation[];

export type GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissionsVariables = {
  pathParams: GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissionsPathParams;
  queryParams?: GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissionsQueryParams;
} & FetcherExtraProps;

export const getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissions = (
  variables: GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissionsVariables,
  signal?: AbortSignal
) =>
  fetch<
    GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissionsResponse,
    GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissionsError,
    undefined,
    {},
    GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissionsQueryParams,
    GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissionsPathParams
  >({
    url: '/admin/realms/{realm}/clients/{clientUuid}/authz/resource-server/resource/{resourceId}/permissions',
    method: 'get',
    ...variables,
    signal
  });

export type GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopesPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  /**
   * id of client (not client-id!)
   */
  clientUuid: string;
  resourceId: string;
};

export type GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopesQueryParams = {
  _id?: string;
  deep?: boolean;
  exactName?: boolean;
  /**
   * @format int32
   */
  first?: number;
  matchingUri?: boolean;
  /**
   * @format int32
   */
  max?: number;
  name?: string;
  owner?: string;
  scope?: string;
  type?: string;
  uri?: string;
};

export type GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopesError =
  Fetcher.ErrorWrapper<undefined>;

export type GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopesResponse =
  Schemas.ScopeRepresentation[];

export type GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopesVariables = {
  pathParams: GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopesPathParams;
  queryParams?: GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopesQueryParams;
} & FetcherExtraProps;

export const getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopes = (
  variables: GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopesVariables,
  signal?: AbortSignal
) =>
  fetch<
    GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopesResponse,
    GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopesError,
    undefined,
    {},
    GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopesQueryParams,
    GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopesPathParams
  >({
    url: '/admin/realms/{realm}/clients/{clientUuid}/authz/resource-server/resource/{resourceId}/scopes',
    method: 'get',
    ...variables,
    signal
  });

export type GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopePathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  /**
   * id of client (not client-id!)
   */
  clientUuid: string;
};

export type GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeQueryParams = {
  /**
   * @format int32
   */
  first?: number;
  /**
   * @format int32
   */
  max?: number;
  name?: string;
  scopeId?: string;
};

export type GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeError = Fetcher.ErrorWrapper<undefined>;

export type GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeResponse = Schemas.ScopeRepresentation[];

export type GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeVariables = {
  pathParams: GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopePathParams;
  queryParams?: GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeQueryParams;
} & FetcherExtraProps;

export const getAdminRealmsRealmClientsClientUuidAuthzResourceServerScope = (
  variables: GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeVariables,
  signal?: AbortSignal
) =>
  fetch<
    GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeResponse,
    GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeError,
    undefined,
    {},
    GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeQueryParams,
    GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopePathParams
  >({
    url: '/admin/realms/{realm}/clients/{clientUuid}/authz/resource-server/scope',
    method: 'get',
    ...variables,
    signal
  });

export type PostAdminRealmsRealmClientsClientUuidAuthzResourceServerScopePathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  /**
   * id of client (not client-id!)
   */
  clientUuid: string;
};

export type PostAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeError = Fetcher.ErrorWrapper<undefined>;

export type PostAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeVariables = {
  body?: Schemas.ScopeRepresentation;
  pathParams: PostAdminRealmsRealmClientsClientUuidAuthzResourceServerScopePathParams;
} & FetcherExtraProps;

export const postAdminRealmsRealmClientsClientUuidAuthzResourceServerScope = (
  variables: PostAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeVariables,
  signal?: AbortSignal
) =>
  fetch<
    undefined,
    PostAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeError,
    Schemas.ScopeRepresentation,
    {},
    {},
    PostAdminRealmsRealmClientsClientUuidAuthzResourceServerScopePathParams
  >({
    url: '/admin/realms/{realm}/clients/{clientUuid}/authz/resource-server/scope',
    method: 'post',
    ...variables,
    signal
  });

export type GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeSearchPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  /**
   * id of client (not client-id!)
   */
  clientUuid: string;
};

export type GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeSearchQueryParams = {
  name?: string;
};

export type GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeSearchError = Fetcher.ErrorWrapper<undefined>;

export type GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeSearchResponse = Schemas.ScopeRepresentation[];

export type GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeSearchVariables = {
  pathParams: GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeSearchPathParams;
  queryParams?: GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeSearchQueryParams;
} & FetcherExtraProps;

export const getAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeSearch = (
  variables: GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeSearchVariables,
  signal?: AbortSignal
) =>
  fetch<
    GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeSearchResponse,
    GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeSearchError,
    undefined,
    {},
    GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeSearchQueryParams,
    GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeSearchPathParams
  >({
    url: '/admin/realms/{realm}/clients/{clientUuid}/authz/resource-server/scope/search',
    method: 'get',
    ...variables,
    signal
  });

export type GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  /**
   * id of client (not client-id!)
   */
  clientUuid: string;
  scopeId: string;
};

export type GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdError = Fetcher.ErrorWrapper<undefined>;

export type GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdVariables = {
  pathParams: GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPathParams;
} & FetcherExtraProps;

export const getAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeId = (
  variables: GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdVariables,
  signal?: AbortSignal
) =>
  fetch<
    Schemas.ScopeRepresentation,
    GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdError,
    undefined,
    {},
    {},
    GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPathParams
  >({
    url: '/admin/realms/{realm}/clients/{clientUuid}/authz/resource-server/scope/{scopeId}',
    method: 'get',
    ...variables,
    signal
  });

export type PutAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  /**
   * id of client (not client-id!)
   */
  clientUuid: string;
  scopeId: string;
};

export type PutAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdError = Fetcher.ErrorWrapper<undefined>;

export type PutAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdVariables = {
  body?: Schemas.ScopeRepresentation;
  pathParams: PutAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPathParams;
} & FetcherExtraProps;

export const putAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeId = (
  variables: PutAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdVariables,
  signal?: AbortSignal
) =>
  fetch<
    undefined,
    PutAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdError,
    Schemas.ScopeRepresentation,
    {},
    {},
    PutAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPathParams
  >({
    url: '/admin/realms/{realm}/clients/{clientUuid}/authz/resource-server/scope/{scopeId}',
    method: 'put',
    ...variables,
    signal
  });

export type DeleteAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  /**
   * id of client (not client-id!)
   */
  clientUuid: string;
  scopeId: string;
};

export type DeleteAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdError =
  Fetcher.ErrorWrapper<undefined>;

export type DeleteAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdVariables = {
  pathParams: DeleteAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPathParams;
} & FetcherExtraProps;

export const deleteAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeId = (
  variables: DeleteAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdVariables,
  signal?: AbortSignal
) =>
  fetch<
    undefined,
    DeleteAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdError,
    undefined,
    {},
    {},
    DeleteAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPathParams
  >({
    url: '/admin/realms/{realm}/clients/{clientUuid}/authz/resource-server/scope/{scopeId}',
    method: 'delete',
    ...variables,
    signal
  });

export type GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPermissionsPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  /**
   * id of client (not client-id!)
   */
  clientUuid: string;
  scopeId: string;
};

export type GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPermissionsError =
  Fetcher.ErrorWrapper<undefined>;

export type GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPermissionsResponse =
  Schemas.PolicyRepresentation[];

export type GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPermissionsVariables = {
  pathParams: GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPermissionsPathParams;
} & FetcherExtraProps;

export const getAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPermissions = (
  variables: GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPermissionsVariables,
  signal?: AbortSignal
) =>
  fetch<
    GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPermissionsResponse,
    GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPermissionsError,
    undefined,
    {},
    {},
    GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPermissionsPathParams
  >({
    url: '/admin/realms/{realm}/clients/{clientUuid}/authz/resource-server/scope/{scopeId}/permissions',
    method: 'get',
    ...variables,
    signal
  });

export type GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdResourcesPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  /**
   * id of client (not client-id!)
   */
  clientUuid: string;
  scopeId: string;
};

export type GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdResourcesError =
  Fetcher.ErrorWrapper<undefined>;

export type GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdResourcesResponse =
  Schemas.ResourceRepresentation[];

export type GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdResourcesVariables = {
  pathParams: GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdResourcesPathParams;
} & FetcherExtraProps;

export const getAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdResources = (
  variables: GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdResourcesVariables,
  signal?: AbortSignal
) =>
  fetch<
    GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdResourcesResponse,
    GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdResourcesError,
    undefined,
    {},
    {},
    GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdResourcesPathParams
  >({
    url: '/admin/realms/{realm}/clients/{clientUuid}/authz/resource-server/scope/{scopeId}/resources',
    method: 'get',
    ...variables,
    signal
  });

export type GetAdminRealmsRealmClientsClientUuidAuthzResourceServerSettingsPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  /**
   * id of client (not client-id!)
   */
  clientUuid: string;
};

export type GetAdminRealmsRealmClientsClientUuidAuthzResourceServerSettingsError = Fetcher.ErrorWrapper<undefined>;

export type GetAdminRealmsRealmClientsClientUuidAuthzResourceServerSettingsVariables = {
  pathParams: GetAdminRealmsRealmClientsClientUuidAuthzResourceServerSettingsPathParams;
} & FetcherExtraProps;

export const getAdminRealmsRealmClientsClientUuidAuthzResourceServerSettings = (
  variables: GetAdminRealmsRealmClientsClientUuidAuthzResourceServerSettingsVariables,
  signal?: AbortSignal
) =>
  fetch<
    Schemas.ResourceServerRepresentation,
    GetAdminRealmsRealmClientsClientUuidAuthzResourceServerSettingsError,
    undefined,
    {},
    {},
    GetAdminRealmsRealmClientsClientUuidAuthzResourceServerSettingsPathParams
  >({
    url: '/admin/realms/{realm}/clients/{clientUuid}/authz/resource-server/settings',
    method: 'get',
    ...variables,
    signal
  });

export type GetAdminRealmsRealmClientsClientUuidCertificatesAttrPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  /**
   * id of client (not client-id!)
   */
  clientUuid: string;
  attr: string;
};

export type GetAdminRealmsRealmClientsClientUuidCertificatesAttrError = Fetcher.ErrorWrapper<undefined>;

export type GetAdminRealmsRealmClientsClientUuidCertificatesAttrVariables = {
  pathParams: GetAdminRealmsRealmClientsClientUuidCertificatesAttrPathParams;
} & FetcherExtraProps;

export const getAdminRealmsRealmClientsClientUuidCertificatesAttr = (
  variables: GetAdminRealmsRealmClientsClientUuidCertificatesAttrVariables,
  signal?: AbortSignal
) =>
  fetch<
    Schemas.CertificateRepresentation,
    GetAdminRealmsRealmClientsClientUuidCertificatesAttrError,
    undefined,
    {},
    {},
    GetAdminRealmsRealmClientsClientUuidCertificatesAttrPathParams
  >({ url: '/admin/realms/{realm}/clients/{clientUuid}/certificates/{attr}', method: 'get', ...variables, signal });

export type PostAdminRealmsRealmClientsClientUuidCertificatesAttrDownloadPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  /**
   * id of client (not client-id!)
   */
  clientUuid: string;
  attr: string;
};

export type PostAdminRealmsRealmClientsClientUuidCertificatesAttrDownloadError = Fetcher.ErrorWrapper<undefined>;

export type PostAdminRealmsRealmClientsClientUuidCertificatesAttrDownloadVariables = {
  body?: Schemas.KeyStoreConfig;
  pathParams: PostAdminRealmsRealmClientsClientUuidCertificatesAttrDownloadPathParams;
} & FetcherExtraProps;

export const postAdminRealmsRealmClientsClientUuidCertificatesAttrDownload = (
  variables: PostAdminRealmsRealmClientsClientUuidCertificatesAttrDownloadVariables,
  signal?: AbortSignal
) =>
  fetch<
    Blob,
    PostAdminRealmsRealmClientsClientUuidCertificatesAttrDownloadError,
    Schemas.KeyStoreConfig,
    {},
    {},
    PostAdminRealmsRealmClientsClientUuidCertificatesAttrDownloadPathParams
  >({
    url: '/admin/realms/{realm}/clients/{clientUuid}/certificates/{attr}/download',
    method: 'post',
    ...variables,
    signal
  });

export type PostAdminRealmsRealmClientsClientUuidCertificatesAttrGeneratePathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  /**
   * id of client (not client-id!)
   */
  clientUuid: string;
  attr: string;
};

export type PostAdminRealmsRealmClientsClientUuidCertificatesAttrGenerateError = Fetcher.ErrorWrapper<undefined>;

export type PostAdminRealmsRealmClientsClientUuidCertificatesAttrGenerateVariables = {
  pathParams: PostAdminRealmsRealmClientsClientUuidCertificatesAttrGeneratePathParams;
} & FetcherExtraProps;

export const postAdminRealmsRealmClientsClientUuidCertificatesAttrGenerate = (
  variables: PostAdminRealmsRealmClientsClientUuidCertificatesAttrGenerateVariables,
  signal?: AbortSignal
) =>
  fetch<
    Schemas.CertificateRepresentation,
    PostAdminRealmsRealmClientsClientUuidCertificatesAttrGenerateError,
    undefined,
    {},
    {},
    PostAdminRealmsRealmClientsClientUuidCertificatesAttrGeneratePathParams
  >({
    url: '/admin/realms/{realm}/clients/{clientUuid}/certificates/{attr}/generate',
    method: 'post',
    ...variables,
    signal
  });

export type PostAdminRealmsRealmClientsClientUuidCertificatesAttrGenerateAndDownloadPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  /**
   * id of client (not client-id!)
   */
  clientUuid: string;
  attr: string;
};

export type PostAdminRealmsRealmClientsClientUuidCertificatesAttrGenerateAndDownloadError =
  Fetcher.ErrorWrapper<undefined>;

export type PostAdminRealmsRealmClientsClientUuidCertificatesAttrGenerateAndDownloadVariables = {
  body?: Schemas.KeyStoreConfig;
  pathParams: PostAdminRealmsRealmClientsClientUuidCertificatesAttrGenerateAndDownloadPathParams;
} & FetcherExtraProps;

export const postAdminRealmsRealmClientsClientUuidCertificatesAttrGenerateAndDownload = (
  variables: PostAdminRealmsRealmClientsClientUuidCertificatesAttrGenerateAndDownloadVariables,
  signal?: AbortSignal
) =>
  fetch<
    Blob,
    PostAdminRealmsRealmClientsClientUuidCertificatesAttrGenerateAndDownloadError,
    Schemas.KeyStoreConfig,
    {},
    {},
    PostAdminRealmsRealmClientsClientUuidCertificatesAttrGenerateAndDownloadPathParams
  >({
    url: '/admin/realms/{realm}/clients/{clientUuid}/certificates/{attr}/generate-and-download',
    method: 'post',
    ...variables,
    signal
  });

export type PostAdminRealmsRealmClientsClientUuidCertificatesAttrUploadPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  /**
   * id of client (not client-id!)
   */
  clientUuid: string;
  attr: string;
};

export type PostAdminRealmsRealmClientsClientUuidCertificatesAttrUploadError = Fetcher.ErrorWrapper<undefined>;

export type PostAdminRealmsRealmClientsClientUuidCertificatesAttrUploadVariables = {
  pathParams: PostAdminRealmsRealmClientsClientUuidCertificatesAttrUploadPathParams;
} & FetcherExtraProps;

export const postAdminRealmsRealmClientsClientUuidCertificatesAttrUpload = (
  variables: PostAdminRealmsRealmClientsClientUuidCertificatesAttrUploadVariables,
  signal?: AbortSignal
) =>
  fetch<
    Schemas.CertificateRepresentation,
    PostAdminRealmsRealmClientsClientUuidCertificatesAttrUploadError,
    undefined,
    {},
    {},
    PostAdminRealmsRealmClientsClientUuidCertificatesAttrUploadPathParams
  >({
    url: '/admin/realms/{realm}/clients/{clientUuid}/certificates/{attr}/upload',
    method: 'post',
    ...variables,
    signal
  });

export type PostAdminRealmsRealmClientsClientUuidCertificatesAttrUploadCertificatePathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  /**
   * id of client (not client-id!)
   */
  clientUuid: string;
  attr: string;
};

export type PostAdminRealmsRealmClientsClientUuidCertificatesAttrUploadCertificateError =
  Fetcher.ErrorWrapper<undefined>;

export type PostAdminRealmsRealmClientsClientUuidCertificatesAttrUploadCertificateVariables = {
  pathParams: PostAdminRealmsRealmClientsClientUuidCertificatesAttrUploadCertificatePathParams;
} & FetcherExtraProps;

export const postAdminRealmsRealmClientsClientUuidCertificatesAttrUploadCertificate = (
  variables: PostAdminRealmsRealmClientsClientUuidCertificatesAttrUploadCertificateVariables,
  signal?: AbortSignal
) =>
  fetch<
    Schemas.CertificateRepresentation,
    PostAdminRealmsRealmClientsClientUuidCertificatesAttrUploadCertificateError,
    undefined,
    {},
    {},
    PostAdminRealmsRealmClientsClientUuidCertificatesAttrUploadCertificatePathParams
  >({
    url: '/admin/realms/{realm}/clients/{clientUuid}/certificates/{attr}/upload-certificate',
    method: 'post',
    ...variables,
    signal
  });

export type GetAdminRealmsRealmClientsClientUuidClientSecretPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  /**
   * id of client (not client-id!)
   */
  clientUuid: string;
};

export type GetAdminRealmsRealmClientsClientUuidClientSecretError = Fetcher.ErrorWrapper<undefined>;

export type GetAdminRealmsRealmClientsClientUuidClientSecretVariables = {
  pathParams: GetAdminRealmsRealmClientsClientUuidClientSecretPathParams;
} & FetcherExtraProps;

export const getAdminRealmsRealmClientsClientUuidClientSecret = (
  variables: GetAdminRealmsRealmClientsClientUuidClientSecretVariables,
  signal?: AbortSignal
) =>
  fetch<
    Schemas.CredentialRepresentation,
    GetAdminRealmsRealmClientsClientUuidClientSecretError,
    undefined,
    {},
    {},
    GetAdminRealmsRealmClientsClientUuidClientSecretPathParams
  >({ url: '/admin/realms/{realm}/clients/{clientUuid}/client-secret', method: 'get', ...variables, signal });

export type PostAdminRealmsRealmClientsClientUuidClientSecretPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  /**
   * id of client (not client-id!)
   */
  clientUuid: string;
};

export type PostAdminRealmsRealmClientsClientUuidClientSecretError = Fetcher.ErrorWrapper<undefined>;

export type PostAdminRealmsRealmClientsClientUuidClientSecretVariables = {
  pathParams: PostAdminRealmsRealmClientsClientUuidClientSecretPathParams;
} & FetcherExtraProps;

export const postAdminRealmsRealmClientsClientUuidClientSecret = (
  variables: PostAdminRealmsRealmClientsClientUuidClientSecretVariables,
  signal?: AbortSignal
) =>
  fetch<
    Schemas.CredentialRepresentation,
    PostAdminRealmsRealmClientsClientUuidClientSecretError,
    undefined,
    {},
    {},
    PostAdminRealmsRealmClientsClientUuidClientSecretPathParams
  >({ url: '/admin/realms/{realm}/clients/{clientUuid}/client-secret', method: 'post', ...variables, signal });

export type GetAdminRealmsRealmClientsClientUuidClientSecretRotatedPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  /**
   * id of client (not client-id!)
   */
  clientUuid: string;
};

export type GetAdminRealmsRealmClientsClientUuidClientSecretRotatedError = Fetcher.ErrorWrapper<undefined>;

export type GetAdminRealmsRealmClientsClientUuidClientSecretRotatedVariables = {
  pathParams: GetAdminRealmsRealmClientsClientUuidClientSecretRotatedPathParams;
} & FetcherExtraProps;

export const getAdminRealmsRealmClientsClientUuidClientSecretRotated = (
  variables: GetAdminRealmsRealmClientsClientUuidClientSecretRotatedVariables,
  signal?: AbortSignal
) =>
  fetch<
    Schemas.CredentialRepresentation,
    GetAdminRealmsRealmClientsClientUuidClientSecretRotatedError,
    undefined,
    {},
    {},
    GetAdminRealmsRealmClientsClientUuidClientSecretRotatedPathParams
  >({ url: '/admin/realms/{realm}/clients/{clientUuid}/client-secret/rotated', method: 'get', ...variables, signal });

export type DeleteAdminRealmsRealmClientsClientUuidClientSecretRotatedPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  /**
   * id of client (not client-id!)
   */
  clientUuid: string;
};

export type DeleteAdminRealmsRealmClientsClientUuidClientSecretRotatedError = Fetcher.ErrorWrapper<undefined>;

export type DeleteAdminRealmsRealmClientsClientUuidClientSecretRotatedVariables = {
  pathParams: DeleteAdminRealmsRealmClientsClientUuidClientSecretRotatedPathParams;
} & FetcherExtraProps;

export const deleteAdminRealmsRealmClientsClientUuidClientSecretRotated = (
  variables: DeleteAdminRealmsRealmClientsClientUuidClientSecretRotatedVariables,
  signal?: AbortSignal
) =>
  fetch<
    undefined,
    DeleteAdminRealmsRealmClientsClientUuidClientSecretRotatedError,
    undefined,
    {},
    {},
    DeleteAdminRealmsRealmClientsClientUuidClientSecretRotatedPathParams
  >({
    url: '/admin/realms/{realm}/clients/{clientUuid}/client-secret/rotated',
    method: 'delete',
    ...variables,
    signal
  });

export type GetAdminRealmsRealmClientsClientUuidDefaultClientScopesPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  /**
   * id of client (not client-id!)
   */
  clientUuid: string;
};

export type GetAdminRealmsRealmClientsClientUuidDefaultClientScopesError = Fetcher.ErrorWrapper<undefined>;

export type GetAdminRealmsRealmClientsClientUuidDefaultClientScopesResponse = Schemas.ClientScopeRepresentation[];

export type GetAdminRealmsRealmClientsClientUuidDefaultClientScopesVariables = {
  pathParams: GetAdminRealmsRealmClientsClientUuidDefaultClientScopesPathParams;
} & FetcherExtraProps;

export const getAdminRealmsRealmClientsClientUuidDefaultClientScopes = (
  variables: GetAdminRealmsRealmClientsClientUuidDefaultClientScopesVariables,
  signal?: AbortSignal
) =>
  fetch<
    GetAdminRealmsRealmClientsClientUuidDefaultClientScopesResponse,
    GetAdminRealmsRealmClientsClientUuidDefaultClientScopesError,
    undefined,
    {},
    {},
    GetAdminRealmsRealmClientsClientUuidDefaultClientScopesPathParams
  >({ url: '/admin/realms/{realm}/clients/{clientUuid}/default-client-scopes', method: 'get', ...variables, signal });

export type PutAdminRealmsRealmClientsClientUuidDefaultClientScopesClientScopeIdPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  /**
   * id of client (not client-id!)
   */
  clientUuid: string;
  clientScopeId: string;
};

export type PutAdminRealmsRealmClientsClientUuidDefaultClientScopesClientScopeIdError = Fetcher.ErrorWrapper<undefined>;

export type PutAdminRealmsRealmClientsClientUuidDefaultClientScopesClientScopeIdVariables = {
  pathParams: PutAdminRealmsRealmClientsClientUuidDefaultClientScopesClientScopeIdPathParams;
} & FetcherExtraProps;

export const putAdminRealmsRealmClientsClientUuidDefaultClientScopesClientScopeId = (
  variables: PutAdminRealmsRealmClientsClientUuidDefaultClientScopesClientScopeIdVariables,
  signal?: AbortSignal
) =>
  fetch<
    undefined,
    PutAdminRealmsRealmClientsClientUuidDefaultClientScopesClientScopeIdError,
    undefined,
    {},
    {},
    PutAdminRealmsRealmClientsClientUuidDefaultClientScopesClientScopeIdPathParams
  >({
    url: '/admin/realms/{realm}/clients/{clientUuid}/default-client-scopes/{clientScopeId}',
    method: 'put',
    ...variables,
    signal
  });

export type DeleteAdminRealmsRealmClientsClientUuidDefaultClientScopesClientScopeIdPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  /**
   * id of client (not client-id!)
   */
  clientUuid: string;
  clientScopeId: string;
};

export type DeleteAdminRealmsRealmClientsClientUuidDefaultClientScopesClientScopeIdError =
  Fetcher.ErrorWrapper<undefined>;

export type DeleteAdminRealmsRealmClientsClientUuidDefaultClientScopesClientScopeIdVariables = {
  pathParams: DeleteAdminRealmsRealmClientsClientUuidDefaultClientScopesClientScopeIdPathParams;
} & FetcherExtraProps;

export const deleteAdminRealmsRealmClientsClientUuidDefaultClientScopesClientScopeId = (
  variables: DeleteAdminRealmsRealmClientsClientUuidDefaultClientScopesClientScopeIdVariables,
  signal?: AbortSignal
) =>
  fetch<
    undefined,
    DeleteAdminRealmsRealmClientsClientUuidDefaultClientScopesClientScopeIdError,
    undefined,
    {},
    {},
    DeleteAdminRealmsRealmClientsClientUuidDefaultClientScopesClientScopeIdPathParams
  >({
    url: '/admin/realms/{realm}/clients/{clientUuid}/default-client-scopes/{clientScopeId}',
    method: 'delete',
    ...variables,
    signal
  });

export type GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleAccessTokenPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  /**
   * id of client (not client-id!)
   */
  clientUuid: string;
};

export type GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleAccessTokenQueryParams = {
  audience?: string;
  scope?: string;
  userId?: string;
};

export type GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleAccessTokenError =
  Fetcher.ErrorWrapper<undefined>;

export type GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleAccessTokenVariables = {
  pathParams: GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleAccessTokenPathParams;
  queryParams?: GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleAccessTokenQueryParams;
} & FetcherExtraProps;

export const getAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleAccessToken = (
  variables: GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleAccessTokenVariables,
  signal?: AbortSignal
) =>
  fetch<
    Schemas.AccessToken,
    GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleAccessTokenError,
    undefined,
    {},
    GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleAccessTokenQueryParams,
    GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleAccessTokenPathParams
  >({
    url: '/admin/realms/{realm}/clients/{clientUuid}/evaluate-scopes/generate-example-access-token',
    method: 'get',
    ...variables,
    signal
  });

export type GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleIdTokenPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  /**
   * id of client (not client-id!)
   */
  clientUuid: string;
};

export type GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleIdTokenQueryParams = {
  audience?: string;
  scope?: string;
  userId?: string;
};

export type GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleIdTokenError =
  Fetcher.ErrorWrapper<undefined>;

export type GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleIdTokenVariables = {
  pathParams: GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleIdTokenPathParams;
  queryParams?: GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleIdTokenQueryParams;
} & FetcherExtraProps;

export const getAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleIdToken = (
  variables: GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleIdTokenVariables,
  signal?: AbortSignal
) =>
  fetch<
    Schemas.IDToken,
    GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleIdTokenError,
    undefined,
    {},
    GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleIdTokenQueryParams,
    GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleIdTokenPathParams
  >({
    url: '/admin/realms/{realm}/clients/{clientUuid}/evaluate-scopes/generate-example-id-token',
    method: 'get',
    ...variables,
    signal
  });

export type GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleUserinfoPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  /**
   * id of client (not client-id!)
   */
  clientUuid: string;
};

export type GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleUserinfoQueryParams = {
  scope?: string;
  userId?: string;
};

export type GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleUserinfoError =
  Fetcher.ErrorWrapper<undefined>;

export type GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleUserinfoVariables = {
  pathParams: GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleUserinfoPathParams;
  queryParams?: GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleUserinfoQueryParams;
} & FetcherExtraProps;

export const getAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleUserinfo = (
  variables: GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleUserinfoVariables,
  signal?: AbortSignal
) =>
  fetch<
    Record<string, any>,
    GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleUserinfoError,
    undefined,
    {},
    GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleUserinfoQueryParams,
    GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleUserinfoPathParams
  >({
    url: '/admin/realms/{realm}/clients/{clientUuid}/evaluate-scopes/generate-example-userinfo',
    method: 'get',
    ...variables,
    signal
  });

export type GetAdminRealmsRealmClientsClientUuidEvaluateScopesProtocolMappersPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  /**
   * id of client (not client-id!)
   */
  clientUuid: string;
};

export type GetAdminRealmsRealmClientsClientUuidEvaluateScopesProtocolMappersQueryParams = {
  scope?: string;
};

export type GetAdminRealmsRealmClientsClientUuidEvaluateScopesProtocolMappersError = Fetcher.ErrorWrapper<undefined>;

export type GetAdminRealmsRealmClientsClientUuidEvaluateScopesProtocolMappersResponse =
  Schemas.ProtocolMapperEvaluationRepresentation[];

export type GetAdminRealmsRealmClientsClientUuidEvaluateScopesProtocolMappersVariables = {
  pathParams: GetAdminRealmsRealmClientsClientUuidEvaluateScopesProtocolMappersPathParams;
  queryParams?: GetAdminRealmsRealmClientsClientUuidEvaluateScopesProtocolMappersQueryParams;
} & FetcherExtraProps;

/**
 * This means protocol mappers assigned to this client directly and protocol mappers assigned to all client scopes of this client.
 */
export const getAdminRealmsRealmClientsClientUuidEvaluateScopesProtocolMappers = (
  variables: GetAdminRealmsRealmClientsClientUuidEvaluateScopesProtocolMappersVariables,
  signal?: AbortSignal
) =>
  fetch<
    GetAdminRealmsRealmClientsClientUuidEvaluateScopesProtocolMappersResponse,
    GetAdminRealmsRealmClientsClientUuidEvaluateScopesProtocolMappersError,
    undefined,
    {},
    GetAdminRealmsRealmClientsClientUuidEvaluateScopesProtocolMappersQueryParams,
    GetAdminRealmsRealmClientsClientUuidEvaluateScopesProtocolMappersPathParams
  >({
    url: '/admin/realms/{realm}/clients/{clientUuid}/evaluate-scopes/protocol-mappers',
    method: 'get',
    ...variables,
    signal
  });

export type GetAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdGrantedPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  /**
   * id of client (not client-id!)
   */
  clientUuid: string;
  /**
   * either realm name OR client UUID
   */
  roleContainerId: string;
};

export type GetAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdGrantedQueryParams = {
  scope?: string;
};

export type GetAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdGrantedError =
  Fetcher.ErrorWrapper<undefined>;

export type GetAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdGrantedResponse =
  Schemas.RoleRepresentation[];

export type GetAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdGrantedVariables = {
  pathParams: GetAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdGrantedPathParams;
  queryParams?: GetAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdGrantedQueryParams;
} & FetcherExtraProps;

/**
 * This contains scope mappings, which this client has directly, as well as scope mappings, which are granted to all client scopes, which are linked with this client.
 */
export const getAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdGranted = (
  variables: GetAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdGrantedVariables,
  signal?: AbortSignal
) =>
  fetch<
    GetAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdGrantedResponse,
    GetAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdGrantedError,
    undefined,
    {},
    GetAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdGrantedQueryParams,
    GetAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdGrantedPathParams
  >({
    url: '/admin/realms/{realm}/clients/{clientUuid}/evaluate-scopes/scope-mappings/{roleContainerId}/granted',
    method: 'get',
    ...variables,
    signal
  });

export type GetAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdNotGrantedPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  /**
   * id of client (not client-id!)
   */
  clientUuid: string;
  /**
   * either realm name OR client UUID
   */
  roleContainerId: string;
};

export type GetAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdNotGrantedQueryParams = {
  scope?: string;
};

export type GetAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdNotGrantedError =
  Fetcher.ErrorWrapper<undefined>;

export type GetAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdNotGrantedResponse =
  Schemas.RoleRepresentation[];

export type GetAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdNotGrantedVariables = {
  pathParams: GetAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdNotGrantedPathParams;
  queryParams?: GetAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdNotGrantedQueryParams;
} & FetcherExtraProps;

/**
 * Defacto all the other roles of particular role container, which are not in {@link #getGrantedScopeMappings()}
 */
export const getAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdNotGranted = (
  variables: GetAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdNotGrantedVariables,
  signal?: AbortSignal
) =>
  fetch<
    GetAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdNotGrantedResponse,
    GetAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdNotGrantedError,
    undefined,
    {},
    GetAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdNotGrantedQueryParams,
    GetAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdNotGrantedPathParams
  >({
    url: '/admin/realms/{realm}/clients/{clientUuid}/evaluate-scopes/scope-mappings/{roleContainerId}/not-granted',
    method: 'get',
    ...variables,
    signal
  });

export type GetAdminRealmsRealmClientsClientUuidInstallationProvidersProviderIdPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  /**
   * id of client (not client-id!)
   */
  clientUuid: string;
  providerId: string;
};

export type GetAdminRealmsRealmClientsClientUuidInstallationProvidersProviderIdError = Fetcher.ErrorWrapper<undefined>;

export type GetAdminRealmsRealmClientsClientUuidInstallationProvidersProviderIdVariables = {
  pathParams: GetAdminRealmsRealmClientsClientUuidInstallationProvidersProviderIdPathParams;
} & FetcherExtraProps;

export const getAdminRealmsRealmClientsClientUuidInstallationProvidersProviderId = (
  variables: GetAdminRealmsRealmClientsClientUuidInstallationProvidersProviderIdVariables,
  signal?: AbortSignal
) =>
  fetch<
    undefined,
    GetAdminRealmsRealmClientsClientUuidInstallationProvidersProviderIdError,
    undefined,
    {},
    {},
    GetAdminRealmsRealmClientsClientUuidInstallationProvidersProviderIdPathParams
  >({
    url: '/admin/realms/{realm}/clients/{clientUuid}/installation/providers/{providerId}',
    method: 'get',
    ...variables,
    signal
  });

export type GetAdminRealmsRealmClientsClientUuidManagementPermissionsPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  /**
   * id of client (not client-id!)
   */
  clientUuid: string;
};

export type GetAdminRealmsRealmClientsClientUuidManagementPermissionsError = Fetcher.ErrorWrapper<undefined>;

export type GetAdminRealmsRealmClientsClientUuidManagementPermissionsVariables = {
  pathParams: GetAdminRealmsRealmClientsClientUuidManagementPermissionsPathParams;
} & FetcherExtraProps;

export const getAdminRealmsRealmClientsClientUuidManagementPermissions = (
  variables: GetAdminRealmsRealmClientsClientUuidManagementPermissionsVariables,
  signal?: AbortSignal
) =>
  fetch<
    Schemas.ManagementPermissionReference,
    GetAdminRealmsRealmClientsClientUuidManagementPermissionsError,
    undefined,
    {},
    {},
    GetAdminRealmsRealmClientsClientUuidManagementPermissionsPathParams
  >({ url: '/admin/realms/{realm}/clients/{clientUuid}/management/permissions', method: 'get', ...variables, signal });

export type PutAdminRealmsRealmClientsClientUuidManagementPermissionsPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  /**
   * id of client (not client-id!)
   */
  clientUuid: string;
};

export type PutAdminRealmsRealmClientsClientUuidManagementPermissionsError = Fetcher.ErrorWrapper<undefined>;

export type PutAdminRealmsRealmClientsClientUuidManagementPermissionsVariables = {
  body?: Schemas.ManagementPermissionReference;
  pathParams: PutAdminRealmsRealmClientsClientUuidManagementPermissionsPathParams;
} & FetcherExtraProps;

export const putAdminRealmsRealmClientsClientUuidManagementPermissions = (
  variables: PutAdminRealmsRealmClientsClientUuidManagementPermissionsVariables,
  signal?: AbortSignal
) =>
  fetch<
    Schemas.ManagementPermissionReference,
    PutAdminRealmsRealmClientsClientUuidManagementPermissionsError,
    Schemas.ManagementPermissionReference,
    {},
    {},
    PutAdminRealmsRealmClientsClientUuidManagementPermissionsPathParams
  >({ url: '/admin/realms/{realm}/clients/{clientUuid}/management/permissions', method: 'put', ...variables, signal });

export type PostAdminRealmsRealmClientsClientUuidNodesPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  /**
   * id of client (not client-id!)
   */
  clientUuid: string;
};

export type PostAdminRealmsRealmClientsClientUuidNodesError = Fetcher.ErrorWrapper<undefined>;

export type PostAdminRealmsRealmClientsClientUuidNodesRequestBody = {
  [key: string]: string;
};

export type PostAdminRealmsRealmClientsClientUuidNodesVariables = {
  body?: PostAdminRealmsRealmClientsClientUuidNodesRequestBody;
  pathParams: PostAdminRealmsRealmClientsClientUuidNodesPathParams;
} & FetcherExtraProps;

export const postAdminRealmsRealmClientsClientUuidNodes = (
  variables: PostAdminRealmsRealmClientsClientUuidNodesVariables,
  signal?: AbortSignal
) =>
  fetch<
    undefined,
    PostAdminRealmsRealmClientsClientUuidNodesError,
    PostAdminRealmsRealmClientsClientUuidNodesRequestBody,
    {},
    {},
    PostAdminRealmsRealmClientsClientUuidNodesPathParams
  >({ url: '/admin/realms/{realm}/clients/{clientUuid}/nodes', method: 'post', ...variables, signal });

export type DeleteAdminRealmsRealmClientsClientUuidNodesNodePathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  /**
   * id of client (not client-id!)
   */
  clientUuid: string;
  node: string;
};

export type DeleteAdminRealmsRealmClientsClientUuidNodesNodeError = Fetcher.ErrorWrapper<undefined>;

export type DeleteAdminRealmsRealmClientsClientUuidNodesNodeVariables = {
  pathParams: DeleteAdminRealmsRealmClientsClientUuidNodesNodePathParams;
} & FetcherExtraProps;

export const deleteAdminRealmsRealmClientsClientUuidNodesNode = (
  variables: DeleteAdminRealmsRealmClientsClientUuidNodesNodeVariables,
  signal?: AbortSignal
) =>
  fetch<
    undefined,
    DeleteAdminRealmsRealmClientsClientUuidNodesNodeError,
    undefined,
    {},
    {},
    DeleteAdminRealmsRealmClientsClientUuidNodesNodePathParams
  >({ url: '/admin/realms/{realm}/clients/{clientUuid}/nodes/{node}', method: 'delete', ...variables, signal });

export type GetAdminRealmsRealmClientsClientUuidOfflineSessionCountPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  /**
   * id of client (not client-id!)
   */
  clientUuid: string;
};

export type GetAdminRealmsRealmClientsClientUuidOfflineSessionCountError = Fetcher.ErrorWrapper<undefined>;

export type GetAdminRealmsRealmClientsClientUuidOfflineSessionCountResponse = {
  [key: string]: number;
};

export type GetAdminRealmsRealmClientsClientUuidOfflineSessionCountVariables = {
  pathParams: GetAdminRealmsRealmClientsClientUuidOfflineSessionCountPathParams;
} & FetcherExtraProps;

export const getAdminRealmsRealmClientsClientUuidOfflineSessionCount = (
  variables: GetAdminRealmsRealmClientsClientUuidOfflineSessionCountVariables,
  signal?: AbortSignal
) =>
  fetch<
    GetAdminRealmsRealmClientsClientUuidOfflineSessionCountResponse,
    GetAdminRealmsRealmClientsClientUuidOfflineSessionCountError,
    undefined,
    {},
    {},
    GetAdminRealmsRealmClientsClientUuidOfflineSessionCountPathParams
  >({ url: '/admin/realms/{realm}/clients/{clientUuid}/offline-session-count', method: 'get', ...variables, signal });

export type GetAdminRealmsRealmClientsClientUuidOfflineSessionsPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  /**
   * id of client (not client-id!)
   */
  clientUuid: string;
};

export type GetAdminRealmsRealmClientsClientUuidOfflineSessionsQueryParams = {
  /**
   * Paging offset
   *
   * @format int32
   */
  first?: number;
  /**
   * Maximum results size (defaults to 100)
   *
   * @format int32
   */
  max?: number;
};

export type GetAdminRealmsRealmClientsClientUuidOfflineSessionsError = Fetcher.ErrorWrapper<undefined>;

export type GetAdminRealmsRealmClientsClientUuidOfflineSessionsResponse = Schemas.UserSessionRepresentation[];

export type GetAdminRealmsRealmClientsClientUuidOfflineSessionsVariables = {
  pathParams: GetAdminRealmsRealmClientsClientUuidOfflineSessionsPathParams;
  queryParams?: GetAdminRealmsRealmClientsClientUuidOfflineSessionsQueryParams;
} & FetcherExtraProps;

export const getAdminRealmsRealmClientsClientUuidOfflineSessions = (
  variables: GetAdminRealmsRealmClientsClientUuidOfflineSessionsVariables,
  signal?: AbortSignal
) =>
  fetch<
    GetAdminRealmsRealmClientsClientUuidOfflineSessionsResponse,
    GetAdminRealmsRealmClientsClientUuidOfflineSessionsError,
    undefined,
    {},
    GetAdminRealmsRealmClientsClientUuidOfflineSessionsQueryParams,
    GetAdminRealmsRealmClientsClientUuidOfflineSessionsPathParams
  >({ url: '/admin/realms/{realm}/clients/{clientUuid}/offline-sessions', method: 'get', ...variables, signal });

export type GetAdminRealmsRealmClientsClientUuidOptionalClientScopesPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  /**
   * id of client (not client-id!)
   */
  clientUuid: string;
};

export type GetAdminRealmsRealmClientsClientUuidOptionalClientScopesError = Fetcher.ErrorWrapper<undefined>;

export type GetAdminRealmsRealmClientsClientUuidOptionalClientScopesResponse = Schemas.ClientScopeRepresentation[];

export type GetAdminRealmsRealmClientsClientUuidOptionalClientScopesVariables = {
  pathParams: GetAdminRealmsRealmClientsClientUuidOptionalClientScopesPathParams;
} & FetcherExtraProps;

export const getAdminRealmsRealmClientsClientUuidOptionalClientScopes = (
  variables: GetAdminRealmsRealmClientsClientUuidOptionalClientScopesVariables,
  signal?: AbortSignal
) =>
  fetch<
    GetAdminRealmsRealmClientsClientUuidOptionalClientScopesResponse,
    GetAdminRealmsRealmClientsClientUuidOptionalClientScopesError,
    undefined,
    {},
    {},
    GetAdminRealmsRealmClientsClientUuidOptionalClientScopesPathParams
  >({ url: '/admin/realms/{realm}/clients/{clientUuid}/optional-client-scopes', method: 'get', ...variables, signal });

export type PutAdminRealmsRealmClientsClientUuidOptionalClientScopesClientScopeIdPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  /**
   * id of client (not client-id!)
   */
  clientUuid: string;
  clientScopeId: string;
};

export type PutAdminRealmsRealmClientsClientUuidOptionalClientScopesClientScopeIdError =
  Fetcher.ErrorWrapper<undefined>;

export type PutAdminRealmsRealmClientsClientUuidOptionalClientScopesClientScopeIdVariables = {
  pathParams: PutAdminRealmsRealmClientsClientUuidOptionalClientScopesClientScopeIdPathParams;
} & FetcherExtraProps;

export const putAdminRealmsRealmClientsClientUuidOptionalClientScopesClientScopeId = (
  variables: PutAdminRealmsRealmClientsClientUuidOptionalClientScopesClientScopeIdVariables,
  signal?: AbortSignal
) =>
  fetch<
    undefined,
    PutAdminRealmsRealmClientsClientUuidOptionalClientScopesClientScopeIdError,
    undefined,
    {},
    {},
    PutAdminRealmsRealmClientsClientUuidOptionalClientScopesClientScopeIdPathParams
  >({
    url: '/admin/realms/{realm}/clients/{clientUuid}/optional-client-scopes/{clientScopeId}',
    method: 'put',
    ...variables,
    signal
  });

export type DeleteAdminRealmsRealmClientsClientUuidOptionalClientScopesClientScopeIdPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  /**
   * id of client (not client-id!)
   */
  clientUuid: string;
  clientScopeId: string;
};

export type DeleteAdminRealmsRealmClientsClientUuidOptionalClientScopesClientScopeIdError =
  Fetcher.ErrorWrapper<undefined>;

export type DeleteAdminRealmsRealmClientsClientUuidOptionalClientScopesClientScopeIdVariables = {
  pathParams: DeleteAdminRealmsRealmClientsClientUuidOptionalClientScopesClientScopeIdPathParams;
} & FetcherExtraProps;

export const deleteAdminRealmsRealmClientsClientUuidOptionalClientScopesClientScopeId = (
  variables: DeleteAdminRealmsRealmClientsClientUuidOptionalClientScopesClientScopeIdVariables,
  signal?: AbortSignal
) =>
  fetch<
    undefined,
    DeleteAdminRealmsRealmClientsClientUuidOptionalClientScopesClientScopeIdError,
    undefined,
    {},
    {},
    DeleteAdminRealmsRealmClientsClientUuidOptionalClientScopesClientScopeIdPathParams
  >({
    url: '/admin/realms/{realm}/clients/{clientUuid}/optional-client-scopes/{clientScopeId}',
    method: 'delete',
    ...variables,
    signal
  });

export type PostAdminRealmsRealmClientsClientUuidProtocolMappersAddModelsPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  /**
   * id of client (not client-id!)
   */
  clientUuid: string;
};

export type PostAdminRealmsRealmClientsClientUuidProtocolMappersAddModelsError = Fetcher.ErrorWrapper<undefined>;

export type PostAdminRealmsRealmClientsClientUuidProtocolMappersAddModelsRequestBody =
  Schemas.ProtocolMapperRepresentation[];

export type PostAdminRealmsRealmClientsClientUuidProtocolMappersAddModelsVariables = {
  body?: PostAdminRealmsRealmClientsClientUuidProtocolMappersAddModelsRequestBody;
  pathParams: PostAdminRealmsRealmClientsClientUuidProtocolMappersAddModelsPathParams;
} & FetcherExtraProps;

export const postAdminRealmsRealmClientsClientUuidProtocolMappersAddModels = (
  variables: PostAdminRealmsRealmClientsClientUuidProtocolMappersAddModelsVariables,
  signal?: AbortSignal
) =>
  fetch<
    undefined,
    PostAdminRealmsRealmClientsClientUuidProtocolMappersAddModelsError,
    PostAdminRealmsRealmClientsClientUuidProtocolMappersAddModelsRequestBody,
    {},
    {},
    PostAdminRealmsRealmClientsClientUuidProtocolMappersAddModelsPathParams
  >({
    url: '/admin/realms/{realm}/clients/{clientUuid}/protocol-mappers/add-models',
    method: 'post',
    ...variables,
    signal
  });

export type GetAdminRealmsRealmClientsClientUuidProtocolMappersModelsPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  /**
   * id of client (not client-id!)
   */
  clientUuid: string;
};

export type GetAdminRealmsRealmClientsClientUuidProtocolMappersModelsError = Fetcher.ErrorWrapper<undefined>;

export type GetAdminRealmsRealmClientsClientUuidProtocolMappersModelsResponse = Schemas.ProtocolMapperRepresentation[];

export type GetAdminRealmsRealmClientsClientUuidProtocolMappersModelsVariables = {
  pathParams: GetAdminRealmsRealmClientsClientUuidProtocolMappersModelsPathParams;
} & FetcherExtraProps;

export const getAdminRealmsRealmClientsClientUuidProtocolMappersModels = (
  variables: GetAdminRealmsRealmClientsClientUuidProtocolMappersModelsVariables,
  signal?: AbortSignal
) =>
  fetch<
    GetAdminRealmsRealmClientsClientUuidProtocolMappersModelsResponse,
    GetAdminRealmsRealmClientsClientUuidProtocolMappersModelsError,
    undefined,
    {},
    {},
    GetAdminRealmsRealmClientsClientUuidProtocolMappersModelsPathParams
  >({ url: '/admin/realms/{realm}/clients/{clientUuid}/protocol-mappers/models', method: 'get', ...variables, signal });

export type PostAdminRealmsRealmClientsClientUuidProtocolMappersModelsPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  /**
   * id of client (not client-id!)
   */
  clientUuid: string;
};

export type PostAdminRealmsRealmClientsClientUuidProtocolMappersModelsError = Fetcher.ErrorWrapper<undefined>;

export type PostAdminRealmsRealmClientsClientUuidProtocolMappersModelsVariables = {
  body?: Schemas.ProtocolMapperRepresentation;
  pathParams: PostAdminRealmsRealmClientsClientUuidProtocolMappersModelsPathParams;
} & FetcherExtraProps;

export const postAdminRealmsRealmClientsClientUuidProtocolMappersModels = (
  variables: PostAdminRealmsRealmClientsClientUuidProtocolMappersModelsVariables,
  signal?: AbortSignal
) =>
  fetch<
    undefined,
    PostAdminRealmsRealmClientsClientUuidProtocolMappersModelsError,
    Schemas.ProtocolMapperRepresentation,
    {},
    {},
    PostAdminRealmsRealmClientsClientUuidProtocolMappersModelsPathParams
  >({
    url: '/admin/realms/{realm}/clients/{clientUuid}/protocol-mappers/models',
    method: 'post',
    ...variables,
    signal
  });

export type GetAdminRealmsRealmClientsClientUuidProtocolMappersModelsIdPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  /**
   * id of client (not client-id!)
   */
  clientUuid: string;
  /**
   * Mapper id
   */
  id: string;
};

export type GetAdminRealmsRealmClientsClientUuidProtocolMappersModelsIdError = Fetcher.ErrorWrapper<undefined>;

export type GetAdminRealmsRealmClientsClientUuidProtocolMappersModelsIdVariables = {
  pathParams: GetAdminRealmsRealmClientsClientUuidProtocolMappersModelsIdPathParams;
} & FetcherExtraProps;

export const getAdminRealmsRealmClientsClientUuidProtocolMappersModelsId = (
  variables: GetAdminRealmsRealmClientsClientUuidProtocolMappersModelsIdVariables,
  signal?: AbortSignal
) =>
  fetch<
    Schemas.ProtocolMapperRepresentation,
    GetAdminRealmsRealmClientsClientUuidProtocolMappersModelsIdError,
    undefined,
    {},
    {},
    GetAdminRealmsRealmClientsClientUuidProtocolMappersModelsIdPathParams
  >({
    url: '/admin/realms/{realm}/clients/{clientUuid}/protocol-mappers/models/{id}',
    method: 'get',
    ...variables,
    signal
  });

export type PutAdminRealmsRealmClientsClientUuidProtocolMappersModelsIdPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  /**
   * id of client (not client-id!)
   */
  clientUuid: string;
  /**
   * Mapper id
   */
  id: string;
};

export type PutAdminRealmsRealmClientsClientUuidProtocolMappersModelsIdError = Fetcher.ErrorWrapper<undefined>;

export type PutAdminRealmsRealmClientsClientUuidProtocolMappersModelsIdVariables = {
  body?: Schemas.ProtocolMapperRepresentation;
  pathParams: PutAdminRealmsRealmClientsClientUuidProtocolMappersModelsIdPathParams;
} & FetcherExtraProps;

export const putAdminRealmsRealmClientsClientUuidProtocolMappersModelsId = (
  variables: PutAdminRealmsRealmClientsClientUuidProtocolMappersModelsIdVariables,
  signal?: AbortSignal
) =>
  fetch<
    undefined,
    PutAdminRealmsRealmClientsClientUuidProtocolMappersModelsIdError,
    Schemas.ProtocolMapperRepresentation,
    {},
    {},
    PutAdminRealmsRealmClientsClientUuidProtocolMappersModelsIdPathParams
  >({
    url: '/admin/realms/{realm}/clients/{clientUuid}/protocol-mappers/models/{id}',
    method: 'put',
    ...variables,
    signal
  });

export type DeleteAdminRealmsRealmClientsClientUuidProtocolMappersModelsIdPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  /**
   * id of client (not client-id!)
   */
  clientUuid: string;
  /**
   * Mapper id
   */
  id: string;
};

export type DeleteAdminRealmsRealmClientsClientUuidProtocolMappersModelsIdError = Fetcher.ErrorWrapper<undefined>;

export type DeleteAdminRealmsRealmClientsClientUuidProtocolMappersModelsIdVariables = {
  pathParams: DeleteAdminRealmsRealmClientsClientUuidProtocolMappersModelsIdPathParams;
} & FetcherExtraProps;

export const deleteAdminRealmsRealmClientsClientUuidProtocolMappersModelsId = (
  variables: DeleteAdminRealmsRealmClientsClientUuidProtocolMappersModelsIdVariables,
  signal?: AbortSignal
) =>
  fetch<
    undefined,
    DeleteAdminRealmsRealmClientsClientUuidProtocolMappersModelsIdError,
    undefined,
    {},
    {},
    DeleteAdminRealmsRealmClientsClientUuidProtocolMappersModelsIdPathParams
  >({
    url: '/admin/realms/{realm}/clients/{clientUuid}/protocol-mappers/models/{id}',
    method: 'delete',
    ...variables,
    signal
  });

export type GetAdminRealmsRealmClientsClientUuidProtocolMappersProtocolProtocolPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  /**
   * id of client (not client-id!)
   */
  clientUuid: string;
  protocol: string;
};

export type GetAdminRealmsRealmClientsClientUuidProtocolMappersProtocolProtocolError = Fetcher.ErrorWrapper<undefined>;

export type GetAdminRealmsRealmClientsClientUuidProtocolMappersProtocolProtocolResponse =
  Schemas.ProtocolMapperRepresentation[];

export type GetAdminRealmsRealmClientsClientUuidProtocolMappersProtocolProtocolVariables = {
  pathParams: GetAdminRealmsRealmClientsClientUuidProtocolMappersProtocolProtocolPathParams;
} & FetcherExtraProps;

export const getAdminRealmsRealmClientsClientUuidProtocolMappersProtocolProtocol = (
  variables: GetAdminRealmsRealmClientsClientUuidProtocolMappersProtocolProtocolVariables,
  signal?: AbortSignal
) =>
  fetch<
    GetAdminRealmsRealmClientsClientUuidProtocolMappersProtocolProtocolResponse,
    GetAdminRealmsRealmClientsClientUuidProtocolMappersProtocolProtocolError,
    undefined,
    {},
    {},
    GetAdminRealmsRealmClientsClientUuidProtocolMappersProtocolProtocolPathParams
  >({
    url: '/admin/realms/{realm}/clients/{clientUuid}/protocol-mappers/protocol/{protocol}',
    method: 'get',
    ...variables,
    signal
  });

export type PostAdminRealmsRealmClientsClientUuidPushRevocationPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  /**
   * id of client (not client-id!)
   */
  clientUuid: string;
};

export type PostAdminRealmsRealmClientsClientUuidPushRevocationError = Fetcher.ErrorWrapper<undefined>;

export type PostAdminRealmsRealmClientsClientUuidPushRevocationVariables = {
  pathParams: PostAdminRealmsRealmClientsClientUuidPushRevocationPathParams;
} & FetcherExtraProps;

export const postAdminRealmsRealmClientsClientUuidPushRevocation = (
  variables: PostAdminRealmsRealmClientsClientUuidPushRevocationVariables,
  signal?: AbortSignal
) =>
  fetch<
    Schemas.GlobalRequestResult,
    PostAdminRealmsRealmClientsClientUuidPushRevocationError,
    undefined,
    {},
    {},
    PostAdminRealmsRealmClientsClientUuidPushRevocationPathParams
  >({ url: '/admin/realms/{realm}/clients/{clientUuid}/push-revocation', method: 'post', ...variables, signal });

export type PostAdminRealmsRealmClientsClientUuidRegistrationAccessTokenPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  /**
   * id of client (not client-id!)
   */
  clientUuid: string;
};

export type PostAdminRealmsRealmClientsClientUuidRegistrationAccessTokenError = Fetcher.ErrorWrapper<undefined>;

export type PostAdminRealmsRealmClientsClientUuidRegistrationAccessTokenVariables = {
  pathParams: PostAdminRealmsRealmClientsClientUuidRegistrationAccessTokenPathParams;
} & FetcherExtraProps;

export const postAdminRealmsRealmClientsClientUuidRegistrationAccessToken = (
  variables: PostAdminRealmsRealmClientsClientUuidRegistrationAccessTokenVariables,
  signal?: AbortSignal
) =>
  fetch<
    Schemas.ClientRepresentation,
    PostAdminRealmsRealmClientsClientUuidRegistrationAccessTokenError,
    undefined,
    {},
    {},
    PostAdminRealmsRealmClientsClientUuidRegistrationAccessTokenPathParams
  >({
    url: '/admin/realms/{realm}/clients/{clientUuid}/registration-access-token',
    method: 'post',
    ...variables,
    signal
  });

export type GetAdminRealmsRealmClientsClientUuidRolesPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  /**
   * id of client (not client-id!)
   */
  clientUuid: string;
};

export type GetAdminRealmsRealmClientsClientUuidRolesQueryParams = {
  /**
   * @default true
   */
  briefRepresentation?: boolean;
  /**
   * @format int32
   */
  first?: number;
  /**
   * @format int32
   */
  max?: number;
  /**
   * @default
   */
  search?: string;
};

export type GetAdminRealmsRealmClientsClientUuidRolesError = Fetcher.ErrorWrapper<undefined>;

export type GetAdminRealmsRealmClientsClientUuidRolesResponse = Schemas.RoleRepresentation[];

export type GetAdminRealmsRealmClientsClientUuidRolesVariables = {
  pathParams: GetAdminRealmsRealmClientsClientUuidRolesPathParams;
  queryParams?: GetAdminRealmsRealmClientsClientUuidRolesQueryParams;
} & FetcherExtraProps;

export const getAdminRealmsRealmClientsClientUuidRoles = (
  variables: GetAdminRealmsRealmClientsClientUuidRolesVariables,
  signal?: AbortSignal
) =>
  fetch<
    GetAdminRealmsRealmClientsClientUuidRolesResponse,
    GetAdminRealmsRealmClientsClientUuidRolesError,
    undefined,
    {},
    GetAdminRealmsRealmClientsClientUuidRolesQueryParams,
    GetAdminRealmsRealmClientsClientUuidRolesPathParams
  >({ url: '/admin/realms/{realm}/clients/{clientUuid}/roles', method: 'get', ...variables, signal });

export type PostAdminRealmsRealmClientsClientUuidRolesPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  /**
   * id of client (not client-id!)
   */
  clientUuid: string;
};

export type PostAdminRealmsRealmClientsClientUuidRolesError = Fetcher.ErrorWrapper<undefined>;

export type PostAdminRealmsRealmClientsClientUuidRolesVariables = {
  body?: Schemas.RoleRepresentation;
  pathParams: PostAdminRealmsRealmClientsClientUuidRolesPathParams;
} & FetcherExtraProps;

export const postAdminRealmsRealmClientsClientUuidRoles = (
  variables: PostAdminRealmsRealmClientsClientUuidRolesVariables,
  signal?: AbortSignal
) =>
  fetch<
    undefined,
    PostAdminRealmsRealmClientsClientUuidRolesError,
    Schemas.RoleRepresentation,
    {},
    {},
    PostAdminRealmsRealmClientsClientUuidRolesPathParams
  >({ url: '/admin/realms/{realm}/clients/{clientUuid}/roles', method: 'post', ...variables, signal });

export type GetAdminRealmsRealmClientsClientUuidRolesRoleNamePathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  /**
   * id of client (not client-id!)
   */
  clientUuid: string;
  /**
   * role's name (not id!)
   */
  roleName: string;
};

export type GetAdminRealmsRealmClientsClientUuidRolesRoleNameError = Fetcher.ErrorWrapper<undefined>;

export type GetAdminRealmsRealmClientsClientUuidRolesRoleNameVariables = {
  pathParams: GetAdminRealmsRealmClientsClientUuidRolesRoleNamePathParams;
} & FetcherExtraProps;

export const getAdminRealmsRealmClientsClientUuidRolesRoleName = (
  variables: GetAdminRealmsRealmClientsClientUuidRolesRoleNameVariables,
  signal?: AbortSignal
) =>
  fetch<
    Schemas.RoleRepresentation,
    GetAdminRealmsRealmClientsClientUuidRolesRoleNameError,
    undefined,
    {},
    {},
    GetAdminRealmsRealmClientsClientUuidRolesRoleNamePathParams
  >({ url: '/admin/realms/{realm}/clients/{clientUuid}/roles/{roleName}', method: 'get', ...variables, signal });

export type PutAdminRealmsRealmClientsClientUuidRolesRoleNamePathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  /**
   * id of client (not client-id!)
   */
  clientUuid: string;
  /**
   * role's name (not id!)
   */
  roleName: string;
};

export type PutAdminRealmsRealmClientsClientUuidRolesRoleNameError = Fetcher.ErrorWrapper<undefined>;

export type PutAdminRealmsRealmClientsClientUuidRolesRoleNameVariables = {
  body?: Schemas.RoleRepresentation;
  pathParams: PutAdminRealmsRealmClientsClientUuidRolesRoleNamePathParams;
} & FetcherExtraProps;

export const putAdminRealmsRealmClientsClientUuidRolesRoleName = (
  variables: PutAdminRealmsRealmClientsClientUuidRolesRoleNameVariables,
  signal?: AbortSignal
) =>
  fetch<
    undefined,
    PutAdminRealmsRealmClientsClientUuidRolesRoleNameError,
    Schemas.RoleRepresentation,
    {},
    {},
    PutAdminRealmsRealmClientsClientUuidRolesRoleNamePathParams
  >({ url: '/admin/realms/{realm}/clients/{clientUuid}/roles/{roleName}', method: 'put', ...variables, signal });

export type DeleteAdminRealmsRealmClientsClientUuidRolesRoleNamePathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  /**
   * id of client (not client-id!)
   */
  clientUuid: string;
  /**
   * role's name (not id!)
   */
  roleName: string;
};

export type DeleteAdminRealmsRealmClientsClientUuidRolesRoleNameError = Fetcher.ErrorWrapper<undefined>;

export type DeleteAdminRealmsRealmClientsClientUuidRolesRoleNameVariables = {
  pathParams: DeleteAdminRealmsRealmClientsClientUuidRolesRoleNamePathParams;
} & FetcherExtraProps;

export const deleteAdminRealmsRealmClientsClientUuidRolesRoleName = (
  variables: DeleteAdminRealmsRealmClientsClientUuidRolesRoleNameVariables,
  signal?: AbortSignal
) =>
  fetch<
    undefined,
    DeleteAdminRealmsRealmClientsClientUuidRolesRoleNameError,
    undefined,
    {},
    {},
    DeleteAdminRealmsRealmClientsClientUuidRolesRoleNamePathParams
  >({ url: '/admin/realms/{realm}/clients/{clientUuid}/roles/{roleName}', method: 'delete', ...variables, signal });

export type GetAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  /**
   * id of client (not client-id!)
   */
  clientUuid: string;
  /**
   * role's name (not id!)
   */
  roleName: string;
};

export type GetAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesError = Fetcher.ErrorWrapper<undefined>;

export type GetAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesResponse = Schemas.RoleRepresentation[];

export type GetAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesVariables = {
  pathParams: GetAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesPathParams;
} & FetcherExtraProps;

export const getAdminRealmsRealmClientsClientUuidRolesRoleNameComposites = (
  variables: GetAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesVariables,
  signal?: AbortSignal
) =>
  fetch<
    GetAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesResponse,
    GetAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesError,
    undefined,
    {},
    {},
    GetAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesPathParams
  >({
    url: '/admin/realms/{realm}/clients/{clientUuid}/roles/{roleName}/composites',
    method: 'get',
    ...variables,
    signal
  });

export type PostAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  /**
   * id of client (not client-id!)
   */
  clientUuid: string;
  /**
   * role's name (not id!)
   */
  roleName: string;
};

export type PostAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesError = Fetcher.ErrorWrapper<undefined>;

export type PostAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesRequestBody = Schemas.RoleRepresentation[];

export type PostAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesVariables = {
  body?: PostAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesRequestBody;
  pathParams: PostAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesPathParams;
} & FetcherExtraProps;

export const postAdminRealmsRealmClientsClientUuidRolesRoleNameComposites = (
  variables: PostAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesVariables,
  signal?: AbortSignal
) =>
  fetch<
    undefined,
    PostAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesError,
    PostAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesRequestBody,
    {},
    {},
    PostAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesPathParams
  >({
    url: '/admin/realms/{realm}/clients/{clientUuid}/roles/{roleName}/composites',
    method: 'post',
    ...variables,
    signal
  });

export type DeleteAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  /**
   * id of client (not client-id!)
   */
  clientUuid: string;
  /**
   * role's name (not id!)
   */
  roleName: string;
};

export type DeleteAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesError = Fetcher.ErrorWrapper<undefined>;

export type DeleteAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesRequestBody = Schemas.RoleRepresentation[];

export type DeleteAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesVariables = {
  body?: DeleteAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesRequestBody;
  pathParams: DeleteAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesPathParams;
} & FetcherExtraProps;

export const deleteAdminRealmsRealmClientsClientUuidRolesRoleNameComposites = (
  variables: DeleteAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesVariables,
  signal?: AbortSignal
) =>
  fetch<
    undefined,
    DeleteAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesError,
    DeleteAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesRequestBody,
    {},
    {},
    DeleteAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesPathParams
  >({
    url: '/admin/realms/{realm}/clients/{clientUuid}/roles/{roleName}/composites',
    method: 'delete',
    ...variables,
    signal
  });

export type GetAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesClientsClientUuidPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  clientUuid: string;
  /**
   * role's name (not id!)
   */
  roleName: string;
};

export type GetAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesClientsClientUuidError =
  Fetcher.ErrorWrapper<undefined>;

export type GetAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesClientsClientUuidResponse =
  Schemas.RoleRepresentation[];

export type GetAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesClientsClientUuidVariables = {
  pathParams: GetAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesClientsClientUuidPathParams;
} & FetcherExtraProps;

export const getAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesClientsClientUuid = (
  variables: GetAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesClientsClientUuidVariables,
  signal?: AbortSignal
) =>
  fetch<
    GetAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesClientsClientUuidResponse,
    GetAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesClientsClientUuidError,
    undefined,
    {},
    {},
    GetAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesClientsClientUuidPathParams
  >({
    url: '/admin/realms/{realm}/clients/{clientUuid}/roles/{roleName}/composites/clients/{clientUuid}',
    method: 'get',
    ...variables,
    signal
  });

export type GetAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesRealmPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  /**
   * id of client (not client-id!)
   */
  clientUuid: string;
  /**
   * role's name (not id!)
   */
  roleName: string;
};

export type GetAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesRealmError = Fetcher.ErrorWrapper<undefined>;

export type GetAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesRealmResponse = Schemas.RoleRepresentation[];

export type GetAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesRealmVariables = {
  pathParams: GetAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesRealmPathParams;
} & FetcherExtraProps;

export const getAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesRealm = (
  variables: GetAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesRealmVariables,
  signal?: AbortSignal
) =>
  fetch<
    GetAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesRealmResponse,
    GetAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesRealmError,
    undefined,
    {},
    {},
    GetAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesRealmPathParams
  >({
    url: '/admin/realms/{realm}/clients/{clientUuid}/roles/{roleName}/composites/realm',
    method: 'get',
    ...variables,
    signal
  });

export type GetAdminRealmsRealmClientsClientUuidRolesRoleNameGroupsPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  /**
   * id of client (not client-id!)
   */
  clientUuid: string;
  /**
   * the role name.
   */
  roleName: string;
};

export type GetAdminRealmsRealmClientsClientUuidRolesRoleNameGroupsQueryParams = {
  /**
   * if false, return a full representation of the {@code GroupRepresentation} objects.
   *
   * @default true
   */
  briefRepresentation?: boolean;
  /**
   * first result to return. Ignored if negative or {@code null}.
   *
   * @format int32
   */
  first?: number;
  /**
   * maximum number of results to return. Ignored if negative or {@code null}.
   *
   * @format int32
   */
  max?: number;
};

export type GetAdminRealmsRealmClientsClientUuidRolesRoleNameGroupsError = Fetcher.ErrorWrapper<undefined>;

export type GetAdminRealmsRealmClientsClientUuidRolesRoleNameGroupsResponse = Schemas.UserRepresentation[];

export type GetAdminRealmsRealmClientsClientUuidRolesRoleNameGroupsVariables = {
  pathParams: GetAdminRealmsRealmClientsClientUuidRolesRoleNameGroupsPathParams;
  queryParams?: GetAdminRealmsRealmClientsClientUuidRolesRoleNameGroupsQueryParams;
} & FetcherExtraProps;

export const getAdminRealmsRealmClientsClientUuidRolesRoleNameGroups = (
  variables: GetAdminRealmsRealmClientsClientUuidRolesRoleNameGroupsVariables,
  signal?: AbortSignal
) =>
  fetch<
    GetAdminRealmsRealmClientsClientUuidRolesRoleNameGroupsResponse,
    GetAdminRealmsRealmClientsClientUuidRolesRoleNameGroupsError,
    undefined,
    {},
    GetAdminRealmsRealmClientsClientUuidRolesRoleNameGroupsQueryParams,
    GetAdminRealmsRealmClientsClientUuidRolesRoleNameGroupsPathParams
  >({ url: '/admin/realms/{realm}/clients/{clientUuid}/roles/{roleName}/groups', method: 'get', ...variables, signal });

export type GetAdminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissionsPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  /**
   * id of client (not client-id!)
   */
  clientUuid: string;
  roleName: string;
};

export type GetAdminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissionsError =
  Fetcher.ErrorWrapper<undefined>;

export type GetAdminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissionsVariables = {
  pathParams: GetAdminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissionsPathParams;
} & FetcherExtraProps;

export const getAdminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissions = (
  variables: GetAdminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissionsVariables,
  signal?: AbortSignal
) =>
  fetch<
    Schemas.ManagementPermissionReference,
    GetAdminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissionsError,
    undefined,
    {},
    {},
    GetAdminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissionsPathParams
  >({
    url: '/admin/realms/{realm}/clients/{clientUuid}/roles/{roleName}/management/permissions',
    method: 'get',
    ...variables,
    signal
  });

export type PutAdminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissionsPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  /**
   * id of client (not client-id!)
   */
  clientUuid: string;
  roleName: string;
};

export type PutAdminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissionsError =
  Fetcher.ErrorWrapper<undefined>;

export type PutAdminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissionsVariables = {
  body?: Schemas.ManagementPermissionReference;
  pathParams: PutAdminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissionsPathParams;
} & FetcherExtraProps;

export const putAdminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissions = (
  variables: PutAdminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissionsVariables,
  signal?: AbortSignal
) =>
  fetch<
    Schemas.ManagementPermissionReference,
    PutAdminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissionsError,
    Schemas.ManagementPermissionReference,
    {},
    {},
    PutAdminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissionsPathParams
  >({
    url: '/admin/realms/{realm}/clients/{clientUuid}/roles/{roleName}/management/permissions',
    method: 'put',
    ...variables,
    signal
  });

export type GetAdminRealmsRealmClientsClientUuidRolesRoleNameUsersPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  /**
   * id of client (not client-id!)
   */
  clientUuid: string;
  /**
   * the role name.
   */
  roleName: string;
};

export type GetAdminRealmsRealmClientsClientUuidRolesRoleNameUsersQueryParams = {
  /**
   * Boolean which defines whether brief representations are returned (default: false)
   */
  briefRepresentation?: boolean;
  /**
   * first result to return. Ignored if negative or {@code null}.
   *
   * @format int32
   */
  first?: number;
  /**
   * maximum number of results to return. Ignored if negative or {@code null}.
   *
   * @format int32
   */
  max?: number;
};

export type GetAdminRealmsRealmClientsClientUuidRolesRoleNameUsersError = Fetcher.ErrorWrapper<undefined>;

export type GetAdminRealmsRealmClientsClientUuidRolesRoleNameUsersResponse = Schemas.UserRepresentation[];

export type GetAdminRealmsRealmClientsClientUuidRolesRoleNameUsersVariables = {
  pathParams: GetAdminRealmsRealmClientsClientUuidRolesRoleNameUsersPathParams;
  queryParams?: GetAdminRealmsRealmClientsClientUuidRolesRoleNameUsersQueryParams;
} & FetcherExtraProps;

export const getAdminRealmsRealmClientsClientUuidRolesRoleNameUsers = (
  variables: GetAdminRealmsRealmClientsClientUuidRolesRoleNameUsersVariables,
  signal?: AbortSignal
) =>
  fetch<
    GetAdminRealmsRealmClientsClientUuidRolesRoleNameUsersResponse,
    GetAdminRealmsRealmClientsClientUuidRolesRoleNameUsersError,
    undefined,
    {},
    GetAdminRealmsRealmClientsClientUuidRolesRoleNameUsersQueryParams,
    GetAdminRealmsRealmClientsClientUuidRolesRoleNameUsersPathParams
  >({ url: '/admin/realms/{realm}/clients/{clientUuid}/roles/{roleName}/users', method: 'get', ...variables, signal });

export type GetAdminRealmsRealmClientsClientUuidScopeMappingsPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  /**
   * id of client (not client-id!)
   */
  clientUuid: string;
};

export type GetAdminRealmsRealmClientsClientUuidScopeMappingsError = Fetcher.ErrorWrapper<undefined>;

export type GetAdminRealmsRealmClientsClientUuidScopeMappingsVariables = {
  pathParams: GetAdminRealmsRealmClientsClientUuidScopeMappingsPathParams;
} & FetcherExtraProps;

export const getAdminRealmsRealmClientsClientUuidScopeMappings = (
  variables: GetAdminRealmsRealmClientsClientUuidScopeMappingsVariables,
  signal?: AbortSignal
) =>
  fetch<
    Schemas.MappingsRepresentation,
    GetAdminRealmsRealmClientsClientUuidScopeMappingsError,
    undefined,
    {},
    {},
    GetAdminRealmsRealmClientsClientUuidScopeMappingsPathParams
  >({ url: '/admin/realms/{realm}/clients/{clientUuid}/scope-mappings', method: 'get', ...variables, signal });

export type GetAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  /**
   * id of client (not client-id!)
   */
  clientUuid: string;
  client: string;
};

export type GetAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientError = Fetcher.ErrorWrapper<undefined>;

export type GetAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientResponse = Schemas.RoleRepresentation[];

export type GetAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientVariables = {
  pathParams: GetAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientPathParams;
} & FetcherExtraProps;

export const getAdminRealmsRealmClientsClientUuidScopeMappingsClientsClient = (
  variables: GetAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientVariables,
  signal?: AbortSignal
) =>
  fetch<
    GetAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientResponse,
    GetAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientError,
    undefined,
    {},
    {},
    GetAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientPathParams
  >({
    url: '/admin/realms/{realm}/clients/{clientUuid}/scope-mappings/clients/{client}',
    method: 'get',
    ...variables,
    signal
  });

export type PostAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  /**
   * id of client (not client-id!)
   */
  clientUuid: string;
  client: string;
};

export type PostAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientError = Fetcher.ErrorWrapper<undefined>;

export type PostAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientRequestBody = Schemas.RoleRepresentation[];

export type PostAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientVariables = {
  body?: PostAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientRequestBody;
  pathParams: PostAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientPathParams;
} & FetcherExtraProps;

export const postAdminRealmsRealmClientsClientUuidScopeMappingsClientsClient = (
  variables: PostAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientVariables,
  signal?: AbortSignal
) =>
  fetch<
    undefined,
    PostAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientError,
    PostAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientRequestBody,
    {},
    {},
    PostAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientPathParams
  >({
    url: '/admin/realms/{realm}/clients/{clientUuid}/scope-mappings/clients/{client}',
    method: 'post',
    ...variables,
    signal
  });

export type DeleteAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  /**
   * id of client (not client-id!)
   */
  clientUuid: string;
  client: string;
};

export type DeleteAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientError = Fetcher.ErrorWrapper<undefined>;

export type DeleteAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientRequestBody = Schemas.RoleRepresentation[];

export type DeleteAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientVariables = {
  body?: DeleteAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientRequestBody;
  pathParams: DeleteAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientPathParams;
} & FetcherExtraProps;

export const deleteAdminRealmsRealmClientsClientUuidScopeMappingsClientsClient = (
  variables: DeleteAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientVariables,
  signal?: AbortSignal
) =>
  fetch<
    undefined,
    DeleteAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientError,
    DeleteAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientRequestBody,
    {},
    {},
    DeleteAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientPathParams
  >({
    url: '/admin/realms/{realm}/clients/{clientUuid}/scope-mappings/clients/{client}',
    method: 'delete',
    ...variables,
    signal
  });

export type GetAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientAvailablePathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  /**
   * id of client (not client-id!)
   */
  clientUuid: string;
  client: string;
};

export type GetAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientAvailableError =
  Fetcher.ErrorWrapper<undefined>;

export type GetAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientAvailableResponse =
  Schemas.RoleRepresentation[];

export type GetAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientAvailableVariables = {
  pathParams: GetAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientAvailablePathParams;
} & FetcherExtraProps;

export const getAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientAvailable = (
  variables: GetAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientAvailableVariables,
  signal?: AbortSignal
) =>
  fetch<
    GetAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientAvailableResponse,
    GetAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientAvailableError,
    undefined,
    {},
    {},
    GetAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientAvailablePathParams
  >({
    url: '/admin/realms/{realm}/clients/{clientUuid}/scope-mappings/clients/{client}/available',
    method: 'get',
    ...variables,
    signal
  });

export type GetAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientCompositePathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  /**
   * id of client (not client-id!)
   */
  clientUuid: string;
  client: string;
};

export type GetAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientCompositeQueryParams = {
  /**
   * if false, return roles with their attributes
   *
   * @default true
   */
  briefRepresentation?: boolean;
};

export type GetAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientCompositeError =
  Fetcher.ErrorWrapper<undefined>;

export type GetAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientCompositeResponse =
  Schemas.RoleRepresentation[];

export type GetAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientCompositeVariables = {
  pathParams: GetAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientCompositePathParams;
  queryParams?: GetAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientCompositeQueryParams;
} & FetcherExtraProps;

export const getAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientComposite = (
  variables: GetAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientCompositeVariables,
  signal?: AbortSignal
) =>
  fetch<
    GetAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientCompositeResponse,
    GetAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientCompositeError,
    undefined,
    {},
    GetAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientCompositeQueryParams,
    GetAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientCompositePathParams
  >({
    url: '/admin/realms/{realm}/clients/{clientUuid}/scope-mappings/clients/{client}/composite',
    method: 'get',
    ...variables,
    signal
  });

export type GetAdminRealmsRealmClientsClientUuidScopeMappingsRealmPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  /**
   * id of client (not client-id!)
   */
  clientUuid: string;
};

export type GetAdminRealmsRealmClientsClientUuidScopeMappingsRealmError = Fetcher.ErrorWrapper<undefined>;

export type GetAdminRealmsRealmClientsClientUuidScopeMappingsRealmResponse = Schemas.RoleRepresentation[];

export type GetAdminRealmsRealmClientsClientUuidScopeMappingsRealmVariables = {
  pathParams: GetAdminRealmsRealmClientsClientUuidScopeMappingsRealmPathParams;
} & FetcherExtraProps;

export const getAdminRealmsRealmClientsClientUuidScopeMappingsRealm = (
  variables: GetAdminRealmsRealmClientsClientUuidScopeMappingsRealmVariables,
  signal?: AbortSignal
) =>
  fetch<
    GetAdminRealmsRealmClientsClientUuidScopeMappingsRealmResponse,
    GetAdminRealmsRealmClientsClientUuidScopeMappingsRealmError,
    undefined,
    {},
    {},
    GetAdminRealmsRealmClientsClientUuidScopeMappingsRealmPathParams
  >({ url: '/admin/realms/{realm}/clients/{clientUuid}/scope-mappings/realm', method: 'get', ...variables, signal });

export type PostAdminRealmsRealmClientsClientUuidScopeMappingsRealmPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  /**
   * id of client (not client-id!)
   */
  clientUuid: string;
};

export type PostAdminRealmsRealmClientsClientUuidScopeMappingsRealmError = Fetcher.ErrorWrapper<undefined>;

export type PostAdminRealmsRealmClientsClientUuidScopeMappingsRealmRequestBody = Schemas.RoleRepresentation[];

export type PostAdminRealmsRealmClientsClientUuidScopeMappingsRealmVariables = {
  body?: PostAdminRealmsRealmClientsClientUuidScopeMappingsRealmRequestBody;
  pathParams: PostAdminRealmsRealmClientsClientUuidScopeMappingsRealmPathParams;
} & FetcherExtraProps;

export const postAdminRealmsRealmClientsClientUuidScopeMappingsRealm = (
  variables: PostAdminRealmsRealmClientsClientUuidScopeMappingsRealmVariables,
  signal?: AbortSignal
) =>
  fetch<
    undefined,
    PostAdminRealmsRealmClientsClientUuidScopeMappingsRealmError,
    PostAdminRealmsRealmClientsClientUuidScopeMappingsRealmRequestBody,
    {},
    {},
    PostAdminRealmsRealmClientsClientUuidScopeMappingsRealmPathParams
  >({ url: '/admin/realms/{realm}/clients/{clientUuid}/scope-mappings/realm', method: 'post', ...variables, signal });

export type DeleteAdminRealmsRealmClientsClientUuidScopeMappingsRealmPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  /**
   * id of client (not client-id!)
   */
  clientUuid: string;
};

export type DeleteAdminRealmsRealmClientsClientUuidScopeMappingsRealmError = Fetcher.ErrorWrapper<undefined>;

export type DeleteAdminRealmsRealmClientsClientUuidScopeMappingsRealmRequestBody = Schemas.RoleRepresentation[];

export type DeleteAdminRealmsRealmClientsClientUuidScopeMappingsRealmVariables = {
  body?: DeleteAdminRealmsRealmClientsClientUuidScopeMappingsRealmRequestBody;
  pathParams: DeleteAdminRealmsRealmClientsClientUuidScopeMappingsRealmPathParams;
} & FetcherExtraProps;

export const deleteAdminRealmsRealmClientsClientUuidScopeMappingsRealm = (
  variables: DeleteAdminRealmsRealmClientsClientUuidScopeMappingsRealmVariables,
  signal?: AbortSignal
) =>
  fetch<
    undefined,
    DeleteAdminRealmsRealmClientsClientUuidScopeMappingsRealmError,
    DeleteAdminRealmsRealmClientsClientUuidScopeMappingsRealmRequestBody,
    {},
    {},
    DeleteAdminRealmsRealmClientsClientUuidScopeMappingsRealmPathParams
  >({ url: '/admin/realms/{realm}/clients/{clientUuid}/scope-mappings/realm', method: 'delete', ...variables, signal });

export type GetAdminRealmsRealmClientsClientUuidScopeMappingsRealmAvailablePathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  /**
   * id of client (not client-id!)
   */
  clientUuid: string;
};

export type GetAdminRealmsRealmClientsClientUuidScopeMappingsRealmAvailableError = Fetcher.ErrorWrapper<undefined>;

export type GetAdminRealmsRealmClientsClientUuidScopeMappingsRealmAvailableResponse = Schemas.RoleRepresentation[];

export type GetAdminRealmsRealmClientsClientUuidScopeMappingsRealmAvailableVariables = {
  pathParams: GetAdminRealmsRealmClientsClientUuidScopeMappingsRealmAvailablePathParams;
} & FetcherExtraProps;

export const getAdminRealmsRealmClientsClientUuidScopeMappingsRealmAvailable = (
  variables: GetAdminRealmsRealmClientsClientUuidScopeMappingsRealmAvailableVariables,
  signal?: AbortSignal
) =>
  fetch<
    GetAdminRealmsRealmClientsClientUuidScopeMappingsRealmAvailableResponse,
    GetAdminRealmsRealmClientsClientUuidScopeMappingsRealmAvailableError,
    undefined,
    {},
    {},
    GetAdminRealmsRealmClientsClientUuidScopeMappingsRealmAvailablePathParams
  >({
    url: '/admin/realms/{realm}/clients/{clientUuid}/scope-mappings/realm/available',
    method: 'get',
    ...variables,
    signal
  });

export type GetAdminRealmsRealmClientsClientUuidScopeMappingsRealmCompositePathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  /**
   * id of client (not client-id!)
   */
  clientUuid: string;
};

export type GetAdminRealmsRealmClientsClientUuidScopeMappingsRealmCompositeQueryParams = {
  /**
   * if false, return roles with their attributes
   *
   * @default true
   */
  briefRepresentation?: boolean;
};

export type GetAdminRealmsRealmClientsClientUuidScopeMappingsRealmCompositeError = Fetcher.ErrorWrapper<undefined>;

export type GetAdminRealmsRealmClientsClientUuidScopeMappingsRealmCompositeResponse = Schemas.RoleRepresentation[];

export type GetAdminRealmsRealmClientsClientUuidScopeMappingsRealmCompositeVariables = {
  pathParams: GetAdminRealmsRealmClientsClientUuidScopeMappingsRealmCompositePathParams;
  queryParams?: GetAdminRealmsRealmClientsClientUuidScopeMappingsRealmCompositeQueryParams;
} & FetcherExtraProps;

/**
 * The method is really to show a comprehensive total view of realm-level roles associated with the client.
 */
export const getAdminRealmsRealmClientsClientUuidScopeMappingsRealmComposite = (
  variables: GetAdminRealmsRealmClientsClientUuidScopeMappingsRealmCompositeVariables,
  signal?: AbortSignal
) =>
  fetch<
    GetAdminRealmsRealmClientsClientUuidScopeMappingsRealmCompositeResponse,
    GetAdminRealmsRealmClientsClientUuidScopeMappingsRealmCompositeError,
    undefined,
    {},
    GetAdminRealmsRealmClientsClientUuidScopeMappingsRealmCompositeQueryParams,
    GetAdminRealmsRealmClientsClientUuidScopeMappingsRealmCompositePathParams
  >({
    url: '/admin/realms/{realm}/clients/{clientUuid}/scope-mappings/realm/composite',
    method: 'get',
    ...variables,
    signal
  });

export type GetAdminRealmsRealmClientsClientUuidServiceAccountUserPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  /**
   * id of client (not client-id!)
   */
  clientUuid: string;
};

export type GetAdminRealmsRealmClientsClientUuidServiceAccountUserError = Fetcher.ErrorWrapper<undefined>;

export type GetAdminRealmsRealmClientsClientUuidServiceAccountUserVariables = {
  pathParams: GetAdminRealmsRealmClientsClientUuidServiceAccountUserPathParams;
} & FetcherExtraProps;

export const getAdminRealmsRealmClientsClientUuidServiceAccountUser = (
  variables: GetAdminRealmsRealmClientsClientUuidServiceAccountUserVariables,
  signal?: AbortSignal
) =>
  fetch<
    Schemas.UserRepresentation,
    GetAdminRealmsRealmClientsClientUuidServiceAccountUserError,
    undefined,
    {},
    {},
    GetAdminRealmsRealmClientsClientUuidServiceAccountUserPathParams
  >({ url: '/admin/realms/{realm}/clients/{clientUuid}/service-account-user', method: 'get', ...variables, signal });

export type GetAdminRealmsRealmClientsClientUuidSessionCountPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  /**
   * id of client (not client-id!)
   */
  clientUuid: string;
};

export type GetAdminRealmsRealmClientsClientUuidSessionCountError = Fetcher.ErrorWrapper<undefined>;

export type GetAdminRealmsRealmClientsClientUuidSessionCountResponse = {
  [key: string]: number;
};

export type GetAdminRealmsRealmClientsClientUuidSessionCountVariables = {
  pathParams: GetAdminRealmsRealmClientsClientUuidSessionCountPathParams;
} & FetcherExtraProps;

export const getAdminRealmsRealmClientsClientUuidSessionCount = (
  variables: GetAdminRealmsRealmClientsClientUuidSessionCountVariables,
  signal?: AbortSignal
) =>
  fetch<
    GetAdminRealmsRealmClientsClientUuidSessionCountResponse,
    GetAdminRealmsRealmClientsClientUuidSessionCountError,
    undefined,
    {},
    {},
    GetAdminRealmsRealmClientsClientUuidSessionCountPathParams
  >({ url: '/admin/realms/{realm}/clients/{clientUuid}/session-count', method: 'get', ...variables, signal });

export type GetAdminRealmsRealmClientsClientUuidTestNodesAvailablePathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  /**
   * id of client (not client-id!)
   */
  clientUuid: string;
};

export type GetAdminRealmsRealmClientsClientUuidTestNodesAvailableError = Fetcher.ErrorWrapper<undefined>;

export type GetAdminRealmsRealmClientsClientUuidTestNodesAvailableVariables = {
  pathParams: GetAdminRealmsRealmClientsClientUuidTestNodesAvailablePathParams;
} & FetcherExtraProps;

export const getAdminRealmsRealmClientsClientUuidTestNodesAvailable = (
  variables: GetAdminRealmsRealmClientsClientUuidTestNodesAvailableVariables,
  signal?: AbortSignal
) =>
  fetch<
    Schemas.GlobalRequestResult,
    GetAdminRealmsRealmClientsClientUuidTestNodesAvailableError,
    undefined,
    {},
    {},
    GetAdminRealmsRealmClientsClientUuidTestNodesAvailablePathParams
  >({ url: '/admin/realms/{realm}/clients/{clientUuid}/test-nodes-available', method: 'get', ...variables, signal });

export type GetAdminRealmsRealmClientsClientUuidUserSessionsPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  /**
   * id of client (not client-id!)
   */
  clientUuid: string;
};

export type GetAdminRealmsRealmClientsClientUuidUserSessionsQueryParams = {
  /**
   * Paging offset
   *
   * @format int32
   */
  first?: number;
  /**
   * Maximum results size (defaults to 100)
   *
   * @format int32
   */
  max?: number;
};

export type GetAdminRealmsRealmClientsClientUuidUserSessionsError = Fetcher.ErrorWrapper<undefined>;

export type GetAdminRealmsRealmClientsClientUuidUserSessionsResponse = Schemas.UserSessionRepresentation[];

export type GetAdminRealmsRealmClientsClientUuidUserSessionsVariables = {
  pathParams: GetAdminRealmsRealmClientsClientUuidUserSessionsPathParams;
  queryParams?: GetAdminRealmsRealmClientsClientUuidUserSessionsQueryParams;
} & FetcherExtraProps;

export const getAdminRealmsRealmClientsClientUuidUserSessions = (
  variables: GetAdminRealmsRealmClientsClientUuidUserSessionsVariables,
  signal?: AbortSignal
) =>
  fetch<
    GetAdminRealmsRealmClientsClientUuidUserSessionsResponse,
    GetAdminRealmsRealmClientsClientUuidUserSessionsError,
    undefined,
    {},
    GetAdminRealmsRealmClientsClientUuidUserSessionsQueryParams,
    GetAdminRealmsRealmClientsClientUuidUserSessionsPathParams
  >({ url: '/admin/realms/{realm}/clients/{clientUuid}/user-sessions', method: 'get', ...variables, signal });

export type GetAdminRealmsRealmComponentsPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
};

export type GetAdminRealmsRealmComponentsQueryParams = {
  name?: string;
  parent?: string;
  type?: string;
};

export type GetAdminRealmsRealmComponentsError = Fetcher.ErrorWrapper<undefined>;

export type GetAdminRealmsRealmComponentsResponse = Schemas.ComponentRepresentation[];

export type GetAdminRealmsRealmComponentsVariables = {
  pathParams: GetAdminRealmsRealmComponentsPathParams;
  queryParams?: GetAdminRealmsRealmComponentsQueryParams;
} & FetcherExtraProps;

export const getAdminRealmsRealmComponents = (
  variables: GetAdminRealmsRealmComponentsVariables,
  signal?: AbortSignal
) =>
  fetch<
    GetAdminRealmsRealmComponentsResponse,
    GetAdminRealmsRealmComponentsError,
    undefined,
    {},
    GetAdminRealmsRealmComponentsQueryParams,
    GetAdminRealmsRealmComponentsPathParams
  >({ url: '/admin/realms/{realm}/components', method: 'get', ...variables, signal });

export type PostAdminRealmsRealmComponentsPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
};

export type PostAdminRealmsRealmComponentsError = Fetcher.ErrorWrapper<undefined>;

export type PostAdminRealmsRealmComponentsVariables = {
  body?: Schemas.ComponentRepresentation;
  pathParams: PostAdminRealmsRealmComponentsPathParams;
} & FetcherExtraProps;

export const postAdminRealmsRealmComponents = (
  variables: PostAdminRealmsRealmComponentsVariables,
  signal?: AbortSignal
) =>
  fetch<
    undefined,
    PostAdminRealmsRealmComponentsError,
    Schemas.ComponentRepresentation,
    {},
    {},
    PostAdminRealmsRealmComponentsPathParams
  >({ url: '/admin/realms/{realm}/components', method: 'post', ...variables, signal });

export type GetAdminRealmsRealmComponentsIdPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  id: string;
};

export type GetAdminRealmsRealmComponentsIdError = Fetcher.ErrorWrapper<undefined>;

export type GetAdminRealmsRealmComponentsIdVariables = {
  pathParams: GetAdminRealmsRealmComponentsIdPathParams;
} & FetcherExtraProps;

export const getAdminRealmsRealmComponentsId = (
  variables: GetAdminRealmsRealmComponentsIdVariables,
  signal?: AbortSignal
) =>
  fetch<
    Schemas.ComponentRepresentation,
    GetAdminRealmsRealmComponentsIdError,
    undefined,
    {},
    {},
    GetAdminRealmsRealmComponentsIdPathParams
  >({ url: '/admin/realms/{realm}/components/{id}', method: 'get', ...variables, signal });

export type PutAdminRealmsRealmComponentsIdPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  id: string;
};

export type PutAdminRealmsRealmComponentsIdError = Fetcher.ErrorWrapper<undefined>;

export type PutAdminRealmsRealmComponentsIdVariables = {
  body?: Schemas.ComponentRepresentation;
  pathParams: PutAdminRealmsRealmComponentsIdPathParams;
} & FetcherExtraProps;

export const putAdminRealmsRealmComponentsId = (
  variables: PutAdminRealmsRealmComponentsIdVariables,
  signal?: AbortSignal
) =>
  fetch<
    undefined,
    PutAdminRealmsRealmComponentsIdError,
    Schemas.ComponentRepresentation,
    {},
    {},
    PutAdminRealmsRealmComponentsIdPathParams
  >({ url: '/admin/realms/{realm}/components/{id}', method: 'put', ...variables, signal });

export type DeleteAdminRealmsRealmComponentsIdPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  id: string;
};

export type DeleteAdminRealmsRealmComponentsIdError = Fetcher.ErrorWrapper<undefined>;

export type DeleteAdminRealmsRealmComponentsIdVariables = {
  pathParams: DeleteAdminRealmsRealmComponentsIdPathParams;
} & FetcherExtraProps;

export const deleteAdminRealmsRealmComponentsId = (
  variables: DeleteAdminRealmsRealmComponentsIdVariables,
  signal?: AbortSignal
) =>
  fetch<
    undefined,
    DeleteAdminRealmsRealmComponentsIdError,
    undefined,
    {},
    {},
    DeleteAdminRealmsRealmComponentsIdPathParams
  >({ url: '/admin/realms/{realm}/components/{id}', method: 'delete', ...variables, signal });

export type GetAdminRealmsRealmComponentsIdSubComponentTypesPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  id: string;
};

export type GetAdminRealmsRealmComponentsIdSubComponentTypesQueryParams = {
  type?: string;
};

export type GetAdminRealmsRealmComponentsIdSubComponentTypesError = Fetcher.ErrorWrapper<undefined>;

export type GetAdminRealmsRealmComponentsIdSubComponentTypesResponse = Schemas.ComponentTypeRepresentation[];

export type GetAdminRealmsRealmComponentsIdSubComponentTypesVariables = {
  pathParams: GetAdminRealmsRealmComponentsIdSubComponentTypesPathParams;
  queryParams?: GetAdminRealmsRealmComponentsIdSubComponentTypesQueryParams;
} & FetcherExtraProps;

export const getAdminRealmsRealmComponentsIdSubComponentTypes = (
  variables: GetAdminRealmsRealmComponentsIdSubComponentTypesVariables,
  signal?: AbortSignal
) =>
  fetch<
    GetAdminRealmsRealmComponentsIdSubComponentTypesResponse,
    GetAdminRealmsRealmComponentsIdSubComponentTypesError,
    undefined,
    {},
    GetAdminRealmsRealmComponentsIdSubComponentTypesQueryParams,
    GetAdminRealmsRealmComponentsIdSubComponentTypesPathParams
  >({ url: '/admin/realms/{realm}/components/{id}/sub-component-types', method: 'get', ...variables, signal });

export type GetAdminRealmsRealmCredentialRegistratorsPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
};

export type GetAdminRealmsRealmCredentialRegistratorsError = Fetcher.ErrorWrapper<undefined>;

export type GetAdminRealmsRealmCredentialRegistratorsResponse = string[];

export type GetAdminRealmsRealmCredentialRegistratorsVariables = {
  pathParams: GetAdminRealmsRealmCredentialRegistratorsPathParams;
} & FetcherExtraProps;

export const getAdminRealmsRealmCredentialRegistrators = (
  variables: GetAdminRealmsRealmCredentialRegistratorsVariables,
  signal?: AbortSignal
) =>
  fetch<
    GetAdminRealmsRealmCredentialRegistratorsResponse,
    GetAdminRealmsRealmCredentialRegistratorsError,
    undefined,
    {},
    {},
    GetAdminRealmsRealmCredentialRegistratorsPathParams
  >({ url: '/admin/realms/{realm}/credential-registrators', method: 'get', ...variables, signal });

export type GetAdminRealmsRealmDefaultDefaultClientScopesPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
};

export type GetAdminRealmsRealmDefaultDefaultClientScopesError = Fetcher.ErrorWrapper<undefined>;

export type GetAdminRealmsRealmDefaultDefaultClientScopesResponse = Schemas.ClientScopeRepresentation[];

export type GetAdminRealmsRealmDefaultDefaultClientScopesVariables = {
  pathParams: GetAdminRealmsRealmDefaultDefaultClientScopesPathParams;
} & FetcherExtraProps;

export const getAdminRealmsRealmDefaultDefaultClientScopes = (
  variables: GetAdminRealmsRealmDefaultDefaultClientScopesVariables,
  signal?: AbortSignal
) =>
  fetch<
    GetAdminRealmsRealmDefaultDefaultClientScopesResponse,
    GetAdminRealmsRealmDefaultDefaultClientScopesError,
    undefined,
    {},
    {},
    GetAdminRealmsRealmDefaultDefaultClientScopesPathParams
  >({ url: '/admin/realms/{realm}/default-default-client-scopes', method: 'get', ...variables, signal });

export type PutAdminRealmsRealmDefaultDefaultClientScopesClientScopeIdPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  clientScopeId: string;
};

export type PutAdminRealmsRealmDefaultDefaultClientScopesClientScopeIdError = Fetcher.ErrorWrapper<undefined>;

export type PutAdminRealmsRealmDefaultDefaultClientScopesClientScopeIdVariables = {
  pathParams: PutAdminRealmsRealmDefaultDefaultClientScopesClientScopeIdPathParams;
} & FetcherExtraProps;

export const putAdminRealmsRealmDefaultDefaultClientScopesClientScopeId = (
  variables: PutAdminRealmsRealmDefaultDefaultClientScopesClientScopeIdVariables,
  signal?: AbortSignal
) =>
  fetch<
    undefined,
    PutAdminRealmsRealmDefaultDefaultClientScopesClientScopeIdError,
    undefined,
    {},
    {},
    PutAdminRealmsRealmDefaultDefaultClientScopesClientScopeIdPathParams
  >({
    url: '/admin/realms/{realm}/default-default-client-scopes/{clientScopeId}',
    method: 'put',
    ...variables,
    signal
  });

export type DeleteAdminRealmsRealmDefaultDefaultClientScopesClientScopeIdPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  clientScopeId: string;
};

export type DeleteAdminRealmsRealmDefaultDefaultClientScopesClientScopeIdError = Fetcher.ErrorWrapper<undefined>;

export type DeleteAdminRealmsRealmDefaultDefaultClientScopesClientScopeIdVariables = {
  pathParams: DeleteAdminRealmsRealmDefaultDefaultClientScopesClientScopeIdPathParams;
} & FetcherExtraProps;

export const deleteAdminRealmsRealmDefaultDefaultClientScopesClientScopeId = (
  variables: DeleteAdminRealmsRealmDefaultDefaultClientScopesClientScopeIdVariables,
  signal?: AbortSignal
) =>
  fetch<
    undefined,
    DeleteAdminRealmsRealmDefaultDefaultClientScopesClientScopeIdError,
    undefined,
    {},
    {},
    DeleteAdminRealmsRealmDefaultDefaultClientScopesClientScopeIdPathParams
  >({
    url: '/admin/realms/{realm}/default-default-client-scopes/{clientScopeId}',
    method: 'delete',
    ...variables,
    signal
  });

export type GetAdminRealmsRealmDefaultGroupsPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
};

export type GetAdminRealmsRealmDefaultGroupsError = Fetcher.ErrorWrapper<undefined>;

export type GetAdminRealmsRealmDefaultGroupsResponse = Schemas.GroupRepresentation[];

export type GetAdminRealmsRealmDefaultGroupsVariables = {
  pathParams: GetAdminRealmsRealmDefaultGroupsPathParams;
} & FetcherExtraProps;

export const getAdminRealmsRealmDefaultGroups = (
  variables: GetAdminRealmsRealmDefaultGroupsVariables,
  signal?: AbortSignal
) =>
  fetch<
    GetAdminRealmsRealmDefaultGroupsResponse,
    GetAdminRealmsRealmDefaultGroupsError,
    undefined,
    {},
    {},
    GetAdminRealmsRealmDefaultGroupsPathParams
  >({ url: '/admin/realms/{realm}/default-groups', method: 'get', ...variables, signal });

export type PutAdminRealmsRealmDefaultGroupsGroupIdPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  groupId: string;
};

export type PutAdminRealmsRealmDefaultGroupsGroupIdError = Fetcher.ErrorWrapper<undefined>;

export type PutAdminRealmsRealmDefaultGroupsGroupIdVariables = {
  pathParams: PutAdminRealmsRealmDefaultGroupsGroupIdPathParams;
} & FetcherExtraProps;

export const putAdminRealmsRealmDefaultGroupsGroupId = (
  variables: PutAdminRealmsRealmDefaultGroupsGroupIdVariables,
  signal?: AbortSignal
) =>
  fetch<
    undefined,
    PutAdminRealmsRealmDefaultGroupsGroupIdError,
    undefined,
    {},
    {},
    PutAdminRealmsRealmDefaultGroupsGroupIdPathParams
  >({ url: '/admin/realms/{realm}/default-groups/{groupId}', method: 'put', ...variables, signal });

export type DeleteAdminRealmsRealmDefaultGroupsGroupIdPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  groupId: string;
};

export type DeleteAdminRealmsRealmDefaultGroupsGroupIdError = Fetcher.ErrorWrapper<undefined>;

export type DeleteAdminRealmsRealmDefaultGroupsGroupIdVariables = {
  pathParams: DeleteAdminRealmsRealmDefaultGroupsGroupIdPathParams;
} & FetcherExtraProps;

export const deleteAdminRealmsRealmDefaultGroupsGroupId = (
  variables: DeleteAdminRealmsRealmDefaultGroupsGroupIdVariables,
  signal?: AbortSignal
) =>
  fetch<
    undefined,
    DeleteAdminRealmsRealmDefaultGroupsGroupIdError,
    undefined,
    {},
    {},
    DeleteAdminRealmsRealmDefaultGroupsGroupIdPathParams
  >({ url: '/admin/realms/{realm}/default-groups/{groupId}', method: 'delete', ...variables, signal });

export type GetAdminRealmsRealmDefaultOptionalClientScopesPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
};

export type GetAdminRealmsRealmDefaultOptionalClientScopesError = Fetcher.ErrorWrapper<undefined>;

export type GetAdminRealmsRealmDefaultOptionalClientScopesResponse = Schemas.ClientScopeRepresentation[];

export type GetAdminRealmsRealmDefaultOptionalClientScopesVariables = {
  pathParams: GetAdminRealmsRealmDefaultOptionalClientScopesPathParams;
} & FetcherExtraProps;

export const getAdminRealmsRealmDefaultOptionalClientScopes = (
  variables: GetAdminRealmsRealmDefaultOptionalClientScopesVariables,
  signal?: AbortSignal
) =>
  fetch<
    GetAdminRealmsRealmDefaultOptionalClientScopesResponse,
    GetAdminRealmsRealmDefaultOptionalClientScopesError,
    undefined,
    {},
    {},
    GetAdminRealmsRealmDefaultOptionalClientScopesPathParams
  >({ url: '/admin/realms/{realm}/default-optional-client-scopes', method: 'get', ...variables, signal });

export type PutAdminRealmsRealmDefaultOptionalClientScopesClientScopeIdPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  clientScopeId: string;
};

export type PutAdminRealmsRealmDefaultOptionalClientScopesClientScopeIdError = Fetcher.ErrorWrapper<undefined>;

export type PutAdminRealmsRealmDefaultOptionalClientScopesClientScopeIdVariables = {
  pathParams: PutAdminRealmsRealmDefaultOptionalClientScopesClientScopeIdPathParams;
} & FetcherExtraProps;

export const putAdminRealmsRealmDefaultOptionalClientScopesClientScopeId = (
  variables: PutAdminRealmsRealmDefaultOptionalClientScopesClientScopeIdVariables,
  signal?: AbortSignal
) =>
  fetch<
    undefined,
    PutAdminRealmsRealmDefaultOptionalClientScopesClientScopeIdError,
    undefined,
    {},
    {},
    PutAdminRealmsRealmDefaultOptionalClientScopesClientScopeIdPathParams
  >({
    url: '/admin/realms/{realm}/default-optional-client-scopes/{clientScopeId}',
    method: 'put',
    ...variables,
    signal
  });

export type DeleteAdminRealmsRealmDefaultOptionalClientScopesClientScopeIdPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  clientScopeId: string;
};

export type DeleteAdminRealmsRealmDefaultOptionalClientScopesClientScopeIdError = Fetcher.ErrorWrapper<undefined>;

export type DeleteAdminRealmsRealmDefaultOptionalClientScopesClientScopeIdVariables = {
  pathParams: DeleteAdminRealmsRealmDefaultOptionalClientScopesClientScopeIdPathParams;
} & FetcherExtraProps;

export const deleteAdminRealmsRealmDefaultOptionalClientScopesClientScopeId = (
  variables: DeleteAdminRealmsRealmDefaultOptionalClientScopesClientScopeIdVariables,
  signal?: AbortSignal
) =>
  fetch<
    undefined,
    DeleteAdminRealmsRealmDefaultOptionalClientScopesClientScopeIdError,
    undefined,
    {},
    {},
    DeleteAdminRealmsRealmDefaultOptionalClientScopesClientScopeIdPathParams
  >({
    url: '/admin/realms/{realm}/default-optional-client-scopes/{clientScopeId}',
    method: 'delete',
    ...variables,
    signal
  });

export type GetAdminRealmsRealmEventsPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
};

export type GetAdminRealmsRealmEventsQueryParams = {
  /**
   * App or oauth client name
   */
  client?: string;
  /**
   * From (inclusive) date (yyyy-MM-dd) or time in Epoch timestamp millis (number of milliseconds since January 1, 1970, 00:00:00 GMT)
   */
  dateFrom?: string;
  /**
   * To (inclusive) date (yyyy-MM-dd) or time in Epoch timestamp millis (number of milliseconds since January 1, 1970, 00:00:00 GMT)
   */
  dateTo?: string;
  /**
   * The direction to sort events by (asc or desc)
   */
  direction?: string;
  /**
   * Paging offset
   *
   * @format int32
   */
  first?: number;
  /**
   * IP Address
   */
  ipAddress?: string;
  /**
   * Maximum results size (defaults to 100)
   *
   * @format int32
   */
  max?: number;
  /**
   * The types of events to return
   */
  type?: string[];
  /**
   * User id
   */
  user?: string;
};

export type GetAdminRealmsRealmEventsError = Fetcher.ErrorWrapper<undefined>;

export type GetAdminRealmsRealmEventsResponse = Schemas.EventRepresentation[];

export type GetAdminRealmsRealmEventsVariables = {
  pathParams: GetAdminRealmsRealmEventsPathParams;
  queryParams?: GetAdminRealmsRealmEventsQueryParams;
} & FetcherExtraProps;

export const getAdminRealmsRealmEvents = (variables: GetAdminRealmsRealmEventsVariables, signal?: AbortSignal) =>
  fetch<
    GetAdminRealmsRealmEventsResponse,
    GetAdminRealmsRealmEventsError,
    undefined,
    {},
    GetAdminRealmsRealmEventsQueryParams,
    GetAdminRealmsRealmEventsPathParams
  >({ url: '/admin/realms/{realm}/events', method: 'get', ...variables, signal });

export type DeleteAdminRealmsRealmEventsPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
};

export type DeleteAdminRealmsRealmEventsError = Fetcher.ErrorWrapper<undefined>;

export type DeleteAdminRealmsRealmEventsVariables = {
  pathParams: DeleteAdminRealmsRealmEventsPathParams;
} & FetcherExtraProps;

export const deleteAdminRealmsRealmEvents = (variables: DeleteAdminRealmsRealmEventsVariables, signal?: AbortSignal) =>
  fetch<undefined, DeleteAdminRealmsRealmEventsError, undefined, {}, {}, DeleteAdminRealmsRealmEventsPathParams>({
    url: '/admin/realms/{realm}/events',
    method: 'delete',
    ...variables,
    signal
  });

export type GetAdminRealmsRealmEventsConfigPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
};

export type GetAdminRealmsRealmEventsConfigError = Fetcher.ErrorWrapper<undefined>;

export type GetAdminRealmsRealmEventsConfigVariables = {
  pathParams: GetAdminRealmsRealmEventsConfigPathParams;
} & FetcherExtraProps;

export const getAdminRealmsRealmEventsConfig = (
  variables: GetAdminRealmsRealmEventsConfigVariables,
  signal?: AbortSignal
) =>
  fetch<
    Schemas.RealmEventsConfigRepresentation,
    GetAdminRealmsRealmEventsConfigError,
    undefined,
    {},
    {},
    GetAdminRealmsRealmEventsConfigPathParams
  >({ url: '/admin/realms/{realm}/events/config', method: 'get', ...variables, signal });

export type PutAdminRealmsRealmEventsConfigPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
};

export type PutAdminRealmsRealmEventsConfigError = Fetcher.ErrorWrapper<undefined>;

export type PutAdminRealmsRealmEventsConfigVariables = {
  body?: Schemas.RealmEventsConfigRepresentation;
  pathParams: PutAdminRealmsRealmEventsConfigPathParams;
} & FetcherExtraProps;

/**
 * Update the events provider Change the events provider and/or its configuration
 */
export const putAdminRealmsRealmEventsConfig = (
  variables: PutAdminRealmsRealmEventsConfigVariables,
  signal?: AbortSignal
) =>
  fetch<
    undefined,
    PutAdminRealmsRealmEventsConfigError,
    Schemas.RealmEventsConfigRepresentation,
    {},
    {},
    PutAdminRealmsRealmEventsConfigPathParams
  >({ url: '/admin/realms/{realm}/events/config', method: 'put', ...variables, signal });

export type GetAdminRealmsRealmGroupByPathPathPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  /**
   * @pattern .*
   */
  path: string;
};

export type GetAdminRealmsRealmGroupByPathPathError = Fetcher.ErrorWrapper<undefined>;

export type GetAdminRealmsRealmGroupByPathPathVariables = {
  pathParams: GetAdminRealmsRealmGroupByPathPathPathParams;
} & FetcherExtraProps;

export const getAdminRealmsRealmGroupByPathPath = (
  variables: GetAdminRealmsRealmGroupByPathPathVariables,
  signal?: AbortSignal
) =>
  fetch<
    Schemas.GroupRepresentation,
    GetAdminRealmsRealmGroupByPathPathError,
    undefined,
    {},
    {},
    GetAdminRealmsRealmGroupByPathPathPathParams
  >({ url: '/admin/realms/{realm}/group-by-path/{path}', method: 'get', ...variables, signal });

export type GetAdminRealmsRealmGroupsPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
};

export type GetAdminRealmsRealmGroupsQueryParams = {
  /**
   * @default true
   */
  briefRepresentation?: boolean;
  /**
   * @default false
   */
  exact?: boolean;
  /**
   * @format int32
   */
  first?: number;
  /**
   * @format int32
   */
  max?: number;
  /**
   * @default true
   */
  populateHierarchy?: boolean;
  q?: string;
  search?: string;
  /**
   * Boolean which defines whether to return the count of subgroups for each group (default: true
   *
   * @default true
   */
  subGroupsCount?: boolean;
};

export type GetAdminRealmsRealmGroupsError = Fetcher.ErrorWrapper<undefined>;

export type GetAdminRealmsRealmGroupsResponse = Schemas.GroupRepresentation[];

export type GetAdminRealmsRealmGroupsVariables = {
  pathParams: GetAdminRealmsRealmGroupsPathParams;
  queryParams?: GetAdminRealmsRealmGroupsQueryParams;
} & FetcherExtraProps;

export const getAdminRealmsRealmGroups = (variables: GetAdminRealmsRealmGroupsVariables, signal?: AbortSignal) =>
  fetch<
    GetAdminRealmsRealmGroupsResponse,
    GetAdminRealmsRealmGroupsError,
    undefined,
    {},
    GetAdminRealmsRealmGroupsQueryParams,
    GetAdminRealmsRealmGroupsPathParams
  >({ url: '/admin/realms/{realm}/groups', method: 'get', ...variables, signal });

export type PostAdminRealmsRealmGroupsPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
};

export type PostAdminRealmsRealmGroupsError = Fetcher.ErrorWrapper<undefined>;

export type PostAdminRealmsRealmGroupsVariables = {
  body?: Schemas.GroupRepresentation;
  pathParams: PostAdminRealmsRealmGroupsPathParams;
} & FetcherExtraProps;

/**
 * This will update the group and set the parent if it exists. Create it and set the parent if the group doesn’t exist.
 */
export const postAdminRealmsRealmGroups = (variables: PostAdminRealmsRealmGroupsVariables, signal?: AbortSignal) =>
  fetch<
    undefined,
    PostAdminRealmsRealmGroupsError,
    Schemas.GroupRepresentation,
    {},
    {},
    PostAdminRealmsRealmGroupsPathParams
  >({ url: '/admin/realms/{realm}/groups', method: 'post', ...variables, signal });

export type GetAdminRealmsRealmGroupsCountPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
};

export type GetAdminRealmsRealmGroupsCountQueryParams = {
  search?: string;
  /**
   * @default false
   */
  top?: boolean;
};

export type GetAdminRealmsRealmGroupsCountError = Fetcher.ErrorWrapper<undefined>;

export type GetAdminRealmsRealmGroupsCountResponse = {
  [key: string]: number;
};

export type GetAdminRealmsRealmGroupsCountVariables = {
  pathParams: GetAdminRealmsRealmGroupsCountPathParams;
  queryParams?: GetAdminRealmsRealmGroupsCountQueryParams;
} & FetcherExtraProps;

export const getAdminRealmsRealmGroupsCount = (
  variables: GetAdminRealmsRealmGroupsCountVariables,
  signal?: AbortSignal
) =>
  fetch<
    GetAdminRealmsRealmGroupsCountResponse,
    GetAdminRealmsRealmGroupsCountError,
    undefined,
    {},
    GetAdminRealmsRealmGroupsCountQueryParams,
    GetAdminRealmsRealmGroupsCountPathParams
  >({ url: '/admin/realms/{realm}/groups/count', method: 'get', ...variables, signal });

export type GetAdminRealmsRealmGroupsGroupIdPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  groupId: string;
};

export type GetAdminRealmsRealmGroupsGroupIdError = Fetcher.ErrorWrapper<undefined>;

export type GetAdminRealmsRealmGroupsGroupIdVariables = {
  pathParams: GetAdminRealmsRealmGroupsGroupIdPathParams;
} & FetcherExtraProps;

export const getAdminRealmsRealmGroupsGroupId = (
  variables: GetAdminRealmsRealmGroupsGroupIdVariables,
  signal?: AbortSignal
) =>
  fetch<
    Schemas.GroupRepresentation,
    GetAdminRealmsRealmGroupsGroupIdError,
    undefined,
    {},
    {},
    GetAdminRealmsRealmGroupsGroupIdPathParams
  >({ url: '/admin/realms/{realm}/groups/{groupId}', method: 'get', ...variables, signal });

export type PutAdminRealmsRealmGroupsGroupIdPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  groupId: string;
};

export type PutAdminRealmsRealmGroupsGroupIdError = Fetcher.ErrorWrapper<undefined>;

export type PutAdminRealmsRealmGroupsGroupIdVariables = {
  body?: Schemas.GroupRepresentation;
  pathParams: PutAdminRealmsRealmGroupsGroupIdPathParams;
} & FetcherExtraProps;

export const putAdminRealmsRealmGroupsGroupId = (
  variables: PutAdminRealmsRealmGroupsGroupIdVariables,
  signal?: AbortSignal
) =>
  fetch<
    undefined,
    PutAdminRealmsRealmGroupsGroupIdError,
    Schemas.GroupRepresentation,
    {},
    {},
    PutAdminRealmsRealmGroupsGroupIdPathParams
  >({ url: '/admin/realms/{realm}/groups/{groupId}', method: 'put', ...variables, signal });

export type DeleteAdminRealmsRealmGroupsGroupIdPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  groupId: string;
};

export type DeleteAdminRealmsRealmGroupsGroupIdError = Fetcher.ErrorWrapper<undefined>;

export type DeleteAdminRealmsRealmGroupsGroupIdVariables = {
  pathParams: DeleteAdminRealmsRealmGroupsGroupIdPathParams;
} & FetcherExtraProps;

export const deleteAdminRealmsRealmGroupsGroupId = (
  variables: DeleteAdminRealmsRealmGroupsGroupIdVariables,
  signal?: AbortSignal
) =>
  fetch<
    undefined,
    DeleteAdminRealmsRealmGroupsGroupIdError,
    undefined,
    {},
    {},
    DeleteAdminRealmsRealmGroupsGroupIdPathParams
  >({ url: '/admin/realms/{realm}/groups/{groupId}', method: 'delete', ...variables, signal });

export type GetAdminRealmsRealmGroupsGroupIdChildrenPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  groupId: string;
};

export type GetAdminRealmsRealmGroupsGroupIdChildrenQueryParams = {
  /**
   * Boolean which defines whether brief groups representations are returned or not (default: false)
   *
   * @default false
   */
  briefRepresentation?: boolean;
  /**
   * Boolean which defines whether the params "search" must match exactly or not
   */
  exact?: boolean;
  /**
   * The position of the first result to be returned (pagination offset).
   *
   * @format int32
   * @default 0
   */
  first?: number;
  /**
   * The maximum number of results that are to be returned. Defaults to 10
   *
   * @format int32
   * @default 10
   */
  max?: number;
  /**
   * A String representing either an exact group name or a partial name
   */
  search?: string;
  /**
   * Boolean which defines whether to return the count of subgroups for each subgroup of this group (default: true
   *
   * @default true
   */
  subGroupsCount?: boolean;
};

export type GetAdminRealmsRealmGroupsGroupIdChildrenError = Fetcher.ErrorWrapper<undefined>;

export type GetAdminRealmsRealmGroupsGroupIdChildrenResponse = Schemas.GroupRepresentation[];

export type GetAdminRealmsRealmGroupsGroupIdChildrenVariables = {
  pathParams: GetAdminRealmsRealmGroupsGroupIdChildrenPathParams;
  queryParams?: GetAdminRealmsRealmGroupsGroupIdChildrenQueryParams;
} & FetcherExtraProps;

export const getAdminRealmsRealmGroupsGroupIdChildren = (
  variables: GetAdminRealmsRealmGroupsGroupIdChildrenVariables,
  signal?: AbortSignal
) =>
  fetch<
    GetAdminRealmsRealmGroupsGroupIdChildrenResponse,
    GetAdminRealmsRealmGroupsGroupIdChildrenError,
    undefined,
    {},
    GetAdminRealmsRealmGroupsGroupIdChildrenQueryParams,
    GetAdminRealmsRealmGroupsGroupIdChildrenPathParams
  >({ url: '/admin/realms/{realm}/groups/{groupId}/children', method: 'get', ...variables, signal });

export type PostAdminRealmsRealmGroupsGroupIdChildrenPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  groupId: string;
};

export type PostAdminRealmsRealmGroupsGroupIdChildrenError = Fetcher.ErrorWrapper<undefined>;

export type PostAdminRealmsRealmGroupsGroupIdChildrenVariables = {
  body?: Schemas.GroupRepresentation;
  pathParams: PostAdminRealmsRealmGroupsGroupIdChildrenPathParams;
} & FetcherExtraProps;

/**
 * This will just set the parent if it exists. Create it and set the parent if the group doesn’t exist.
 */
export const postAdminRealmsRealmGroupsGroupIdChildren = (
  variables: PostAdminRealmsRealmGroupsGroupIdChildrenVariables,
  signal?: AbortSignal
) =>
  fetch<
    undefined,
    PostAdminRealmsRealmGroupsGroupIdChildrenError,
    Schemas.GroupRepresentation,
    {},
    {},
    PostAdminRealmsRealmGroupsGroupIdChildrenPathParams
  >({ url: '/admin/realms/{realm}/groups/{groupId}/children', method: 'post', ...variables, signal });

export type GetAdminRealmsRealmGroupsGroupIdManagementPermissionsPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  groupId: string;
};

export type GetAdminRealmsRealmGroupsGroupIdManagementPermissionsError = Fetcher.ErrorWrapper<undefined>;

export type GetAdminRealmsRealmGroupsGroupIdManagementPermissionsVariables = {
  pathParams: GetAdminRealmsRealmGroupsGroupIdManagementPermissionsPathParams;
} & FetcherExtraProps;

export const getAdminRealmsRealmGroupsGroupIdManagementPermissions = (
  variables: GetAdminRealmsRealmGroupsGroupIdManagementPermissionsVariables,
  signal?: AbortSignal
) =>
  fetch<
    Schemas.ManagementPermissionReference,
    GetAdminRealmsRealmGroupsGroupIdManagementPermissionsError,
    undefined,
    {},
    {},
    GetAdminRealmsRealmGroupsGroupIdManagementPermissionsPathParams
  >({ url: '/admin/realms/{realm}/groups/{groupId}/management/permissions', method: 'get', ...variables, signal });

export type PutAdminRealmsRealmGroupsGroupIdManagementPermissionsPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  groupId: string;
};

export type PutAdminRealmsRealmGroupsGroupIdManagementPermissionsError = Fetcher.ErrorWrapper<undefined>;

export type PutAdminRealmsRealmGroupsGroupIdManagementPermissionsVariables = {
  body?: Schemas.ManagementPermissionReference;
  pathParams: PutAdminRealmsRealmGroupsGroupIdManagementPermissionsPathParams;
} & FetcherExtraProps;

export const putAdminRealmsRealmGroupsGroupIdManagementPermissions = (
  variables: PutAdminRealmsRealmGroupsGroupIdManagementPermissionsVariables,
  signal?: AbortSignal
) =>
  fetch<
    Schemas.ManagementPermissionReference,
    PutAdminRealmsRealmGroupsGroupIdManagementPermissionsError,
    Schemas.ManagementPermissionReference,
    {},
    {},
    PutAdminRealmsRealmGroupsGroupIdManagementPermissionsPathParams
  >({ url: '/admin/realms/{realm}/groups/{groupId}/management/permissions', method: 'put', ...variables, signal });

export type GetAdminRealmsRealmGroupsGroupIdMembersPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  groupId: string;
};

export type GetAdminRealmsRealmGroupsGroupIdMembersQueryParams = {
  /**
   * Only return basic information (only guaranteed to return id, username, created, first and last name, email, enabled state, email verification state, federation link, and access. Note that it means that namely user attributes, required actions, and not before are not returned.)
   */
  briefRepresentation?: boolean;
  /**
   * Pagination offset
   *
   * @format int32
   */
  first?: number;
  /**
   * Maximum results size (defaults to 100)
   *
   * @format int32
   */
  max?: number;
};

export type GetAdminRealmsRealmGroupsGroupIdMembersError = Fetcher.ErrorWrapper<undefined>;

export type GetAdminRealmsRealmGroupsGroupIdMembersResponse = Schemas.UserRepresentation[];

export type GetAdminRealmsRealmGroupsGroupIdMembersVariables = {
  pathParams: GetAdminRealmsRealmGroupsGroupIdMembersPathParams;
  queryParams?: GetAdminRealmsRealmGroupsGroupIdMembersQueryParams;
} & FetcherExtraProps;

export const getAdminRealmsRealmGroupsGroupIdMembers = (
  variables: GetAdminRealmsRealmGroupsGroupIdMembersVariables,
  signal?: AbortSignal
) =>
  fetch<
    GetAdminRealmsRealmGroupsGroupIdMembersResponse,
    GetAdminRealmsRealmGroupsGroupIdMembersError,
    undefined,
    {},
    GetAdminRealmsRealmGroupsGroupIdMembersQueryParams,
    GetAdminRealmsRealmGroupsGroupIdMembersPathParams
  >({ url: '/admin/realms/{realm}/groups/{groupId}/members', method: 'get', ...variables, signal });

export type GetAdminRealmsRealmGroupsGroupIdRoleMappingsPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  groupId: string;
};

export type GetAdminRealmsRealmGroupsGroupIdRoleMappingsError = Fetcher.ErrorWrapper<undefined>;

export type GetAdminRealmsRealmGroupsGroupIdRoleMappingsVariables = {
  pathParams: GetAdminRealmsRealmGroupsGroupIdRoleMappingsPathParams;
} & FetcherExtraProps;

export const getAdminRealmsRealmGroupsGroupIdRoleMappings = (
  variables: GetAdminRealmsRealmGroupsGroupIdRoleMappingsVariables,
  signal?: AbortSignal
) =>
  fetch<
    Schemas.MappingsRepresentation,
    GetAdminRealmsRealmGroupsGroupIdRoleMappingsError,
    undefined,
    {},
    {},
    GetAdminRealmsRealmGroupsGroupIdRoleMappingsPathParams
  >({ url: '/admin/realms/{realm}/groups/{groupId}/role-mappings', method: 'get', ...variables, signal });

export type GetAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  groupId: string;
  /**
   * client id (not clientId!)
   */
  clientId: string;
};

export type GetAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdError = Fetcher.ErrorWrapper<undefined>;

export type GetAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdResponse = Schemas.RoleRepresentation[];

export type GetAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdVariables = {
  pathParams: GetAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdPathParams;
} & FetcherExtraProps;

export const getAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientId = (
  variables: GetAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdVariables,
  signal?: AbortSignal
) =>
  fetch<
    GetAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdResponse,
    GetAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdError,
    undefined,
    {},
    {},
    GetAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdPathParams
  >({
    url: '/admin/realms/{realm}/groups/{groupId}/role-mappings/clients/{clientId}',
    method: 'get',
    ...variables,
    signal
  });

export type PostAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  groupId: string;
  /**
   * client id (not clientId!)
   */
  clientId: string;
};

export type PostAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdError = Fetcher.ErrorWrapper<undefined>;

export type PostAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdRequestBody = Schemas.RoleRepresentation[];

export type PostAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdVariables = {
  body?: PostAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdRequestBody;
  pathParams: PostAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdPathParams;
} & FetcherExtraProps;

export const postAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientId = (
  variables: PostAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdVariables,
  signal?: AbortSignal
) =>
  fetch<
    undefined,
    PostAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdError,
    PostAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdRequestBody,
    {},
    {},
    PostAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdPathParams
  >({
    url: '/admin/realms/{realm}/groups/{groupId}/role-mappings/clients/{clientId}',
    method: 'post',
    ...variables,
    signal
  });

export type DeleteAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  groupId: string;
  /**
   * client id (not clientId!)
   */
  clientId: string;
};

export type DeleteAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdError = Fetcher.ErrorWrapper<undefined>;

export type DeleteAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdRequestBody = Schemas.RoleRepresentation[];

export type DeleteAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdVariables = {
  body?: DeleteAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdRequestBody;
  pathParams: DeleteAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdPathParams;
} & FetcherExtraProps;

export const deleteAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientId = (
  variables: DeleteAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdVariables,
  signal?: AbortSignal
) =>
  fetch<
    undefined,
    DeleteAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdError,
    DeleteAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdRequestBody,
    {},
    {},
    DeleteAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdPathParams
  >({
    url: '/admin/realms/{realm}/groups/{groupId}/role-mappings/clients/{clientId}',
    method: 'delete',
    ...variables,
    signal
  });

export type GetAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdAvailablePathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  groupId: string;
  /**
   * client id (not clientId!)
   */
  clientId: string;
};

export type GetAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdAvailableError = Fetcher.ErrorWrapper<undefined>;

export type GetAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdAvailableResponse = Schemas.RoleRepresentation[];

export type GetAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdAvailableVariables = {
  pathParams: GetAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdAvailablePathParams;
} & FetcherExtraProps;

export const getAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdAvailable = (
  variables: GetAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdAvailableVariables,
  signal?: AbortSignal
) =>
  fetch<
    GetAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdAvailableResponse,
    GetAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdAvailableError,
    undefined,
    {},
    {},
    GetAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdAvailablePathParams
  >({
    url: '/admin/realms/{realm}/groups/{groupId}/role-mappings/clients/{clientId}/available',
    method: 'get',
    ...variables,
    signal
  });

export type GetAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdCompositePathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  groupId: string;
  /**
   * client id (not clientId!)
   */
  clientId: string;
};

export type GetAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdCompositeQueryParams = {
  /**
   * if false, return roles with their attributes
   *
   * @default true
   */
  briefRepresentation?: boolean;
};

export type GetAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdCompositeError = Fetcher.ErrorWrapper<undefined>;

export type GetAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdCompositeResponse = Schemas.RoleRepresentation[];

export type GetAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdCompositeVariables = {
  pathParams: GetAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdCompositePathParams;
  queryParams?: GetAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdCompositeQueryParams;
} & FetcherExtraProps;

export const getAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdComposite = (
  variables: GetAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdCompositeVariables,
  signal?: AbortSignal
) =>
  fetch<
    GetAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdCompositeResponse,
    GetAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdCompositeError,
    undefined,
    {},
    GetAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdCompositeQueryParams,
    GetAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdCompositePathParams
  >({
    url: '/admin/realms/{realm}/groups/{groupId}/role-mappings/clients/{clientId}/composite',
    method: 'get',
    ...variables,
    signal
  });

export type GetAdminRealmsRealmGroupsGroupIdRoleMappingsRealmPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  groupId: string;
};

export type GetAdminRealmsRealmGroupsGroupIdRoleMappingsRealmError = Fetcher.ErrorWrapper<undefined>;

export type GetAdminRealmsRealmGroupsGroupIdRoleMappingsRealmResponse = Schemas.RoleRepresentation[];

export type GetAdminRealmsRealmGroupsGroupIdRoleMappingsRealmVariables = {
  pathParams: GetAdminRealmsRealmGroupsGroupIdRoleMappingsRealmPathParams;
} & FetcherExtraProps;

export const getAdminRealmsRealmGroupsGroupIdRoleMappingsRealm = (
  variables: GetAdminRealmsRealmGroupsGroupIdRoleMappingsRealmVariables,
  signal?: AbortSignal
) =>
  fetch<
    GetAdminRealmsRealmGroupsGroupIdRoleMappingsRealmResponse,
    GetAdminRealmsRealmGroupsGroupIdRoleMappingsRealmError,
    undefined,
    {},
    {},
    GetAdminRealmsRealmGroupsGroupIdRoleMappingsRealmPathParams
  >({ url: '/admin/realms/{realm}/groups/{groupId}/role-mappings/realm', method: 'get', ...variables, signal });

export type PostAdminRealmsRealmGroupsGroupIdRoleMappingsRealmPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  groupId: string;
};

export type PostAdminRealmsRealmGroupsGroupIdRoleMappingsRealmError = Fetcher.ErrorWrapper<undefined>;

export type PostAdminRealmsRealmGroupsGroupIdRoleMappingsRealmRequestBody = Schemas.RoleRepresentation[];

export type PostAdminRealmsRealmGroupsGroupIdRoleMappingsRealmVariables = {
  body?: PostAdminRealmsRealmGroupsGroupIdRoleMappingsRealmRequestBody;
  pathParams: PostAdminRealmsRealmGroupsGroupIdRoleMappingsRealmPathParams;
} & FetcherExtraProps;

export const postAdminRealmsRealmGroupsGroupIdRoleMappingsRealm = (
  variables: PostAdminRealmsRealmGroupsGroupIdRoleMappingsRealmVariables,
  signal?: AbortSignal
) =>
  fetch<
    undefined,
    PostAdminRealmsRealmGroupsGroupIdRoleMappingsRealmError,
    PostAdminRealmsRealmGroupsGroupIdRoleMappingsRealmRequestBody,
    {},
    {},
    PostAdminRealmsRealmGroupsGroupIdRoleMappingsRealmPathParams
  >({ url: '/admin/realms/{realm}/groups/{groupId}/role-mappings/realm', method: 'post', ...variables, signal });

export type DeleteAdminRealmsRealmGroupsGroupIdRoleMappingsRealmPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  groupId: string;
};

export type DeleteAdminRealmsRealmGroupsGroupIdRoleMappingsRealmError = Fetcher.ErrorWrapper<undefined>;

export type DeleteAdminRealmsRealmGroupsGroupIdRoleMappingsRealmRequestBody = Schemas.RoleRepresentation[];

export type DeleteAdminRealmsRealmGroupsGroupIdRoleMappingsRealmVariables = {
  body?: DeleteAdminRealmsRealmGroupsGroupIdRoleMappingsRealmRequestBody;
  pathParams: DeleteAdminRealmsRealmGroupsGroupIdRoleMappingsRealmPathParams;
} & FetcherExtraProps;

export const deleteAdminRealmsRealmGroupsGroupIdRoleMappingsRealm = (
  variables: DeleteAdminRealmsRealmGroupsGroupIdRoleMappingsRealmVariables,
  signal?: AbortSignal
) =>
  fetch<
    undefined,
    DeleteAdminRealmsRealmGroupsGroupIdRoleMappingsRealmError,
    DeleteAdminRealmsRealmGroupsGroupIdRoleMappingsRealmRequestBody,
    {},
    {},
    DeleteAdminRealmsRealmGroupsGroupIdRoleMappingsRealmPathParams
  >({ url: '/admin/realms/{realm}/groups/{groupId}/role-mappings/realm', method: 'delete', ...variables, signal });

export type GetAdminRealmsRealmGroupsGroupIdRoleMappingsRealmAvailablePathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  groupId: string;
};

export type GetAdminRealmsRealmGroupsGroupIdRoleMappingsRealmAvailableError = Fetcher.ErrorWrapper<undefined>;

export type GetAdminRealmsRealmGroupsGroupIdRoleMappingsRealmAvailableResponse = Schemas.RoleRepresentation[];

export type GetAdminRealmsRealmGroupsGroupIdRoleMappingsRealmAvailableVariables = {
  pathParams: GetAdminRealmsRealmGroupsGroupIdRoleMappingsRealmAvailablePathParams;
} & FetcherExtraProps;

export const getAdminRealmsRealmGroupsGroupIdRoleMappingsRealmAvailable = (
  variables: GetAdminRealmsRealmGroupsGroupIdRoleMappingsRealmAvailableVariables,
  signal?: AbortSignal
) =>
  fetch<
    GetAdminRealmsRealmGroupsGroupIdRoleMappingsRealmAvailableResponse,
    GetAdminRealmsRealmGroupsGroupIdRoleMappingsRealmAvailableError,
    undefined,
    {},
    {},
    GetAdminRealmsRealmGroupsGroupIdRoleMappingsRealmAvailablePathParams
  >({
    url: '/admin/realms/{realm}/groups/{groupId}/role-mappings/realm/available',
    method: 'get',
    ...variables,
    signal
  });

export type GetAdminRealmsRealmGroupsGroupIdRoleMappingsRealmCompositePathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  groupId: string;
};

export type GetAdminRealmsRealmGroupsGroupIdRoleMappingsRealmCompositeQueryParams = {
  /**
   * if false, return roles with their attributes
   *
   * @default true
   */
  briefRepresentation?: boolean;
};

export type GetAdminRealmsRealmGroupsGroupIdRoleMappingsRealmCompositeError = Fetcher.ErrorWrapper<undefined>;

export type GetAdminRealmsRealmGroupsGroupIdRoleMappingsRealmCompositeResponse = Schemas.RoleRepresentation[];

export type GetAdminRealmsRealmGroupsGroupIdRoleMappingsRealmCompositeVariables = {
  pathParams: GetAdminRealmsRealmGroupsGroupIdRoleMappingsRealmCompositePathParams;
  queryParams?: GetAdminRealmsRealmGroupsGroupIdRoleMappingsRealmCompositeQueryParams;
} & FetcherExtraProps;

export const getAdminRealmsRealmGroupsGroupIdRoleMappingsRealmComposite = (
  variables: GetAdminRealmsRealmGroupsGroupIdRoleMappingsRealmCompositeVariables,
  signal?: AbortSignal
) =>
  fetch<
    GetAdminRealmsRealmGroupsGroupIdRoleMappingsRealmCompositeResponse,
    GetAdminRealmsRealmGroupsGroupIdRoleMappingsRealmCompositeError,
    undefined,
    {},
    GetAdminRealmsRealmGroupsGroupIdRoleMappingsRealmCompositeQueryParams,
    GetAdminRealmsRealmGroupsGroupIdRoleMappingsRealmCompositePathParams
  >({
    url: '/admin/realms/{realm}/groups/{groupId}/role-mappings/realm/composite',
    method: 'get',
    ...variables,
    signal
  });

export type PostAdminRealmsRealmIdentityProviderImportConfigPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
};

export type PostAdminRealmsRealmIdentityProviderImportConfigError = Fetcher.ErrorWrapper<undefined>;

export type PostAdminRealmsRealmIdentityProviderImportConfigResponse = {
  [key: string]: string;
};

export type PostAdminRealmsRealmIdentityProviderImportConfigRequestBody = {
  [key: string]: any;
};

export type PostAdminRealmsRealmIdentityProviderImportConfigVariables = {
  body?: PostAdminRealmsRealmIdentityProviderImportConfigRequestBody;
  pathParams: PostAdminRealmsRealmIdentityProviderImportConfigPathParams;
} & FetcherExtraProps;

/**
 * Import identity provider from uploaded JSON file
 */
export const postAdminRealmsRealmIdentityProviderImportConfig = (
  variables: PostAdminRealmsRealmIdentityProviderImportConfigVariables,
  signal?: AbortSignal
) =>
  fetch<
    PostAdminRealmsRealmIdentityProviderImportConfigResponse,
    PostAdminRealmsRealmIdentityProviderImportConfigError,
    PostAdminRealmsRealmIdentityProviderImportConfigRequestBody,
    {},
    {},
    PostAdminRealmsRealmIdentityProviderImportConfigPathParams
  >({ url: '/admin/realms/{realm}/identity-provider/import-config', method: 'post', ...variables, signal });

export type GetAdminRealmsRealmIdentityProviderInstancesPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
};

export type GetAdminRealmsRealmIdentityProviderInstancesQueryParams = {
  /**
   * Boolean which defines whether brief representations are returned (default: false)
   */
  briefRepresentation?: boolean;
  /**
   * Pagination offset
   *
   * @format int32
   */
  first?: number;
  /**
   * Maximum results size (defaults to 100)
   *
   * @format int32
   */
  max?: number;
  /**
   * Boolean which defines if only realm-level IDPs (not associated with orgs) should be returned (default: false)
   */
  realmOnly?: boolean;
  /**
   * Filter specific providers by name. Search can be prefix (name*), contains (*name*) or exact ("name"). Default prefixed.
   */
  search?: string;
};

export type GetAdminRealmsRealmIdentityProviderInstancesError = Fetcher.ErrorWrapper<undefined>;

export type GetAdminRealmsRealmIdentityProviderInstancesResponse = Schemas.IdentityProviderRepresentation[];

export type GetAdminRealmsRealmIdentityProviderInstancesVariables = {
  pathParams: GetAdminRealmsRealmIdentityProviderInstancesPathParams;
  queryParams?: GetAdminRealmsRealmIdentityProviderInstancesQueryParams;
} & FetcherExtraProps;

export const getAdminRealmsRealmIdentityProviderInstances = (
  variables: GetAdminRealmsRealmIdentityProviderInstancesVariables,
  signal?: AbortSignal
) =>
  fetch<
    GetAdminRealmsRealmIdentityProviderInstancesResponse,
    GetAdminRealmsRealmIdentityProviderInstancesError,
    undefined,
    {},
    GetAdminRealmsRealmIdentityProviderInstancesQueryParams,
    GetAdminRealmsRealmIdentityProviderInstancesPathParams
  >({ url: '/admin/realms/{realm}/identity-provider/instances', method: 'get', ...variables, signal });

export type PostAdminRealmsRealmIdentityProviderInstancesPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
};

export type PostAdminRealmsRealmIdentityProviderInstancesError = Fetcher.ErrorWrapper<undefined>;

export type PostAdminRealmsRealmIdentityProviderInstancesVariables = {
  body?: Schemas.IdentityProviderRepresentation;
  pathParams: PostAdminRealmsRealmIdentityProviderInstancesPathParams;
} & FetcherExtraProps;

export const postAdminRealmsRealmIdentityProviderInstances = (
  variables: PostAdminRealmsRealmIdentityProviderInstancesVariables,
  signal?: AbortSignal
) =>
  fetch<
    undefined,
    PostAdminRealmsRealmIdentityProviderInstancesError,
    Schemas.IdentityProviderRepresentation,
    {},
    {},
    PostAdminRealmsRealmIdentityProviderInstancesPathParams
  >({ url: '/admin/realms/{realm}/identity-provider/instances', method: 'post', ...variables, signal });

export type GetAdminRealmsRealmIdentityProviderInstancesAliasPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  alias: string;
};

export type GetAdminRealmsRealmIdentityProviderInstancesAliasError = Fetcher.ErrorWrapper<undefined>;

export type GetAdminRealmsRealmIdentityProviderInstancesAliasVariables = {
  pathParams: GetAdminRealmsRealmIdentityProviderInstancesAliasPathParams;
} & FetcherExtraProps;

export const getAdminRealmsRealmIdentityProviderInstancesAlias = (
  variables: GetAdminRealmsRealmIdentityProviderInstancesAliasVariables,
  signal?: AbortSignal
) =>
  fetch<
    Schemas.IdentityProviderRepresentation,
    GetAdminRealmsRealmIdentityProviderInstancesAliasError,
    undefined,
    {},
    {},
    GetAdminRealmsRealmIdentityProviderInstancesAliasPathParams
  >({ url: '/admin/realms/{realm}/identity-provider/instances/{alias}', method: 'get', ...variables, signal });

export type PutAdminRealmsRealmIdentityProviderInstancesAliasPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  alias: string;
};

export type PutAdminRealmsRealmIdentityProviderInstancesAliasError = Fetcher.ErrorWrapper<undefined>;

export type PutAdminRealmsRealmIdentityProviderInstancesAliasVariables = {
  body?: Schemas.IdentityProviderRepresentation;
  pathParams: PutAdminRealmsRealmIdentityProviderInstancesAliasPathParams;
} & FetcherExtraProps;

export const putAdminRealmsRealmIdentityProviderInstancesAlias = (
  variables: PutAdminRealmsRealmIdentityProviderInstancesAliasVariables,
  signal?: AbortSignal
) =>
  fetch<
    undefined,
    PutAdminRealmsRealmIdentityProviderInstancesAliasError,
    Schemas.IdentityProviderRepresentation,
    {},
    {},
    PutAdminRealmsRealmIdentityProviderInstancesAliasPathParams
  >({ url: '/admin/realms/{realm}/identity-provider/instances/{alias}', method: 'put', ...variables, signal });

export type DeleteAdminRealmsRealmIdentityProviderInstancesAliasPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  alias: string;
};

export type DeleteAdminRealmsRealmIdentityProviderInstancesAliasError = Fetcher.ErrorWrapper<undefined>;

export type DeleteAdminRealmsRealmIdentityProviderInstancesAliasVariables = {
  pathParams: DeleteAdminRealmsRealmIdentityProviderInstancesAliasPathParams;
} & FetcherExtraProps;

export const deleteAdminRealmsRealmIdentityProviderInstancesAlias = (
  variables: DeleteAdminRealmsRealmIdentityProviderInstancesAliasVariables,
  signal?: AbortSignal
) =>
  fetch<
    undefined,
    DeleteAdminRealmsRealmIdentityProviderInstancesAliasError,
    undefined,
    {},
    {},
    DeleteAdminRealmsRealmIdentityProviderInstancesAliasPathParams
  >({ url: '/admin/realms/{realm}/identity-provider/instances/{alias}', method: 'delete', ...variables, signal });

export type GetAdminRealmsRealmIdentityProviderInstancesAliasExportPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  alias: string;
};

export type GetAdminRealmsRealmIdentityProviderInstancesAliasExportQueryParams = {
  /**
   * Format to use
   */
  format?: string;
};

export type GetAdminRealmsRealmIdentityProviderInstancesAliasExportError = Fetcher.ErrorWrapper<undefined>;

export type GetAdminRealmsRealmIdentityProviderInstancesAliasExportVariables = {
  pathParams: GetAdminRealmsRealmIdentityProviderInstancesAliasExportPathParams;
  queryParams?: GetAdminRealmsRealmIdentityProviderInstancesAliasExportQueryParams;
} & FetcherExtraProps;

export const getAdminRealmsRealmIdentityProviderInstancesAliasExport = (
  variables: GetAdminRealmsRealmIdentityProviderInstancesAliasExportVariables,
  signal?: AbortSignal
) =>
  fetch<
    undefined,
    GetAdminRealmsRealmIdentityProviderInstancesAliasExportError,
    undefined,
    {},
    GetAdminRealmsRealmIdentityProviderInstancesAliasExportQueryParams,
    GetAdminRealmsRealmIdentityProviderInstancesAliasExportPathParams
  >({ url: '/admin/realms/{realm}/identity-provider/instances/{alias}/export', method: 'get', ...variables, signal });

export type GetAdminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  alias: string;
};

export type GetAdminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsError =
  Fetcher.ErrorWrapper<undefined>;

export type GetAdminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsVariables = {
  pathParams: GetAdminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsPathParams;
} & FetcherExtraProps;

export const getAdminRealmsRealmIdentityProviderInstancesAliasManagementPermissions = (
  variables: GetAdminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsVariables,
  signal?: AbortSignal
) =>
  fetch<
    Schemas.ManagementPermissionReference,
    GetAdminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsError,
    undefined,
    {},
    {},
    GetAdminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsPathParams
  >({
    url: '/admin/realms/{realm}/identity-provider/instances/{alias}/management/permissions',
    method: 'get',
    ...variables,
    signal
  });

export type PutAdminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  alias: string;
};

export type PutAdminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsError =
  Fetcher.ErrorWrapper<undefined>;

export type PutAdminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsVariables = {
  body?: Schemas.ManagementPermissionReference;
  pathParams: PutAdminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsPathParams;
} & FetcherExtraProps;

export const putAdminRealmsRealmIdentityProviderInstancesAliasManagementPermissions = (
  variables: PutAdminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsVariables,
  signal?: AbortSignal
) =>
  fetch<
    Schemas.ManagementPermissionReference,
    PutAdminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsError,
    Schemas.ManagementPermissionReference,
    {},
    {},
    PutAdminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsPathParams
  >({
    url: '/admin/realms/{realm}/identity-provider/instances/{alias}/management/permissions',
    method: 'put',
    ...variables,
    signal
  });

export type GetAdminRealmsRealmIdentityProviderInstancesAliasMapperTypesPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  alias: string;
};

export type GetAdminRealmsRealmIdentityProviderInstancesAliasMapperTypesError = Fetcher.ErrorWrapper<undefined>;

export type GetAdminRealmsRealmIdentityProviderInstancesAliasMapperTypesResponse = {
  [key: string]: Schemas.IdentityProviderMapperTypeRepresentation;
};

export type GetAdminRealmsRealmIdentityProviderInstancesAliasMapperTypesVariables = {
  pathParams: GetAdminRealmsRealmIdentityProviderInstancesAliasMapperTypesPathParams;
} & FetcherExtraProps;

export const getAdminRealmsRealmIdentityProviderInstancesAliasMapperTypes = (
  variables: GetAdminRealmsRealmIdentityProviderInstancesAliasMapperTypesVariables,
  signal?: AbortSignal
) =>
  fetch<
    GetAdminRealmsRealmIdentityProviderInstancesAliasMapperTypesResponse,
    GetAdminRealmsRealmIdentityProviderInstancesAliasMapperTypesError,
    undefined,
    {},
    {},
    GetAdminRealmsRealmIdentityProviderInstancesAliasMapperTypesPathParams
  >({
    url: '/admin/realms/{realm}/identity-provider/instances/{alias}/mapper-types',
    method: 'get',
    ...variables,
    signal
  });

export type GetAdminRealmsRealmIdentityProviderInstancesAliasMappersPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  alias: string;
};

export type GetAdminRealmsRealmIdentityProviderInstancesAliasMappersError = Fetcher.ErrorWrapper<undefined>;

export type GetAdminRealmsRealmIdentityProviderInstancesAliasMappersResponse =
  Schemas.IdentityProviderMapperRepresentation[];

export type GetAdminRealmsRealmIdentityProviderInstancesAliasMappersVariables = {
  pathParams: GetAdminRealmsRealmIdentityProviderInstancesAliasMappersPathParams;
} & FetcherExtraProps;

export const getAdminRealmsRealmIdentityProviderInstancesAliasMappers = (
  variables: GetAdminRealmsRealmIdentityProviderInstancesAliasMappersVariables,
  signal?: AbortSignal
) =>
  fetch<
    GetAdminRealmsRealmIdentityProviderInstancesAliasMappersResponse,
    GetAdminRealmsRealmIdentityProviderInstancesAliasMappersError,
    undefined,
    {},
    {},
    GetAdminRealmsRealmIdentityProviderInstancesAliasMappersPathParams
  >({ url: '/admin/realms/{realm}/identity-provider/instances/{alias}/mappers', method: 'get', ...variables, signal });

export type PostAdminRealmsRealmIdentityProviderInstancesAliasMappersPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  alias: string;
};

export type PostAdminRealmsRealmIdentityProviderInstancesAliasMappersError = Fetcher.ErrorWrapper<undefined>;

export type PostAdminRealmsRealmIdentityProviderInstancesAliasMappersVariables = {
  body?: Schemas.IdentityProviderMapperRepresentation;
  pathParams: PostAdminRealmsRealmIdentityProviderInstancesAliasMappersPathParams;
} & FetcherExtraProps;

export const postAdminRealmsRealmIdentityProviderInstancesAliasMappers = (
  variables: PostAdminRealmsRealmIdentityProviderInstancesAliasMappersVariables,
  signal?: AbortSignal
) =>
  fetch<
    undefined,
    PostAdminRealmsRealmIdentityProviderInstancesAliasMappersError,
    Schemas.IdentityProviderMapperRepresentation,
    {},
    {},
    PostAdminRealmsRealmIdentityProviderInstancesAliasMappersPathParams
  >({ url: '/admin/realms/{realm}/identity-provider/instances/{alias}/mappers', method: 'post', ...variables, signal });

export type GetAdminRealmsRealmIdentityProviderInstancesAliasMappersIdPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  alias: string;
  id: string;
};

export type GetAdminRealmsRealmIdentityProviderInstancesAliasMappersIdError = Fetcher.ErrorWrapper<undefined>;

export type GetAdminRealmsRealmIdentityProviderInstancesAliasMappersIdVariables = {
  pathParams: GetAdminRealmsRealmIdentityProviderInstancesAliasMappersIdPathParams;
} & FetcherExtraProps;

export const getAdminRealmsRealmIdentityProviderInstancesAliasMappersId = (
  variables: GetAdminRealmsRealmIdentityProviderInstancesAliasMappersIdVariables,
  signal?: AbortSignal
) =>
  fetch<
    Schemas.IdentityProviderMapperRepresentation,
    GetAdminRealmsRealmIdentityProviderInstancesAliasMappersIdError,
    undefined,
    {},
    {},
    GetAdminRealmsRealmIdentityProviderInstancesAliasMappersIdPathParams
  >({
    url: '/admin/realms/{realm}/identity-provider/instances/{alias}/mappers/{id}',
    method: 'get',
    ...variables,
    signal
  });

export type PutAdminRealmsRealmIdentityProviderInstancesAliasMappersIdPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  alias: string;
  /**
   * Mapper id
   */
  id: string;
};

export type PutAdminRealmsRealmIdentityProviderInstancesAliasMappersIdError = Fetcher.ErrorWrapper<undefined>;

export type PutAdminRealmsRealmIdentityProviderInstancesAliasMappersIdVariables = {
  body?: Schemas.IdentityProviderMapperRepresentation;
  pathParams: PutAdminRealmsRealmIdentityProviderInstancesAliasMappersIdPathParams;
} & FetcherExtraProps;

export const putAdminRealmsRealmIdentityProviderInstancesAliasMappersId = (
  variables: PutAdminRealmsRealmIdentityProviderInstancesAliasMappersIdVariables,
  signal?: AbortSignal
) =>
  fetch<
    undefined,
    PutAdminRealmsRealmIdentityProviderInstancesAliasMappersIdError,
    Schemas.IdentityProviderMapperRepresentation,
    {},
    {},
    PutAdminRealmsRealmIdentityProviderInstancesAliasMappersIdPathParams
  >({
    url: '/admin/realms/{realm}/identity-provider/instances/{alias}/mappers/{id}',
    method: 'put',
    ...variables,
    signal
  });

export type DeleteAdminRealmsRealmIdentityProviderInstancesAliasMappersIdPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  alias: string;
  /**
   * Mapper id
   */
  id: string;
};

export type DeleteAdminRealmsRealmIdentityProviderInstancesAliasMappersIdError = Fetcher.ErrorWrapper<undefined>;

export type DeleteAdminRealmsRealmIdentityProviderInstancesAliasMappersIdVariables = {
  pathParams: DeleteAdminRealmsRealmIdentityProviderInstancesAliasMappersIdPathParams;
} & FetcherExtraProps;

export const deleteAdminRealmsRealmIdentityProviderInstancesAliasMappersId = (
  variables: DeleteAdminRealmsRealmIdentityProviderInstancesAliasMappersIdVariables,
  signal?: AbortSignal
) =>
  fetch<
    undefined,
    DeleteAdminRealmsRealmIdentityProviderInstancesAliasMappersIdError,
    undefined,
    {},
    {},
    DeleteAdminRealmsRealmIdentityProviderInstancesAliasMappersIdPathParams
  >({
    url: '/admin/realms/{realm}/identity-provider/instances/{alias}/mappers/{id}',
    method: 'delete',
    ...variables,
    signal
  });

export type GetAdminRealmsRealmIdentityProviderInstancesAliasReloadKeysPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  alias: string;
};

export type GetAdminRealmsRealmIdentityProviderInstancesAliasReloadKeysError = Fetcher.ErrorWrapper<undefined>;

export type GetAdminRealmsRealmIdentityProviderInstancesAliasReloadKeysVariables = {
  pathParams: GetAdminRealmsRealmIdentityProviderInstancesAliasReloadKeysPathParams;
} & FetcherExtraProps;

export const getAdminRealmsRealmIdentityProviderInstancesAliasReloadKeys = (
  variables: GetAdminRealmsRealmIdentityProviderInstancesAliasReloadKeysVariables,
  signal?: AbortSignal
) =>
  fetch<
    boolean,
    GetAdminRealmsRealmIdentityProviderInstancesAliasReloadKeysError,
    undefined,
    {},
    {},
    GetAdminRealmsRealmIdentityProviderInstancesAliasReloadKeysPathParams
  >({
    url: '/admin/realms/{realm}/identity-provider/instances/{alias}/reload-keys',
    method: 'get',
    ...variables,
    signal
  });

export type GetAdminRealmsRealmIdentityProviderProvidersProviderIdPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  /**
   * The provider id to get the factory
   */
  providerId: string;
};

export type GetAdminRealmsRealmIdentityProviderProvidersProviderIdError = Fetcher.ErrorWrapper<undefined>;

export type GetAdminRealmsRealmIdentityProviderProvidersProviderIdVariables = {
  pathParams: GetAdminRealmsRealmIdentityProviderProvidersProviderIdPathParams;
} & FetcherExtraProps;

export const getAdminRealmsRealmIdentityProviderProvidersProviderId = (
  variables: GetAdminRealmsRealmIdentityProviderProvidersProviderIdVariables,
  signal?: AbortSignal
) =>
  fetch<
    Record<string, any>,
    GetAdminRealmsRealmIdentityProviderProvidersProviderIdError,
    undefined,
    {},
    {},
    GetAdminRealmsRealmIdentityProviderProvidersProviderIdPathParams
  >({ url: '/admin/realms/{realm}/identity-provider/providers/{providerId}', method: 'get', ...variables, signal });

export type GetAdminRealmsRealmKeysPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
};

export type GetAdminRealmsRealmKeysError = Fetcher.ErrorWrapper<undefined>;

export type GetAdminRealmsRealmKeysVariables = {
  pathParams: GetAdminRealmsRealmKeysPathParams;
} & FetcherExtraProps;

export const getAdminRealmsRealmKeys = (variables: GetAdminRealmsRealmKeysVariables, signal?: AbortSignal) =>
  fetch<
    Schemas.KeysMetadataRepresentation,
    GetAdminRealmsRealmKeysError,
    undefined,
    {},
    {},
    GetAdminRealmsRealmKeysPathParams
  >({ url: '/admin/realms/{realm}/keys', method: 'get', ...variables, signal });

export type GetAdminRealmsRealmLocalizationPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
};

export type GetAdminRealmsRealmLocalizationError = Fetcher.ErrorWrapper<undefined>;

export type GetAdminRealmsRealmLocalizationResponse = string[];

export type GetAdminRealmsRealmLocalizationVariables = {
  pathParams: GetAdminRealmsRealmLocalizationPathParams;
} & FetcherExtraProps;

export const getAdminRealmsRealmLocalization = (
  variables: GetAdminRealmsRealmLocalizationVariables,
  signal?: AbortSignal
) =>
  fetch<
    GetAdminRealmsRealmLocalizationResponse,
    GetAdminRealmsRealmLocalizationError,
    undefined,
    {},
    {},
    GetAdminRealmsRealmLocalizationPathParams
  >({ url: '/admin/realms/{realm}/localization', method: 'get', ...variables, signal });

export type GetAdminRealmsRealmLocalizationLocalePathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  locale: string;
};

export type GetAdminRealmsRealmLocalizationLocaleQueryParams = {
  useRealmDefaultLocaleFallback?: boolean;
};

export type GetAdminRealmsRealmLocalizationLocaleError = Fetcher.ErrorWrapper<undefined>;

export type GetAdminRealmsRealmLocalizationLocaleResponse = {
  [key: string]: string;
};

export type GetAdminRealmsRealmLocalizationLocaleVariables = {
  pathParams: GetAdminRealmsRealmLocalizationLocalePathParams;
  queryParams?: GetAdminRealmsRealmLocalizationLocaleQueryParams;
} & FetcherExtraProps;

export const getAdminRealmsRealmLocalizationLocale = (
  variables: GetAdminRealmsRealmLocalizationLocaleVariables,
  signal?: AbortSignal
) =>
  fetch<
    GetAdminRealmsRealmLocalizationLocaleResponse,
    GetAdminRealmsRealmLocalizationLocaleError,
    undefined,
    {},
    GetAdminRealmsRealmLocalizationLocaleQueryParams,
    GetAdminRealmsRealmLocalizationLocalePathParams
  >({ url: '/admin/realms/{realm}/localization/{locale}', method: 'get', ...variables, signal });

export type PostAdminRealmsRealmLocalizationLocalePathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  locale: string;
};

export type PostAdminRealmsRealmLocalizationLocaleError = Fetcher.ErrorWrapper<undefined>;

export type PostAdminRealmsRealmLocalizationLocaleRequestBody = {
  [key: string]: string;
};

export type PostAdminRealmsRealmLocalizationLocaleVariables = {
  body?: PostAdminRealmsRealmLocalizationLocaleRequestBody;
  pathParams: PostAdminRealmsRealmLocalizationLocalePathParams;
} & FetcherExtraProps;

export const postAdminRealmsRealmLocalizationLocale = (
  variables: PostAdminRealmsRealmLocalizationLocaleVariables,
  signal?: AbortSignal
) =>
  fetch<
    undefined,
    PostAdminRealmsRealmLocalizationLocaleError,
    PostAdminRealmsRealmLocalizationLocaleRequestBody,
    {},
    {},
    PostAdminRealmsRealmLocalizationLocalePathParams
  >({ url: '/admin/realms/{realm}/localization/{locale}', method: 'post', ...variables, signal });

export type DeleteAdminRealmsRealmLocalizationLocalePathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  locale: string;
};

export type DeleteAdminRealmsRealmLocalizationLocaleError = Fetcher.ErrorWrapper<undefined>;

export type DeleteAdminRealmsRealmLocalizationLocaleVariables = {
  pathParams: DeleteAdminRealmsRealmLocalizationLocalePathParams;
} & FetcherExtraProps;

export const deleteAdminRealmsRealmLocalizationLocale = (
  variables: DeleteAdminRealmsRealmLocalizationLocaleVariables,
  signal?: AbortSignal
) =>
  fetch<
    undefined,
    DeleteAdminRealmsRealmLocalizationLocaleError,
    undefined,
    {},
    {},
    DeleteAdminRealmsRealmLocalizationLocalePathParams
  >({ url: '/admin/realms/{realm}/localization/{locale}', method: 'delete', ...variables, signal });

export type GetAdminRealmsRealmLocalizationLocaleKeyPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  key: string;
  locale: string;
};

export type GetAdminRealmsRealmLocalizationLocaleKeyError = Fetcher.ErrorWrapper<undefined>;

export type GetAdminRealmsRealmLocalizationLocaleKeyVariables = {
  pathParams: GetAdminRealmsRealmLocalizationLocaleKeyPathParams;
} & FetcherExtraProps;

export const getAdminRealmsRealmLocalizationLocaleKey = (
  variables: GetAdminRealmsRealmLocalizationLocaleKeyVariables,
  signal?: AbortSignal
) =>
  fetch<
    undefined,
    GetAdminRealmsRealmLocalizationLocaleKeyError,
    undefined,
    {},
    {},
    GetAdminRealmsRealmLocalizationLocaleKeyPathParams
  >({ url: '/admin/realms/{realm}/localization/{locale}/{key}', method: 'get', ...variables, signal });

export type PutAdminRealmsRealmLocalizationLocaleKeyPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  key: string;
  locale: string;
};

export type PutAdminRealmsRealmLocalizationLocaleKeyError = Fetcher.ErrorWrapper<undefined>;

export type PutAdminRealmsRealmLocalizationLocaleKeyVariables = {
  pathParams: PutAdminRealmsRealmLocalizationLocaleKeyPathParams;
} & FetcherExtraProps;

export const putAdminRealmsRealmLocalizationLocaleKey = (
  variables: PutAdminRealmsRealmLocalizationLocaleKeyVariables,
  signal?: AbortSignal
) =>
  fetch<
    undefined,
    PutAdminRealmsRealmLocalizationLocaleKeyError,
    undefined,
    {},
    {},
    PutAdminRealmsRealmLocalizationLocaleKeyPathParams
  >({ url: '/admin/realms/{realm}/localization/{locale}/{key}', method: 'put', ...variables, signal });

export type DeleteAdminRealmsRealmLocalizationLocaleKeyPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  key: string;
  locale: string;
};

export type DeleteAdminRealmsRealmLocalizationLocaleKeyError = Fetcher.ErrorWrapper<undefined>;

export type DeleteAdminRealmsRealmLocalizationLocaleKeyVariables = {
  pathParams: DeleteAdminRealmsRealmLocalizationLocaleKeyPathParams;
} & FetcherExtraProps;

export const deleteAdminRealmsRealmLocalizationLocaleKey = (
  variables: DeleteAdminRealmsRealmLocalizationLocaleKeyVariables,
  signal?: AbortSignal
) =>
  fetch<
    undefined,
    DeleteAdminRealmsRealmLocalizationLocaleKeyError,
    undefined,
    {},
    {},
    DeleteAdminRealmsRealmLocalizationLocaleKeyPathParams
  >({ url: '/admin/realms/{realm}/localization/{locale}/{key}', method: 'delete', ...variables, signal });

export type PostAdminRealmsRealmLogoutAllPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
};

export type PostAdminRealmsRealmLogoutAllError = Fetcher.ErrorWrapper<undefined>;

export type PostAdminRealmsRealmLogoutAllVariables = {
  pathParams: PostAdminRealmsRealmLogoutAllPathParams;
} & FetcherExtraProps;

/**
 * Any client that has an admin url will also be told to invalidate any sessions they have.
 */
export const postAdminRealmsRealmLogoutAll = (
  variables: PostAdminRealmsRealmLogoutAllVariables,
  signal?: AbortSignal
) =>
  fetch<
    Schemas.GlobalRequestResult,
    PostAdminRealmsRealmLogoutAllError,
    undefined,
    {},
    {},
    PostAdminRealmsRealmLogoutAllPathParams
  >({ url: '/admin/realms/{realm}/logout-all', method: 'post', ...variables, signal });

export type GetAdminRealmsRealmOrganizationsPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
};

export type GetAdminRealmsRealmOrganizationsQueryParams = {
  /**
   * if false, return the full representation. Otherwise, only the basic fields are returned.
   *
   * @default true
   */
  briefRepresentation?: boolean;
  /**
   * Boolean which defines whether the param 'search' must match exactly or not
   */
  exact?: boolean;
  /**
   * The position of the first result to be processed (pagination offset)
   *
   * @format int32
   * @default 0
   */
  first?: number;
  /**
   * The maximum number of results to be returned - defaults to 10
   *
   * @format int32
   * @default 10
   */
  max?: number;
  /**
   * A query to search for custom attributes, in the format 'key1:value2 key2:value2'
   */
  q?: string;
  /**
   * A String representing either an organization name or domain
   */
  search?: string;
};

export type GetAdminRealmsRealmOrganizationsError = Fetcher.ErrorWrapper<undefined>;

export type GetAdminRealmsRealmOrganizationsResponse = Schemas.OrganizationRepresentation[];

export type GetAdminRealmsRealmOrganizationsVariables = {
  pathParams: GetAdminRealmsRealmOrganizationsPathParams;
  queryParams?: GetAdminRealmsRealmOrganizationsQueryParams;
} & FetcherExtraProps;

export const getAdminRealmsRealmOrganizations = (
  variables: GetAdminRealmsRealmOrganizationsVariables,
  signal?: AbortSignal
) =>
  fetch<
    GetAdminRealmsRealmOrganizationsResponse,
    GetAdminRealmsRealmOrganizationsError,
    undefined,
    {},
    GetAdminRealmsRealmOrganizationsQueryParams,
    GetAdminRealmsRealmOrganizationsPathParams
  >({ url: '/admin/realms/{realm}/organizations', method: 'get', ...variables, signal });

export type PostAdminRealmsRealmOrganizationsPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
};

export type PostAdminRealmsRealmOrganizationsError = Fetcher.ErrorWrapper<undefined>;

export type PostAdminRealmsRealmOrganizationsVariables = {
  body?: Schemas.OrganizationRepresentation;
  pathParams: PostAdminRealmsRealmOrganizationsPathParams;
} & FetcherExtraProps;

export const postAdminRealmsRealmOrganizations = (
  variables: PostAdminRealmsRealmOrganizationsVariables,
  signal?: AbortSignal
) =>
  fetch<
    undefined,
    PostAdminRealmsRealmOrganizationsError,
    Schemas.OrganizationRepresentation,
    {},
    {},
    PostAdminRealmsRealmOrganizationsPathParams
  >({ url: '/admin/realms/{realm}/organizations', method: 'post', ...variables, signal });

export type GetAdminRealmsRealmOrganizationsCountPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
};

export type GetAdminRealmsRealmOrganizationsCountQueryParams = {
  /**
   * Boolean which defines whether the param 'search' must match exactly or not
   */
  exact?: boolean;
  /**
   * A query to search for custom attributes, in the format 'key1:value2 key2:value2'
   */
  q?: string;
  /**
   * A String representing either an organization name or domain
   */
  search?: string;
};

export type GetAdminRealmsRealmOrganizationsCountError = Fetcher.ErrorWrapper<undefined>;

export type GetAdminRealmsRealmOrganizationsCountVariables = {
  pathParams: GetAdminRealmsRealmOrganizationsCountPathParams;
  queryParams?: GetAdminRealmsRealmOrganizationsCountQueryParams;
} & FetcherExtraProps;

export const getAdminRealmsRealmOrganizationsCount = (
  variables: GetAdminRealmsRealmOrganizationsCountVariables,
  signal?: AbortSignal
) =>
  fetch<
    number,
    GetAdminRealmsRealmOrganizationsCountError,
    undefined,
    {},
    GetAdminRealmsRealmOrganizationsCountQueryParams,
    GetAdminRealmsRealmOrganizationsCountPathParams
  >({ url: '/admin/realms/{realm}/organizations/count', method: 'get', ...variables, signal });

export type GetAdminRealmsRealmOrganizationsMembersMemberIdOrganizationsPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  memberId: string;
};

export type GetAdminRealmsRealmOrganizationsMembersMemberIdOrganizationsQueryParams = {
  /**
   * if false, return the full representation. Otherwise, only the basic fields are returned.
   *
   * @default true
   */
  briefRepresentation?: boolean;
};

export type GetAdminRealmsRealmOrganizationsMembersMemberIdOrganizationsError = Fetcher.ErrorWrapper<undefined>;

export type GetAdminRealmsRealmOrganizationsMembersMemberIdOrganizationsResponse = Schemas.OrganizationRepresentation[];

export type GetAdminRealmsRealmOrganizationsMembersMemberIdOrganizationsVariables = {
  pathParams: GetAdminRealmsRealmOrganizationsMembersMemberIdOrganizationsPathParams;
  queryParams?: GetAdminRealmsRealmOrganizationsMembersMemberIdOrganizationsQueryParams;
} & FetcherExtraProps;

export const getAdminRealmsRealmOrganizationsMembersMemberIdOrganizations = (
  variables: GetAdminRealmsRealmOrganizationsMembersMemberIdOrganizationsVariables,
  signal?: AbortSignal
) =>
  fetch<
    GetAdminRealmsRealmOrganizationsMembersMemberIdOrganizationsResponse,
    GetAdminRealmsRealmOrganizationsMembersMemberIdOrganizationsError,
    undefined,
    {},
    GetAdminRealmsRealmOrganizationsMembersMemberIdOrganizationsQueryParams,
    GetAdminRealmsRealmOrganizationsMembersMemberIdOrganizationsPathParams
  >({
    url: '/admin/realms/{realm}/organizations/members/{memberId}/organizations',
    method: 'get',
    ...variables,
    signal
  });

export type GetAdminRealmsRealmOrganizationsOrgIdPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  orgId: string;
};

export type GetAdminRealmsRealmOrganizationsOrgIdError = Fetcher.ErrorWrapper<undefined>;

export type GetAdminRealmsRealmOrganizationsOrgIdVariables = {
  pathParams: GetAdminRealmsRealmOrganizationsOrgIdPathParams;
} & FetcherExtraProps;

export const getAdminRealmsRealmOrganizationsOrgId = (
  variables: GetAdminRealmsRealmOrganizationsOrgIdVariables,
  signal?: AbortSignal
) =>
  fetch<
    Schemas.OrganizationRepresentation,
    GetAdminRealmsRealmOrganizationsOrgIdError,
    undefined,
    {},
    {},
    GetAdminRealmsRealmOrganizationsOrgIdPathParams
  >({ url: '/admin/realms/{realm}/organizations/{orgId}', method: 'get', ...variables, signal });

export type PutAdminRealmsRealmOrganizationsOrgIdPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  orgId: string;
};

export type PutAdminRealmsRealmOrganizationsOrgIdError = Fetcher.ErrorWrapper<undefined>;

export type PutAdminRealmsRealmOrganizationsOrgIdVariables = {
  body?: Schemas.OrganizationRepresentation;
  pathParams: PutAdminRealmsRealmOrganizationsOrgIdPathParams;
} & FetcherExtraProps;

export const putAdminRealmsRealmOrganizationsOrgId = (
  variables: PutAdminRealmsRealmOrganizationsOrgIdVariables,
  signal?: AbortSignal
) =>
  fetch<
    undefined,
    PutAdminRealmsRealmOrganizationsOrgIdError,
    Schemas.OrganizationRepresentation,
    {},
    {},
    PutAdminRealmsRealmOrganizationsOrgIdPathParams
  >({ url: '/admin/realms/{realm}/organizations/{orgId}', method: 'put', ...variables, signal });

export type DeleteAdminRealmsRealmOrganizationsOrgIdPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  orgId: string;
};

export type DeleteAdminRealmsRealmOrganizationsOrgIdError = Fetcher.ErrorWrapper<undefined>;

export type DeleteAdminRealmsRealmOrganizationsOrgIdVariables = {
  pathParams: DeleteAdminRealmsRealmOrganizationsOrgIdPathParams;
} & FetcherExtraProps;

export const deleteAdminRealmsRealmOrganizationsOrgId = (
  variables: DeleteAdminRealmsRealmOrganizationsOrgIdVariables,
  signal?: AbortSignal
) =>
  fetch<
    undefined,
    DeleteAdminRealmsRealmOrganizationsOrgIdError,
    undefined,
    {},
    {},
    DeleteAdminRealmsRealmOrganizationsOrgIdPathParams
  >({ url: '/admin/realms/{realm}/organizations/{orgId}', method: 'delete', ...variables, signal });

export type GetAdminRealmsRealmOrganizationsOrgIdIdentityProvidersPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  orgId: string;
};

export type GetAdminRealmsRealmOrganizationsOrgIdIdentityProvidersError = Fetcher.ErrorWrapper<undefined>;

export type GetAdminRealmsRealmOrganizationsOrgIdIdentityProvidersResponse = Schemas.IdentityProviderRepresentation[];

export type GetAdminRealmsRealmOrganizationsOrgIdIdentityProvidersVariables = {
  pathParams: GetAdminRealmsRealmOrganizationsOrgIdIdentityProvidersPathParams;
} & FetcherExtraProps;

export const getAdminRealmsRealmOrganizationsOrgIdIdentityProviders = (
  variables: GetAdminRealmsRealmOrganizationsOrgIdIdentityProvidersVariables,
  signal?: AbortSignal
) =>
  fetch<
    GetAdminRealmsRealmOrganizationsOrgIdIdentityProvidersResponse,
    GetAdminRealmsRealmOrganizationsOrgIdIdentityProvidersError,
    undefined,
    {},
    {},
    GetAdminRealmsRealmOrganizationsOrgIdIdentityProvidersPathParams
  >({ url: '/admin/realms/{realm}/organizations/{orgId}/identity-providers', method: 'get', ...variables, signal });

export type PostAdminRealmsRealmOrganizationsOrgIdIdentityProvidersPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  orgId: string;
};

export type PostAdminRealmsRealmOrganizationsOrgIdIdentityProvidersError = Fetcher.ErrorWrapper<undefined>;

export type PostAdminRealmsRealmOrganizationsOrgIdIdentityProvidersVariables = {
  body?: string;
  pathParams: PostAdminRealmsRealmOrganizationsOrgIdIdentityProvidersPathParams;
} & FetcherExtraProps;

/**
 * Adds, or associates, an existing identity provider with the organization. If no identity provider is found, or if it is already associated with the organization, an error response is returned
 */
export const postAdminRealmsRealmOrganizationsOrgIdIdentityProviders = (
  variables: PostAdminRealmsRealmOrganizationsOrgIdIdentityProvidersVariables,
  signal?: AbortSignal
) =>
  fetch<
    undefined,
    PostAdminRealmsRealmOrganizationsOrgIdIdentityProvidersError,
    string,
    {},
    {},
    PostAdminRealmsRealmOrganizationsOrgIdIdentityProvidersPathParams
  >({ url: '/admin/realms/{realm}/organizations/{orgId}/identity-providers', method: 'post', ...variables, signal });

export type GetAdminRealmsRealmOrganizationsOrgIdIdentityProvidersAliasPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  orgId: string;
  alias: string;
};

export type GetAdminRealmsRealmOrganizationsOrgIdIdentityProvidersAliasError = Fetcher.ErrorWrapper<undefined>;

export type GetAdminRealmsRealmOrganizationsOrgIdIdentityProvidersAliasVariables = {
  pathParams: GetAdminRealmsRealmOrganizationsOrgIdIdentityProvidersAliasPathParams;
} & FetcherExtraProps;

/**
 * Searches for an identity provider with the given alias. If one is found and is associated with the organization, it is returned. Otherwise, an error response with status NOT_FOUND is returned
 */
export const getAdminRealmsRealmOrganizationsOrgIdIdentityProvidersAlias = (
  variables: GetAdminRealmsRealmOrganizationsOrgIdIdentityProvidersAliasVariables,
  signal?: AbortSignal
) =>
  fetch<
    Schemas.IdentityProviderRepresentation,
    GetAdminRealmsRealmOrganizationsOrgIdIdentityProvidersAliasError,
    undefined,
    {},
    {},
    GetAdminRealmsRealmOrganizationsOrgIdIdentityProvidersAliasPathParams
  >({
    url: '/admin/realms/{realm}/organizations/{orgId}/identity-providers/{alias}',
    method: 'get',
    ...variables,
    signal
  });

export type DeleteAdminRealmsRealmOrganizationsOrgIdIdentityProvidersAliasPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  orgId: string;
  alias: string;
};

export type DeleteAdminRealmsRealmOrganizationsOrgIdIdentityProvidersAliasError = Fetcher.ErrorWrapper<undefined>;

export type DeleteAdminRealmsRealmOrganizationsOrgIdIdentityProvidersAliasVariables = {
  pathParams: DeleteAdminRealmsRealmOrganizationsOrgIdIdentityProvidersAliasPathParams;
} & FetcherExtraProps;

/**
 * Breaks the association between the identity provider and the organization. The provider itself is not deleted. If no provider is found, or if it is not currently associated with the org, an error response is returned
 */
export const deleteAdminRealmsRealmOrganizationsOrgIdIdentityProvidersAlias = (
  variables: DeleteAdminRealmsRealmOrganizationsOrgIdIdentityProvidersAliasVariables,
  signal?: AbortSignal
) =>
  fetch<
    undefined,
    DeleteAdminRealmsRealmOrganizationsOrgIdIdentityProvidersAliasError,
    undefined,
    {},
    {},
    DeleteAdminRealmsRealmOrganizationsOrgIdIdentityProvidersAliasPathParams
  >({
    url: '/admin/realms/{realm}/organizations/{orgId}/identity-providers/{alias}',
    method: 'delete',
    ...variables,
    signal
  });

export type GetAdminRealmsRealmOrganizationsOrgIdMembersPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  orgId: string;
};

export type GetAdminRealmsRealmOrganizationsOrgIdMembersQueryParams = {
  /**
   * Boolean which defines whether the param 'search' must match exactly or not
   */
  exact?: boolean;
  /**
   * The position of the first result to be processed (pagination offset)
   *
   * @format int32
   * @default 0
   */
  first?: number;
  /**
   * The maximum number of results to be returned. Defaults to 10
   *
   * @format int32
   * @default 10
   */
  max?: number;
  /**
   * The membership type
   */
  membershipType?: string;
  /**
   * A String representing either a member's username, e-mail, first name, or last name.
   */
  search?: string;
};

export type GetAdminRealmsRealmOrganizationsOrgIdMembersError = Fetcher.ErrorWrapper<undefined>;

export type GetAdminRealmsRealmOrganizationsOrgIdMembersResponse = Schemas.MemberRepresentation[];

export type GetAdminRealmsRealmOrganizationsOrgIdMembersVariables = {
  pathParams: GetAdminRealmsRealmOrganizationsOrgIdMembersPathParams;
  queryParams?: GetAdminRealmsRealmOrganizationsOrgIdMembersQueryParams;
} & FetcherExtraProps;

export const getAdminRealmsRealmOrganizationsOrgIdMembers = (
  variables: GetAdminRealmsRealmOrganizationsOrgIdMembersVariables,
  signal?: AbortSignal
) =>
  fetch<
    GetAdminRealmsRealmOrganizationsOrgIdMembersResponse,
    GetAdminRealmsRealmOrganizationsOrgIdMembersError,
    undefined,
    {},
    GetAdminRealmsRealmOrganizationsOrgIdMembersQueryParams,
    GetAdminRealmsRealmOrganizationsOrgIdMembersPathParams
  >({ url: '/admin/realms/{realm}/organizations/{orgId}/members', method: 'get', ...variables, signal });

export type PostAdminRealmsRealmOrganizationsOrgIdMembersPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  orgId: string;
};

export type PostAdminRealmsRealmOrganizationsOrgIdMembersError = Fetcher.ErrorWrapper<undefined>;

export type PostAdminRealmsRealmOrganizationsOrgIdMembersVariables = {
  body?: string;
  pathParams: PostAdminRealmsRealmOrganizationsOrgIdMembersPathParams;
} & FetcherExtraProps;

/**
 * Adds, or associates, an existing user with the organization. If no user is found, or if it is already associated with the organization, an error response is returned
 */
export const postAdminRealmsRealmOrganizationsOrgIdMembers = (
  variables: PostAdminRealmsRealmOrganizationsOrgIdMembersVariables,
  signal?: AbortSignal
) =>
  fetch<
    undefined,
    PostAdminRealmsRealmOrganizationsOrgIdMembersError,
    string,
    {},
    {},
    PostAdminRealmsRealmOrganizationsOrgIdMembersPathParams
  >({ url: '/admin/realms/{realm}/organizations/{orgId}/members', method: 'post', ...variables, signal });

export type GetAdminRealmsRealmOrganizationsOrgIdMembersCountPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  orgId: string;
};

export type GetAdminRealmsRealmOrganizationsOrgIdMembersCountError = Fetcher.ErrorWrapper<undefined>;

export type GetAdminRealmsRealmOrganizationsOrgIdMembersCountVariables = {
  pathParams: GetAdminRealmsRealmOrganizationsOrgIdMembersCountPathParams;
} & FetcherExtraProps;

export const getAdminRealmsRealmOrganizationsOrgIdMembersCount = (
  variables: GetAdminRealmsRealmOrganizationsOrgIdMembersCountVariables,
  signal?: AbortSignal
) =>
  fetch<
    number,
    GetAdminRealmsRealmOrganizationsOrgIdMembersCountError,
    undefined,
    {},
    {},
    GetAdminRealmsRealmOrganizationsOrgIdMembersCountPathParams
  >({ url: '/admin/realms/{realm}/organizations/{orgId}/members/count', method: 'get', ...variables, signal });

export type PostAdminRealmsRealmOrganizationsOrgIdMembersInviteExistingUserPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  orgId: string;
};

export type PostAdminRealmsRealmOrganizationsOrgIdMembersInviteExistingUserError = Fetcher.ErrorWrapper<undefined>;

export type PostAdminRealmsRealmOrganizationsOrgIdMembersInviteExistingUserVariables = {
  pathParams: PostAdminRealmsRealmOrganizationsOrgIdMembersInviteExistingUserPathParams;
} & FetcherExtraProps;

export const postAdminRealmsRealmOrganizationsOrgIdMembersInviteExistingUser = (
  variables: PostAdminRealmsRealmOrganizationsOrgIdMembersInviteExistingUserVariables,
  signal?: AbortSignal
) =>
  fetch<
    undefined,
    PostAdminRealmsRealmOrganizationsOrgIdMembersInviteExistingUserError,
    undefined,
    {},
    {},
    PostAdminRealmsRealmOrganizationsOrgIdMembersInviteExistingUserPathParams
  >({
    url: '/admin/realms/{realm}/organizations/{orgId}/members/invite-existing-user',
    method: 'post',
    ...variables,
    signal
  });

export type PostAdminRealmsRealmOrganizationsOrgIdMembersInviteUserPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  orgId: string;
};

export type PostAdminRealmsRealmOrganizationsOrgIdMembersInviteUserError = Fetcher.ErrorWrapper<undefined>;

export type PostAdminRealmsRealmOrganizationsOrgIdMembersInviteUserVariables = {
  pathParams: PostAdminRealmsRealmOrganizationsOrgIdMembersInviteUserPathParams;
} & FetcherExtraProps;

/**
 * If the user with the given e-mail address exists, it sends an invitation link, otherwise it sends a registration link.
 */
export const postAdminRealmsRealmOrganizationsOrgIdMembersInviteUser = (
  variables: PostAdminRealmsRealmOrganizationsOrgIdMembersInviteUserVariables,
  signal?: AbortSignal
) =>
  fetch<
    undefined,
    PostAdminRealmsRealmOrganizationsOrgIdMembersInviteUserError,
    undefined,
    {},
    {},
    PostAdminRealmsRealmOrganizationsOrgIdMembersInviteUserPathParams
  >({ url: '/admin/realms/{realm}/organizations/{orgId}/members/invite-user', method: 'post', ...variables, signal });

export type GetAdminRealmsRealmOrganizationsOrgIdMembersMemberIdPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  orgId: string;
  memberId: string;
};

export type GetAdminRealmsRealmOrganizationsOrgIdMembersMemberIdError = Fetcher.ErrorWrapper<undefined>;

export type GetAdminRealmsRealmOrganizationsOrgIdMembersMemberIdVariables = {
  pathParams: GetAdminRealmsRealmOrganizationsOrgIdMembersMemberIdPathParams;
} & FetcherExtraProps;

/**
 * Searches for auser with the given id. If one is found, and is currently a member of the organization, returns it. Otherwise,an error response with status NOT_FOUND is returned
 */
export const getAdminRealmsRealmOrganizationsOrgIdMembersMemberId = (
  variables: GetAdminRealmsRealmOrganizationsOrgIdMembersMemberIdVariables,
  signal?: AbortSignal
) =>
  fetch<
    Schemas.MemberRepresentation,
    GetAdminRealmsRealmOrganizationsOrgIdMembersMemberIdError,
    undefined,
    {},
    {},
    GetAdminRealmsRealmOrganizationsOrgIdMembersMemberIdPathParams
  >({ url: '/admin/realms/{realm}/organizations/{orgId}/members/{memberId}', method: 'get', ...variables, signal });

export type DeleteAdminRealmsRealmOrganizationsOrgIdMembersMemberIdPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  orgId: string;
  memberId: string;
};

export type DeleteAdminRealmsRealmOrganizationsOrgIdMembersMemberIdError = Fetcher.ErrorWrapper<undefined>;

export type DeleteAdminRealmsRealmOrganizationsOrgIdMembersMemberIdVariables = {
  pathParams: DeleteAdminRealmsRealmOrganizationsOrgIdMembersMemberIdPathParams;
} & FetcherExtraProps;

/**
 * Breaks the association between the user and organization. The user itself is deleted in case the membership is managed, otherwise the user is not deleted. If no user is found, or if they are not a member of the organization, an error response is returned
 */
export const deleteAdminRealmsRealmOrganizationsOrgIdMembersMemberId = (
  variables: DeleteAdminRealmsRealmOrganizationsOrgIdMembersMemberIdVariables,
  signal?: AbortSignal
) =>
  fetch<
    undefined,
    DeleteAdminRealmsRealmOrganizationsOrgIdMembersMemberIdError,
    undefined,
    {},
    {},
    DeleteAdminRealmsRealmOrganizationsOrgIdMembersMemberIdPathParams
  >({ url: '/admin/realms/{realm}/organizations/{orgId}/members/{memberId}', method: 'delete', ...variables, signal });

export type GetAdminRealmsRealmOrganizationsOrgIdMembersMemberIdOrganizationsPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  orgId: string;
  memberId: string;
};

export type GetAdminRealmsRealmOrganizationsOrgIdMembersMemberIdOrganizationsQueryParams = {
  /**
   * if false, return the full representation. Otherwise, only the basic fields are returned.
   *
   * @default true
   */
  briefRepresentation?: boolean;
};

export type GetAdminRealmsRealmOrganizationsOrgIdMembersMemberIdOrganizationsError = Fetcher.ErrorWrapper<undefined>;

export type GetAdminRealmsRealmOrganizationsOrgIdMembersMemberIdOrganizationsResponse =
  Schemas.OrganizationRepresentation[];

export type GetAdminRealmsRealmOrganizationsOrgIdMembersMemberIdOrganizationsVariables = {
  pathParams: GetAdminRealmsRealmOrganizationsOrgIdMembersMemberIdOrganizationsPathParams;
  queryParams?: GetAdminRealmsRealmOrganizationsOrgIdMembersMemberIdOrganizationsQueryParams;
} & FetcherExtraProps;

export const getAdminRealmsRealmOrganizationsOrgIdMembersMemberIdOrganizations = (
  variables: GetAdminRealmsRealmOrganizationsOrgIdMembersMemberIdOrganizationsVariables,
  signal?: AbortSignal
) =>
  fetch<
    GetAdminRealmsRealmOrganizationsOrgIdMembersMemberIdOrganizationsResponse,
    GetAdminRealmsRealmOrganizationsOrgIdMembersMemberIdOrganizationsError,
    undefined,
    {},
    GetAdminRealmsRealmOrganizationsOrgIdMembersMemberIdOrganizationsQueryParams,
    GetAdminRealmsRealmOrganizationsOrgIdMembersMemberIdOrganizationsPathParams
  >({
    url: '/admin/realms/{realm}/organizations/{orgId}/members/{memberId}/organizations',
    method: 'get',
    ...variables,
    signal
  });

export type PostAdminRealmsRealmPartialExportPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
};

export type PostAdminRealmsRealmPartialExportQueryParams = {
  exportClients?: boolean;
  exportGroupsAndRoles?: boolean;
};

export type PostAdminRealmsRealmPartialExportError = Fetcher.ErrorWrapper<undefined>;

export type PostAdminRealmsRealmPartialExportVariables = {
  pathParams: PostAdminRealmsRealmPartialExportPathParams;
  queryParams?: PostAdminRealmsRealmPartialExportQueryParams;
} & FetcherExtraProps;

export const postAdminRealmsRealmPartialExport = (
  variables: PostAdminRealmsRealmPartialExportVariables,
  signal?: AbortSignal
) =>
  fetch<
    Schemas.RealmRepresentation,
    PostAdminRealmsRealmPartialExportError,
    undefined,
    {},
    PostAdminRealmsRealmPartialExportQueryParams,
    PostAdminRealmsRealmPartialExportPathParams
  >({ url: '/admin/realms/{realm}/partial-export', method: 'post', ...variables, signal });

export type PostAdminRealmsRealmPartialImportPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
};

export type PostAdminRealmsRealmPartialImportError = Fetcher.ErrorWrapper<undefined>;

export type PostAdminRealmsRealmPartialImportVariables = {
  body?: Blob;
  pathParams: PostAdminRealmsRealmPartialImportPathParams;
} & FetcherExtraProps;

export const postAdminRealmsRealmPartialImport = (
  variables: PostAdminRealmsRealmPartialImportVariables,
  signal?: AbortSignal
) =>
  fetch<
    Record<string, any>,
    PostAdminRealmsRealmPartialImportError,
    Blob,
    {},
    {},
    PostAdminRealmsRealmPartialImportPathParams
  >({ url: '/admin/realms/{realm}/partialImport', method: 'post', ...variables, signal });

export type PostAdminRealmsRealmPushRevocationPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
};

export type PostAdminRealmsRealmPushRevocationError = Fetcher.ErrorWrapper<undefined>;

export type PostAdminRealmsRealmPushRevocationVariables = {
  pathParams: PostAdminRealmsRealmPushRevocationPathParams;
} & FetcherExtraProps;

export const postAdminRealmsRealmPushRevocation = (
  variables: PostAdminRealmsRealmPushRevocationVariables,
  signal?: AbortSignal
) =>
  fetch<
    Schemas.GlobalRequestResult,
    PostAdminRealmsRealmPushRevocationError,
    undefined,
    {},
    {},
    PostAdminRealmsRealmPushRevocationPathParams
  >({ url: '/admin/realms/{realm}/push-revocation', method: 'post', ...variables, signal });

export type GetAdminRealmsRealmRolesPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
};

export type GetAdminRealmsRealmRolesQueryParams = {
  /**
   * @default true
   */
  briefRepresentation?: boolean;
  /**
   * @format int32
   */
  first?: number;
  /**
   * @format int32
   */
  max?: number;
  /**
   * @default
   */
  search?: string;
};

export type GetAdminRealmsRealmRolesError = Fetcher.ErrorWrapper<undefined>;

export type GetAdminRealmsRealmRolesResponse = Schemas.RoleRepresentation[];

export type GetAdminRealmsRealmRolesVariables = {
  pathParams: GetAdminRealmsRealmRolesPathParams;
  queryParams?: GetAdminRealmsRealmRolesQueryParams;
} & FetcherExtraProps;

export const getAdminRealmsRealmRoles = (variables: GetAdminRealmsRealmRolesVariables, signal?: AbortSignal) =>
  fetch<
    GetAdminRealmsRealmRolesResponse,
    GetAdminRealmsRealmRolesError,
    undefined,
    {},
    GetAdminRealmsRealmRolesQueryParams,
    GetAdminRealmsRealmRolesPathParams
  >({ url: '/admin/realms/{realm}/roles', method: 'get', ...variables, signal });

export type PostAdminRealmsRealmRolesPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
};

export type PostAdminRealmsRealmRolesError = Fetcher.ErrorWrapper<undefined>;

export type PostAdminRealmsRealmRolesVariables = {
  body?: Schemas.RoleRepresentation;
  pathParams: PostAdminRealmsRealmRolesPathParams;
} & FetcherExtraProps;

export const postAdminRealmsRealmRoles = (variables: PostAdminRealmsRealmRolesVariables, signal?: AbortSignal) =>
  fetch<
    undefined,
    PostAdminRealmsRealmRolesError,
    Schemas.RoleRepresentation,
    {},
    {},
    PostAdminRealmsRealmRolesPathParams
  >({ url: '/admin/realms/{realm}/roles', method: 'post', ...variables, signal });

export type GetAdminRealmsRealmRolesByIdRoleIdPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  /**
   * id of role
   */
  roleId: string;
};

export type GetAdminRealmsRealmRolesByIdRoleIdError = Fetcher.ErrorWrapper<undefined>;

export type GetAdminRealmsRealmRolesByIdRoleIdVariables = {
  pathParams: GetAdminRealmsRealmRolesByIdRoleIdPathParams;
} & FetcherExtraProps;

export const getAdminRealmsRealmRolesByIdRoleId = (
  variables: GetAdminRealmsRealmRolesByIdRoleIdVariables,
  signal?: AbortSignal
) =>
  fetch<
    Schemas.RoleRepresentation,
    GetAdminRealmsRealmRolesByIdRoleIdError,
    undefined,
    {},
    {},
    GetAdminRealmsRealmRolesByIdRoleIdPathParams
  >({ url: '/admin/realms/{realm}/roles-by-id/{roleId}', method: 'get', ...variables, signal });

export type PutAdminRealmsRealmRolesByIdRoleIdPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  /**
   * id of role
   */
  roleId: string;
};

export type PutAdminRealmsRealmRolesByIdRoleIdError = Fetcher.ErrorWrapper<undefined>;

export type PutAdminRealmsRealmRolesByIdRoleIdVariables = {
  body?: Schemas.RoleRepresentation;
  pathParams: PutAdminRealmsRealmRolesByIdRoleIdPathParams;
} & FetcherExtraProps;

export const putAdminRealmsRealmRolesByIdRoleId = (
  variables: PutAdminRealmsRealmRolesByIdRoleIdVariables,
  signal?: AbortSignal
) =>
  fetch<
    undefined,
    PutAdminRealmsRealmRolesByIdRoleIdError,
    Schemas.RoleRepresentation,
    {},
    {},
    PutAdminRealmsRealmRolesByIdRoleIdPathParams
  >({ url: '/admin/realms/{realm}/roles-by-id/{roleId}', method: 'put', ...variables, signal });

export type DeleteAdminRealmsRealmRolesByIdRoleIdPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  /**
   * id of role
   */
  roleId: string;
};

export type DeleteAdminRealmsRealmRolesByIdRoleIdError = Fetcher.ErrorWrapper<undefined>;

export type DeleteAdminRealmsRealmRolesByIdRoleIdVariables = {
  pathParams: DeleteAdminRealmsRealmRolesByIdRoleIdPathParams;
} & FetcherExtraProps;

export const deleteAdminRealmsRealmRolesByIdRoleId = (
  variables: DeleteAdminRealmsRealmRolesByIdRoleIdVariables,
  signal?: AbortSignal
) =>
  fetch<
    undefined,
    DeleteAdminRealmsRealmRolesByIdRoleIdError,
    undefined,
    {},
    {},
    DeleteAdminRealmsRealmRolesByIdRoleIdPathParams
  >({ url: '/admin/realms/{realm}/roles-by-id/{roleId}', method: 'delete', ...variables, signal });

export type GetAdminRealmsRealmRolesByIdRoleIdCompositesPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  roleId: string;
};

export type GetAdminRealmsRealmRolesByIdRoleIdCompositesQueryParams = {
  /**
   * @format int32
   */
  first?: number;
  /**
   * @format int32
   */
  max?: number;
  search?: string;
};

export type GetAdminRealmsRealmRolesByIdRoleIdCompositesError = Fetcher.ErrorWrapper<undefined>;

export type GetAdminRealmsRealmRolesByIdRoleIdCompositesResponse = Schemas.RoleRepresentation[];

export type GetAdminRealmsRealmRolesByIdRoleIdCompositesVariables = {
  pathParams: GetAdminRealmsRealmRolesByIdRoleIdCompositesPathParams;
  queryParams?: GetAdminRealmsRealmRolesByIdRoleIdCompositesQueryParams;
} & FetcherExtraProps;

export const getAdminRealmsRealmRolesByIdRoleIdComposites = (
  variables: GetAdminRealmsRealmRolesByIdRoleIdCompositesVariables,
  signal?: AbortSignal
) =>
  fetch<
    GetAdminRealmsRealmRolesByIdRoleIdCompositesResponse,
    GetAdminRealmsRealmRolesByIdRoleIdCompositesError,
    undefined,
    {},
    GetAdminRealmsRealmRolesByIdRoleIdCompositesQueryParams,
    GetAdminRealmsRealmRolesByIdRoleIdCompositesPathParams
  >({ url: '/admin/realms/{realm}/roles-by-id/{roleId}/composites', method: 'get', ...variables, signal });

export type PostAdminRealmsRealmRolesByIdRoleIdCompositesPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  roleId: string;
};

export type PostAdminRealmsRealmRolesByIdRoleIdCompositesError = Fetcher.ErrorWrapper<undefined>;

export type PostAdminRealmsRealmRolesByIdRoleIdCompositesRequestBody = Schemas.RoleRepresentation[];

export type PostAdminRealmsRealmRolesByIdRoleIdCompositesVariables = {
  body?: PostAdminRealmsRealmRolesByIdRoleIdCompositesRequestBody;
  pathParams: PostAdminRealmsRealmRolesByIdRoleIdCompositesPathParams;
} & FetcherExtraProps;

export const postAdminRealmsRealmRolesByIdRoleIdComposites = (
  variables: PostAdminRealmsRealmRolesByIdRoleIdCompositesVariables,
  signal?: AbortSignal
) =>
  fetch<
    undefined,
    PostAdminRealmsRealmRolesByIdRoleIdCompositesError,
    PostAdminRealmsRealmRolesByIdRoleIdCompositesRequestBody,
    {},
    {},
    PostAdminRealmsRealmRolesByIdRoleIdCompositesPathParams
  >({ url: '/admin/realms/{realm}/roles-by-id/{roleId}/composites', method: 'post', ...variables, signal });

export type DeleteAdminRealmsRealmRolesByIdRoleIdCompositesPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  /**
   * Role id
   */
  roleId: string;
};

export type DeleteAdminRealmsRealmRolesByIdRoleIdCompositesError = Fetcher.ErrorWrapper<undefined>;

export type DeleteAdminRealmsRealmRolesByIdRoleIdCompositesRequestBody = Schemas.RoleRepresentation[];

export type DeleteAdminRealmsRealmRolesByIdRoleIdCompositesVariables = {
  body?: DeleteAdminRealmsRealmRolesByIdRoleIdCompositesRequestBody;
  pathParams: DeleteAdminRealmsRealmRolesByIdRoleIdCompositesPathParams;
} & FetcherExtraProps;

export const deleteAdminRealmsRealmRolesByIdRoleIdComposites = (
  variables: DeleteAdminRealmsRealmRolesByIdRoleIdCompositesVariables,
  signal?: AbortSignal
) =>
  fetch<
    undefined,
    DeleteAdminRealmsRealmRolesByIdRoleIdCompositesError,
    DeleteAdminRealmsRealmRolesByIdRoleIdCompositesRequestBody,
    {},
    {},
    DeleteAdminRealmsRealmRolesByIdRoleIdCompositesPathParams
  >({ url: '/admin/realms/{realm}/roles-by-id/{roleId}/composites', method: 'delete', ...variables, signal });

export type GetAdminRealmsRealmRolesByIdRoleIdCompositesClientsClientUuidPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  clientUuid: string;
  roleId: string;
};

export type GetAdminRealmsRealmRolesByIdRoleIdCompositesClientsClientUuidError = Fetcher.ErrorWrapper<undefined>;

export type GetAdminRealmsRealmRolesByIdRoleIdCompositesClientsClientUuidResponse = Schemas.RoleRepresentation[];

export type GetAdminRealmsRealmRolesByIdRoleIdCompositesClientsClientUuidVariables = {
  pathParams: GetAdminRealmsRealmRolesByIdRoleIdCompositesClientsClientUuidPathParams;
} & FetcherExtraProps;

export const getAdminRealmsRealmRolesByIdRoleIdCompositesClientsClientUuid = (
  variables: GetAdminRealmsRealmRolesByIdRoleIdCompositesClientsClientUuidVariables,
  signal?: AbortSignal
) =>
  fetch<
    GetAdminRealmsRealmRolesByIdRoleIdCompositesClientsClientUuidResponse,
    GetAdminRealmsRealmRolesByIdRoleIdCompositesClientsClientUuidError,
    undefined,
    {},
    {},
    GetAdminRealmsRealmRolesByIdRoleIdCompositesClientsClientUuidPathParams
  >({
    url: '/admin/realms/{realm}/roles-by-id/{roleId}/composites/clients/{clientUuid}',
    method: 'get',
    ...variables,
    signal
  });

export type GetAdminRealmsRealmRolesByIdRoleIdCompositesRealmPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  roleId: string;
};

export type GetAdminRealmsRealmRolesByIdRoleIdCompositesRealmError = Fetcher.ErrorWrapper<undefined>;

export type GetAdminRealmsRealmRolesByIdRoleIdCompositesRealmResponse = Schemas.RoleRepresentation[];

export type GetAdminRealmsRealmRolesByIdRoleIdCompositesRealmVariables = {
  pathParams: GetAdminRealmsRealmRolesByIdRoleIdCompositesRealmPathParams;
} & FetcherExtraProps;

export const getAdminRealmsRealmRolesByIdRoleIdCompositesRealm = (
  variables: GetAdminRealmsRealmRolesByIdRoleIdCompositesRealmVariables,
  signal?: AbortSignal
) =>
  fetch<
    GetAdminRealmsRealmRolesByIdRoleIdCompositesRealmResponse,
    GetAdminRealmsRealmRolesByIdRoleIdCompositesRealmError,
    undefined,
    {},
    {},
    GetAdminRealmsRealmRolesByIdRoleIdCompositesRealmPathParams
  >({ url: '/admin/realms/{realm}/roles-by-id/{roleId}/composites/realm', method: 'get', ...variables, signal });

export type GetAdminRealmsRealmRolesByIdRoleIdManagementPermissionsPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  roleId: string;
};

export type GetAdminRealmsRealmRolesByIdRoleIdManagementPermissionsError = Fetcher.ErrorWrapper<undefined>;

export type GetAdminRealmsRealmRolesByIdRoleIdManagementPermissionsVariables = {
  pathParams: GetAdminRealmsRealmRolesByIdRoleIdManagementPermissionsPathParams;
} & FetcherExtraProps;

export const getAdminRealmsRealmRolesByIdRoleIdManagementPermissions = (
  variables: GetAdminRealmsRealmRolesByIdRoleIdManagementPermissionsVariables,
  signal?: AbortSignal
) =>
  fetch<
    Schemas.ManagementPermissionReference,
    GetAdminRealmsRealmRolesByIdRoleIdManagementPermissionsError,
    undefined,
    {},
    {},
    GetAdminRealmsRealmRolesByIdRoleIdManagementPermissionsPathParams
  >({ url: '/admin/realms/{realm}/roles-by-id/{roleId}/management/permissions', method: 'get', ...variables, signal });

export type PutAdminRealmsRealmRolesByIdRoleIdManagementPermissionsPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  roleId: string;
};

export type PutAdminRealmsRealmRolesByIdRoleIdManagementPermissionsError = Fetcher.ErrorWrapper<undefined>;

export type PutAdminRealmsRealmRolesByIdRoleIdManagementPermissionsVariables = {
  body?: Schemas.ManagementPermissionReference;
  pathParams: PutAdminRealmsRealmRolesByIdRoleIdManagementPermissionsPathParams;
} & FetcherExtraProps;

export const putAdminRealmsRealmRolesByIdRoleIdManagementPermissions = (
  variables: PutAdminRealmsRealmRolesByIdRoleIdManagementPermissionsVariables,
  signal?: AbortSignal
) =>
  fetch<
    Schemas.ManagementPermissionReference,
    PutAdminRealmsRealmRolesByIdRoleIdManagementPermissionsError,
    Schemas.ManagementPermissionReference,
    {},
    {},
    PutAdminRealmsRealmRolesByIdRoleIdManagementPermissionsPathParams
  >({ url: '/admin/realms/{realm}/roles-by-id/{roleId}/management/permissions', method: 'put', ...variables, signal });

export type GetAdminRealmsRealmRolesRoleNamePathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  /**
   * role's name (not id!)
   */
  roleName: string;
};

export type GetAdminRealmsRealmRolesRoleNameError = Fetcher.ErrorWrapper<undefined>;

export type GetAdminRealmsRealmRolesRoleNameVariables = {
  pathParams: GetAdminRealmsRealmRolesRoleNamePathParams;
} & FetcherExtraProps;

export const getAdminRealmsRealmRolesRoleName = (
  variables: GetAdminRealmsRealmRolesRoleNameVariables,
  signal?: AbortSignal
) =>
  fetch<
    Schemas.RoleRepresentation,
    GetAdminRealmsRealmRolesRoleNameError,
    undefined,
    {},
    {},
    GetAdminRealmsRealmRolesRoleNamePathParams
  >({ url: '/admin/realms/{realm}/roles/{roleName}', method: 'get', ...variables, signal });

export type PutAdminRealmsRealmRolesRoleNamePathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  /**
   * role's name (not id!)
   */
  roleName: string;
};

export type PutAdminRealmsRealmRolesRoleNameError = Fetcher.ErrorWrapper<undefined>;

export type PutAdminRealmsRealmRolesRoleNameVariables = {
  body?: Schemas.RoleRepresentation;
  pathParams: PutAdminRealmsRealmRolesRoleNamePathParams;
} & FetcherExtraProps;

export const putAdminRealmsRealmRolesRoleName = (
  variables: PutAdminRealmsRealmRolesRoleNameVariables,
  signal?: AbortSignal
) =>
  fetch<
    undefined,
    PutAdminRealmsRealmRolesRoleNameError,
    Schemas.RoleRepresentation,
    {},
    {},
    PutAdminRealmsRealmRolesRoleNamePathParams
  >({ url: '/admin/realms/{realm}/roles/{roleName}', method: 'put', ...variables, signal });

export type DeleteAdminRealmsRealmRolesRoleNamePathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  /**
   * role's name (not id!)
   */
  roleName: string;
};

export type DeleteAdminRealmsRealmRolesRoleNameError = Fetcher.ErrorWrapper<undefined>;

export type DeleteAdminRealmsRealmRolesRoleNameVariables = {
  pathParams: DeleteAdminRealmsRealmRolesRoleNamePathParams;
} & FetcherExtraProps;

export const deleteAdminRealmsRealmRolesRoleName = (
  variables: DeleteAdminRealmsRealmRolesRoleNameVariables,
  signal?: AbortSignal
) =>
  fetch<
    undefined,
    DeleteAdminRealmsRealmRolesRoleNameError,
    undefined,
    {},
    {},
    DeleteAdminRealmsRealmRolesRoleNamePathParams
  >({ url: '/admin/realms/{realm}/roles/{roleName}', method: 'delete', ...variables, signal });

export type GetAdminRealmsRealmRolesRoleNameCompositesPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  /**
   * role's name (not id!)
   */
  roleName: string;
};

export type GetAdminRealmsRealmRolesRoleNameCompositesError = Fetcher.ErrorWrapper<undefined>;

export type GetAdminRealmsRealmRolesRoleNameCompositesResponse = Schemas.RoleRepresentation[];

export type GetAdminRealmsRealmRolesRoleNameCompositesVariables = {
  pathParams: GetAdminRealmsRealmRolesRoleNameCompositesPathParams;
} & FetcherExtraProps;

export const getAdminRealmsRealmRolesRoleNameComposites = (
  variables: GetAdminRealmsRealmRolesRoleNameCompositesVariables,
  signal?: AbortSignal
) =>
  fetch<
    GetAdminRealmsRealmRolesRoleNameCompositesResponse,
    GetAdminRealmsRealmRolesRoleNameCompositesError,
    undefined,
    {},
    {},
    GetAdminRealmsRealmRolesRoleNameCompositesPathParams
  >({ url: '/admin/realms/{realm}/roles/{roleName}/composites', method: 'get', ...variables, signal });

export type PostAdminRealmsRealmRolesRoleNameCompositesPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  /**
   * role's name (not id!)
   */
  roleName: string;
};

export type PostAdminRealmsRealmRolesRoleNameCompositesError = Fetcher.ErrorWrapper<undefined>;

export type PostAdminRealmsRealmRolesRoleNameCompositesRequestBody = Schemas.RoleRepresentation[];

export type PostAdminRealmsRealmRolesRoleNameCompositesVariables = {
  body?: PostAdminRealmsRealmRolesRoleNameCompositesRequestBody;
  pathParams: PostAdminRealmsRealmRolesRoleNameCompositesPathParams;
} & FetcherExtraProps;

export const postAdminRealmsRealmRolesRoleNameComposites = (
  variables: PostAdminRealmsRealmRolesRoleNameCompositesVariables,
  signal?: AbortSignal
) =>
  fetch<
    undefined,
    PostAdminRealmsRealmRolesRoleNameCompositesError,
    PostAdminRealmsRealmRolesRoleNameCompositesRequestBody,
    {},
    {},
    PostAdminRealmsRealmRolesRoleNameCompositesPathParams
  >({ url: '/admin/realms/{realm}/roles/{roleName}/composites', method: 'post', ...variables, signal });

export type DeleteAdminRealmsRealmRolesRoleNameCompositesPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  /**
   * role's name (not id!)
   */
  roleName: string;
};

export type DeleteAdminRealmsRealmRolesRoleNameCompositesError = Fetcher.ErrorWrapper<undefined>;

export type DeleteAdminRealmsRealmRolesRoleNameCompositesRequestBody = Schemas.RoleRepresentation[];

export type DeleteAdminRealmsRealmRolesRoleNameCompositesVariables = {
  body?: DeleteAdminRealmsRealmRolesRoleNameCompositesRequestBody;
  pathParams: DeleteAdminRealmsRealmRolesRoleNameCompositesPathParams;
} & FetcherExtraProps;

export const deleteAdminRealmsRealmRolesRoleNameComposites = (
  variables: DeleteAdminRealmsRealmRolesRoleNameCompositesVariables,
  signal?: AbortSignal
) =>
  fetch<
    undefined,
    DeleteAdminRealmsRealmRolesRoleNameCompositesError,
    DeleteAdminRealmsRealmRolesRoleNameCompositesRequestBody,
    {},
    {},
    DeleteAdminRealmsRealmRolesRoleNameCompositesPathParams
  >({ url: '/admin/realms/{realm}/roles/{roleName}/composites', method: 'delete', ...variables, signal });

export type GetAdminRealmsRealmRolesRoleNameCompositesClientsClientUuidPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  clientUuid: string;
  /**
   * role's name (not id!)
   */
  roleName: string;
};

export type GetAdminRealmsRealmRolesRoleNameCompositesClientsClientUuidError = Fetcher.ErrorWrapper<undefined>;

export type GetAdminRealmsRealmRolesRoleNameCompositesClientsClientUuidResponse = Schemas.RoleRepresentation[];

export type GetAdminRealmsRealmRolesRoleNameCompositesClientsClientUuidVariables = {
  pathParams: GetAdminRealmsRealmRolesRoleNameCompositesClientsClientUuidPathParams;
} & FetcherExtraProps;

export const getAdminRealmsRealmRolesRoleNameCompositesClientsClientUuid = (
  variables: GetAdminRealmsRealmRolesRoleNameCompositesClientsClientUuidVariables,
  signal?: AbortSignal
) =>
  fetch<
    GetAdminRealmsRealmRolesRoleNameCompositesClientsClientUuidResponse,
    GetAdminRealmsRealmRolesRoleNameCompositesClientsClientUuidError,
    undefined,
    {},
    {},
    GetAdminRealmsRealmRolesRoleNameCompositesClientsClientUuidPathParams
  >({
    url: '/admin/realms/{realm}/roles/{roleName}/composites/clients/{clientUuid}',
    method: 'get',
    ...variables,
    signal
  });

export type GetAdminRealmsRealmRolesRoleNameCompositesRealmPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  /**
   * role's name (not id!)
   */
  roleName: string;
};

export type GetAdminRealmsRealmRolesRoleNameCompositesRealmError = Fetcher.ErrorWrapper<undefined>;

export type GetAdminRealmsRealmRolesRoleNameCompositesRealmResponse = Schemas.RoleRepresentation[];

export type GetAdminRealmsRealmRolesRoleNameCompositesRealmVariables = {
  pathParams: GetAdminRealmsRealmRolesRoleNameCompositesRealmPathParams;
} & FetcherExtraProps;

export const getAdminRealmsRealmRolesRoleNameCompositesRealm = (
  variables: GetAdminRealmsRealmRolesRoleNameCompositesRealmVariables,
  signal?: AbortSignal
) =>
  fetch<
    GetAdminRealmsRealmRolesRoleNameCompositesRealmResponse,
    GetAdminRealmsRealmRolesRoleNameCompositesRealmError,
    undefined,
    {},
    {},
    GetAdminRealmsRealmRolesRoleNameCompositesRealmPathParams
  >({ url: '/admin/realms/{realm}/roles/{roleName}/composites/realm', method: 'get', ...variables, signal });

export type GetAdminRealmsRealmRolesRoleNameGroupsPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  /**
   * the role name.
   */
  roleName: string;
};

export type GetAdminRealmsRealmRolesRoleNameGroupsQueryParams = {
  /**
   * if false, return a full representation of the {@code GroupRepresentation} objects.
   *
   * @default true
   */
  briefRepresentation?: boolean;
  /**
   * first result to return. Ignored if negative or {@code null}.
   *
   * @format int32
   */
  first?: number;
  /**
   * maximum number of results to return. Ignored if negative or {@code null}.
   *
   * @format int32
   */
  max?: number;
};

export type GetAdminRealmsRealmRolesRoleNameGroupsError = Fetcher.ErrorWrapper<undefined>;

export type GetAdminRealmsRealmRolesRoleNameGroupsResponse = Schemas.UserRepresentation[];

export type GetAdminRealmsRealmRolesRoleNameGroupsVariables = {
  pathParams: GetAdminRealmsRealmRolesRoleNameGroupsPathParams;
  queryParams?: GetAdminRealmsRealmRolesRoleNameGroupsQueryParams;
} & FetcherExtraProps;

export const getAdminRealmsRealmRolesRoleNameGroups = (
  variables: GetAdminRealmsRealmRolesRoleNameGroupsVariables,
  signal?: AbortSignal
) =>
  fetch<
    GetAdminRealmsRealmRolesRoleNameGroupsResponse,
    GetAdminRealmsRealmRolesRoleNameGroupsError,
    undefined,
    {},
    GetAdminRealmsRealmRolesRoleNameGroupsQueryParams,
    GetAdminRealmsRealmRolesRoleNameGroupsPathParams
  >({ url: '/admin/realms/{realm}/roles/{roleName}/groups', method: 'get', ...variables, signal });

export type GetAdminRealmsRealmRolesRoleNameManagementPermissionsPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  roleName: string;
};

export type GetAdminRealmsRealmRolesRoleNameManagementPermissionsError = Fetcher.ErrorWrapper<undefined>;

export type GetAdminRealmsRealmRolesRoleNameManagementPermissionsVariables = {
  pathParams: GetAdminRealmsRealmRolesRoleNameManagementPermissionsPathParams;
} & FetcherExtraProps;

export const getAdminRealmsRealmRolesRoleNameManagementPermissions = (
  variables: GetAdminRealmsRealmRolesRoleNameManagementPermissionsVariables,
  signal?: AbortSignal
) =>
  fetch<
    Schemas.ManagementPermissionReference,
    GetAdminRealmsRealmRolesRoleNameManagementPermissionsError,
    undefined,
    {},
    {},
    GetAdminRealmsRealmRolesRoleNameManagementPermissionsPathParams
  >({ url: '/admin/realms/{realm}/roles/{roleName}/management/permissions', method: 'get', ...variables, signal });

export type PutAdminRealmsRealmRolesRoleNameManagementPermissionsPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  roleName: string;
};

export type PutAdminRealmsRealmRolesRoleNameManagementPermissionsError = Fetcher.ErrorWrapper<undefined>;

export type PutAdminRealmsRealmRolesRoleNameManagementPermissionsVariables = {
  body?: Schemas.ManagementPermissionReference;
  pathParams: PutAdminRealmsRealmRolesRoleNameManagementPermissionsPathParams;
} & FetcherExtraProps;

export const putAdminRealmsRealmRolesRoleNameManagementPermissions = (
  variables: PutAdminRealmsRealmRolesRoleNameManagementPermissionsVariables,
  signal?: AbortSignal
) =>
  fetch<
    Schemas.ManagementPermissionReference,
    PutAdminRealmsRealmRolesRoleNameManagementPermissionsError,
    Schemas.ManagementPermissionReference,
    {},
    {},
    PutAdminRealmsRealmRolesRoleNameManagementPermissionsPathParams
  >({ url: '/admin/realms/{realm}/roles/{roleName}/management/permissions', method: 'put', ...variables, signal });

export type GetAdminRealmsRealmRolesRoleNameUsersPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  /**
   * the role name.
   */
  roleName: string;
};

export type GetAdminRealmsRealmRolesRoleNameUsersQueryParams = {
  /**
   * Boolean which defines whether brief representations are returned (default: false)
   */
  briefRepresentation?: boolean;
  /**
   * first result to return. Ignored if negative or {@code null}.
   *
   * @format int32
   */
  first?: number;
  /**
   * maximum number of results to return. Ignored if negative or {@code null}.
   *
   * @format int32
   */
  max?: number;
};

export type GetAdminRealmsRealmRolesRoleNameUsersError = Fetcher.ErrorWrapper<undefined>;

export type GetAdminRealmsRealmRolesRoleNameUsersResponse = Schemas.UserRepresentation[];

export type GetAdminRealmsRealmRolesRoleNameUsersVariables = {
  pathParams: GetAdminRealmsRealmRolesRoleNameUsersPathParams;
  queryParams?: GetAdminRealmsRealmRolesRoleNameUsersQueryParams;
} & FetcherExtraProps;

export const getAdminRealmsRealmRolesRoleNameUsers = (
  variables: GetAdminRealmsRealmRolesRoleNameUsersVariables,
  signal?: AbortSignal
) =>
  fetch<
    GetAdminRealmsRealmRolesRoleNameUsersResponse,
    GetAdminRealmsRealmRolesRoleNameUsersError,
    undefined,
    {},
    GetAdminRealmsRealmRolesRoleNameUsersQueryParams,
    GetAdminRealmsRealmRolesRoleNameUsersPathParams
  >({ url: '/admin/realms/{realm}/roles/{roleName}/users', method: 'get', ...variables, signal });

export type DeleteAdminRealmsRealmSessionsSessionPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  session: string;
};

export type DeleteAdminRealmsRealmSessionsSessionQueryParams = {
  /**
   * @default false
   */
  isOffline?: boolean;
};

export type DeleteAdminRealmsRealmSessionsSessionError = Fetcher.ErrorWrapper<undefined>;

export type DeleteAdminRealmsRealmSessionsSessionVariables = {
  pathParams: DeleteAdminRealmsRealmSessionsSessionPathParams;
  queryParams?: DeleteAdminRealmsRealmSessionsSessionQueryParams;
} & FetcherExtraProps;

/**
 * Any client that has an admin url will also be told to invalidate this particular session.
 */
export const deleteAdminRealmsRealmSessionsSession = (
  variables: DeleteAdminRealmsRealmSessionsSessionVariables,
  signal?: AbortSignal
) =>
  fetch<
    undefined,
    DeleteAdminRealmsRealmSessionsSessionError,
    undefined,
    {},
    DeleteAdminRealmsRealmSessionsSessionQueryParams,
    DeleteAdminRealmsRealmSessionsSessionPathParams
  >({ url: '/admin/realms/{realm}/sessions/{session}', method: 'delete', ...variables, signal });

export type PostAdminRealmsRealmTestSMTPConnectionPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
};

export type PostAdminRealmsRealmTestSMTPConnectionError = Fetcher.ErrorWrapper<undefined>;

export type PostAdminRealmsRealmTestSMTPConnectionRequestBody = {
  [key: string]: string;
};

export type PostAdminRealmsRealmTestSMTPConnectionVariables = {
  body?: PostAdminRealmsRealmTestSMTPConnectionRequestBody;
  pathParams: PostAdminRealmsRealmTestSMTPConnectionPathParams;
} & FetcherExtraProps;

export const postAdminRealmsRealmTestSMTPConnection = (
  variables: PostAdminRealmsRealmTestSMTPConnectionVariables,
  signal?: AbortSignal
) =>
  fetch<
    undefined,
    PostAdminRealmsRealmTestSMTPConnectionError,
    PostAdminRealmsRealmTestSMTPConnectionRequestBody,
    {},
    {},
    PostAdminRealmsRealmTestSMTPConnectionPathParams
  >({ url: '/admin/realms/{realm}/testSMTPConnection', method: 'post', ...variables, signal });

export type GetAdminRealmsRealmUsersPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
};

export type GetAdminRealmsRealmUsersQueryParams = {
  /**
   * Boolean which defines whether brief representations are returned (default: false)
   */
  briefRepresentation?: boolean;
  /**
   * A String contained in email, or the complete email, if param "exact" is true
   */
  email?: string;
  /**
   * whether the email has been verified
   */
  emailVerified?: boolean;
  /**
   * Boolean representing if user is enabled or not
   */
  enabled?: boolean;
  /**
   * Boolean which defines whether the params "last", "first", "email" and "username" must match exactly
   */
  exact?: boolean;
  /**
   * Pagination offset
   *
   * @format int32
   */
  first?: number;
  /**
   * A String contained in firstName, or the complete firstName, if param "exact" is true
   */
  firstName?: string;
  /**
   * The alias of an Identity Provider linked to the user
   */
  idpAlias?: string;
  /**
   * The userId at an Identity Provider linked to the user
   */
  idpUserId?: string;
  /**
   * A String contained in lastName, or the complete lastName, if param "exact" is true
   */
  lastName?: string;
  /**
   * Maximum results size (defaults to 100)
   *
   * @format int32
   */
  max?: number;
  /**
   * A query to search for custom attributes, in the format 'key1:value2 key2:value2'
   */
  q?: string;
  /**
   * A String contained in username, first or last name, or email. Default search behavior is prefix-based (e.g., foo or foo*). Use *foo* for infix search and "foo" for exact search.
   */
  search?: string;
  /**
   * A String contained in username, or the complete username, if param "exact" is true
   */
  username?: string;
};

export type GetAdminRealmsRealmUsersError = Fetcher.ErrorWrapper<undefined>;

export type GetAdminRealmsRealmUsersResponse = Schemas.UserRepresentation[];

export type GetAdminRealmsRealmUsersVariables = {
  pathParams: GetAdminRealmsRealmUsersPathParams;
  queryParams?: GetAdminRealmsRealmUsersQueryParams;
} & FetcherExtraProps;

export const getAdminRealmsRealmUsers = (variables: GetAdminRealmsRealmUsersVariables, signal?: AbortSignal) =>
  fetch<
    GetAdminRealmsRealmUsersResponse,
    GetAdminRealmsRealmUsersError,
    undefined,
    {},
    GetAdminRealmsRealmUsersQueryParams,
    GetAdminRealmsRealmUsersPathParams
  >({ url: '/admin/realms/{realm}/users', method: 'get', ...variables, signal });

export type PostAdminRealmsRealmUsersPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
};

export type PostAdminRealmsRealmUsersError = Fetcher.ErrorWrapper<undefined>;

export type PostAdminRealmsRealmUsersVariables = {
  body?: Schemas.UserRepresentation;
  pathParams: PostAdminRealmsRealmUsersPathParams;
} & FetcherExtraProps;

export const postAdminRealmsRealmUsers = (variables: PostAdminRealmsRealmUsersVariables, signal?: AbortSignal) =>
  fetch<
    undefined,
    PostAdminRealmsRealmUsersError,
    Schemas.UserRepresentation,
    {},
    {},
    PostAdminRealmsRealmUsersPathParams
  >({ url: '/admin/realms/{realm}/users', method: 'post', ...variables, signal });

export type GetAdminRealmsRealmUsersManagementPermissionsPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
};

export type GetAdminRealmsRealmUsersManagementPermissionsError = Fetcher.ErrorWrapper<undefined>;

export type GetAdminRealmsRealmUsersManagementPermissionsVariables = {
  pathParams: GetAdminRealmsRealmUsersManagementPermissionsPathParams;
} & FetcherExtraProps;

export const getAdminRealmsRealmUsersManagementPermissions = (
  variables: GetAdminRealmsRealmUsersManagementPermissionsVariables,
  signal?: AbortSignal
) =>
  fetch<
    Schemas.ManagementPermissionReference,
    GetAdminRealmsRealmUsersManagementPermissionsError,
    undefined,
    {},
    {},
    GetAdminRealmsRealmUsersManagementPermissionsPathParams
  >({ url: '/admin/realms/{realm}/users-management-permissions', method: 'get', ...variables, signal });

export type PutAdminRealmsRealmUsersManagementPermissionsPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
};

export type PutAdminRealmsRealmUsersManagementPermissionsError = Fetcher.ErrorWrapper<undefined>;

export type PutAdminRealmsRealmUsersManagementPermissionsVariables = {
  body?: Schemas.ManagementPermissionReference;
  pathParams: PutAdminRealmsRealmUsersManagementPermissionsPathParams;
} & FetcherExtraProps;

export const putAdminRealmsRealmUsersManagementPermissions = (
  variables: PutAdminRealmsRealmUsersManagementPermissionsVariables,
  signal?: AbortSignal
) =>
  fetch<
    Schemas.ManagementPermissionReference,
    PutAdminRealmsRealmUsersManagementPermissionsError,
    Schemas.ManagementPermissionReference,
    {},
    {},
    PutAdminRealmsRealmUsersManagementPermissionsPathParams
  >({ url: '/admin/realms/{realm}/users-management-permissions', method: 'put', ...variables, signal });

export type GetAdminRealmsRealmUsersCountPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
};

export type GetAdminRealmsRealmUsersCountQueryParams = {
  /**
   * email filter
   */
  email?: string;
  emailVerified?: boolean;
  /**
   * Boolean representing if user is enabled or not
   */
  enabled?: boolean;
  /**
   * first name filter
   */
  firstName?: string;
  /**
   * last name filter
   */
  lastName?: string;
  q?: string;
  /**
   * arbitrary search string for all the fields below. Default search behavior is prefix-based (e.g., foo or foo*). Use *foo* for infix search and "foo" for exact search.
   */
  search?: string;
  /**
   * username filter
   */
  username?: string;
};

export type GetAdminRealmsRealmUsersCountError = Fetcher.ErrorWrapper<undefined>;

export type GetAdminRealmsRealmUsersCountVariables = {
  pathParams: GetAdminRealmsRealmUsersCountPathParams;
  queryParams?: GetAdminRealmsRealmUsersCountQueryParams;
} & FetcherExtraProps;

/**
 * It can be called in three different ways. 1. Don’t specify any criteria and pass {@code null}. The number of all users within that realm will be returned. <p> 2. If {@code search} is specified other criteria such as {@code last} will be ignored even though you set them. The {@code search} string will be matched against the first and last name, the username and the email of a user. <p> 3. If {@code search} is unspecified but any of {@code last}, {@code first}, {@code email} or {@code username} those criteria are matched against their respective fields on a user entity. Combined with a logical and.
 */
export const getAdminRealmsRealmUsersCount = (
  variables: GetAdminRealmsRealmUsersCountVariables,
  signal?: AbortSignal
) =>
  fetch<
    number,
    GetAdminRealmsRealmUsersCountError,
    undefined,
    {},
    GetAdminRealmsRealmUsersCountQueryParams,
    GetAdminRealmsRealmUsersCountPathParams
  >({ url: '/admin/realms/{realm}/users/count', method: 'get', ...variables, signal });

export type GetAdminRealmsRealmUsersProfilePathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
};

export type GetAdminRealmsRealmUsersProfileError = Fetcher.ErrorWrapper<undefined>;

export type GetAdminRealmsRealmUsersProfileVariables = {
  pathParams: GetAdminRealmsRealmUsersProfilePathParams;
} & FetcherExtraProps;

/**
 * Get the configuration for the user profile
 */
export const getAdminRealmsRealmUsersProfile = (
  variables: GetAdminRealmsRealmUsersProfileVariables,
  signal?: AbortSignal
) =>
  fetch<
    Schemas.UPConfig,
    GetAdminRealmsRealmUsersProfileError,
    undefined,
    {},
    {},
    GetAdminRealmsRealmUsersProfilePathParams
  >({ url: '/admin/realms/{realm}/users/profile', method: 'get', ...variables, signal });

export type PutAdminRealmsRealmUsersProfilePathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
};

export type PutAdminRealmsRealmUsersProfileError = Fetcher.ErrorWrapper<undefined>;

export type PutAdminRealmsRealmUsersProfileVariables = {
  body?: Schemas.UPConfig;
  pathParams: PutAdminRealmsRealmUsersProfilePathParams;
} & FetcherExtraProps;

/**
 * Set the configuration for the user profile
 */
export const putAdminRealmsRealmUsersProfile = (
  variables: PutAdminRealmsRealmUsersProfileVariables,
  signal?: AbortSignal
) =>
  fetch<
    Schemas.UPConfig,
    PutAdminRealmsRealmUsersProfileError,
    Schemas.UPConfig,
    {},
    {},
    PutAdminRealmsRealmUsersProfilePathParams
  >({ url: '/admin/realms/{realm}/users/profile', method: 'put', ...variables, signal });

export type GetAdminRealmsRealmUsersProfileMetadataPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
};

export type GetAdminRealmsRealmUsersProfileMetadataError = Fetcher.ErrorWrapper<undefined>;

export type GetAdminRealmsRealmUsersProfileMetadataVariables = {
  pathParams: GetAdminRealmsRealmUsersProfileMetadataPathParams;
} & FetcherExtraProps;

/**
 * Get the UserProfileMetadata from the configuration
 */
export const getAdminRealmsRealmUsersProfileMetadata = (
  variables: GetAdminRealmsRealmUsersProfileMetadataVariables,
  signal?: AbortSignal
) =>
  fetch<
    Schemas.UserProfileMetadata,
    GetAdminRealmsRealmUsersProfileMetadataError,
    undefined,
    {},
    {},
    GetAdminRealmsRealmUsersProfileMetadataPathParams
  >({ url: '/admin/realms/{realm}/users/profile/metadata', method: 'get', ...variables, signal });

export type GetAdminRealmsRealmUsersUserIdPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  userId: string;
};

export type GetAdminRealmsRealmUsersUserIdQueryParams = {
  /**
   * Indicates if the user profile metadata should be added to the response
   */
  userProfileMetadata?: boolean;
};

export type GetAdminRealmsRealmUsersUserIdError = Fetcher.ErrorWrapper<undefined>;

export type GetAdminRealmsRealmUsersUserIdVariables = {
  pathParams: GetAdminRealmsRealmUsersUserIdPathParams;
  queryParams?: GetAdminRealmsRealmUsersUserIdQueryParams;
} & FetcherExtraProps;

export const getAdminRealmsRealmUsersUserId = (
  variables: GetAdminRealmsRealmUsersUserIdVariables,
  signal?: AbortSignal
) =>
  fetch<
    Schemas.UserRepresentation,
    GetAdminRealmsRealmUsersUserIdError,
    undefined,
    {},
    GetAdminRealmsRealmUsersUserIdQueryParams,
    GetAdminRealmsRealmUsersUserIdPathParams
  >({ url: '/admin/realms/{realm}/users/{userId}', method: 'get', ...variables, signal });

export type PutAdminRealmsRealmUsersUserIdPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  userId: string;
};

export type PutAdminRealmsRealmUsersUserIdError = Fetcher.ErrorWrapper<undefined>;

export type PutAdminRealmsRealmUsersUserIdVariables = {
  body?: Schemas.UserRepresentation;
  pathParams: PutAdminRealmsRealmUsersUserIdPathParams;
} & FetcherExtraProps;

export const putAdminRealmsRealmUsersUserId = (
  variables: PutAdminRealmsRealmUsersUserIdVariables,
  signal?: AbortSignal
) =>
  fetch<
    undefined,
    PutAdminRealmsRealmUsersUserIdError,
    Schemas.UserRepresentation,
    {},
    {},
    PutAdminRealmsRealmUsersUserIdPathParams
  >({ url: '/admin/realms/{realm}/users/{userId}', method: 'put', ...variables, signal });

export type DeleteAdminRealmsRealmUsersUserIdPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  userId: string;
};

export type DeleteAdminRealmsRealmUsersUserIdError = Fetcher.ErrorWrapper<undefined>;

export type DeleteAdminRealmsRealmUsersUserIdVariables = {
  pathParams: DeleteAdminRealmsRealmUsersUserIdPathParams;
} & FetcherExtraProps;

export const deleteAdminRealmsRealmUsersUserId = (
  variables: DeleteAdminRealmsRealmUsersUserIdVariables,
  signal?: AbortSignal
) =>
  fetch<
    undefined,
    DeleteAdminRealmsRealmUsersUserIdError,
    undefined,
    {},
    {},
    DeleteAdminRealmsRealmUsersUserIdPathParams
  >({ url: '/admin/realms/{realm}/users/{userId}', method: 'delete', ...variables, signal });

export type GetAdminRealmsRealmUsersUserIdConfiguredUserStorageCredentialTypesPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  userId: string;
};

export type GetAdminRealmsRealmUsersUserIdConfiguredUserStorageCredentialTypesError = Fetcher.ErrorWrapper<undefined>;

export type GetAdminRealmsRealmUsersUserIdConfiguredUserStorageCredentialTypesResponse = string[];

export type GetAdminRealmsRealmUsersUserIdConfiguredUserStorageCredentialTypesVariables = {
  pathParams: GetAdminRealmsRealmUsersUserIdConfiguredUserStorageCredentialTypesPathParams;
} & FetcherExtraProps;

/**
 * Returned values can contain for example "password", "otp" etc. This will always return empty list for "local" users, which are not backed by any user storage
 */
export const getAdminRealmsRealmUsersUserIdConfiguredUserStorageCredentialTypes = (
  variables: GetAdminRealmsRealmUsersUserIdConfiguredUserStorageCredentialTypesVariables,
  signal?: AbortSignal
) =>
  fetch<
    GetAdminRealmsRealmUsersUserIdConfiguredUserStorageCredentialTypesResponse,
    GetAdminRealmsRealmUsersUserIdConfiguredUserStorageCredentialTypesError,
    undefined,
    {},
    {},
    GetAdminRealmsRealmUsersUserIdConfiguredUserStorageCredentialTypesPathParams
  >({
    url: '/admin/realms/{realm}/users/{userId}/configured-user-storage-credential-types',
    method: 'get',
    ...variables,
    signal
  });

export type GetAdminRealmsRealmUsersUserIdConsentsPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  userId: string;
};

export type GetAdminRealmsRealmUsersUserIdConsentsError = Fetcher.ErrorWrapper<undefined>;

export type GetAdminRealmsRealmUsersUserIdConsentsResponse = {
  [key: string]: any;
}[];

export type GetAdminRealmsRealmUsersUserIdConsentsVariables = {
  pathParams: GetAdminRealmsRealmUsersUserIdConsentsPathParams;
} & FetcherExtraProps;

export const getAdminRealmsRealmUsersUserIdConsents = (
  variables: GetAdminRealmsRealmUsersUserIdConsentsVariables,
  signal?: AbortSignal
) =>
  fetch<
    GetAdminRealmsRealmUsersUserIdConsentsResponse,
    GetAdminRealmsRealmUsersUserIdConsentsError,
    undefined,
    {},
    {},
    GetAdminRealmsRealmUsersUserIdConsentsPathParams
  >({ url: '/admin/realms/{realm}/users/{userId}/consents', method: 'get', ...variables, signal });

export type DeleteAdminRealmsRealmUsersUserIdConsentsClientPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  userId: string;
  /**
   * Client id
   */
  client: string;
};

export type DeleteAdminRealmsRealmUsersUserIdConsentsClientError = Fetcher.ErrorWrapper<undefined>;

export type DeleteAdminRealmsRealmUsersUserIdConsentsClientVariables = {
  pathParams: DeleteAdminRealmsRealmUsersUserIdConsentsClientPathParams;
} & FetcherExtraProps;

export const deleteAdminRealmsRealmUsersUserIdConsentsClient = (
  variables: DeleteAdminRealmsRealmUsersUserIdConsentsClientVariables,
  signal?: AbortSignal
) =>
  fetch<
    undefined,
    DeleteAdminRealmsRealmUsersUserIdConsentsClientError,
    undefined,
    {},
    {},
    DeleteAdminRealmsRealmUsersUserIdConsentsClientPathParams
  >({ url: '/admin/realms/{realm}/users/{userId}/consents/{client}', method: 'delete', ...variables, signal });

export type GetAdminRealmsRealmUsersUserIdCredentialsPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  userId: string;
};

export type GetAdminRealmsRealmUsersUserIdCredentialsError = Fetcher.ErrorWrapper<undefined>;

export type GetAdminRealmsRealmUsersUserIdCredentialsResponse = Schemas.CredentialRepresentation[];

export type GetAdminRealmsRealmUsersUserIdCredentialsVariables = {
  pathParams: GetAdminRealmsRealmUsersUserIdCredentialsPathParams;
} & FetcherExtraProps;

export const getAdminRealmsRealmUsersUserIdCredentials = (
  variables: GetAdminRealmsRealmUsersUserIdCredentialsVariables,
  signal?: AbortSignal
) =>
  fetch<
    GetAdminRealmsRealmUsersUserIdCredentialsResponse,
    GetAdminRealmsRealmUsersUserIdCredentialsError,
    undefined,
    {},
    {},
    GetAdminRealmsRealmUsersUserIdCredentialsPathParams
  >({ url: '/admin/realms/{realm}/users/{userId}/credentials', method: 'get', ...variables, signal });

export type DeleteAdminRealmsRealmUsersUserIdCredentialsCredentialIdPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  userId: string;
  credentialId: string;
};

export type DeleteAdminRealmsRealmUsersUserIdCredentialsCredentialIdError = Fetcher.ErrorWrapper<undefined>;

export type DeleteAdminRealmsRealmUsersUserIdCredentialsCredentialIdVariables = {
  pathParams: DeleteAdminRealmsRealmUsersUserIdCredentialsCredentialIdPathParams;
} & FetcherExtraProps;

export const deleteAdminRealmsRealmUsersUserIdCredentialsCredentialId = (
  variables: DeleteAdminRealmsRealmUsersUserIdCredentialsCredentialIdVariables,
  signal?: AbortSignal
) =>
  fetch<
    undefined,
    DeleteAdminRealmsRealmUsersUserIdCredentialsCredentialIdError,
    undefined,
    {},
    {},
    DeleteAdminRealmsRealmUsersUserIdCredentialsCredentialIdPathParams
  >({ url: '/admin/realms/{realm}/users/{userId}/credentials/{credentialId}', method: 'delete', ...variables, signal });

export type PostAdminRealmsRealmUsersUserIdCredentialsCredentialIdMoveAfterNewPreviousCredentialIdPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  userId: string;
  /**
   * The credential to move
   */
  credentialId: string;
  /**
   * The credential that will be the previous element in the list. If set to null, the moved credential will be the first element in the list.
   */
  newPreviousCredentialId: string;
};

export type PostAdminRealmsRealmUsersUserIdCredentialsCredentialIdMoveAfterNewPreviousCredentialIdError =
  Fetcher.ErrorWrapper<undefined>;

export type PostAdminRealmsRealmUsersUserIdCredentialsCredentialIdMoveAfterNewPreviousCredentialIdVariables = {
  pathParams: PostAdminRealmsRealmUsersUserIdCredentialsCredentialIdMoveAfterNewPreviousCredentialIdPathParams;
} & FetcherExtraProps;

export const postAdminRealmsRealmUsersUserIdCredentialsCredentialIdMoveAfterNewPreviousCredentialId = (
  variables: PostAdminRealmsRealmUsersUserIdCredentialsCredentialIdMoveAfterNewPreviousCredentialIdVariables,
  signal?: AbortSignal
) =>
  fetch<
    undefined,
    PostAdminRealmsRealmUsersUserIdCredentialsCredentialIdMoveAfterNewPreviousCredentialIdError,
    undefined,
    {},
    {},
    PostAdminRealmsRealmUsersUserIdCredentialsCredentialIdMoveAfterNewPreviousCredentialIdPathParams
  >({
    url: '/admin/realms/{realm}/users/{userId}/credentials/{credentialId}/moveAfter/{newPreviousCredentialId}',
    method: 'post',
    ...variables,
    signal
  });

export type PostAdminRealmsRealmUsersUserIdCredentialsCredentialIdMoveToFirstPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  userId: string;
  /**
   * The credential to move
   */
  credentialId: string;
};

export type PostAdminRealmsRealmUsersUserIdCredentialsCredentialIdMoveToFirstError = Fetcher.ErrorWrapper<undefined>;

export type PostAdminRealmsRealmUsersUserIdCredentialsCredentialIdMoveToFirstVariables = {
  pathParams: PostAdminRealmsRealmUsersUserIdCredentialsCredentialIdMoveToFirstPathParams;
} & FetcherExtraProps;

export const postAdminRealmsRealmUsersUserIdCredentialsCredentialIdMoveToFirst = (
  variables: PostAdminRealmsRealmUsersUserIdCredentialsCredentialIdMoveToFirstVariables,
  signal?: AbortSignal
) =>
  fetch<
    undefined,
    PostAdminRealmsRealmUsersUserIdCredentialsCredentialIdMoveToFirstError,
    undefined,
    {},
    {},
    PostAdminRealmsRealmUsersUserIdCredentialsCredentialIdMoveToFirstPathParams
  >({
    url: '/admin/realms/{realm}/users/{userId}/credentials/{credentialId}/moveToFirst',
    method: 'post',
    ...variables,
    signal
  });

export type PutAdminRealmsRealmUsersUserIdCredentialsCredentialIdUserLabelPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  userId: string;
  credentialId: string;
};

export type PutAdminRealmsRealmUsersUserIdCredentialsCredentialIdUserLabelError = Fetcher.ErrorWrapper<undefined>;

export type PutAdminRealmsRealmUsersUserIdCredentialsCredentialIdUserLabelVariables = {
  pathParams: PutAdminRealmsRealmUsersUserIdCredentialsCredentialIdUserLabelPathParams;
} & FetcherExtraProps;

export const putAdminRealmsRealmUsersUserIdCredentialsCredentialIdUserLabel = (
  variables: PutAdminRealmsRealmUsersUserIdCredentialsCredentialIdUserLabelVariables,
  signal?: AbortSignal
) =>
  fetch<
    undefined,
    PutAdminRealmsRealmUsersUserIdCredentialsCredentialIdUserLabelError,
    undefined,
    {},
    {},
    PutAdminRealmsRealmUsersUserIdCredentialsCredentialIdUserLabelPathParams
  >({
    url: '/admin/realms/{realm}/users/{userId}/credentials/{credentialId}/userLabel',
    method: 'put',
    ...variables,
    signal
  });

export type PutAdminRealmsRealmUsersUserIdDisableCredentialTypesPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  userId: string;
};

export type PutAdminRealmsRealmUsersUserIdDisableCredentialTypesError = Fetcher.ErrorWrapper<undefined>;

export type PutAdminRealmsRealmUsersUserIdDisableCredentialTypesRequestBody = string[];

export type PutAdminRealmsRealmUsersUserIdDisableCredentialTypesVariables = {
  body?: PutAdminRealmsRealmUsersUserIdDisableCredentialTypesRequestBody;
  pathParams: PutAdminRealmsRealmUsersUserIdDisableCredentialTypesPathParams;
} & FetcherExtraProps;

export const putAdminRealmsRealmUsersUserIdDisableCredentialTypes = (
  variables: PutAdminRealmsRealmUsersUserIdDisableCredentialTypesVariables,
  signal?: AbortSignal
) =>
  fetch<
    undefined,
    PutAdminRealmsRealmUsersUserIdDisableCredentialTypesError,
    PutAdminRealmsRealmUsersUserIdDisableCredentialTypesRequestBody,
    {},
    {},
    PutAdminRealmsRealmUsersUserIdDisableCredentialTypesPathParams
  >({ url: '/admin/realms/{realm}/users/{userId}/disable-credential-types', method: 'put', ...variables, signal });

export type PutAdminRealmsRealmUsersUserIdExecuteActionsEmailPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  userId: string;
};

export type PutAdminRealmsRealmUsersUserIdExecuteActionsEmailQueryParams = {
  /**
   * Client id
   */
  client_id?: string;
  /**
   * Number of seconds after which the generated token expires
   *
   * @format int32
   */
  lifespan?: number;
  /**
   * Redirect uri
   */
  redirect_uri?: string;
};

export type PutAdminRealmsRealmUsersUserIdExecuteActionsEmailError = Fetcher.ErrorWrapper<undefined>;

export type PutAdminRealmsRealmUsersUserIdExecuteActionsEmailRequestBody = string[];

export type PutAdminRealmsRealmUsersUserIdExecuteActionsEmailVariables = {
  body?: PutAdminRealmsRealmUsersUserIdExecuteActionsEmailRequestBody;
  pathParams: PutAdminRealmsRealmUsersUserIdExecuteActionsEmailPathParams;
  queryParams?: PutAdminRealmsRealmUsersUserIdExecuteActionsEmailQueryParams;
} & FetcherExtraProps;

/**
 * An email contains a link the user can click to perform a set of required actions. The redirectUri and clientId parameters are optional. If no redirect is given, then there will be no link back to click after actions have completed. Redirect uri must be a valid uri for the particular clientId.
 */
export const putAdminRealmsRealmUsersUserIdExecuteActionsEmail = (
  variables: PutAdminRealmsRealmUsersUserIdExecuteActionsEmailVariables,
  signal?: AbortSignal
) =>
  fetch<
    undefined,
    PutAdminRealmsRealmUsersUserIdExecuteActionsEmailError,
    PutAdminRealmsRealmUsersUserIdExecuteActionsEmailRequestBody,
    {},
    PutAdminRealmsRealmUsersUserIdExecuteActionsEmailQueryParams,
    PutAdminRealmsRealmUsersUserIdExecuteActionsEmailPathParams
  >({ url: '/admin/realms/{realm}/users/{userId}/execute-actions-email', method: 'put', ...variables, signal });

export type GetAdminRealmsRealmUsersUserIdFederatedIdentityPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  userId: string;
};

export type GetAdminRealmsRealmUsersUserIdFederatedIdentityError = Fetcher.ErrorWrapper<undefined>;

export type GetAdminRealmsRealmUsersUserIdFederatedIdentityResponse = Schemas.FederatedIdentityRepresentation[];

export type GetAdminRealmsRealmUsersUserIdFederatedIdentityVariables = {
  pathParams: GetAdminRealmsRealmUsersUserIdFederatedIdentityPathParams;
} & FetcherExtraProps;

export const getAdminRealmsRealmUsersUserIdFederatedIdentity = (
  variables: GetAdminRealmsRealmUsersUserIdFederatedIdentityVariables,
  signal?: AbortSignal
) =>
  fetch<
    GetAdminRealmsRealmUsersUserIdFederatedIdentityResponse,
    GetAdminRealmsRealmUsersUserIdFederatedIdentityError,
    undefined,
    {},
    {},
    GetAdminRealmsRealmUsersUserIdFederatedIdentityPathParams
  >({ url: '/admin/realms/{realm}/users/{userId}/federated-identity', method: 'get', ...variables, signal });

export type PostAdminRealmsRealmUsersUserIdFederatedIdentityProviderPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  userId: string;
  /**
   * Social login provider id
   */
  provider: string;
};

export type PostAdminRealmsRealmUsersUserIdFederatedIdentityProviderError = Fetcher.ErrorWrapper<undefined>;

export type PostAdminRealmsRealmUsersUserIdFederatedIdentityProviderVariables = {
  pathParams: PostAdminRealmsRealmUsersUserIdFederatedIdentityProviderPathParams;
} & FetcherExtraProps;

export const postAdminRealmsRealmUsersUserIdFederatedIdentityProvider = (
  variables: PostAdminRealmsRealmUsersUserIdFederatedIdentityProviderVariables,
  signal?: AbortSignal
) =>
  fetch<
    undefined,
    PostAdminRealmsRealmUsersUserIdFederatedIdentityProviderError,
    undefined,
    {},
    {},
    PostAdminRealmsRealmUsersUserIdFederatedIdentityProviderPathParams
  >({
    url: '/admin/realms/{realm}/users/{userId}/federated-identity/{provider}',
    method: 'post',
    ...variables,
    signal
  });

export type DeleteAdminRealmsRealmUsersUserIdFederatedIdentityProviderPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  userId: string;
  /**
   * Social login provider id
   */
  provider: string;
};

export type DeleteAdminRealmsRealmUsersUserIdFederatedIdentityProviderError = Fetcher.ErrorWrapper<undefined>;

export type DeleteAdminRealmsRealmUsersUserIdFederatedIdentityProviderVariables = {
  pathParams: DeleteAdminRealmsRealmUsersUserIdFederatedIdentityProviderPathParams;
} & FetcherExtraProps;

export const deleteAdminRealmsRealmUsersUserIdFederatedIdentityProvider = (
  variables: DeleteAdminRealmsRealmUsersUserIdFederatedIdentityProviderVariables,
  signal?: AbortSignal
) =>
  fetch<
    undefined,
    DeleteAdminRealmsRealmUsersUserIdFederatedIdentityProviderError,
    undefined,
    {},
    {},
    DeleteAdminRealmsRealmUsersUserIdFederatedIdentityProviderPathParams
  >({
    url: '/admin/realms/{realm}/users/{userId}/federated-identity/{provider}',
    method: 'delete',
    ...variables,
    signal
  });

export type GetAdminRealmsRealmUsersUserIdGroupsPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  userId: string;
};

export type GetAdminRealmsRealmUsersUserIdGroupsQueryParams = {
  /**
   * @default true
   */
  briefRepresentation?: boolean;
  /**
   * @format int32
   */
  first?: number;
  /**
   * @format int32
   */
  max?: number;
  search?: string;
};

export type GetAdminRealmsRealmUsersUserIdGroupsError = Fetcher.ErrorWrapper<undefined>;

export type GetAdminRealmsRealmUsersUserIdGroupsResponse = Schemas.GroupRepresentation[];

export type GetAdminRealmsRealmUsersUserIdGroupsVariables = {
  pathParams: GetAdminRealmsRealmUsersUserIdGroupsPathParams;
  queryParams?: GetAdminRealmsRealmUsersUserIdGroupsQueryParams;
} & FetcherExtraProps;

export const getAdminRealmsRealmUsersUserIdGroups = (
  variables: GetAdminRealmsRealmUsersUserIdGroupsVariables,
  signal?: AbortSignal
) =>
  fetch<
    GetAdminRealmsRealmUsersUserIdGroupsResponse,
    GetAdminRealmsRealmUsersUserIdGroupsError,
    undefined,
    {},
    GetAdminRealmsRealmUsersUserIdGroupsQueryParams,
    GetAdminRealmsRealmUsersUserIdGroupsPathParams
  >({ url: '/admin/realms/{realm}/users/{userId}/groups', method: 'get', ...variables, signal });

export type GetAdminRealmsRealmUsersUserIdGroupsCountPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  userId: string;
};

export type GetAdminRealmsRealmUsersUserIdGroupsCountQueryParams = {
  search?: string;
};

export type GetAdminRealmsRealmUsersUserIdGroupsCountError = Fetcher.ErrorWrapper<undefined>;

export type GetAdminRealmsRealmUsersUserIdGroupsCountResponse = {
  [key: string]: number;
};

export type GetAdminRealmsRealmUsersUserIdGroupsCountVariables = {
  pathParams: GetAdminRealmsRealmUsersUserIdGroupsCountPathParams;
  queryParams?: GetAdminRealmsRealmUsersUserIdGroupsCountQueryParams;
} & FetcherExtraProps;

export const getAdminRealmsRealmUsersUserIdGroupsCount = (
  variables: GetAdminRealmsRealmUsersUserIdGroupsCountVariables,
  signal?: AbortSignal
) =>
  fetch<
    GetAdminRealmsRealmUsersUserIdGroupsCountResponse,
    GetAdminRealmsRealmUsersUserIdGroupsCountError,
    undefined,
    {},
    GetAdminRealmsRealmUsersUserIdGroupsCountQueryParams,
    GetAdminRealmsRealmUsersUserIdGroupsCountPathParams
  >({ url: '/admin/realms/{realm}/users/{userId}/groups/count', method: 'get', ...variables, signal });

export type PutAdminRealmsRealmUsersUserIdGroupsGroupIdPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  userId: string;
  groupId: string;
};

export type PutAdminRealmsRealmUsersUserIdGroupsGroupIdError = Fetcher.ErrorWrapper<undefined>;

export type PutAdminRealmsRealmUsersUserIdGroupsGroupIdVariables = {
  pathParams: PutAdminRealmsRealmUsersUserIdGroupsGroupIdPathParams;
} & FetcherExtraProps;

export const putAdminRealmsRealmUsersUserIdGroupsGroupId = (
  variables: PutAdminRealmsRealmUsersUserIdGroupsGroupIdVariables,
  signal?: AbortSignal
) =>
  fetch<
    undefined,
    PutAdminRealmsRealmUsersUserIdGroupsGroupIdError,
    undefined,
    {},
    {},
    PutAdminRealmsRealmUsersUserIdGroupsGroupIdPathParams
  >({ url: '/admin/realms/{realm}/users/{userId}/groups/{groupId}', method: 'put', ...variables, signal });

export type DeleteAdminRealmsRealmUsersUserIdGroupsGroupIdPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  userId: string;
  groupId: string;
};

export type DeleteAdminRealmsRealmUsersUserIdGroupsGroupIdError = Fetcher.ErrorWrapper<undefined>;

export type DeleteAdminRealmsRealmUsersUserIdGroupsGroupIdVariables = {
  pathParams: DeleteAdminRealmsRealmUsersUserIdGroupsGroupIdPathParams;
} & FetcherExtraProps;

export const deleteAdminRealmsRealmUsersUserIdGroupsGroupId = (
  variables: DeleteAdminRealmsRealmUsersUserIdGroupsGroupIdVariables,
  signal?: AbortSignal
) =>
  fetch<
    undefined,
    DeleteAdminRealmsRealmUsersUserIdGroupsGroupIdError,
    undefined,
    {},
    {},
    DeleteAdminRealmsRealmUsersUserIdGroupsGroupIdPathParams
  >({ url: '/admin/realms/{realm}/users/{userId}/groups/{groupId}', method: 'delete', ...variables, signal });

export type PostAdminRealmsRealmUsersUserIdImpersonationPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  userId: string;
};

export type PostAdminRealmsRealmUsersUserIdImpersonationError = Fetcher.ErrorWrapper<{
  status: 400;
  payload: Schemas.ErrorRepresentation;
}>;

export type PostAdminRealmsRealmUsersUserIdImpersonationResponse = {
  [key: string]: any;
};

export type PostAdminRealmsRealmUsersUserIdImpersonationVariables = {
  pathParams: PostAdminRealmsRealmUsersUserIdImpersonationPathParams;
} & FetcherExtraProps;

export const postAdminRealmsRealmUsersUserIdImpersonation = (
  variables: PostAdminRealmsRealmUsersUserIdImpersonationVariables,
  signal?: AbortSignal
) =>
  fetch<
    PostAdminRealmsRealmUsersUserIdImpersonationResponse,
    PostAdminRealmsRealmUsersUserIdImpersonationError,
    undefined,
    {},
    {},
    PostAdminRealmsRealmUsersUserIdImpersonationPathParams
  >({ url: '/admin/realms/{realm}/users/{userId}/impersonation', method: 'post', ...variables, signal });

export type PostAdminRealmsRealmUsersUserIdLogoutPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  userId: string;
};

export type PostAdminRealmsRealmUsersUserIdLogoutError = Fetcher.ErrorWrapper<undefined>;

export type PostAdminRealmsRealmUsersUserIdLogoutVariables = {
  pathParams: PostAdminRealmsRealmUsersUserIdLogoutPathParams;
} & FetcherExtraProps;

export const postAdminRealmsRealmUsersUserIdLogout = (
  variables: PostAdminRealmsRealmUsersUserIdLogoutVariables,
  signal?: AbortSignal
) =>
  fetch<
    undefined,
    PostAdminRealmsRealmUsersUserIdLogoutError,
    undefined,
    {},
    {},
    PostAdminRealmsRealmUsersUserIdLogoutPathParams
  >({ url: '/admin/realms/{realm}/users/{userId}/logout', method: 'post', ...variables, signal });

export type GetAdminRealmsRealmUsersUserIdOfflineSessionsClientUuidPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  userId: string;
  clientUuid: string;
};

export type GetAdminRealmsRealmUsersUserIdOfflineSessionsClientUuidError = Fetcher.ErrorWrapper<undefined>;

export type GetAdminRealmsRealmUsersUserIdOfflineSessionsClientUuidResponse = Schemas.UserSessionRepresentation[];

export type GetAdminRealmsRealmUsersUserIdOfflineSessionsClientUuidVariables = {
  pathParams: GetAdminRealmsRealmUsersUserIdOfflineSessionsClientUuidPathParams;
} & FetcherExtraProps;

export const getAdminRealmsRealmUsersUserIdOfflineSessionsClientUuid = (
  variables: GetAdminRealmsRealmUsersUserIdOfflineSessionsClientUuidVariables,
  signal?: AbortSignal
) =>
  fetch<
    GetAdminRealmsRealmUsersUserIdOfflineSessionsClientUuidResponse,
    GetAdminRealmsRealmUsersUserIdOfflineSessionsClientUuidError,
    undefined,
    {},
    {},
    GetAdminRealmsRealmUsersUserIdOfflineSessionsClientUuidPathParams
  >({ url: '/admin/realms/{realm}/users/{userId}/offline-sessions/{clientUuid}', method: 'get', ...variables, signal });

export type PutAdminRealmsRealmUsersUserIdResetPasswordPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  userId: string;
};

export type PutAdminRealmsRealmUsersUserIdResetPasswordError = Fetcher.ErrorWrapper<undefined>;

export type PutAdminRealmsRealmUsersUserIdResetPasswordVariables = {
  body?: Schemas.CredentialRepresentation;
  pathParams: PutAdminRealmsRealmUsersUserIdResetPasswordPathParams;
} & FetcherExtraProps;

export const putAdminRealmsRealmUsersUserIdResetPassword = (
  variables: PutAdminRealmsRealmUsersUserIdResetPasswordVariables,
  signal?: AbortSignal
) =>
  fetch<
    undefined,
    PutAdminRealmsRealmUsersUserIdResetPasswordError,
    Schemas.CredentialRepresentation,
    {},
    {},
    PutAdminRealmsRealmUsersUserIdResetPasswordPathParams
  >({ url: '/admin/realms/{realm}/users/{userId}/reset-password', method: 'put', ...variables, signal });

export type PutAdminRealmsRealmUsersUserIdResetPasswordEmailPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  userId: string;
};

export type PutAdminRealmsRealmUsersUserIdResetPasswordEmailQueryParams = {
  /**
   * client id
   */
  client_id?: string;
  /**
   * redirect uri
   */
  redirect_uri?: string;
};

export type PutAdminRealmsRealmUsersUserIdResetPasswordEmailError = Fetcher.ErrorWrapper<undefined>;

export type PutAdminRealmsRealmUsersUserIdResetPasswordEmailVariables = {
  pathParams: PutAdminRealmsRealmUsersUserIdResetPasswordEmailPathParams;
  queryParams?: PutAdminRealmsRealmUsersUserIdResetPasswordEmailQueryParams;
} & FetcherExtraProps;

/**
 * The redirectUri and clientId parameters are optional. The default for the redirect is the account client. This endpoint has been deprecated.  Please use the execute-actions-email passing a list with UPDATE_PASSWORD within it.
 */
export const putAdminRealmsRealmUsersUserIdResetPasswordEmail = (
  variables: PutAdminRealmsRealmUsersUserIdResetPasswordEmailVariables,
  signal?: AbortSignal
) =>
  fetch<
    undefined,
    PutAdminRealmsRealmUsersUserIdResetPasswordEmailError,
    undefined,
    {},
    PutAdminRealmsRealmUsersUserIdResetPasswordEmailQueryParams,
    PutAdminRealmsRealmUsersUserIdResetPasswordEmailPathParams
  >({ url: '/admin/realms/{realm}/users/{userId}/reset-password-email', method: 'put', ...variables, signal });

export type GetAdminRealmsRealmUsersUserIdRoleMappingsPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  userId: string;
};

export type GetAdminRealmsRealmUsersUserIdRoleMappingsError = Fetcher.ErrorWrapper<undefined>;

export type GetAdminRealmsRealmUsersUserIdRoleMappingsVariables = {
  pathParams: GetAdminRealmsRealmUsersUserIdRoleMappingsPathParams;
} & FetcherExtraProps;

export const getAdminRealmsRealmUsersUserIdRoleMappings = (
  variables: GetAdminRealmsRealmUsersUserIdRoleMappingsVariables,
  signal?: AbortSignal
) =>
  fetch<
    Schemas.MappingsRepresentation,
    GetAdminRealmsRealmUsersUserIdRoleMappingsError,
    undefined,
    {},
    {},
    GetAdminRealmsRealmUsersUserIdRoleMappingsPathParams
  >({ url: '/admin/realms/{realm}/users/{userId}/role-mappings', method: 'get', ...variables, signal });

export type GetAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  userId: string;
  /**
   * client id (not clientId!)
   */
  clientId: string;
};

export type GetAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdError = Fetcher.ErrorWrapper<undefined>;

export type GetAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdResponse = Schemas.RoleRepresentation[];

export type GetAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdVariables = {
  pathParams: GetAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdPathParams;
} & FetcherExtraProps;

export const getAdminRealmsRealmUsersUserIdRoleMappingsClientsClientId = (
  variables: GetAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdVariables,
  signal?: AbortSignal
) =>
  fetch<
    GetAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdResponse,
    GetAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdError,
    undefined,
    {},
    {},
    GetAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdPathParams
  >({
    url: '/admin/realms/{realm}/users/{userId}/role-mappings/clients/{clientId}',
    method: 'get',
    ...variables,
    signal
  });

export type PostAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  userId: string;
  /**
   * client id (not clientId!)
   */
  clientId: string;
};

export type PostAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdError = Fetcher.ErrorWrapper<undefined>;

export type PostAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdRequestBody = Schemas.RoleRepresentation[];

export type PostAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdVariables = {
  body?: PostAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdRequestBody;
  pathParams: PostAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdPathParams;
} & FetcherExtraProps;

export const postAdminRealmsRealmUsersUserIdRoleMappingsClientsClientId = (
  variables: PostAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdVariables,
  signal?: AbortSignal
) =>
  fetch<
    undefined,
    PostAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdError,
    PostAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdRequestBody,
    {},
    {},
    PostAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdPathParams
  >({
    url: '/admin/realms/{realm}/users/{userId}/role-mappings/clients/{clientId}',
    method: 'post',
    ...variables,
    signal
  });

export type DeleteAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  userId: string;
  /**
   * client id (not clientId!)
   */
  clientId: string;
};

export type DeleteAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdError = Fetcher.ErrorWrapper<undefined>;

export type DeleteAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdRequestBody = Schemas.RoleRepresentation[];

export type DeleteAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdVariables = {
  body?: DeleteAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdRequestBody;
  pathParams: DeleteAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdPathParams;
} & FetcherExtraProps;

export const deleteAdminRealmsRealmUsersUserIdRoleMappingsClientsClientId = (
  variables: DeleteAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdVariables,
  signal?: AbortSignal
) =>
  fetch<
    undefined,
    DeleteAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdError,
    DeleteAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdRequestBody,
    {},
    {},
    DeleteAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdPathParams
  >({
    url: '/admin/realms/{realm}/users/{userId}/role-mappings/clients/{clientId}',
    method: 'delete',
    ...variables,
    signal
  });

export type GetAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdAvailablePathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  userId: string;
  /**
   * client id (not clientId!)
   */
  clientId: string;
};

export type GetAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdAvailableError = Fetcher.ErrorWrapper<undefined>;

export type GetAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdAvailableResponse = Schemas.RoleRepresentation[];

export type GetAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdAvailableVariables = {
  pathParams: GetAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdAvailablePathParams;
} & FetcherExtraProps;

export const getAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdAvailable = (
  variables: GetAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdAvailableVariables,
  signal?: AbortSignal
) =>
  fetch<
    GetAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdAvailableResponse,
    GetAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdAvailableError,
    undefined,
    {},
    {},
    GetAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdAvailablePathParams
  >({
    url: '/admin/realms/{realm}/users/{userId}/role-mappings/clients/{clientId}/available',
    method: 'get',
    ...variables,
    signal
  });

export type GetAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdCompositePathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  userId: string;
  /**
   * client id (not clientId!)
   */
  clientId: string;
};

export type GetAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdCompositeQueryParams = {
  /**
   * if false, return roles with their attributes
   *
   * @default true
   */
  briefRepresentation?: boolean;
};

export type GetAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdCompositeError = Fetcher.ErrorWrapper<undefined>;

export type GetAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdCompositeResponse = Schemas.RoleRepresentation[];

export type GetAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdCompositeVariables = {
  pathParams: GetAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdCompositePathParams;
  queryParams?: GetAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdCompositeQueryParams;
} & FetcherExtraProps;

export const getAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdComposite = (
  variables: GetAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdCompositeVariables,
  signal?: AbortSignal
) =>
  fetch<
    GetAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdCompositeResponse,
    GetAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdCompositeError,
    undefined,
    {},
    GetAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdCompositeQueryParams,
    GetAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdCompositePathParams
  >({
    url: '/admin/realms/{realm}/users/{userId}/role-mappings/clients/{clientId}/composite',
    method: 'get',
    ...variables,
    signal
  });

export type GetAdminRealmsRealmUsersUserIdRoleMappingsRealmPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  userId: string;
};

export type GetAdminRealmsRealmUsersUserIdRoleMappingsRealmError = Fetcher.ErrorWrapper<undefined>;

export type GetAdminRealmsRealmUsersUserIdRoleMappingsRealmResponse = Schemas.RoleRepresentation[];

export type GetAdminRealmsRealmUsersUserIdRoleMappingsRealmVariables = {
  pathParams: GetAdminRealmsRealmUsersUserIdRoleMappingsRealmPathParams;
} & FetcherExtraProps;

export const getAdminRealmsRealmUsersUserIdRoleMappingsRealm = (
  variables: GetAdminRealmsRealmUsersUserIdRoleMappingsRealmVariables,
  signal?: AbortSignal
) =>
  fetch<
    GetAdminRealmsRealmUsersUserIdRoleMappingsRealmResponse,
    GetAdminRealmsRealmUsersUserIdRoleMappingsRealmError,
    undefined,
    {},
    {},
    GetAdminRealmsRealmUsersUserIdRoleMappingsRealmPathParams
  >({ url: '/admin/realms/{realm}/users/{userId}/role-mappings/realm', method: 'get', ...variables, signal });

export type PostAdminRealmsRealmUsersUserIdRoleMappingsRealmPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  userId: string;
};

export type PostAdminRealmsRealmUsersUserIdRoleMappingsRealmError = Fetcher.ErrorWrapper<undefined>;

export type PostAdminRealmsRealmUsersUserIdRoleMappingsRealmRequestBody = Schemas.RoleRepresentation[];

export type PostAdminRealmsRealmUsersUserIdRoleMappingsRealmVariables = {
  body?: PostAdminRealmsRealmUsersUserIdRoleMappingsRealmRequestBody;
  pathParams: PostAdminRealmsRealmUsersUserIdRoleMappingsRealmPathParams;
} & FetcherExtraProps;

export const postAdminRealmsRealmUsersUserIdRoleMappingsRealm = (
  variables: PostAdminRealmsRealmUsersUserIdRoleMappingsRealmVariables,
  signal?: AbortSignal
) =>
  fetch<
    undefined,
    PostAdminRealmsRealmUsersUserIdRoleMappingsRealmError,
    PostAdminRealmsRealmUsersUserIdRoleMappingsRealmRequestBody,
    {},
    {},
    PostAdminRealmsRealmUsersUserIdRoleMappingsRealmPathParams
  >({ url: '/admin/realms/{realm}/users/{userId}/role-mappings/realm', method: 'post', ...variables, signal });

export type DeleteAdminRealmsRealmUsersUserIdRoleMappingsRealmPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  userId: string;
};

export type DeleteAdminRealmsRealmUsersUserIdRoleMappingsRealmError = Fetcher.ErrorWrapper<undefined>;

export type DeleteAdminRealmsRealmUsersUserIdRoleMappingsRealmRequestBody = Schemas.RoleRepresentation[];

export type DeleteAdminRealmsRealmUsersUserIdRoleMappingsRealmVariables = {
  body?: DeleteAdminRealmsRealmUsersUserIdRoleMappingsRealmRequestBody;
  pathParams: DeleteAdminRealmsRealmUsersUserIdRoleMappingsRealmPathParams;
} & FetcherExtraProps;

export const deleteAdminRealmsRealmUsersUserIdRoleMappingsRealm = (
  variables: DeleteAdminRealmsRealmUsersUserIdRoleMappingsRealmVariables,
  signal?: AbortSignal
) =>
  fetch<
    undefined,
    DeleteAdminRealmsRealmUsersUserIdRoleMappingsRealmError,
    DeleteAdminRealmsRealmUsersUserIdRoleMappingsRealmRequestBody,
    {},
    {},
    DeleteAdminRealmsRealmUsersUserIdRoleMappingsRealmPathParams
  >({ url: '/admin/realms/{realm}/users/{userId}/role-mappings/realm', method: 'delete', ...variables, signal });

export type GetAdminRealmsRealmUsersUserIdRoleMappingsRealmAvailablePathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  userId: string;
};

export type GetAdminRealmsRealmUsersUserIdRoleMappingsRealmAvailableError = Fetcher.ErrorWrapper<undefined>;

export type GetAdminRealmsRealmUsersUserIdRoleMappingsRealmAvailableResponse = Schemas.RoleRepresentation[];

export type GetAdminRealmsRealmUsersUserIdRoleMappingsRealmAvailableVariables = {
  pathParams: GetAdminRealmsRealmUsersUserIdRoleMappingsRealmAvailablePathParams;
} & FetcherExtraProps;

export const getAdminRealmsRealmUsersUserIdRoleMappingsRealmAvailable = (
  variables: GetAdminRealmsRealmUsersUserIdRoleMappingsRealmAvailableVariables,
  signal?: AbortSignal
) =>
  fetch<
    GetAdminRealmsRealmUsersUserIdRoleMappingsRealmAvailableResponse,
    GetAdminRealmsRealmUsersUserIdRoleMappingsRealmAvailableError,
    undefined,
    {},
    {},
    GetAdminRealmsRealmUsersUserIdRoleMappingsRealmAvailablePathParams
  >({ url: '/admin/realms/{realm}/users/{userId}/role-mappings/realm/available', method: 'get', ...variables, signal });

export type GetAdminRealmsRealmUsersUserIdRoleMappingsRealmCompositePathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  userId: string;
};

export type GetAdminRealmsRealmUsersUserIdRoleMappingsRealmCompositeQueryParams = {
  /**
   * if false, return roles with their attributes
   *
   * @default true
   */
  briefRepresentation?: boolean;
};

export type GetAdminRealmsRealmUsersUserIdRoleMappingsRealmCompositeError = Fetcher.ErrorWrapper<undefined>;

export type GetAdminRealmsRealmUsersUserIdRoleMappingsRealmCompositeResponse = Schemas.RoleRepresentation[];

export type GetAdminRealmsRealmUsersUserIdRoleMappingsRealmCompositeVariables = {
  pathParams: GetAdminRealmsRealmUsersUserIdRoleMappingsRealmCompositePathParams;
  queryParams?: GetAdminRealmsRealmUsersUserIdRoleMappingsRealmCompositeQueryParams;
} & FetcherExtraProps;

export const getAdminRealmsRealmUsersUserIdRoleMappingsRealmComposite = (
  variables: GetAdminRealmsRealmUsersUserIdRoleMappingsRealmCompositeVariables,
  signal?: AbortSignal
) =>
  fetch<
    GetAdminRealmsRealmUsersUserIdRoleMappingsRealmCompositeResponse,
    GetAdminRealmsRealmUsersUserIdRoleMappingsRealmCompositeError,
    undefined,
    {},
    GetAdminRealmsRealmUsersUserIdRoleMappingsRealmCompositeQueryParams,
    GetAdminRealmsRealmUsersUserIdRoleMappingsRealmCompositePathParams
  >({ url: '/admin/realms/{realm}/users/{userId}/role-mappings/realm/composite', method: 'get', ...variables, signal });

export type PutAdminRealmsRealmUsersUserIdSendVerifyEmailPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  userId: string;
};

export type PutAdminRealmsRealmUsersUserIdSendVerifyEmailQueryParams = {
  /**
   * Client id
   */
  client_id?: string;
  /**
   * Number of seconds after which the generated token expires
   *
   * @format int32
   */
  lifespan?: number;
  /**
   * Redirect uri
   */
  redirect_uri?: string;
};

export type PutAdminRealmsRealmUsersUserIdSendVerifyEmailError = Fetcher.ErrorWrapper<undefined>;

export type PutAdminRealmsRealmUsersUserIdSendVerifyEmailVariables = {
  pathParams: PutAdminRealmsRealmUsersUserIdSendVerifyEmailPathParams;
  queryParams?: PutAdminRealmsRealmUsersUserIdSendVerifyEmailQueryParams;
} & FetcherExtraProps;

/**
 * The redirectUri, clientId and lifespan parameters are optional. The default for the redirect is the account client. The default for the lifespan is 12 hours
 */
export const putAdminRealmsRealmUsersUserIdSendVerifyEmail = (
  variables: PutAdminRealmsRealmUsersUserIdSendVerifyEmailVariables,
  signal?: AbortSignal
) =>
  fetch<
    undefined,
    PutAdminRealmsRealmUsersUserIdSendVerifyEmailError,
    undefined,
    {},
    PutAdminRealmsRealmUsersUserIdSendVerifyEmailQueryParams,
    PutAdminRealmsRealmUsersUserIdSendVerifyEmailPathParams
  >({ url: '/admin/realms/{realm}/users/{userId}/send-verify-email', method: 'put', ...variables, signal });

export type GetAdminRealmsRealmUsersUserIdSessionsPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  userId: string;
};

export type GetAdminRealmsRealmUsersUserIdSessionsError = Fetcher.ErrorWrapper<undefined>;

export type GetAdminRealmsRealmUsersUserIdSessionsResponse = Schemas.UserSessionRepresentation[];

export type GetAdminRealmsRealmUsersUserIdSessionsVariables = {
  pathParams: GetAdminRealmsRealmUsersUserIdSessionsPathParams;
} & FetcherExtraProps;

export const getAdminRealmsRealmUsersUserIdSessions = (
  variables: GetAdminRealmsRealmUsersUserIdSessionsVariables,
  signal?: AbortSignal
) =>
  fetch<
    GetAdminRealmsRealmUsersUserIdSessionsResponse,
    GetAdminRealmsRealmUsersUserIdSessionsError,
    undefined,
    {},
    {},
    GetAdminRealmsRealmUsersUserIdSessionsPathParams
  >({ url: '/admin/realms/{realm}/users/{userId}/sessions', method: 'get', ...variables, signal });

export type GetAdminRealmsRealmUsersUserIdUnmanagedAttributesPathParams = {
  /**
   * realm name (not id!)
   */
  realm: string;
  userId: string;
};

export type GetAdminRealmsRealmUsersUserIdUnmanagedAttributesError = Fetcher.ErrorWrapper<undefined>;

export type GetAdminRealmsRealmUsersUserIdUnmanagedAttributesResponse = {
  [key: string]: string[];
};

export type GetAdminRealmsRealmUsersUserIdUnmanagedAttributesVariables = {
  pathParams: GetAdminRealmsRealmUsersUserIdUnmanagedAttributesPathParams;
} & FetcherExtraProps;

export const getAdminRealmsRealmUsersUserIdUnmanagedAttributes = (
  variables: GetAdminRealmsRealmUsersUserIdUnmanagedAttributesVariables,
  signal?: AbortSignal
) =>
  fetch<
    GetAdminRealmsRealmUsersUserIdUnmanagedAttributesResponse,
    GetAdminRealmsRealmUsersUserIdUnmanagedAttributesError,
    undefined,
    {},
    {},
    GetAdminRealmsRealmUsersUserIdUnmanagedAttributesPathParams
  >({ url: '/admin/realms/{realm}/users/{userId}/unmanagedAttributes', method: 'get', ...variables, signal });

export const operationsByTag = {
  realmsAdmin: {
    getAdminRealms,
    postAdminRealms,
    getAdminRealmsRealm,
    putAdminRealmsRealm,
    deleteAdminRealmsRealm,
    getAdminRealmsRealmAdminEvents,
    deleteAdminRealmsRealmAdminEvents,
    postAdminRealmsRealmClientDescriptionConverter,
    getAdminRealmsRealmClientPoliciesPolicies,
    putAdminRealmsRealmClientPoliciesPolicies,
    getAdminRealmsRealmClientPoliciesProfiles,
    putAdminRealmsRealmClientPoliciesProfiles,
    getAdminRealmsRealmClientSessionStats,
    getAdminRealmsRealmClientTypes,
    putAdminRealmsRealmClientTypes,
    getAdminRealmsRealmCredentialRegistrators,
    getAdminRealmsRealmDefaultDefaultClientScopes,
    putAdminRealmsRealmDefaultDefaultClientScopesClientScopeId,
    deleteAdminRealmsRealmDefaultDefaultClientScopesClientScopeId,
    getAdminRealmsRealmDefaultGroups,
    putAdminRealmsRealmDefaultGroupsGroupId,
    deleteAdminRealmsRealmDefaultGroupsGroupId,
    getAdminRealmsRealmDefaultOptionalClientScopes,
    putAdminRealmsRealmDefaultOptionalClientScopesClientScopeId,
    deleteAdminRealmsRealmDefaultOptionalClientScopesClientScopeId,
    getAdminRealmsRealmEvents,
    deleteAdminRealmsRealmEvents,
    getAdminRealmsRealmEventsConfig,
    putAdminRealmsRealmEventsConfig,
    getAdminRealmsRealmGroupByPathPath,
    getAdminRealmsRealmLocalization,
    getAdminRealmsRealmLocalizationLocale,
    postAdminRealmsRealmLocalizationLocale,
    deleteAdminRealmsRealmLocalizationLocale,
    getAdminRealmsRealmLocalizationLocaleKey,
    putAdminRealmsRealmLocalizationLocaleKey,
    deleteAdminRealmsRealmLocalizationLocaleKey,
    postAdminRealmsRealmLogoutAll,
    postAdminRealmsRealmPartialExport,
    postAdminRealmsRealmPartialImport,
    postAdminRealmsRealmPushRevocation,
    deleteAdminRealmsRealmSessionsSession,
    postAdminRealmsRealmTestSMTPConnection,
    getAdminRealmsRealmUsersManagementPermissions,
    putAdminRealmsRealmUsersManagementPermissions
  },
  attackDetection: {
    deleteAdminRealmsRealmAttackDetectionBruteForceUsers,
    getAdminRealmsRealmAttackDetectionBruteForceUsersUserId,
    deleteAdminRealmsRealmAttackDetectionBruteForceUsersUserId
  },
  authenticationManagement: {
    getAdminRealmsRealmAuthenticationAuthenticatorProviders,
    getAdminRealmsRealmAuthenticationClientAuthenticatorProviders,
    postAdminRealmsRealmAuthenticationConfig,
    getAdminRealmsRealmAuthenticationConfigDescriptionProviderId,
    getAdminRealmsRealmAuthenticationConfigId,
    putAdminRealmsRealmAuthenticationConfigId,
    deleteAdminRealmsRealmAuthenticationConfigId,
    postAdminRealmsRealmAuthenticationExecutions,
    getAdminRealmsRealmAuthenticationExecutionsExecutionId,
    deleteAdminRealmsRealmAuthenticationExecutionsExecutionId,
    postAdminRealmsRealmAuthenticationExecutionsExecutionIdConfig,
    getAdminRealmsRealmAuthenticationExecutionsExecutionIdConfigId,
    postAdminRealmsRealmAuthenticationExecutionsExecutionIdLowerPriority,
    postAdminRealmsRealmAuthenticationExecutionsExecutionIdRaisePriority,
    getAdminRealmsRealmAuthenticationFlows,
    postAdminRealmsRealmAuthenticationFlows,
    postAdminRealmsRealmAuthenticationFlowsFlowAliasCopy,
    getAdminRealmsRealmAuthenticationFlowsFlowAliasExecutions,
    putAdminRealmsRealmAuthenticationFlowsFlowAliasExecutions,
    postAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsExecution,
    postAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsFlow,
    getAdminRealmsRealmAuthenticationFlowsId,
    putAdminRealmsRealmAuthenticationFlowsId,
    deleteAdminRealmsRealmAuthenticationFlowsId,
    getAdminRealmsRealmAuthenticationFormActionProviders,
    getAdminRealmsRealmAuthenticationFormProviders,
    getAdminRealmsRealmAuthenticationPerClientConfigDescription,
    postAdminRealmsRealmAuthenticationRegisterRequiredAction,
    getAdminRealmsRealmAuthenticationRequiredActions,
    getAdminRealmsRealmAuthenticationRequiredActionsAlias,
    putAdminRealmsRealmAuthenticationRequiredActionsAlias,
    deleteAdminRealmsRealmAuthenticationRequiredActionsAlias,
    getAdminRealmsRealmAuthenticationRequiredActionsAliasConfig,
    putAdminRealmsRealmAuthenticationRequiredActionsAliasConfig,
    deleteAdminRealmsRealmAuthenticationRequiredActionsAliasConfig,
    getAdminRealmsRealmAuthenticationRequiredActionsAliasConfigDescription,
    postAdminRealmsRealmAuthenticationRequiredActionsAliasLowerPriority,
    postAdminRealmsRealmAuthenticationRequiredActionsAliasRaisePriority,
    getAdminRealmsRealmAuthenticationUnregisteredRequiredActions
  },
  clientRegistrationPolicy: { getAdminRealmsRealmClientRegistrationPolicyProviders },
  clientScopes: {
    getAdminRealmsRealmClientScopes,
    postAdminRealmsRealmClientScopes,
    getAdminRealmsRealmClientScopesClientScopeId,
    putAdminRealmsRealmClientScopesClientScopeId,
    deleteAdminRealmsRealmClientScopesClientScopeId,
    getAdminRealmsRealmClientTemplates,
    postAdminRealmsRealmClientTemplates,
    getAdminRealmsRealmClientTemplatesClientScopeId,
    putAdminRealmsRealmClientTemplatesClientScopeId,
    deleteAdminRealmsRealmClientTemplatesClientScopeId
  },
  protocolMappers: {
    postAdminRealmsRealmClientScopesClientScopeIdProtocolMappersAddModels,
    getAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModels,
    postAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModels,
    getAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsId,
    putAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsId,
    deleteAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsId,
    getAdminRealmsRealmClientScopesClientScopeIdProtocolMappersProtocolProtocol,
    postAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersAddModels,
    getAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModels,
    postAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModels,
    getAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsId,
    putAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsId,
    deleteAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsId,
    getAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersProtocolProtocol,
    postAdminRealmsRealmClientsClientUuidProtocolMappersAddModels,
    getAdminRealmsRealmClientsClientUuidProtocolMappersModels,
    postAdminRealmsRealmClientsClientUuidProtocolMappersModels,
    getAdminRealmsRealmClientsClientUuidProtocolMappersModelsId,
    putAdminRealmsRealmClientsClientUuidProtocolMappersModelsId,
    deleteAdminRealmsRealmClientsClientUuidProtocolMappersModelsId,
    getAdminRealmsRealmClientsClientUuidProtocolMappersProtocolProtocol
  },
  scopeMappings: {
    getAdminRealmsRealmClientScopesClientScopeIdScopeMappings,
    getAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClient,
    postAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClient,
    deleteAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClient,
    getAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientAvailable,
    getAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientComposite,
    getAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealm,
    postAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealm,
    deleteAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealm,
    getAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmAvailable,
    getAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmComposite,
    getAdminRealmsRealmClientTemplatesClientScopeIdScopeMappings,
    getAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClient,
    postAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClient,
    deleteAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClient,
    getAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientAvailable,
    getAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientComposite,
    getAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealm,
    postAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealm,
    deleteAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealm,
    getAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmAvailable,
    getAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmComposite,
    getAdminRealmsRealmClientsClientUuidScopeMappings,
    getAdminRealmsRealmClientsClientUuidScopeMappingsClientsClient,
    postAdminRealmsRealmClientsClientUuidScopeMappingsClientsClient,
    deleteAdminRealmsRealmClientsClientUuidScopeMappingsClientsClient,
    getAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientAvailable,
    getAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientComposite,
    getAdminRealmsRealmClientsClientUuidScopeMappingsRealm,
    postAdminRealmsRealmClientsClientUuidScopeMappingsRealm,
    deleteAdminRealmsRealmClientsClientUuidScopeMappingsRealm,
    getAdminRealmsRealmClientsClientUuidScopeMappingsRealmAvailable,
    getAdminRealmsRealmClientsClientUuidScopeMappingsRealmComposite
  },
  clients: {
    getAdminRealmsRealmClients,
    postAdminRealmsRealmClients,
    getAdminRealmsRealmClientsClientUuid,
    putAdminRealmsRealmClientsClientUuid,
    deleteAdminRealmsRealmClientsClientUuid,
    getAdminRealmsRealmClientsClientUuidClientSecret,
    postAdminRealmsRealmClientsClientUuidClientSecret,
    getAdminRealmsRealmClientsClientUuidClientSecretRotated,
    deleteAdminRealmsRealmClientsClientUuidClientSecretRotated,
    getAdminRealmsRealmClientsClientUuidDefaultClientScopes,
    putAdminRealmsRealmClientsClientUuidDefaultClientScopesClientScopeId,
    deleteAdminRealmsRealmClientsClientUuidDefaultClientScopesClientScopeId,
    getAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleAccessToken,
    getAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleIdToken,
    getAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleUserinfo,
    getAdminRealmsRealmClientsClientUuidEvaluateScopesProtocolMappers,
    getAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdGranted,
    getAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdNotGranted,
    getAdminRealmsRealmClientsClientUuidInstallationProvidersProviderId,
    getAdminRealmsRealmClientsClientUuidManagementPermissions,
    putAdminRealmsRealmClientsClientUuidManagementPermissions,
    postAdminRealmsRealmClientsClientUuidNodes,
    deleteAdminRealmsRealmClientsClientUuidNodesNode,
    getAdminRealmsRealmClientsClientUuidOfflineSessionCount,
    getAdminRealmsRealmClientsClientUuidOfflineSessions,
    getAdminRealmsRealmClientsClientUuidOptionalClientScopes,
    putAdminRealmsRealmClientsClientUuidOptionalClientScopesClientScopeId,
    deleteAdminRealmsRealmClientsClientUuidOptionalClientScopesClientScopeId,
    postAdminRealmsRealmClientsClientUuidPushRevocation,
    postAdminRealmsRealmClientsClientUuidRegistrationAccessToken,
    getAdminRealmsRealmClientsClientUuidServiceAccountUser,
    getAdminRealmsRealmClientsClientUuidSessionCount,
    getAdminRealmsRealmClientsClientUuidTestNodesAvailable,
    getAdminRealmsRealmClientsClientUuidUserSessions
  },
  clientInitialAccess: {
    getAdminRealmsRealmClientsInitialAccess,
    postAdminRealmsRealmClientsInitialAccess,
    deleteAdminRealmsRealmClientsInitialAccessId
  },
  clientAttributeCertificate: {
    getAdminRealmsRealmClientsClientUuidCertificatesAttr,
    postAdminRealmsRealmClientsClientUuidCertificatesAttrDownload,
    postAdminRealmsRealmClientsClientUuidCertificatesAttrGenerate,
    postAdminRealmsRealmClientsClientUuidCertificatesAttrGenerateAndDownload,
    postAdminRealmsRealmClientsClientUuidCertificatesAttrUpload,
    postAdminRealmsRealmClientsClientUuidCertificatesAttrUploadCertificate
  },
  roles: {
    getAdminRealmsRealmClientsClientUuidRoles,
    postAdminRealmsRealmClientsClientUuidRoles,
    getAdminRealmsRealmClientsClientUuidRolesRoleName,
    putAdminRealmsRealmClientsClientUuidRolesRoleName,
    deleteAdminRealmsRealmClientsClientUuidRolesRoleName,
    getAdminRealmsRealmClientsClientUuidRolesRoleNameComposites,
    postAdminRealmsRealmClientsClientUuidRolesRoleNameComposites,
    deleteAdminRealmsRealmClientsClientUuidRolesRoleNameComposites,
    getAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesClientsClientUuid,
    getAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesRealm,
    getAdminRealmsRealmClientsClientUuidRolesRoleNameGroups,
    getAdminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissions,
    putAdminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissions,
    getAdminRealmsRealmClientsClientUuidRolesRoleNameUsers,
    getAdminRealmsRealmRoles,
    postAdminRealmsRealmRoles,
    getAdminRealmsRealmRolesRoleName,
    putAdminRealmsRealmRolesRoleName,
    deleteAdminRealmsRealmRolesRoleName,
    getAdminRealmsRealmRolesRoleNameComposites,
    postAdminRealmsRealmRolesRoleNameComposites,
    deleteAdminRealmsRealmRolesRoleNameComposites,
    getAdminRealmsRealmRolesRoleNameCompositesClientsClientUuid,
    getAdminRealmsRealmRolesRoleNameCompositesRealm,
    getAdminRealmsRealmRolesRoleNameGroups,
    getAdminRealmsRealmRolesRoleNameManagementPermissions,
    putAdminRealmsRealmRolesRoleNameManagementPermissions,
    getAdminRealmsRealmRolesRoleNameUsers
  },
  component: {
    getAdminRealmsRealmComponents,
    postAdminRealmsRealmComponents,
    getAdminRealmsRealmComponentsId,
    putAdminRealmsRealmComponentsId,
    deleteAdminRealmsRealmComponentsId,
    getAdminRealmsRealmComponentsIdSubComponentTypes
  },
  groups: {
    getAdminRealmsRealmGroups,
    postAdminRealmsRealmGroups,
    getAdminRealmsRealmGroupsCount,
    getAdminRealmsRealmGroupsGroupId,
    putAdminRealmsRealmGroupsGroupId,
    deleteAdminRealmsRealmGroupsGroupId,
    getAdminRealmsRealmGroupsGroupIdChildren,
    postAdminRealmsRealmGroupsGroupIdChildren,
    getAdminRealmsRealmGroupsGroupIdManagementPermissions,
    putAdminRealmsRealmGroupsGroupIdManagementPermissions,
    getAdminRealmsRealmGroupsGroupIdMembers
  },
  roleMapper: {
    getAdminRealmsRealmGroupsGroupIdRoleMappings,
    getAdminRealmsRealmGroupsGroupIdRoleMappingsRealm,
    postAdminRealmsRealmGroupsGroupIdRoleMappingsRealm,
    deleteAdminRealmsRealmGroupsGroupIdRoleMappingsRealm,
    getAdminRealmsRealmGroupsGroupIdRoleMappingsRealmAvailable,
    getAdminRealmsRealmGroupsGroupIdRoleMappingsRealmComposite,
    getAdminRealmsRealmUsersUserIdRoleMappings,
    getAdminRealmsRealmUsersUserIdRoleMappingsRealm,
    postAdminRealmsRealmUsersUserIdRoleMappingsRealm,
    deleteAdminRealmsRealmUsersUserIdRoleMappingsRealm,
    getAdminRealmsRealmUsersUserIdRoleMappingsRealmAvailable,
    getAdminRealmsRealmUsersUserIdRoleMappingsRealmComposite
  },
  clientRoleMappings: {
    getAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientId,
    postAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientId,
    deleteAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientId,
    getAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdAvailable,
    getAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdComposite,
    getAdminRealmsRealmUsersUserIdRoleMappingsClientsClientId,
    postAdminRealmsRealmUsersUserIdRoleMappingsClientsClientId,
    deleteAdminRealmsRealmUsersUserIdRoleMappingsClientsClientId,
    getAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdAvailable,
    getAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdComposite
  },
  identityProviders: {
    postAdminRealmsRealmIdentityProviderImportConfig,
    getAdminRealmsRealmIdentityProviderInstances,
    postAdminRealmsRealmIdentityProviderInstances,
    getAdminRealmsRealmIdentityProviderInstancesAlias,
    putAdminRealmsRealmIdentityProviderInstancesAlias,
    deleteAdminRealmsRealmIdentityProviderInstancesAlias,
    getAdminRealmsRealmIdentityProviderInstancesAliasExport,
    getAdminRealmsRealmIdentityProviderInstancesAliasManagementPermissions,
    putAdminRealmsRealmIdentityProviderInstancesAliasManagementPermissions,
    getAdminRealmsRealmIdentityProviderInstancesAliasMapperTypes,
    getAdminRealmsRealmIdentityProviderInstancesAliasMappers,
    postAdminRealmsRealmIdentityProviderInstancesAliasMappers,
    getAdminRealmsRealmIdentityProviderInstancesAliasMappersId,
    putAdminRealmsRealmIdentityProviderInstancesAliasMappersId,
    deleteAdminRealmsRealmIdentityProviderInstancesAliasMappersId,
    getAdminRealmsRealmIdentityProviderInstancesAliasReloadKeys,
    getAdminRealmsRealmIdentityProviderProvidersProviderId
  },
  key: { getAdminRealmsRealmKeys },
  organizations: {
    getAdminRealmsRealmOrganizations,
    postAdminRealmsRealmOrganizations,
    getAdminRealmsRealmOrganizationsCount,
    getAdminRealmsRealmOrganizationsMembersMemberIdOrganizations,
    getAdminRealmsRealmOrganizationsOrgId,
    putAdminRealmsRealmOrganizationsOrgId,
    deleteAdminRealmsRealmOrganizationsOrgId,
    getAdminRealmsRealmOrganizationsOrgIdIdentityProviders,
    postAdminRealmsRealmOrganizationsOrgIdIdentityProviders,
    getAdminRealmsRealmOrganizationsOrgIdIdentityProvidersAlias,
    deleteAdminRealmsRealmOrganizationsOrgIdIdentityProvidersAlias,
    getAdminRealmsRealmOrganizationsOrgIdMembers,
    postAdminRealmsRealmOrganizationsOrgIdMembers,
    getAdminRealmsRealmOrganizationsOrgIdMembersCount,
    postAdminRealmsRealmOrganizationsOrgIdMembersInviteExistingUser,
    postAdminRealmsRealmOrganizationsOrgIdMembersInviteUser,
    getAdminRealmsRealmOrganizationsOrgIdMembersMemberId,
    deleteAdminRealmsRealmOrganizationsOrgIdMembersMemberId,
    getAdminRealmsRealmOrganizationsOrgIdMembersMemberIdOrganizations
  },
  rolesByID: {
    getAdminRealmsRealmRolesByIdRoleId,
    putAdminRealmsRealmRolesByIdRoleId,
    deleteAdminRealmsRealmRolesByIdRoleId,
    getAdminRealmsRealmRolesByIdRoleIdComposites,
    postAdminRealmsRealmRolesByIdRoleIdComposites,
    deleteAdminRealmsRealmRolesByIdRoleIdComposites,
    getAdminRealmsRealmRolesByIdRoleIdCompositesClientsClientUuid,
    getAdminRealmsRealmRolesByIdRoleIdCompositesRealm,
    getAdminRealmsRealmRolesByIdRoleIdManagementPermissions,
    putAdminRealmsRealmRolesByIdRoleIdManagementPermissions
  },
  users: {
    getAdminRealmsRealmUsers,
    postAdminRealmsRealmUsers,
    getAdminRealmsRealmUsersCount,
    getAdminRealmsRealmUsersProfile,
    putAdminRealmsRealmUsersProfile,
    getAdminRealmsRealmUsersProfileMetadata,
    getAdminRealmsRealmUsersUserId,
    putAdminRealmsRealmUsersUserId,
    deleteAdminRealmsRealmUsersUserId,
    getAdminRealmsRealmUsersUserIdConfiguredUserStorageCredentialTypes,
    getAdminRealmsRealmUsersUserIdConsents,
    deleteAdminRealmsRealmUsersUserIdConsentsClient,
    getAdminRealmsRealmUsersUserIdCredentials,
    deleteAdminRealmsRealmUsersUserIdCredentialsCredentialId,
    postAdminRealmsRealmUsersUserIdCredentialsCredentialIdMoveAfterNewPreviousCredentialId,
    postAdminRealmsRealmUsersUserIdCredentialsCredentialIdMoveToFirst,
    putAdminRealmsRealmUsersUserIdCredentialsCredentialIdUserLabel,
    putAdminRealmsRealmUsersUserIdDisableCredentialTypes,
    putAdminRealmsRealmUsersUserIdExecuteActionsEmail,
    getAdminRealmsRealmUsersUserIdFederatedIdentity,
    postAdminRealmsRealmUsersUserIdFederatedIdentityProvider,
    deleteAdminRealmsRealmUsersUserIdFederatedIdentityProvider,
    getAdminRealmsRealmUsersUserIdGroups,
    getAdminRealmsRealmUsersUserIdGroupsCount,
    putAdminRealmsRealmUsersUserIdGroupsGroupId,
    deleteAdminRealmsRealmUsersUserIdGroupsGroupId,
    postAdminRealmsRealmUsersUserIdImpersonation,
    postAdminRealmsRealmUsersUserIdLogout,
    getAdminRealmsRealmUsersUserIdOfflineSessionsClientUuid,
    putAdminRealmsRealmUsersUserIdResetPassword,
    putAdminRealmsRealmUsersUserIdResetPasswordEmail,
    putAdminRealmsRealmUsersUserIdSendVerifyEmail,
    getAdminRealmsRealmUsersUserIdSessions,
    getAdminRealmsRealmUsersUserIdUnmanagedAttributes
  }
};
