/**
 * Generated by @openapi-codegen
 *
 * @version 1.0
 */
export type AbstractPolicyRepresentation = {
  id?: string;
  name?: string;
  description?: string;
  type?: string;
  /**
   * @uniqueItems true
   */
  policies?: string[];
  /**
   * @uniqueItems true
   */
  resources?: string[];
  /**
   * @uniqueItems true
   */
  scopes?: string[];
  logic?: Logic;
  decisionStrategy?: DecisionStrategy;
  owner?: string;
  resourceType?: string;
  /**
   * @uniqueItems true
   */
  resourcesData?: ResourceRepresentation[];
  /**
   * @uniqueItems true
   */
  scopesData?: ScopeRepresentation[];
};

export type Access = {
  /**
   * @uniqueItems true
   */
  roles?: string[];
  verify_caller?: boolean;
};

export type AccessToken = {
  jti?: string;
  /**
   * @format int64
   */
  exp?: number;
  /**
   * @format int64
   */
  nbf?: number;
  /**
   * @format int64
   */
  iat?: number;
  iss?: string;
  sub?: string;
  typ?: string;
  azp?: string;
  otherClaims?: {
    [key: string]: any;
  };
  nonce?: string;
  /**
   * @format int64
   */
  auth_time?: number;
  sid?: string;
  at_hash?: string;
  c_hash?: string;
  name?: string;
  given_name?: string;
  family_name?: string;
  middle_name?: string;
  nickname?: string;
  preferred_username?: string;
  profile?: string;
  picture?: string;
  website?: string;
  email?: string;
  email_verified?: boolean;
  gender?: string;
  birthdate?: string;
  zoneinfo?: string;
  locale?: string;
  phone_number?: string;
  phone_number_verified?: boolean;
  address?: AddressClaimSet;
  /**
   * @format int64
   */
  updated_at?: number;
  claims_locales?: string;
  acr?: string;
  s_hash?: string;
  /**
   * @uniqueItems true
   */
  ['trusted-certs']?: string[];
  /**
   * @uniqueItems true
   */
  ['allowed-origins']?: string[];
  realm_access?: Access;
  resource_access?: {
    [key: string]: Access;
  };
  authorization?: Authorization;
  cnf?: Confirmation;
  scope?: string;
};

export type AddressClaimSet = {
  formatted?: string;
  street_address?: string;
  locality?: string;
  region?: string;
  postal_code?: string;
  country?: string;
};

export type AdminEventRepresentation = {
  id?: string;
  /**
   * @format int64
   */
  time?: number;
  realmId?: string;
  authDetails?: AuthDetailsRepresentation;
  operationType?: string;
  resourceType?: string;
  resourcePath?: string;
  representation?: string;
  error?: string;
  details?: {
    [key: string]: string;
  };
};

/**
 * @deprecated true
 */
export type ApplicationRepresentation = {
  id?: string;
  clientId?: string;
  description?: string;
  type?: string;
  rootUrl?: string;
  adminUrl?: string;
  baseUrl?: string;
  surrogateAuthRequired?: boolean;
  enabled?: boolean;
  alwaysDisplayInConsole?: boolean;
  clientAuthenticatorType?: string;
  secret?: string;
  registrationAccessToken?: string;
  /**
   * @deprecated true
   */
  defaultRoles?: string[];
  redirectUris?: string[];
  webOrigins?: string[];
  /**
   * @format int32
   */
  notBefore?: number;
  bearerOnly?: boolean;
  consentRequired?: boolean;
  standardFlowEnabled?: boolean;
  implicitFlowEnabled?: boolean;
  directAccessGrantsEnabled?: boolean;
  serviceAccountsEnabled?: boolean;
  authorizationServicesEnabled?: boolean;
  /**
   * @deprecated true
   */
  directGrantsOnly?: boolean;
  publicClient?: boolean;
  frontchannelLogout?: boolean;
  protocol?: string;
  attributes?: {
    [key: string]: string;
  };
  authenticationFlowBindingOverrides?: {
    [key: string]: string;
  };
  fullScopeAllowed?: boolean;
  /**
   * @format int32
   */
  nodeReRegistrationTimeout?: number;
  registeredNodes?: {
    [key: string]: number;
  };
  protocolMappers?: ProtocolMapperRepresentation[];
  /**
   * @deprecated true
   */
  clientTemplate?: string;
  /**
   * @deprecated true
   */
  useTemplateConfig?: boolean;
  /**
   * @deprecated true
   */
  useTemplateScope?: boolean;
  /**
   * @deprecated true
   */
  useTemplateMappers?: boolean;
  defaultClientScopes?: string[];
  optionalClientScopes?: string[];
  authorizationSettings?: ResourceServerRepresentation;
  access?: {
    [key: string]: boolean;
  };
  origin?: string;
  name?: string;
  /**
   * @deprecated true
   */
  claims?: ClaimRepresentation;
};

export type AuthDetailsRepresentation = {
  realmId?: string;
  clientId?: string;
  userId?: string;
  ipAddress?: string;
};

export type AuthenticationExecutionExportRepresentation = {
  authenticatorConfig?: string;
  authenticator?: string;
  authenticatorFlow?: boolean;
  requirement?: string;
  /**
   * @format int32
   */
  priority?: number;
  /**
   * @deprecated true
   */
  autheticatorFlow?: boolean;
  flowAlias?: string;
  userSetupAllowed?: boolean;
};

export type AuthenticationExecutionInfoRepresentation = {
  id?: string;
  requirement?: string;
  displayName?: string;
  alias?: string;
  description?: string;
  requirementChoices?: string[];
  configurable?: boolean;
  authenticationFlow?: boolean;
  providerId?: string;
  authenticationConfig?: string;
  flowId?: string;
  /**
   * @format int32
   */
  level?: number;
  /**
   * @format int32
   */
  index?: number;
  /**
   * @format int32
   */
  priority?: number;
};

export type AuthenticationExecutionRepresentation = {
  authenticatorConfig?: string;
  authenticator?: string;
  authenticatorFlow?: boolean;
  requirement?: string;
  /**
   * @format int32
   */
  priority?: number;
  /**
   * @deprecated true
   */
  autheticatorFlow?: boolean;
  id?: string;
  flowId?: string;
  parentFlow?: string;
};

export type AuthenticationFlowRepresentation = {
  id?: string;
  alias?: string;
  description?: string;
  providerId?: string;
  topLevel?: boolean;
  builtIn?: boolean;
  authenticationExecutions?: AuthenticationExecutionExportRepresentation[];
};

export type AuthenticatorConfigInfoRepresentation = {
  name?: string;
  providerId?: string;
  helpText?: string;
  properties?: ConfigPropertyRepresentation[];
};

export type AuthenticatorConfigRepresentation = {
  id?: string;
  alias?: string;
  config?: {
    [key: string]: string;
  };
};

export type Authorization = {
  permissions?: Permission[];
};

export type AuthorizationSchema = {
  resourceTypes?: {
    [key: string]: ResourceType;
  };
};

export type BruteForceStrategy = 'LINEAR' | 'MULTIPLE';

export type CertificateRepresentation = {
  privateKey?: string;
  publicKey?: string;
  certificate?: string;
  kid?: string;
};

export type ClaimRepresentation = {
  name?: boolean;
  username?: boolean;
  profile?: boolean;
  picture?: boolean;
  website?: boolean;
  email?: boolean;
  gender?: boolean;
  locale?: boolean;
  address?: boolean;
  phone?: boolean;
};

export type ClientInitialAccessCreatePresentation = {
  /**
   * @format int32
   */
  expiration?: number;
  /**
   * @format int32
   */
  count?: number;
};

export type ClientInitialAccessPresentation = {
  id?: string;
  token?: string;
  /**
   * @format int32
   */
  timestamp?: number;
  /**
   * @format int32
   */
  expiration?: number;
  /**
   * @format int32
   */
  count?: number;
  /**
   * @format int32
   */
  remainingCount?: number;
};

export type ClientMappingsRepresentation = {
  id?: string;
  client?: string;
  mappings?: RoleRepresentation[];
};

export type ClientPoliciesRepresentation = {
  policies?: ClientPolicyRepresentation[];
  globalPolicies?: ClientPolicyRepresentation[];
};

export type ClientPolicyConditionRepresentation = {
  condition?: string;
  /**
   * Configuration settings as a JSON object
   */
  configuration?: {
    [key: string]: any;
  };
};

export type ClientPolicyExecutorRepresentation = {
  executor?: string;
  /**
   * Configuration settings as a JSON object
   */
  configuration?: {
    [key: string]: any;
  };
};

export type ClientPolicyRepresentation = {
  name?: string;
  description?: string;
  enabled?: boolean;
  conditions?: ClientPolicyConditionRepresentation[];
  profiles?: string[];
};

export type ClientProfileRepresentation = {
  name?: string;
  description?: string;
  executors?: ClientPolicyExecutorRepresentation[];
};

export type ClientProfilesRepresentation = {
  profiles?: ClientProfileRepresentation[];
  globalProfiles?: ClientProfileRepresentation[];
};

export type ClientRepresentation = {
  id?: string;
  clientId?: string;
  name?: string;
  description?: string;
  type?: string;
  rootUrl?: string;
  adminUrl?: string;
  baseUrl?: string;
  surrogateAuthRequired?: boolean;
  enabled?: boolean;
  alwaysDisplayInConsole?: boolean;
  clientAuthenticatorType?: string;
  secret?: string;
  registrationAccessToken?: string;
  /**
   * @deprecated true
   */
  defaultRoles?: string[];
  redirectUris?: string[];
  webOrigins?: string[];
  /**
   * @format int32
   */
  notBefore?: number;
  bearerOnly?: boolean;
  consentRequired?: boolean;
  standardFlowEnabled?: boolean;
  implicitFlowEnabled?: boolean;
  directAccessGrantsEnabled?: boolean;
  serviceAccountsEnabled?: boolean;
  authorizationServicesEnabled?: boolean;
  /**
   * @deprecated true
   */
  directGrantsOnly?: boolean;
  publicClient?: boolean;
  frontchannelLogout?: boolean;
  protocol?: string;
  attributes?: {
    [key: string]: string;
  };
  authenticationFlowBindingOverrides?: {
    [key: string]: string;
  };
  fullScopeAllowed?: boolean;
  /**
   * @format int32
   */
  nodeReRegistrationTimeout?: number;
  registeredNodes?: {
    [key: string]: number;
  };
  protocolMappers?: ProtocolMapperRepresentation[];
  /**
   * @deprecated true
   */
  clientTemplate?: string;
  /**
   * @deprecated true
   */
  useTemplateConfig?: boolean;
  /**
   * @deprecated true
   */
  useTemplateScope?: boolean;
  /**
   * @deprecated true
   */
  useTemplateMappers?: boolean;
  defaultClientScopes?: string[];
  optionalClientScopes?: string[];
  authorizationSettings?: ResourceServerRepresentation;
  access?: {
    [key: string]: boolean;
  };
  origin?: string;
};

export type ClientScopeRepresentation = {
  id?: string;
  name?: string;
  description?: string;
  protocol?: string;
  attributes?: {
    [key: string]: string;
  };
  protocolMappers?: ProtocolMapperRepresentation[];
};

/**
 * @deprecated true
 */
export type ClientTemplateRepresentation = {
  id?: string;
  name?: string;
  description?: string;
  protocol?: string;
  fullScopeAllowed?: boolean;
  bearerOnly?: boolean;
  consentRequired?: boolean;
  standardFlowEnabled?: boolean;
  implicitFlowEnabled?: boolean;
  directAccessGrantsEnabled?: boolean;
  serviceAccountsEnabled?: boolean;
  publicClient?: boolean;
  frontchannelLogout?: boolean;
  attributes?: {
    [key: string]: string;
  };
  protocolMappers?: ProtocolMapperRepresentation[];
};

export type ClientTypeRepresentation = {
  name?: string;
  provider?: string;
  parent?: string;
  config?: {
    [key: string]: PropertyConfig;
  };
};

export type ClientTypesRepresentation = {
  ['client-types']?: ClientTypeRepresentation[];
  ['global-client-types']?: ClientTypeRepresentation[];
};

export type ComponentExportRepresentation = {
  id?: string;
  name?: string;
  providerId?: string;
  subType?: string;
  subComponents?: MultivaluedHashMapStringComponentExportRepresentation;
  config?: MultivaluedHashMapStringString;
};

export type ComponentRepresentation = {
  id?: string;
  name?: string;
  providerId?: string;
  providerType?: string;
  parentId?: string;
  subType?: string;
  config?: MultivaluedHashMapStringString;
};

export type ComponentTypeRepresentation = {
  id?: string;
  helpText?: string;
  properties?: ConfigPropertyRepresentation[];
  metadata?: {
    [key: string]: any;
  };
};

export type Composites = {
  /**
   * @uniqueItems true
   */
  realm?: string[];
  client?: {
    [key: string]: string[];
  };
  /**
   * @deprecated true
   */
  application?: {
    [key: string]: string[];
  };
};

export type ConfigPropertyRepresentation = {
  name?: string;
  label?: string;
  helpText?: string;
  type?: string;
  defaultValue?: void;
  options?: string[];
  secret?: boolean;
  required?: boolean;
  readOnly?: boolean;
};

export type Confirmation = {
  ['x5t#S256']?: string;
  jkt?: string;
};

export type CredentialRepresentation = {
  id?: string;
  type?: string;
  userLabel?: string;
  /**
   * @format int64
   */
  createdDate?: number;
  secretData?: string;
  credentialData?: string;
  /**
   * @format int32
   */
  priority?: number;
  value?: string;
  temporary?: boolean;
  /**
   * @deprecated true
   */
  device?: string;
  /**
   * @deprecated true
   */
  hashedSaltedValue?: string;
  /**
   * @deprecated true
   */
  salt?: string;
  /**
   * @format int32
   * @deprecated true
   */
  hashIterations?: number;
  /**
   * @format int32
   * @deprecated true
   */
  counter?: number;
  /**
   * @deprecated true
   */
  algorithm?: string;
  /**
   * @format int32
   * @deprecated true
   */
  digits?: number;
  /**
   * @format int32
   * @deprecated true
   */
  period?: number;
  /**
   * @deprecated true
   */
  config?: MultivaluedHashMapStringString;
  federationLink?: string;
};

export type DecisionEffect = 'DENY' | 'PERMIT';

export type DecisionStrategy = 'AFFIRMATIVE' | 'CONSENSUS' | 'UNANIMOUS';

export type EnforcementMode = 'DISABLED' | 'ENFORCING' | 'PERMISSIVE';

export type ErrorRepresentation = {
  field?: string;
  errorMessage?: string;
  params?: any[];
  errors?: ErrorRepresentation[];
};

export type EvaluationResultRepresentation = {
  resource?: ResourceRepresentation;
  scopes?: ScopeRepresentation[];
  /**
   * @uniqueItems true
   */
  policies?: PolicyResultRepresentation[];
  status?: DecisionEffect;
  /**
   * @uniqueItems true
   */
  allowedScopes?: ScopeRepresentation[];
  /**
   * @uniqueItems true
   */
  deniedScopes?: ScopeRepresentation[];
};

export type EventRepresentation = {
  id?: string;
  /**
   * @format int64
   */
  time?: number;
  type?: string;
  realmId?: string;
  clientId?: string;
  userId?: string;
  sessionId?: string;
  ipAddress?: string;
  error?: string;
  details?: {
    [key: string]: string;
  };
};

export type FederatedIdentityRepresentation = {
  identityProvider?: string;
  userId?: string;
  userName?: string;
};

export type GlobalRequestResult = {
  successRequests?: string[];
  failedRequests?: string[];
};

export type GroupRepresentation = {
  id?: string;
  name?: string;
  description?: string;
  path?: string;
  parentId?: string;
  /**
   * @format int64
   */
  subGroupCount?: number;
  subGroups?: GroupRepresentation[];
  attributes?: {
    [key: string]: string[];
  };
  realmRoles?: string[];
  clientRoles?: {
    [key: string]: string[];
  };
  access?: {
    [key: string]: boolean;
  };
};

export type IDToken = {
  jti?: string;
  /**
   * @format int64
   */
  exp?: number;
  /**
   * @format int64
   */
  nbf?: number;
  /**
   * @format int64
   */
  iat?: number;
  iss?: string;
  sub?: string;
  typ?: string;
  azp?: string;
  otherClaims?: {
    [key: string]: any;
  };
  nonce?: string;
  /**
   * @format int64
   */
  auth_time?: number;
  sid?: string;
  at_hash?: string;
  c_hash?: string;
  name?: string;
  given_name?: string;
  family_name?: string;
  middle_name?: string;
  nickname?: string;
  preferred_username?: string;
  profile?: string;
  picture?: string;
  website?: string;
  email?: string;
  email_verified?: boolean;
  gender?: string;
  birthdate?: string;
  zoneinfo?: string;
  locale?: string;
  phone_number?: string;
  phone_number_verified?: boolean;
  address?: AddressClaimSet;
  /**
   * @format int64
   */
  updated_at?: number;
  claims_locales?: string;
  acr?: string;
  s_hash?: string;
};

export type IdentityProviderMapperRepresentation = {
  id?: string;
  name?: string;
  identityProviderAlias?: string;
  identityProviderMapper?: string;
  config?: {
    [key: string]: string;
  };
};

export type IdentityProviderMapperTypeRepresentation = {
  id?: string;
  name?: string;
  category?: string;
  helpText?: string;
  properties?: ConfigPropertyRepresentation[];
};

export type IdentityProviderRepresentation = {
  alias?: string;
  displayName?: string;
  internalId?: string;
  providerId?: string;
  enabled?: boolean;
  /**
   * @deprecated true
   */
  updateProfileFirstLoginMode?: string;
  trustEmail?: boolean;
  storeToken?: boolean;
  addReadTokenRoleOnCreate?: boolean;
  authenticateByDefault?: boolean;
  linkOnly?: boolean;
  hideOnLogin?: boolean;
  firstBrokerLoginFlowAlias?: string;
  postBrokerLoginFlowAlias?: string;
  organizationId?: string;
  config?: {
    [key: string]: string;
  };
  /**
   * @deprecated true
   */
  updateProfileFirstLogin?: boolean;
};

export type InstallationAdapterConfig = {
  realm?: string;
  ['realm-public-key']?: string;
  ['auth-server-url']?: string;
  ['ssl-required']?: string;
  ['bearer-only']?: boolean;
  resource?: string;
  ['public-client']?: boolean;
  ['verify-token-audience']?: boolean;
  credentials?: {
    [key: string]: any;
  };
  ['use-resource-role-mappings']?: boolean;
  /**
   * @format int32
   */
  ['confidential-port']?: number;
  ['policy-enforcer']?: PolicyEnforcerConfig;
};

export type KeyMetadataRepresentation = {
  providerId?: string;
  /**
   * @format int64
   */
  providerPriority?: number;
  kid?: string;
  status?: string;
  type?: string;
  algorithm?: string;
  publicKey?: string;
  certificate?: string;
  use?: KeyUse;
  /**
   * @format int64
   */
  validTo?: number;
};

export type KeyStoreConfig = {
  realmCertificate?: boolean;
  storePassword?: string;
  keyPassword?: string;
  keyAlias?: string;
  realmAlias?: string;
  format?: string;
  /**
   * @format int32
   */
  keySize?: number;
  /**
   * @format int32
   */
  validity?: number;
};

export type KeyUse = 'ENC' | 'SIG';

export type KeysMetadataRepresentation = {
  active?: {
    [key: string]: string;
  };
  keys?: KeyMetadataRepresentation[];
};

export type Logic = 'NEGATIVE' | 'POSITIVE';

export type ManagementPermissionReference = {
  enabled?: boolean;
  resource?: string;
  scopePermissions?: {
    [key: string]: string;
  };
};

export type MappingsRepresentation = {
  realmMappings?: RoleRepresentation[];
  clientMappings?: {
    [key: string]: ClientMappingsRepresentation;
  };
};

export type MemberRepresentation = {
  id?: string;
  username?: string;
  firstName?: string;
  lastName?: string;
  email?: string;
  emailVerified?: boolean;
  attributes?: {
    [key: string]: string[];
  };
  userProfileMetadata?: UserProfileMetadata;
  enabled?: boolean;
  self?: string;
  origin?: string;
  /**
   * @format int64
   */
  createdTimestamp?: number;
  totp?: boolean;
  federationLink?: string;
  serviceAccountClientId?: string;
  credentials?: CredentialRepresentation[];
  /**
   * @uniqueItems true
   */
  disableableCredentialTypes?: string[];
  requiredActions?: string[];
  federatedIdentities?: FederatedIdentityRepresentation[];
  realmRoles?: string[];
  clientRoles?: {
    [key: string]: string[];
  };
  clientConsents?: UserConsentRepresentation[];
  /**
   * @format int32
   */
  notBefore?: number;
  /**
   * @deprecated true
   */
  applicationRoles?: {
    [key: string]: string[];
  };
  /**
   * @deprecated true
   */
  socialLinks?: SocialLinkRepresentation[];
  groups?: string[];
  access?: {
    [key: string]: boolean;
  };
  membershipType?: MembershipType;
};

export type MembershipType = 'MANAGED' | 'UNMANAGED';

export type MethodConfig = {
  method?: string;
  scopes?: string[];
  ['scopes-enforcement-mode']?: ScopeEnforcementMode;
};

export type MultivaluedHashMapStringComponentExportRepresentation = {
  [key: string]: ComponentExportRepresentation[];
};

export type MultivaluedHashMapStringString = {
  [key: string]: string[];
};

/**
 * @deprecated true
 */
export type OAuthClientRepresentation = {
  id?: string;
  clientId?: string;
  description?: string;
  type?: string;
  rootUrl?: string;
  adminUrl?: string;
  baseUrl?: string;
  surrogateAuthRequired?: boolean;
  enabled?: boolean;
  alwaysDisplayInConsole?: boolean;
  clientAuthenticatorType?: string;
  secret?: string;
  registrationAccessToken?: string;
  /**
   * @deprecated true
   */
  defaultRoles?: string[];
  redirectUris?: string[];
  webOrigins?: string[];
  /**
   * @format int32
   */
  notBefore?: number;
  bearerOnly?: boolean;
  consentRequired?: boolean;
  standardFlowEnabled?: boolean;
  implicitFlowEnabled?: boolean;
  directAccessGrantsEnabled?: boolean;
  serviceAccountsEnabled?: boolean;
  authorizationServicesEnabled?: boolean;
  /**
   * @deprecated true
   */
  directGrantsOnly?: boolean;
  publicClient?: boolean;
  frontchannelLogout?: boolean;
  protocol?: string;
  attributes?: {
    [key: string]: string;
  };
  authenticationFlowBindingOverrides?: {
    [key: string]: string;
  };
  fullScopeAllowed?: boolean;
  /**
   * @format int32
   */
  nodeReRegistrationTimeout?: number;
  registeredNodes?: {
    [key: string]: number;
  };
  protocolMappers?: ProtocolMapperRepresentation[];
  /**
   * @deprecated true
   */
  clientTemplate?: string;
  /**
   * @deprecated true
   */
  useTemplateConfig?: boolean;
  /**
   * @deprecated true
   */
  useTemplateScope?: boolean;
  /**
   * @deprecated true
   */
  useTemplateMappers?: boolean;
  defaultClientScopes?: string[];
  optionalClientScopes?: string[];
  authorizationSettings?: ResourceServerRepresentation;
  access?: {
    [key: string]: boolean;
  };
  origin?: string;
  name?: string;
  /**
   * @deprecated true
   */
  claims?: ClaimRepresentation;
};

export type OrganizationDomainRepresentation = {
  name?: string;
  verified?: boolean;
};

export type OrganizationRepresentation = {
  id?: string;
  name?: string;
  alias?: string;
  enabled?: boolean;
  description?: string;
  redirectUrl?: string;
  attributes?: {
    [key: string]: string[];
  };
  /**
   * @uniqueItems true
   */
  domains?: OrganizationDomainRepresentation[];
  members?: MemberRepresentation[];
  identityProviders?: IdentityProviderRepresentation[];
};

export type PathCacheConfig = {
  /**
   * @format int32
   */
  ['max-entries']?: number;
  /**
   * @format int64
   */
  lifespan?: number;
};

export type PathConfig = {
  name?: string;
  type?: string;
  path?: string;
  methods?: MethodConfig[];
  scopes?: string[];
  id?: string;
  ['enforcement-mode']?: EnforcementMode;
  ['claim-information-point']?: {
    [key: string]: {
      [key: string]: any;
    };
  };
  invalidated?: boolean;
  staticPath?: boolean;
  static?: boolean;
};

export type Permission = {
  rsid?: string;
  rsname?: string;
  /**
   * @uniqueItems true
   */
  scopes?: string[];
  claims?: {
    [key: string]: string[];
  };
};

export type PolicyEnforcementMode = 'DISABLED' | 'ENFORCING' | 'PERMISSIVE';

export type PolicyEnforcerConfig = {
  ['enforcement-mode']?: EnforcementMode;
  paths?: PathConfig[];
  ['path-cache']?: PathCacheConfig;
  ['lazy-load-paths']?: boolean;
  ['on-deny-redirect-to']?: string;
  ['user-managed-access']?: UserManagedAccessConfig;
  ['claim-information-point']?: {
    [key: string]: {
      [key: string]: any;
    };
  };
  ['http-method-as-scope']?: boolean;
  realm?: string;
  ['auth-server-url']?: string;
  credentials?: {
    [key: string]: any;
  };
  resource?: string;
};

export type PolicyEvaluationRequest = {
  context?: {
    [key: string]: {
      [key: string]: string;
    };
  };
  resources?: ResourceRepresentation[];
  resourceType?: string;
  clientId?: string;
  userId?: string;
  roleIds?: string[];
  entitlements?: boolean;
};

export type PolicyEvaluationResponse = {
  results?: EvaluationResultRepresentation[];
  entitlements?: boolean;
  status?: DecisionEffect;
  rpt?: AccessToken;
};

export type PolicyProviderRepresentation = {
  type?: string;
  name?: string;
  group?: string;
};

export type PolicyRepresentation = {
  id?: string;
  name?: string;
  description?: string;
  type?: string;
  /**
   * @uniqueItems true
   */
  policies?: string[];
  /**
   * @uniqueItems true
   */
  resources?: string[];
  /**
   * @uniqueItems true
   */
  scopes?: string[];
  logic?: Logic;
  decisionStrategy?: DecisionStrategy;
  owner?: string;
  resourceType?: string;
  /**
   * @uniqueItems true
   */
  resourcesData?: ResourceRepresentation[];
  /**
   * @uniqueItems true
   */
  scopesData?: ScopeRepresentation[];
  config?: {
    [key: string]: string;
  };
};

export type PolicyResultRepresentation = {
  policy?: PolicyRepresentation;
  status?: DecisionEffect;
  associatedPolicies?: PolicyResultRepresentation[];
  /**
   * @uniqueItems true
   */
  scopes?: string[];
  resourceType?: string;
};

export type PropertyConfig = {
  applicable?: boolean;
  value?: void;
};

export type ProtocolMapperEvaluationRepresentation = {
  mapperId?: string;
  mapperName?: string;
  containerId?: string;
  containerName?: string;
  containerType?: string;
  protocolMapper?: string;
};

export type ProtocolMapperRepresentation = {
  id?: string;
  name?: string;
  protocol?: string;
  protocolMapper?: string;
  /**
   * @deprecated true
   */
  consentRequired?: boolean;
  /**
   * @deprecated true
   */
  consentText?: string;
  config?: {
    [key: string]: string;
  };
};

export type PublishedRealmRepresentation = {
  realm?: string;
  public_key?: string;
  ['token-service']?: string;
  ['account-service']?: string;
  /**
   * @format int32
   */
  ['tokens-not-before']?: number;
};

export type RealmEventsConfigRepresentation = {
  eventsEnabled?: boolean;
  /**
   * @format int64
   */
  eventsExpiration?: number;
  eventsListeners?: string[];
  enabledEventTypes?: string[];
  adminEventsEnabled?: boolean;
  adminEventsDetailsEnabled?: boolean;
};

export type RealmRepresentation = {
  id?: string;
  realm?: string;
  displayName?: string;
  displayNameHtml?: string;
  /**
   * @format int32
   */
  notBefore?: number;
  defaultSignatureAlgorithm?: string;
  revokeRefreshToken?: boolean;
  /**
   * @format int32
   */
  refreshTokenMaxReuse?: number;
  /**
   * @format int32
   */
  accessTokenLifespan?: number;
  /**
   * @format int32
   */
  accessTokenLifespanForImplicitFlow?: number;
  /**
   * @format int32
   */
  ssoSessionIdleTimeout?: number;
  /**
   * @format int32
   */
  ssoSessionMaxLifespan?: number;
  /**
   * @format int32
   */
  ssoSessionIdleTimeoutRememberMe?: number;
  /**
   * @format int32
   */
  ssoSessionMaxLifespanRememberMe?: number;
  /**
   * @format int32
   */
  offlineSessionIdleTimeout?: number;
  offlineSessionMaxLifespanEnabled?: boolean;
  /**
   * @format int32
   */
  offlineSessionMaxLifespan?: number;
  /**
   * @format int32
   */
  clientSessionIdleTimeout?: number;
  /**
   * @format int32
   */
  clientSessionMaxLifespan?: number;
  /**
   * @format int32
   */
  clientOfflineSessionIdleTimeout?: number;
  /**
   * @format int32
   */
  clientOfflineSessionMaxLifespan?: number;
  /**
   * @format int32
   */
  accessCodeLifespan?: number;
  /**
   * @format int32
   */
  accessCodeLifespanUserAction?: number;
  /**
   * @format int32
   */
  accessCodeLifespanLogin?: number;
  /**
   * @format int32
   */
  actionTokenGeneratedByAdminLifespan?: number;
  /**
   * @format int32
   */
  actionTokenGeneratedByUserLifespan?: number;
  /**
   * @format int32
   */
  oauth2DeviceCodeLifespan?: number;
  /**
   * @format int32
   */
  oauth2DevicePollingInterval?: number;
  enabled?: boolean;
  sslRequired?: string;
  /**
   * @deprecated true
   */
  passwordCredentialGrantAllowed?: boolean;
  registrationAllowed?: boolean;
  registrationEmailAsUsername?: boolean;
  rememberMe?: boolean;
  verifyEmail?: boolean;
  loginWithEmailAllowed?: boolean;
  duplicateEmailsAllowed?: boolean;
  resetPasswordAllowed?: boolean;
  editUsernameAllowed?: boolean;
  /**
   * @deprecated true
   */
  userCacheEnabled?: boolean;
  /**
   * @deprecated true
   */
  realmCacheEnabled?: boolean;
  bruteForceProtected?: boolean;
  permanentLockout?: boolean;
  /**
   * @format int32
   */
  maxTemporaryLockouts?: number;
  bruteForceStrategy?: BruteForceStrategy;
  /**
   * @format int32
   */
  maxFailureWaitSeconds?: number;
  /**
   * @format int32
   */
  minimumQuickLoginWaitSeconds?: number;
  /**
   * @format int32
   */
  waitIncrementSeconds?: number;
  /**
   * @format int64
   */
  quickLoginCheckMilliSeconds?: number;
  /**
   * @format int32
   */
  maxDeltaTimeSeconds?: number;
  /**
   * @format int32
   */
  failureFactor?: number;
  /**
   * @deprecated true
   */
  privateKey?: string;
  /**
   * @deprecated true
   */
  publicKey?: string;
  /**
   * @deprecated true
   */
  certificate?: string;
  /**
   * @deprecated true
   */
  codeSecret?: string;
  roles?: RolesRepresentation;
  groups?: GroupRepresentation[];
  /**
   * @deprecated true
   */
  defaultRoles?: string[];
  defaultRole?: RoleRepresentation;
  adminPermissionsClient?: ClientRepresentation;
  defaultGroups?: string[];
  /**
   * @uniqueItems true
   * @deprecated true
   */
  requiredCredentials?: string[];
  passwordPolicy?: string;
  otpPolicyType?: string;
  otpPolicyAlgorithm?: string;
  /**
   * @format int32
   */
  otpPolicyInitialCounter?: number;
  /**
   * @format int32
   */
  otpPolicyDigits?: number;
  /**
   * @format int32
   */
  otpPolicyLookAheadWindow?: number;
  /**
   * @format int32
   */
  otpPolicyPeriod?: number;
  otpPolicyCodeReusable?: boolean;
  otpSupportedApplications?: string[];
  localizationTexts?: {
    [key: string]: {
      [key: string]: string;
    };
  };
  webAuthnPolicyRpEntityName?: string;
  webAuthnPolicySignatureAlgorithms?: string[];
  webAuthnPolicyRpId?: string;
  webAuthnPolicyAttestationConveyancePreference?: string;
  webAuthnPolicyAuthenticatorAttachment?: string;
  webAuthnPolicyRequireResidentKey?: string;
  webAuthnPolicyUserVerificationRequirement?: string;
  /**
   * @format int32
   */
  webAuthnPolicyCreateTimeout?: number;
  webAuthnPolicyAvoidSameAuthenticatorRegister?: boolean;
  webAuthnPolicyAcceptableAaguids?: string[];
  webAuthnPolicyExtraOrigins?: string[];
  webAuthnPolicyPasswordlessRpEntityName?: string;
  webAuthnPolicyPasswordlessSignatureAlgorithms?: string[];
  webAuthnPolicyPasswordlessRpId?: string;
  webAuthnPolicyPasswordlessAttestationConveyancePreference?: string;
  webAuthnPolicyPasswordlessAuthenticatorAttachment?: string;
  webAuthnPolicyPasswordlessRequireResidentKey?: string;
  webAuthnPolicyPasswordlessUserVerificationRequirement?: string;
  /**
   * @format int32
   */
  webAuthnPolicyPasswordlessCreateTimeout?: number;
  webAuthnPolicyPasswordlessAvoidSameAuthenticatorRegister?: boolean;
  webAuthnPolicyPasswordlessAcceptableAaguids?: string[];
  webAuthnPolicyPasswordlessExtraOrigins?: string[];
  webAuthnPolicyPasswordlessPasskeysEnabled?: boolean;
  clientProfiles?: ClientProfilesRepresentation;
  clientPolicies?: ClientPoliciesRepresentation;
  users?: UserRepresentation[];
  federatedUsers?: UserRepresentation[];
  scopeMappings?: ScopeMappingRepresentation[];
  clientScopeMappings?: {
    [key: string]: ScopeMappingRepresentation[];
  };
  clients?: ClientRepresentation[];
  clientScopes?: ClientScopeRepresentation[];
  defaultDefaultClientScopes?: string[];
  defaultOptionalClientScopes?: string[];
  browserSecurityHeaders?: {
    [key: string]: string;
  };
  smtpServer?: {
    [key: string]: string;
  };
  userFederationProviders?: UserFederationProviderRepresentation[];
  userFederationMappers?: UserFederationMapperRepresentation[];
  loginTheme?: string;
  accountTheme?: string;
  adminTheme?: string;
  emailTheme?: string;
  eventsEnabled?: boolean;
  /**
   * @format int64
   */
  eventsExpiration?: number;
  eventsListeners?: string[];
  enabledEventTypes?: string[];
  adminEventsEnabled?: boolean;
  adminEventsDetailsEnabled?: boolean;
  identityProviders?: IdentityProviderRepresentation[];
  identityProviderMappers?: IdentityProviderMapperRepresentation[];
  protocolMappers?: ProtocolMapperRepresentation[];
  components?: MultivaluedHashMapStringComponentExportRepresentation;
  internationalizationEnabled?: boolean;
  /**
   * @uniqueItems true
   */
  supportedLocales?: string[];
  defaultLocale?: string;
  authenticationFlows?: AuthenticationFlowRepresentation[];
  authenticatorConfig?: AuthenticatorConfigRepresentation[];
  requiredActions?: RequiredActionProviderRepresentation[];
  browserFlow?: string;
  registrationFlow?: string;
  directGrantFlow?: string;
  resetCredentialsFlow?: string;
  clientAuthenticationFlow?: string;
  dockerAuthenticationFlow?: string;
  firstBrokerLoginFlow?: string;
  attributes?: {
    [key: string]: string;
  };
  keycloakVersion?: string;
  userManagedAccessAllowed?: boolean;
  organizationsEnabled?: boolean;
  organizations?: OrganizationRepresentation[];
  verifiableCredentialsEnabled?: boolean;
  adminPermissionsEnabled?: boolean;
  /**
   * @deprecated true
   */
  social?: boolean;
  /**
   * @deprecated true
   */
  updateProfileOnInitialSocialLogin?: boolean;
  /**
   * @deprecated true
   */
  socialProviders?: {
    [key: string]: string;
  };
  /**
   * @deprecated true
   */
  applicationScopeMappings?: {
    [key: string]: ScopeMappingRepresentation[];
  };
  /**
   * @deprecated true
   */
  applications?: ApplicationRepresentation[];
  /**
   * @deprecated true
   */
  oauthClients?: OAuthClientRepresentation[];
  /**
   * @deprecated true
   */
  clientTemplates?: ClientTemplateRepresentation[];
  /**
   * @format int32
   */
  oAuth2DeviceCodeLifespan?: number;
  /**
   * @format int32
   */
  oAuth2DevicePollingInterval?: number;
};

export type RequiredActionConfigInfoRepresentation = {
  properties?: ConfigPropertyRepresentation[];
};

export type RequiredActionConfigRepresentation = {
  config?: {
    [key: string]: string;
  };
};

export type RequiredActionProviderRepresentation = {
  alias?: string;
  name?: string;
  providerId?: string;
  enabled?: boolean;
  defaultAction?: boolean;
  /**
   * @format int32
   */
  priority?: number;
  config?: {
    [key: string]: string;
  };
};

export type ResourceOwnerRepresentation = {
  id?: string;
  name?: string;
};

export type ResourceRepresentation = {
  _id?: string;
  name?: string;
  /**
   * @uniqueItems true
   */
  uris?: string[];
  type?: string;
  /**
   * @uniqueItems true
   */
  scopes?: ScopeRepresentation[];
  icon_uri?: string;
  owner?: ResourceOwnerRepresentation;
  ownerManagedAccess?: boolean;
  displayName?: string;
  attributes?: {
    [key: string]: string[];
  };
  /**
   * @deprecated true
   */
  uri?: string;
  /**
   * @uniqueItems true
   */
  scopesUma?: ScopeRepresentation[];
};

export type ResourceServerRepresentation = {
  id?: string;
  clientId?: string;
  name?: string;
  allowRemoteResourceManagement?: boolean;
  policyEnforcementMode?: PolicyEnforcementMode;
  resources?: ResourceRepresentation[];
  policies?: PolicyRepresentation[];
  scopes?: ScopeRepresentation[];
  decisionStrategy?: DecisionStrategy;
  authorizationSchema?: AuthorizationSchema;
};

export type ResourceType = {
  type?: string;
  /**
   * @uniqueItems true
   */
  scopes?: string[];
  scopeAliases?: {
    [key: string]: string[];
  };
  groupType?: string;
};

export type RoleRepresentation = {
  id?: string;
  name?: string;
  description?: string;
  /**
   * @deprecated true
   */
  scopeParamRequired?: boolean;
  composite?: boolean;
  composites?: Composites;
  clientRole?: boolean;
  containerId?: string;
  attributes?: {
    [key: string]: string[];
  };
};

export type RolesRepresentation = {
  realm?: RoleRepresentation[];
  client?: {
    [key: string]: RoleRepresentation[];
  };
  /**
   * @deprecated true
   */
  application?: {
    [key: string]: RoleRepresentation[];
  };
};

export type ScopeEnforcementMode = 'ALL' | 'ANY' | 'DISABLED';

export type ScopeMappingRepresentation = {
  self?: string;
  client?: string;
  /**
   * @deprecated true
   */
  clientTemplate?: string;
  clientScope?: string;
  /**
   * @uniqueItems true
   */
  roles?: string[];
};

export type ScopeRepresentation = {
  id?: string;
  name?: string;
  iconUri?: string;
  policies?: PolicyRepresentation[];
  resources?: ResourceRepresentation[];
  displayName?: string;
};

export type SocialLinkRepresentation = {
  socialProvider?: string;
  socialUserId?: string;
  socialUsername?: string;
};

export type UPAttribute = {
  name?: string;
  displayName?: string;
  validations?: {
    [key: string]: {
      [key: string]: any;
    };
  };
  annotations?: {
    [key: string]: any;
  };
  required?: UPAttributeRequired;
  permissions?: UPAttributePermissions;
  selector?: UPAttributeSelector;
  group?: string;
  multivalued?: boolean;
};

export type UPAttributePermissions = {
  /**
   * @uniqueItems true
   */
  view?: string[];
  /**
   * @uniqueItems true
   */
  edit?: string[];
};

export type UPAttributeRequired = {
  /**
   * @uniqueItems true
   */
  roles?: string[];
  /**
   * @uniqueItems true
   */
  scopes?: string[];
};

export type UPAttributeSelector = {
  /**
   * @uniqueItems true
   */
  scopes?: string[];
};

export type UPConfig = {
  attributes?: UPAttribute[];
  groups?: UPGroup[];
  unmanagedAttributePolicy?: UnmanagedAttributePolicy;
};

export type UPGroup = {
  name?: string;
  displayHeader?: string;
  displayDescription?: string;
  annotations?: {
    [key: string]: any;
  };
};

export type UnmanagedAttributePolicy = 'ADMIN_EDIT' | 'ADMIN_VIEW' | 'ENABLED';

export type UserConsentRepresentation = {
  clientId?: string;
  grantedClientScopes?: string[];
  /**
   * @format int64
   */
  createdDate?: number;
  /**
   * @format int64
   */
  lastUpdatedDate?: number;
  /**
   * @deprecated true
   */
  grantedRealmRoles?: string[];
};

export type UserFederationMapperRepresentation = {
  id?: string;
  name?: string;
  federationProviderDisplayName?: string;
  federationMapperType?: string;
  config?: {
    [key: string]: string;
  };
};

export type UserFederationProviderRepresentation = {
  id?: string;
  displayName?: string;
  providerName?: string;
  config?: {
    [key: string]: string;
  };
  /**
   * @format int32
   */
  priority?: number;
  /**
   * @format int32
   */
  fullSyncPeriod?: number;
  /**
   * @format int32
   */
  changedSyncPeriod?: number;
  /**
   * @format int32
   */
  lastSync?: number;
};

export type UserManagedAccessConfig = Record<string, any>;

export type UserProfileAttributeGroupMetadata = {
  name?: string;
  displayHeader?: string;
  displayDescription?: string;
  annotations?: {
    [key: string]: any;
  };
};

export type UserProfileAttributeMetadata = {
  name?: string;
  displayName?: string;
  required?: boolean;
  readOnly?: boolean;
  annotations?: {
    [key: string]: any;
  };
  validators?: {
    [key: string]: {
      [key: string]: any;
    };
  };
  group?: string;
  multivalued?: boolean;
};

export type UserProfileMetadata = {
  attributes?: UserProfileAttributeMetadata[];
  groups?: UserProfileAttributeGroupMetadata[];
};

export type UserRepresentation = {
  id?: string;
  username?: string;
  firstName?: string;
  lastName?: string;
  email?: string;
  emailVerified?: boolean;
  attributes?: {
    [key: string]: string[];
  };
  userProfileMetadata?: UserProfileMetadata;
  enabled?: boolean;
  self?: string;
  origin?: string;
  /**
   * @format int64
   */
  createdTimestamp?: number;
  totp?: boolean;
  federationLink?: string;
  serviceAccountClientId?: string;
  credentials?: CredentialRepresentation[];
  /**
   * @uniqueItems true
   */
  disableableCredentialTypes?: string[];
  requiredActions?: string[];
  federatedIdentities?: FederatedIdentityRepresentation[];
  realmRoles?: string[];
  clientRoles?: {
    [key: string]: string[];
  };
  clientConsents?: UserConsentRepresentation[];
  /**
   * @format int32
   */
  notBefore?: number;
  /**
   * @deprecated true
   */
  applicationRoles?: {
    [key: string]: string[];
  };
  /**
   * @deprecated true
   */
  socialLinks?: SocialLinkRepresentation[];
  groups?: string[];
  access?: {
    [key: string]: boolean;
  };
};

export type UserSessionRepresentation = {
  id?: string;
  username?: string;
  userId?: string;
  ipAddress?: string;
  /**
   * @format int64
   */
  start?: number;
  /**
   * @format int64
   */
  lastAccess?: number;
  rememberMe?: boolean;
  clients?: {
    [key: string]: string;
  };
  transientUser?: boolean;
};
