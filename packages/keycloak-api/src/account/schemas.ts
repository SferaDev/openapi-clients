/**
 * Generated by @openapi-codegen
 *
 * @version 1.0.0
 */
export type OrganizationRepresentation = {
  id?: string;
  name?: string;
  alias?: string;
  description?: string;
  enabled?: boolean;
  domains?: string[];
};

export type GroupRepresentation = {
  access?: {
    [key: string]: any;
  };
  attributes?: {
    [key: string]: any;
  };
  clientRoles?: {
    [key: string]: any;
  };
  id?: string;
  name?: string;
  path?: string;
  realmRoles?: string[];
  subGroups?: GroupRepresentation[];
};

export type ClientRepresentation = {
  clientId?: string;
  clientName?: string;
  description?: string;
  userConsentRequired?: boolean;
  inUse?: boolean;
  offlineAccess?: boolean;
  rootUrl?: string;
  baseUrl?: string;
  effectiveUrl?: string;
  logoUri?: string;
  policyUri?: string;
  tosUri?: string;
  consent?: ConsentRepresentation;
};

export type ConsentRepresentation = {
  createdDate?: number;
  lastUpdatedDate?: number;
  grantedScopes?: ConsentScopeRepresentation[];
};

export type ConsentScopeRepresentation = {
  id?: string;
  name?: string;
  displayText?: string;
};

export type LinkedAccountRepresentation = {
  connected?: boolean;
  social?: boolean;
  providerAlias?: string;
  providerName?: string;
  displayName?: string;
  linkedUsername?: string;
};

export type AccountLinkUriRepresentation = {
  accountLinkUri?: string;
  nonce?: string;
  hash?: string;
};

export type AccountRepresentation = {
  id?: string;
  username?: string;
  firstName?: string;
  lastName?: string;
  email?: string;
  emailVerified?: boolean;
  userProfileMetadata?: UserProfileMetadataRepresentation;
  attributes?: UserProfileAttributesRepresentation;
};

export type UserProfileMetadataRepresentation = {
  attributes?: UserProfileMetadataAttributeRepresentation[];
};

export type UserProfileAttributesRepresentation = {
  locale?: string[];
};

export type UserProfileMetadataAttributeRepresentation = {
  name?: string;
  displayName?: string;
  required?: boolean;
  readOnly?: boolean;
  validators?: Record<string, any>;
};

export type CredentialRepresentation = {
  type?: string;
  category?: string;
  displayName?: string;
  helpText?: string;
  iconCssClass?: string;
  updateAction?: string;
  removeable?: boolean;
  userCredentialMetadatas?: UserCredentialMetadataRepresentation[];
};

export type UserCredentialMetadataRepresentation = {
  credential?: CredentialMetadataRepresentation;
};

export type CredentialMetadataRepresentation = {
  id?: string;
  type?: string;
  userLabel?: string;
  createdDate?: string;
  credentialData?: Record<string, any>;
};

export type SessionRepresentation = {
  id?: string;
  ipAddress?: string;
  started?: number;
  lastAccess?: number;
  expires?: number;
  browser?: string;
  current?: boolean;
  clients?: ClientRepresentation[];
};

export type DeviceRepresentation = {
  id?: string;
  ipAddress?: string;
  os?: string;
  osVersion?: string;
  browser?: string;
  device?: string;
  lastAccess?: number;
  current?: boolean;
  mobile?: boolean;
  sessions?: SessionRepresentation[];
};
