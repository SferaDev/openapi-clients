/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import { z } from 'zod';

/**
 * @description Enum containing the actions that can be performed against a resource. Group operations are included.
 */
export const aCLActionSchema = z
  .enum(['create', 'delete', 'list', 'read', 'update'])
  .describe('Enum containing the actions that can be performed against a resource. Group operations are included.');

export const flagJSONValueSchema = z
  .union([z.boolean(), z.array(z.unknown()), z.string(), z.number(), z.object({}).catchall(z.unknown())])
  .nullable();

/**
 * @description This object contains information related to the pagination of the current request, including the necessary parameters to get the next or previous page of data.
 */
export const paginationSchema = z
  .object({
    count: z.number().describe('Amount of items in the current page.'),
    next: z.number().describe('Timestamp that must be used to request the next page.').nullable(),
    prev: z.number().describe('Timestamp that must be used to request the previous page.').nullable()
  })
  .describe(
    'This object contains information related to the pagination of the current request, including the necessary parameters to get the next or previous page of data.'
  );

export const edgeConfigItemValueSchema = z
  .union([z.boolean(), z.array(z.unknown()), z.string(), z.number(), z.object({}).catchall(z.unknown())])
  .nullable();

/**
 * @description The EdgeConfig.
 */
export const edgeConfigItemSchema = z
  .object({
    key: z.string(),
    value: z.unknown(),
    description: z.string().optional(),
    edgeConfigId: z.string(),
    createdAt: z.number(),
    updatedAt: z.number()
  })
  .describe('The EdgeConfig.');

/**
 * @description The EdgeConfig.
 */
export const edgeConfigTokenSchema = z
  .object({
    token: z.string(),
    label: z.string(),
    id: z.string().describe('This is not the token itself, but rather an id to identify the token by'),
    edgeConfigId: z.string(),
    createdAt: z.number()
  })
  .describe('The EdgeConfig.');

/**
 * @description Array of events generated by the User.
 */
export const userEventSchema = z
  .object({
    id: z.string().describe('The unique identifier of the Event.'),
    text: z.string().describe('The human-readable text of the Event.'),
    entities: z
      .array(
        z
          .object({
            type: z
              .enum([
                'author',
                'bitbucket_login',
                'bold',
                'deployment_host',
                'dns_record',
                'edge-config',
                'env_var_name',
                'flag',
                'flags-segment',
                'flags-settings',
                'git_link',
                'github_login',
                'gitlab_login',
                'hook_name',
                'integration',
                'link',
                'project_name',
                'scaling_rules',
                'store',
                'system',
                'target'
              ])
              .describe('The type of entity.'),
            start: z.number().describe('The index of where the entity begins within the `text` (inclusive).'),
            end: z.number().describe('The index of where the entity ends within the `text` (non-inclusive).')
          })
          .describe(
            'A list of "entities" within the event `text`. Useful for enhancing the displayed text with additional styling and links.'
          )
      )
      .describe(
        'A list of "entities" within the event `text`. Useful for enhancing the displayed text with additional styling and links.'
      ),
    createdAt: z.number().describe('Timestamp (in milliseconds) of when the event was generated.'),
    user: z
      .object({
        username: z.string(),
        avatar: z.string(),
        email: z.string(),
        slug: z.string().optional(),
        uid: z.string()
      })
      .describe('Metadata for {@link userId}.')
      .optional(),
    principal: z
      .union([
        z.object({
          type: z.enum(['user']).optional(),
          avatar: z.string(),
          email: z.string(),
          slug: z.string().optional(),
          uid: z.string(),
          username: z.string()
        }),
        z.object({
          type: z.enum(['app']),
          clientId: z.string(),
          name: z.string()
        })
      ])
      .optional(),
    via: z
      .array(
        z.union([
          z.object({
            type: z.enum(['user']).optional(),
            avatar: z.string(),
            email: z.string(),
            slug: z.string().optional(),
            uid: z.string(),
            username: z.string()
          }),
          z.object({
            type: z.enum(['app']),
            clientId: z.string(),
            name: z.string()
          })
        ])
      )
      .describe('Metadata for {@link viaIds}.')
      .optional(),
    userId: z
      .string()
      .describe('When the principal who generated the event is a user, this is their ID; otherwise, it is empty.'),
    principalId: z
      .string()
      .describe(
        'The ID of the principal who generated the event. The principal is typically a user, but it could also be an app, an integration, etc. The principal may have delegated its authority to an acting party, and so {@link viaIds} should be checked as well.'
      ),
    viaIds: z
      .array(z.string())
      .describe(
        'If the principal delegated its authority (for example, a user delegating to an app), then this array contains the ID of the current actor. For example, if `principalId` is "user123" and `viaIds` is `["app456"]`, we can say the event was triggered by - "app456 on behalf of user123", or - "user123 via app4556". Both are equivalent. Arbitrarily long chains of delegation can be represented. For example, if `principalId` is "user123" and `viaIds` is `["service1", "service2"]`, we can say the event was triggered by "user123 via service1 via service2".'
      )
      .optional(),
    payload: z
      .union([
        z.object({}),
        z.object({
          action: z.enum(['created', 'updated', 'deleted', 'archived', 'unarchived']),
          id: z.string(),
          slug: z.string(),
          projectId: z.string()
        }),
        z.object({
          accessGroup: z.object({
            id: z.string(),
            name: z.string()
          })
        }),
        z.object({
          author: z.string(),
          accessGroup: z.object({
            id: z.string(),
            name: z.string()
          })
        }),
        z.object({
          accessGroup: z.object({
            id: z.string(),
            name: z.string().optional()
          }),
          user: z.object({
            id: z.string(),
            username: z.string().optional()
          }),
          directoryType: z.string().optional()
        }),
        z.object({
          accessGroup: z.object({
            id: z.string(),
            name: z.string()
          }),
          project: z.object({
            id: z.string(),
            name: z.string().optional()
          }),
          nextRole: z.enum(['ADMIN', 'PROJECT_DEVELOPER', 'PROJECT_VIEWER']).nullable().nullish(),
          previousRole: z.enum(['ADMIN', 'PROJECT_DEVELOPER', 'PROJECT_VIEWER']).optional()
        }),
        z.object({
          alias: z.string().optional(),
          deployment: z
            .object({
              id: z.string(),
              name: z.string(),
              url: z.string(),
              meta: z.object({}).catchall(z.string())
            })
            .nullable()
            .nullish(),
          ruleCount: z.number().optional(),
          deploymentUrl: z.string().optional(),
          aliasId: z.string().optional(),
          deploymentId: z.string().nullable().nullish(),
          oldDeploymentId: z.string().nullable().nullish(),
          redirect: z.string().optional(),
          redirectStatusCode: z.number().nullable().nullish(),
          target: z.string().nullable().nullish(),
          system: z.boolean().optional(),
          aliasUpdatedAt: z.number().optional()
        }),
        z.object({
          aliasId: z.string().optional(),
          alias: z.string().optional(),
          projectName: z.string().optional()
        }),
        z.object({
          alias: z.string().optional()
        }),
        z.object({
          alias: z.string().optional(),
          userId: z.string().optional(),
          username: z.string().optional()
        }),
        z.object({
          alias: z.string().optional(),
          aliasId: z.string().optional(),
          userId: z.string().optional(),
          username: z.string().optional()
        }),
        z.object({
          projectName: z.string(),
          alias: z.string(),
          action: z.enum(['created', 'removed'])
        }),
        z.object({
          alias: z.string().optional(),
          email: z.string().optional(),
          username: z.string().optional()
        }),
        z.object({
          alias: z.string().optional(),
          email: z.string().optional()
        }),
        z.object({
          name: z.string().optional(),
          alias: z.string(),
          oldTeam: z
            .object({
              name: z.string()
            })
            .optional(),
          newTeam: z
            .object({
              name: z.string()
            })
            .optional()
        }),
        z.object({
          name: z.string().optional(),
          alias: z.string(),
          aliasId: z.string(),
          deploymentId: z.string().nullable()
        }),
        z.object({
          alias: z.string(),
          deploymentUrl: z.string()
        }),
        z.object({
          projectName: z.string(),
          autoExposeSystemEnvs: z.boolean()
        }),
        z.object({
          avatar: z.string().optional()
        }),
        z.object({
          cn: z.string().optional(),
          cns: z.array(z.string()).optional(),
          custom: z.boolean(),
          id: z.string().optional()
        }),
        z.object({
          cn: z.string().optional(),
          cns: z.array(z.string()).optional(),
          id: z.string().optional()
        }),
        z.object({
          id: z.string(),
          oldTeam: z
            .object({
              name: z.string()
            })
            .optional(),
          newTeam: z
            .object({
              name: z.string()
            })
            .optional()
        }),
        z.object({
          src: z.string(),
          dst: z.string()
        }),
        z.object({
          id: z.string(),
          cn: z.string().optional(),
          cns: z.array(z.string()).optional()
        }),
        z.object({
          cn: z.string().optional(),
          cns: z.array(z.string()).optional()
        }),
        z.object({
          reason: z.string().optional(),
          suffix: z.string()
        }),
        z.object({
          status: z.string(),
          suffix: z.string()
        }),
        z.object({
          suffix: z.string()
        }),
        z.object({
          team: z.object({
            id: z.string(),
            name: z.string()
          }),
          configuration: z.object({
            id: z.string(),
            name: z.string().optional()
          }),
          project: z.object({
            id: z.string(),
            name: z.string().optional()
          }),
          buildsEnabled: z.boolean().optional()
        }),
        z.object({
          team: z.object({
            id: z.string(),
            name: z.string()
          }),
          configuration: z.object({
            id: z.string(),
            name: z.string().optional()
          }),
          project: z.object({
            id: z.string(),
            name: z.string().optional()
          }),
          buildsEnabled: z.boolean().optional(),
          passive: z.boolean().optional()
        }),
        z.object({
          team: z.object({
            id: z.string(),
            name: z.string()
          }),
          configuration: z.object({
            id: z.string(),
            name: z.string().optional()
          }),
          project: z.object({
            id: z.string(),
            name: z.string().optional()
          })
        }),
        z.object({
          team: z.object({
            id: z.string(),
            name: z.string()
          }),
          configuration: z.object({
            id: z.string(),
            name: z.string().optional()
          }),
          newName: z.string()
        }),
        z.object({
          githubLogin: z.string()
        }),
        z.object({
          gitlabLogin: z.string(),
          gitlabEmail: z.string(),
          gitlabName: z.string().optional()
        }),
        z.object({
          bitbucketEmail: z.string(),
          bitbucketLogin: z.string(),
          bitbucketName: z.string().optional()
        }),
        z.object({
          project: z.object({
            name: z.string()
          }),
          job: z.object({
            deployHook: z.object({
              createdAt: z.number(),
              id: z.string(),
              name: z.string(),
              ref: z.string()
            }),
            state: z.string()
          })
        }),
        z.object({
          name: z.string().optional(),
          alias: z.array(z.string()).optional(),
          target: z.string().nullable().nullish(),
          deployment: z
            .object({
              id: z.string(),
              name: z.string(),
              url: z.string(),
              meta: z.object({}).catchall(z.string())
            })
            .nullable()
            .nullish(),
          url: z.string(),
          forced: z.boolean().optional(),
          deploymentId: z.string().optional(),
          plan: z.string().optional(),
          project: z.string().optional(),
          projectId: z.string().optional(),
          regions: z.array(z.string()).optional(),
          type: z.string().optional()
        }),
        z.object({
          url: z.string(),
          oldTeam: z
            .object({
              name: z.string()
            })
            .optional(),
          newTeam: z
            .object({
              name: z.string()
            })
            .optional()
        }),
        z.object({
          deployment: z.object({
            id: z.string(),
            name: z.string(),
            url: z.string(),
            meta: z.object({}).catchall(z.string())
          }),
          deploymentId: z.string(),
          url: z.string()
        }),
        z.object({
          id: z.string(),
          value: z.string(),
          name: z.string(),
          domain: z.string(),
          type: z.string(),
          mxPriority: z.number().optional()
        }),
        z.object({
          id: z.string(),
          domain: z.string()
        }),
        z.object({
          id: z.string(),
          value: z.string(),
          name: z.string(),
          domain: z.string(),
          type: z.string()
        }),
        z.object({
          name: z.string()
        }),
        z.object({
          name: z.string(),
          price: z.number(),
          currency: z.string().optional()
        }),
        z.object({
          name: z.string(),
          cdnEnabled: z.boolean()
        }),
        z.object({
          name: z.string(),
          userId: z.string(),
          teamId: z.string(),
          ownerName: z.string()
        }),
        z.object({
          name: z.string(),
          oldTeam: z
            .object({
              name: z.string()
            })
            .optional(),
          newTeam: z
            .object({
              name: z.string()
            })
            .optional()
        }),
        z.object({
          domainId: z.string(),
          name: z.string()
        }),
        z.object({
          name: z.string(),
          fromId: z.string().nullable(),
          fromName: z.string().nullable()
        }),
        z.object({
          name: z.string(),
          destinationId: z.string().nullable(),
          destinationName: z.string().nullable()
        }),
        z.object({
          name: z.string(),
          destinationId: z.string(),
          destinationName: z.string()
        }),
        z.object({
          renew: z.boolean().optional(),
          domain: z.string()
        }),
        z.object({
          name: z.string(),
          price: z.number().optional(),
          currency: z.string().optional()
        }),
        z.object({
          sha: z.string(),
          gitUserPlatform: z.string(),
          projectName: z.string()
        }),
        z.object({
          email: z.string(),
          name: z.string()
        }),
        z.object({
          key: z.string().optional(),
          projectId: z.string().optional(),
          projectName: z.string().optional(),
          target: z.union([z.array(z.string()), z.string()]).optional(),
          id: z.string().optional(),
          gitBranch: z.string().optional(),
          edgeConfigId: z.string().nullable().nullish(),
          edgeConfigTokenId: z.string().nullable().nullish(),
          source: z.string().optional()
        }),
        z.object({
          created: z.date().describe('The date when the Shared Env Var was created.').optional(),
          key: z.string().describe('The name of the Shared Env Var.').optional(),
          ownerId: z
            .string()
            .describe('The unique identifier of the owner (team) the Shared Env Var was created for.')
            .nullable()
            .nullish(),
          id: z.string().describe('The unique identifier of the Shared Env Var.').optional(),
          createdBy: z
            .string()
            .describe('The unique identifier of the user who created the Shared Env Var.')
            .nullable()
            .nullish(),
          deletedBy: z
            .string()
            .describe('The unique identifier of the user who deleted the Shared Env Var.')
            .nullable()
            .nullish(),
          updatedBy: z
            .string()
            .describe('The unique identifier of the user who last updated the Shared Env Var.')
            .nullable()
            .nullish(),
          createdAt: z.number().describe('Timestamp for when the Shared Env Var was created.').optional(),
          deletedAt: z.number().describe('Timestamp for when the Shared Env Var was (soft) deleted.').optional(),
          updatedAt: z.number().describe('Timestamp for when the Shared Env Var was last updated.').optional(),
          value: z.string().describe('The value of the Shared Env Var.').optional(),
          projectId: z
            .array(z.string())
            .describe('The unique identifiers of the projects which the Shared Env Var is linked to.')
            .optional(),
          type: z
            .enum(['system', 'encrypted', 'plain', 'sensitive'])
            .describe('The type of this cosmos doc instance, if blank, assume secret.')
            .optional(),
          target: z
            .array(z.enum(['production', 'preview', 'development']).describe('environments this env variable targets'))
            .describe('environments this env variable targets')
            .optional(),
          applyToAllCustomEnvironments: z
            .boolean()
            .describe('whether or not this env varible applies to custom environments')
            .optional(),
          decrypted: z.boolean().describe('whether or not this env variable is decrypted').optional(),
          comment: z
            .string()
            .describe('A user provided comment that describes what this Shared Env Var is for.')
            .optional(),
          lastEditedByDisplayName: z.string().describe('The last editor full name or username.').optional(),
          projectNames: z.array(z.string()).optional()
        }),
        z.object({
          oldEnvVar: z
            .object({
              created: z.date().describe('The date when the Shared Env Var was created.').optional(),
              key: z.string().describe('The name of the Shared Env Var.').optional(),
              ownerId: z
                .string()
                .describe('The unique identifier of the owner (team) the Shared Env Var was created for.')
                .nullable()
                .nullish(),
              id: z.string().describe('The unique identifier of the Shared Env Var.').optional(),
              createdBy: z
                .string()
                .describe('The unique identifier of the user who created the Shared Env Var.')
                .nullable()
                .nullish(),
              deletedBy: z
                .string()
                .describe('The unique identifier of the user who deleted the Shared Env Var.')
                .nullable()
                .nullish(),
              updatedBy: z
                .string()
                .describe('The unique identifier of the user who last updated the Shared Env Var.')
                .nullable()
                .nullish(),
              createdAt: z.number().describe('Timestamp for when the Shared Env Var was created.').optional(),
              deletedAt: z.number().describe('Timestamp for when the Shared Env Var was (soft) deleted.').optional(),
              updatedAt: z.number().describe('Timestamp for when the Shared Env Var was last updated.').optional(),
              value: z.string().describe('The value of the Shared Env Var.').optional(),
              projectId: z
                .array(z.string())
                .describe('The unique identifiers of the projects which the Shared Env Var is linked to.')
                .optional(),
              type: z
                .enum(['system', 'encrypted', 'plain', 'sensitive'])
                .describe('The type of this cosmos doc instance, if blank, assume secret.')
                .optional(),
              target: z
                .array(
                  z.enum(['production', 'preview', 'development']).describe('environments this env variable targets')
                )
                .describe('environments this env variable targets')
                .optional(),
              applyToAllCustomEnvironments: z
                .boolean()
                .describe('whether or not this env varible applies to custom environments')
                .optional(),
              decrypted: z.boolean().describe('whether or not this env variable is decrypted').optional(),
              comment: z
                .string()
                .describe('A user provided comment that describes what this Shared Env Var is for.')
                .optional(),
              lastEditedByDisplayName: z.string().describe('The last editor full name or username.').optional()
            })
            .optional(),
          newEnvVar: z
            .object({
              created: z.date().describe('The date when the Shared Env Var was created.').optional(),
              key: z.string().describe('The name of the Shared Env Var.').optional(),
              ownerId: z
                .string()
                .describe('The unique identifier of the owner (team) the Shared Env Var was created for.')
                .nullable()
                .nullish(),
              id: z.string().describe('The unique identifier of the Shared Env Var.').optional(),
              createdBy: z
                .string()
                .describe('The unique identifier of the user who created the Shared Env Var.')
                .nullable()
                .nullish(),
              deletedBy: z
                .string()
                .describe('The unique identifier of the user who deleted the Shared Env Var.')
                .nullable()
                .nullish(),
              updatedBy: z
                .string()
                .describe('The unique identifier of the user who last updated the Shared Env Var.')
                .nullable()
                .nullish(),
              createdAt: z.number().describe('Timestamp for when the Shared Env Var was created.').optional(),
              deletedAt: z.number().describe('Timestamp for when the Shared Env Var was (soft) deleted.').optional(),
              updatedAt: z.number().describe('Timestamp for when the Shared Env Var was last updated.').optional(),
              value: z.string().describe('The value of the Shared Env Var.').optional(),
              projectId: z
                .array(z.string())
                .describe('The unique identifiers of the projects which the Shared Env Var is linked to.')
                .optional(),
              type: z
                .enum(['system', 'encrypted', 'plain', 'sensitive'])
                .describe('The type of this cosmos doc instance, if blank, assume secret.')
                .optional(),
              target: z
                .array(
                  z.enum(['production', 'preview', 'development']).describe('environments this env variable targets')
                )
                .describe('environments this env variable targets')
                .optional(),
              applyToAllCustomEnvironments: z
                .boolean()
                .describe('whether or not this env varible applies to custom environments')
                .optional(),
              decrypted: z.boolean().describe('whether or not this env variable is decrypted').optional(),
              comment: z
                .string()
                .describe('A user provided comment that describes what this Shared Env Var is for.')
                .optional(),
              lastEditedByDisplayName: z.string().describe('The last editor full name or username.').optional()
            })
            .optional(),
          updateDiff: z
            .object({
              id: z.string(),
              key: z.string().optional(),
              newKey: z.string().optional(),
              oldTarget: z.array(z.enum(['production', 'preview', 'development'])).optional(),
              newTarget: z.array(z.enum(['production', 'preview', 'development'])).optional(),
              oldType: z.string().optional(),
              newType: z.string().optional(),
              oldProjects: z
                .array(
                  z.object({
                    projectName: z.string().optional(),
                    projectId: z.string()
                  })
                )
                .optional(),
              newProjects: z
                .array(
                  z.object({
                    projectName: z.string().optional(),
                    projectId: z.string()
                  })
                )
                .optional(),
              changedValue: z.boolean()
            })
            .optional()
        }),
        z.object({
          projectId: z.string(),
          restore: z.boolean(),
          configVersion: z.number(),
          configChangeCount: z.number(),
          configChanges: z.array(z.object({}))
        }),
        z.object({
          projectId: z.string(),
          scope: z.string(),
          source: z.string()
        }),
        z.object({
          projectId: z.string(),
          rulesetName: z.string(),
          active: z.boolean(),
          action: z.enum(['log', 'challenge', 'deny']).optional()
        }),
        z.object({
          projectId: z.string(),
          rulesetName: z.string(),
          ruleGroups: z.object({}).catchall(
            z.object({
              active: z.boolean(),
              action: z.enum(['log', 'challenge', 'deny']).optional()
            })
          )
        }),
        z.object({
          integrationId: z.string(),
          integrationSlug: z.string(),
          integrationName: z.string()
        }),
        z.object({
          userId: z.string(),
          integrationId: z.string(),
          configurationId: z.string(),
          integrationSlug: z.string(),
          integrationName: z.string().optional(),
          newOwner: z
            .object({
              abuse: z
                .object({
                  blockHistory: z
                    .array(
                      z
                        .object({
                          action: z.enum(['hard-blocked', 'soft-blocked', 'unblocked']),
                          createdAt: z.number(),
                          caseId: z.string().optional(),
                          reason: z.string(),
                          actor: z.string().optional(),
                          statusCode: z.number().optional(),
                          comment: z.string().optional()
                        })
                        .describe('Since June 2023')
                    )
                    .describe('Since June 2023')
                    .optional(),
                  gitAuthHistory: z
                    .array(z.string())
                    .describe(
                      'Since March 2022. Helps abuse checks by tracking git auths. Format: `<platform>:<detail>:<value>`'
                    )
                    .optional(),
                  history: z
                    .array(
                      z
                        .object({
                          scanner: z.string(),
                          reason: z.string(),
                          by: z.string(),
                          byId: z.string(),
                          at: z.number()
                        })
                        .describe('(scanner history). Since November 2021. First element is newest.')
                    )
                    .describe('(scanner history). Since November 2021. First element is newest.')
                    .optional(),
                  gitLineageBlocks: z
                    .number()
                    .describe(
                      'Since September 2023. How often did this owner trigger an actual git lineage deploy block?'
                    )
                    .optional(),
                  gitLineageBlocksDry: z
                    .number()
                    .describe(
                      'Since September 2023. How often did this owner trigger a git lineage deploy block dry run?'
                    )
                    .optional(),
                  scanner: z
                    .string()
                    .describe('Since November 2021. Guides the abuse scanner in build container.')
                    .optional(),
                  updatedAt: z.number().describe('Since November 2021').optional(),
                  creationUserAgent: z.string().optional(),
                  creationIp: z.string().optional(),
                  removedPhoneNumbers: z.string().optional()
                })
                .optional(),
              acceptanceState: z.string().optional(),
              acceptedAt: z.number().optional(),
              avatar: z.string().optional(),
              billing: z.object({
                plan: z.enum(['pro', 'enterprise', 'hobby'])
              }),
              blocked: z.number().nullable(),
              blockReason: z.string().optional(),
              created: z.number().optional(),
              createdAt: z.number(),
              credentials: z
                .array(
                  z.union([
                    z.object({
                      type: z.enum(['gitlab', 'bitbucket', 'google', 'github-oauth', 'github-oauth-limited']),
                      id: z.string()
                    }),
                    z.object({
                      type: z.enum(['github-oauth-custom-host']),
                      host: z.string(),
                      id: z.string()
                    })
                  ])
                )
                .optional(),
              customerId: z.string().nullable().nullish(),
              orbCustomerId: z.string().nullable().nullish(),
              dataCache: z
                .object({
                  excessBillingEnabled: z.boolean().optional()
                })
                .optional(),
              deletedAt: z.number().nullable().nullish(),
              deploymentSecret: z.string(),
              dismissedTeams: z.array(z.string()).optional(),
              dismissedToasts: z
                .array(
                  z.object({
                    name: z.string(),
                    dismissals: z.array(
                      z.object({
                        scopeId: z.string(),
                        createdAt: z.number()
                      })
                    )
                  })
                )
                .optional(),
              favoriteProjectsAndSpaces: z
                .array(
                  z.object({
                    teamId: z.string(),
                    projectId: z.string()
                  })
                )
                .optional(),
              email: z.string(),
              id: z.string(),
              importFlowGitNamespace: z.union([z.string(), z.number()]).nullable().nullish(),
              importFlowGitNamespaceId: z.union([z.string(), z.number()]).nullable().nullish(),
              importFlowGitProvider: z
                .enum(['github', 'gitlab', 'bitbucket', 'github-limited', 'github-custom-host'])
                .nullable()
                .nullish(),
              preferredScopesAndGitNamespaces: z
                .array(
                  z.object({
                    scopeId: z.string(),
                    gitNamespaceId: z.union([z.string(), z.number()]).nullable()
                  })
                )
                .optional(),
              isDomainReseller: z.boolean().optional(),
              isZeitPub: z.boolean().optional(),
              maxActiveSlots: z.number().optional(),
              name: z.string().optional(),
              phoneNumber: z.string().optional(),
              platformVersion: z.number().nullable(),
              preventAutoBlocking: z.union([z.boolean(), z.number()]).optional(),
              projectDomainsLimit: z
                .number()
                .describe('Overrides our DEFAULT project domains limit per account or per project.')
                .optional(),
              remoteCaching: z
                .object({
                  enabled: z.boolean().optional()
                })
                .describe('Represents configuration for remote caching')
                .optional(),
              removedAliasesAt: z.number().optional(),
              removedBillingSubscriptionAt: z.number().optional(),
              removedConfigurationsAt: z.number().optional(),
              removedDeploymentsAt: z.number().optional(),
              removedDomiansAt: z.number().optional(),
              removedEventsAt: z.number().optional(),
              removedProjectsAt: z.number().optional(),
              removedSecretsAt: z.number().optional(),
              removedSharedEnvVarsAt: z.number().optional(),
              removedEdgeConfigsAt: z.number().optional(),
              resourceConfig: z
                .object({
                  nodeType: z.string().optional(),
                  concurrentBuilds: z.number().optional(),
                  elasticConcurrencyEnabled: z.boolean().optional(),
                  buildEntitlements: z
                    .object({
                      enhancedBuilds: z.boolean().optional()
                    })
                    .optional(),
                  awsAccountType: z.string().optional(),
                  awsAccountIds: z.array(z.string()).optional(),
                  cfZoneName: z.string().optional(),
                  imageOptimizationType: z.string().optional(),
                  edgeConfigs: z.number().optional(),
                  edgeConfigSize: z.number().optional(),
                  edgeFunctionMaxSizeBytes: z.number().optional(),
                  edgeFunctionExecutionTimeoutMs: z.number().optional(),
                  serverlessFunctionMaxMemorySize: z.number().optional(),
                  kvDatabases: z.number().optional(),
                  postgresDatabases: z.number().optional(),
                  blobStores: z.number().optional(),
                  integrationStores: z.number().optional(),
                  cronJobs: z.number().optional(),
                  cronJobsPerProject: z.number().optional(),
                  microfrontendGroupsPerTeam: z.number().optional(),
                  microfrontendProjectsPerGroup: z.number().optional(),
                  flagsExplorerOverridesThreshold: z.number().optional(),
                  flagsExplorerUnlimitedOverrides: z.boolean().optional(),
                  customEnvironmentsPerProject: z.number().optional(),
                  buildMachine: z
                    .object({
                      purchaseType: z.enum(['enhanced', 'turbo']).optional(),
                      isDefaultBuildMachine: z.boolean().optional(),
                      cores: z.number().optional(),
                      memory: z.number().optional()
                    })
                    .optional()
                })
                .optional(),
              resourceLimits: z
                .object({})
                .catchall(
                  z.object({
                    max: z.number(),
                    duration: z.number()
                  })
                )
                .describe('User | Team resource limits')
                .optional(),
              activeDashboardViews: z
                .array(
                  z.object({
                    scopeId: z.string(),
                    viewPreference: z.enum(['cards', 'list']).nullable().nullish(),
                    favoritesViewPreference: z.enum(['open', 'closed']).nullable().nullish(),
                    recentsViewPreference: z.enum(['open', 'closed']).nullable().nullish()
                  })
                )
                .optional(),
              secondaryEmails: z
                .array(
                  z.object({
                    email: z.string(),
                    verified: z.boolean()
                  })
                )
                .optional(),
              emailNotifications: z
                .object({
                  rules: z
                    .object({})
                    .catchall(
                      z.object({
                        email: z.string()
                      })
                    )
                    .optional()
                })
                .optional(),
              siftScore: z.number().optional(),
              siftScores: z
                .object({})
                .catchall(
                  z.object({
                    score: z.number(),
                    reasons: z.array(
                      z.object({
                        name: z.string(),
                        value: z.string()
                      })
                    )
                  })
                )
                .optional(),
              siftRoute: z
                .object({
                  name: z.enum(['string'])
                })
                .optional(),
              sfdcId: z.string().optional(),
              softBlock: z
                .object({
                  blockedAt: z.number(),
                  reason: z.enum([
                    'SUBSCRIPTION_CANCELED',
                    'SUBSCRIPTION_EXPIRED',
                    'UNPAID_INVOICE',
                    'ENTERPRISE_TRIAL_ENDED',
                    'FAIR_USE_LIMITS_EXCEEDED',
                    'BLOCKED_FOR_PLATFORM_ABUSE'
                  ]),
                  blockedDueToOverageType: z
                    .enum([
                      'analyticsUsage',
                      'artifacts',
                      'bandwidth',
                      'blobTotalAdvancedRequests',
                      'blobTotalAvgSizeInBytes',
                      'blobTotalGetResponseObjectSizeInBytes',
                      'blobTotalSimpleRequests',
                      'connectDataTransfer',
                      'dataCacheRead',
                      'dataCacheWrite',
                      'edgeConfigRead',
                      'edgeConfigWrite',
                      'edgeFunctionExecutionUnits',
                      'edgeMiddlewareInvocations',
                      'edgeRequestAdditionalCpuDuration',
                      'edgeRequest',
                      'elasticConcurrencyBuildSlots',
                      'fastDataTransfer',
                      'fastOriginTransfer',
                      'fluidCpuDuration',
                      'fluidDuration',
                      'functionDuration',
                      'functionInvocation',
                      'imageOptimizationCacheRead',
                      'imageOptimizationCacheWrite',
                      'imageOptimizationTransformation',
                      'logDrainsVolume',
                      'monitoringMetric',
                      'blobDataTransfer',
                      'observabilityEvent',
                      'onDemandConcurrencyMinutes',
                      'runtimeCacheRead',
                      'runtimeCacheWrite',
                      'serverlessFunctionExecution',
                      'sourceImages',
                      'wafOwaspExcessBytes',
                      'wafOwaspRequests',
                      'wafRateLimitRequest',
                      'webAnalyticsEvent'
                    ])
                    .optional()
                })
                .nullable()
                .nullish(),
              stagingPrefix: z.string(),
              sysToken: z.string(),
              teams: z
                .array(
                  z.object({
                    created: z.number().optional(),
                    createdAt: z.number().optional(),
                    teamId: z.string(),
                    role: z
                      .enum(['OWNER', 'MEMBER', 'DEVELOPER', 'SECURITY', 'BILLING', 'VIEWER', 'CONTRIBUTOR'])
                      .optional(),
                    confirmed: z.boolean().optional(),
                    confirmedAt: z.number().optional(),
                    accessRequestedAt: z.number().optional(),
                    teamRoles: z
                      .array(z.enum(['OWNER', 'MEMBER', 'DEVELOPER', 'SECURITY', 'BILLING', 'VIEWER', 'CONTRIBUTOR']))
                      .optional(),
                    teamPermissions: z
                      .array(
                        z.enum([
                          'CreateProject',
                          'FullProductionDeployment',
                          'UsageViewer',
                          'EnvVariableManager',
                          'EnvironmentManager'
                        ])
                      )
                      .optional(),
                    joinedFrom: z
                      .object({
                        origin: z.enum([
                          'teams',
                          'saml',
                          'link',
                          'github',
                          'gitlab',
                          'bitbucket',
                          'mail',
                          'import',
                          'dsync',
                          'feedback',
                          'organization-teams'
                        ]),
                        commitId: z.string().optional(),
                        repoId: z.string().optional(),
                        repoPath: z.string().optional(),
                        gitUserId: z.union([z.string(), z.number()]).optional(),
                        gitUserLogin: z.string().optional(),
                        ssoUserId: z.string().optional(),
                        ssoConnectedAt: z.number().optional(),
                        idpUserId: z.string().optional(),
                        dsyncUserId: z.string().optional(),
                        dsyncConnectedAt: z.number().optional()
                      })
                      .optional()
                  })
                )
                .describe(
                  'A helper that allows to describe a relationship attribute. It receives the shape of a relationship plus the foreignKey name to make it mandatory in the resulting type.'
                )
                .optional(),
              trialTeamIds: z
                .array(z.string())
                .describe(
                  'Introduced 2022-04-12 An array of teamIds (for trial teams created after 2022-04-01), created by the user in question. Used in determining whether the team has a trial available in utils/api-teams/user-has-trial-available.ts.'
                )
                .optional(),
              maxTrials: z
                .number()
                .describe(
                  'Introduced 2022-04-19 Number of maximum trials to allocate to a user. When undefined, defaults to MAX_TRIALS in utils/api-teams/user-has-trial-available.ts. This is set to trialTeamIds + 1 by services/api-backoffice/src/handlers/add-additional-trial.ts.'
                )
                .optional(),
              trialTeamId: z
                .string()
                .describe(
                  'Deprecated on 2022-04-12 in favor of trialTeamIds and using utils/api-teams/user-has-trial-available.ts.'
                )
                .optional(),
              type: z.enum(['user']),
              usageAlerts: z
                .object({
                  warningAt: z.number().nullable().nullish(),
                  blockingAt: z.number().nullable().nullish()
                })
                .describe('Contains the timestamps when a user was notified about their usage')
                .nullable()
                .nullish(),
              overageUsageAlerts: z
                .object({
                  analyticsUsage: z
                    .object({
                      currentThreshold: z.number(),
                      warningAt: z.number().nullable().nullish(),
                      blockedAt: z.number().nullable().nullish()
                    })
                    .optional(),
                  artifacts: z
                    .object({
                      currentThreshold: z.number(),
                      warningAt: z.number().nullable().nullish(),
                      blockedAt: z.number().nullable().nullish()
                    })
                    .optional(),
                  bandwidth: z
                    .object({
                      currentThreshold: z.number(),
                      warningAt: z.number().nullable().nullish(),
                      blockedAt: z.number().nullable().nullish()
                    })
                    .optional(),
                  blobTotalAdvancedRequests: z
                    .object({
                      currentThreshold: z.number(),
                      warningAt: z.number().nullable().nullish(),
                      blockedAt: z.number().nullable().nullish()
                    })
                    .optional(),
                  blobTotalAvgSizeInBytes: z
                    .object({
                      currentThreshold: z.number(),
                      warningAt: z.number().nullable().nullish(),
                      blockedAt: z.number().nullable().nullish()
                    })
                    .optional(),
                  blobTotalGetResponseObjectSizeInBytes: z
                    .object({
                      currentThreshold: z.number(),
                      warningAt: z.number().nullable().nullish(),
                      blockedAt: z.number().nullable().nullish()
                    })
                    .optional(),
                  blobTotalSimpleRequests: z
                    .object({
                      currentThreshold: z.number(),
                      warningAt: z.number().nullable().nullish(),
                      blockedAt: z.number().nullable().nullish()
                    })
                    .optional(),
                  connectDataTransfer: z
                    .object({
                      currentThreshold: z.number(),
                      warningAt: z.number().nullable().nullish(),
                      blockedAt: z.number().nullable().nullish()
                    })
                    .optional(),
                  dataCacheRead: z
                    .object({
                      currentThreshold: z.number(),
                      warningAt: z.number().nullable().nullish(),
                      blockedAt: z.number().nullable().nullish()
                    })
                    .optional(),
                  dataCacheWrite: z
                    .object({
                      currentThreshold: z.number(),
                      warningAt: z.number().nullable().nullish(),
                      blockedAt: z.number().nullable().nullish()
                    })
                    .optional(),
                  edgeConfigRead: z
                    .object({
                      currentThreshold: z.number(),
                      warningAt: z.number().nullable().nullish(),
                      blockedAt: z.number().nullable().nullish()
                    })
                    .optional(),
                  edgeConfigWrite: z
                    .object({
                      currentThreshold: z.number(),
                      warningAt: z.number().nullable().nullish(),
                      blockedAt: z.number().nullable().nullish()
                    })
                    .optional(),
                  edgeFunctionExecutionUnits: z
                    .object({
                      currentThreshold: z.number(),
                      warningAt: z.number().nullable().nullish(),
                      blockedAt: z.number().nullable().nullish()
                    })
                    .optional(),
                  edgeMiddlewareInvocations: z
                    .object({
                      currentThreshold: z.number(),
                      warningAt: z.number().nullable().nullish(),
                      blockedAt: z.number().nullable().nullish()
                    })
                    .optional(),
                  edgeRequestAdditionalCpuDuration: z
                    .object({
                      currentThreshold: z.number(),
                      warningAt: z.number().nullable().nullish(),
                      blockedAt: z.number().nullable().nullish()
                    })
                    .optional(),
                  edgeRequest: z
                    .object({
                      currentThreshold: z.number(),
                      warningAt: z.number().nullable().nullish(),
                      blockedAt: z.number().nullable().nullish()
                    })
                    .optional(),
                  elasticConcurrencyBuildSlots: z
                    .object({
                      currentThreshold: z.number(),
                      warningAt: z.number().nullable().nullish(),
                      blockedAt: z.number().nullable().nullish()
                    })
                    .optional(),
                  fastDataTransfer: z
                    .object({
                      currentThreshold: z.number(),
                      warningAt: z.number().nullable().nullish(),
                      blockedAt: z.number().nullable().nullish()
                    })
                    .optional(),
                  fastOriginTransfer: z
                    .object({
                      currentThreshold: z.number(),
                      warningAt: z.number().nullable().nullish(),
                      blockedAt: z.number().nullable().nullish()
                    })
                    .optional(),
                  fluidCpuDuration: z
                    .object({
                      currentThreshold: z.number(),
                      warningAt: z.number().nullable().nullish(),
                      blockedAt: z.number().nullable().nullish()
                    })
                    .optional(),
                  fluidDuration: z
                    .object({
                      currentThreshold: z.number(),
                      warningAt: z.number().nullable().nullish(),
                      blockedAt: z.number().nullable().nullish()
                    })
                    .optional(),
                  functionDuration: z
                    .object({
                      currentThreshold: z.number(),
                      warningAt: z.number().nullable().nullish(),
                      blockedAt: z.number().nullable().nullish()
                    })
                    .optional(),
                  functionInvocation: z
                    .object({
                      currentThreshold: z.number(),
                      warningAt: z.number().nullable().nullish(),
                      blockedAt: z.number().nullable().nullish()
                    })
                    .optional(),
                  imageOptimizationCacheRead: z
                    .object({
                      currentThreshold: z.number(),
                      warningAt: z.number().nullable().nullish(),
                      blockedAt: z.number().nullable().nullish()
                    })
                    .optional(),
                  imageOptimizationCacheWrite: z
                    .object({
                      currentThreshold: z.number(),
                      warningAt: z.number().nullable().nullish(),
                      blockedAt: z.number().nullable().nullish()
                    })
                    .optional(),
                  imageOptimizationTransformation: z
                    .object({
                      currentThreshold: z.number(),
                      warningAt: z.number().nullable().nullish(),
                      blockedAt: z.number().nullable().nullish()
                    })
                    .optional(),
                  logDrainsVolume: z
                    .object({
                      currentThreshold: z.number(),
                      warningAt: z.number().nullable().nullish(),
                      blockedAt: z.number().nullable().nullish()
                    })
                    .optional(),
                  monitoringMetric: z
                    .object({
                      currentThreshold: z.number(),
                      warningAt: z.number().nullable().nullish(),
                      blockedAt: z.number().nullable().nullish()
                    })
                    .optional(),
                  blobDataTransfer: z
                    .object({
                      currentThreshold: z.number(),
                      warningAt: z.number().nullable().nullish(),
                      blockedAt: z.number().nullable().nullish()
                    })
                    .optional(),
                  observabilityEvent: z
                    .object({
                      currentThreshold: z.number(),
                      warningAt: z.number().nullable().nullish(),
                      blockedAt: z.number().nullable().nullish()
                    })
                    .optional(),
                  onDemandConcurrencyMinutes: z
                    .object({
                      currentThreshold: z.number(),
                      warningAt: z.number().nullable().nullish(),
                      blockedAt: z.number().nullable().nullish()
                    })
                    .optional(),
                  runtimeCacheRead: z
                    .object({
                      currentThreshold: z.number(),
                      warningAt: z.number().nullable().nullish(),
                      blockedAt: z.number().nullable().nullish()
                    })
                    .optional(),
                  runtimeCacheWrite: z
                    .object({
                      currentThreshold: z.number(),
                      warningAt: z.number().nullable().nullish(),
                      blockedAt: z.number().nullable().nullish()
                    })
                    .optional(),
                  serverlessFunctionExecution: z
                    .object({
                      currentThreshold: z.number(),
                      warningAt: z.number().nullable().nullish(),
                      blockedAt: z.number().nullable().nullish()
                    })
                    .optional(),
                  sourceImages: z
                    .object({
                      currentThreshold: z.number(),
                      warningAt: z.number().nullable().nullish(),
                      blockedAt: z.number().nullable().nullish()
                    })
                    .optional(),
                  wafOwaspExcessBytes: z
                    .object({
                      currentThreshold: z.number(),
                      warningAt: z.number().nullable().nullish(),
                      blockedAt: z.number().nullable().nullish()
                    })
                    .optional(),
                  wafOwaspRequests: z
                    .object({
                      currentThreshold: z.number(),
                      warningAt: z.number().nullable().nullish(),
                      blockedAt: z.number().nullable().nullish()
                    })
                    .optional(),
                  wafRateLimitRequest: z
                    .object({
                      currentThreshold: z.number(),
                      warningAt: z.number().nullable().nullish(),
                      blockedAt: z.number().nullable().nullish()
                    })
                    .optional(),
                  webAnalyticsEvent: z
                    .object({
                      currentThreshold: z.number(),
                      warningAt: z.number().nullable().nullish(),
                      blockedAt: z.number().nullable().nullish()
                    })
                    .optional()
                })
                .optional(),
              overageMetadata: z
                .object({
                  firstTimeOnDemandNotificationSentAt: z
                    .number()
                    .describe('Tracks if the first time on-demand overage email has been sent.')
                    .optional(),
                  dailyOverageSummaryEmailSentAt: z
                    .number()
                    .describe('Tracks the last time we sent a daily summary email.')
                    .optional(),
                  weeklyOverageSummaryEmailSentAt: z
                    .number()
                    .describe('Tracks the last time we sent a weekly summary email.')
                    .optional(),
                  overageSummaryExpiresAt: z
                    .number()
                    .describe(
                      'Tracks when the overage summary email will stop auto-sending. We currently lock the user into email for a month after the last on-demand usage.'
                    )
                    .optional(),
                  increasedOnDemandEmailSentAt: z
                    .number()
                    .describe('Tracks the last time we sent a increased on-demand email.')
                    .optional(),
                  increasedOnDemandEmailAttemptedAt: z
                    .number()
                    .describe(
                      'Tracks the last time we attempted to send an increased on-demand email. This check is to limit the number of attempts per day.'
                    )
                    .optional()
                })
                .describe('Contains the timestamps for usage summary emails.')
                .optional(),
              username: z.string(),
              updatedAt: z.number(),
              enablePreviewFeedback: z
                .enum(['default', 'on', 'off', 'on-force', 'off-force', 'default-force'])
                .describe('Whether the Vercel Toolbar is enabled for preview deployments.')
                .optional(),
              featureBlocks: z
                .object({
                  webAnalytics: z
                    .object({
                      updatedAt: z.number().optional(),
                      blockedFrom: z.number().optional(),
                      blockedUntil: z.number().optional(),
                      blockReason: z.enum(['admin_override', 'limits_exceeded']).optional(),
                      graceEmailSentAt: z.number().optional()
                    })
                    .optional(),
                  monitoring: z
                    .object({
                      updatedAt: z.number().optional(),
                      blockedFrom: z.number().optional(),
                      blockedUntil: z.number().optional(),
                      blockReason: z.enum(['admin_override', 'limits_exceeded']).optional(),
                      blockType: z.enum(['soft', 'hard'])
                    })
                    .describe(
                      'A soft block indicates a temporary pause in data collection (ex limit exceeded for the current cycle) A hard block indicates a stoppage in data collection that requires manual intervention (ex upgrading a pro trial)'
                    )
                    .optional(),
                  observabilityPlus: z
                    .object({
                      updatedAt: z.number().optional(),
                      blockedFrom: z.number().optional(),
                      blockedUntil: z.number().optional(),
                      blockReason: z.enum(['admin_override', 'limits_exceeded']).optional(),
                      blockType: z.enum(['soft', 'hard'])
                    })
                    .optional(),
                  dataCache: z
                    .object({
                      updatedAt: z.number(),
                      blockedFrom: z.number().optional(),
                      blockedUntil: z.number().optional(),
                      blockReason: z.enum(['admin_override', 'limits_exceeded'])
                    })
                    .optional(),
                  imageOptimizationTransformation: z
                    .object({
                      updatedAt: z.number(),
                      blockedFrom: z.number().optional(),
                      blockedUntil: z.number().optional(),
                      blockReason: z.enum(['admin_override', 'limits_exceeded'])
                    })
                    .optional(),
                  sourceImages: z
                    .object({
                      updatedAt: z.number(),
                      blockedFrom: z.number().optional(),
                      blockedUntil: z.number().optional(),
                      blockReason: z.enum(['admin_override', 'limits_exceeded'])
                    })
                    .optional(),
                  blob: z
                    .object({
                      updatedAt: z.number().optional(),
                      blockedFrom: z.number().optional(),
                      blockedUntil: z.number().optional(),
                      blockReason: z.enum(['admin_override', 'limits_exceeded']).optional(),
                      overageReason: z.enum([
                        'analyticsUsage',
                        'artifacts',
                        'bandwidth',
                        'blobTotalAdvancedRequests',
                        'blobTotalAvgSizeInBytes',
                        'blobTotalGetResponseObjectSizeInBytes',
                        'blobTotalSimpleRequests',
                        'connectDataTransfer',
                        'dataCacheRead',
                        'dataCacheWrite',
                        'edgeConfigRead',
                        'edgeConfigWrite',
                        'edgeFunctionExecutionUnits',
                        'edgeMiddlewareInvocations',
                        'edgeRequestAdditionalCpuDuration',
                        'edgeRequest',
                        'elasticConcurrencyBuildSlots',
                        'fastDataTransfer',
                        'fastOriginTransfer',
                        'fluidCpuDuration',
                        'fluidDuration',
                        'functionDuration',
                        'functionInvocation',
                        'imageOptimizationCacheRead',
                        'imageOptimizationCacheWrite',
                        'imageOptimizationTransformation',
                        'logDrainsVolume',
                        'monitoringMetric',
                        'blobDataTransfer',
                        'observabilityEvent',
                        'onDemandConcurrencyMinutes',
                        'runtimeCacheRead',
                        'runtimeCacheWrite',
                        'serverlessFunctionExecution',
                        'sourceImages',
                        'wafOwaspExcessBytes',
                        'wafOwaspRequests',
                        'wafRateLimitRequest',
                        'webAnalyticsEvent'
                      ])
                    })
                    .optional(),
                  postgres: z
                    .object({
                      updatedAt: z.number().optional(),
                      blockedFrom: z.number().optional(),
                      blockedUntil: z.number().optional(),
                      blockReason: z.enum(['admin_override', 'limits_exceeded']).optional(),
                      overageReason: z.enum([
                        'analyticsUsage',
                        'artifacts',
                        'bandwidth',
                        'blobTotalAdvancedRequests',
                        'blobTotalAvgSizeInBytes',
                        'blobTotalGetResponseObjectSizeInBytes',
                        'blobTotalSimpleRequests',
                        'connectDataTransfer',
                        'dataCacheRead',
                        'dataCacheWrite',
                        'edgeConfigRead',
                        'edgeConfigWrite',
                        'edgeFunctionExecutionUnits',
                        'edgeMiddlewareInvocations',
                        'edgeRequestAdditionalCpuDuration',
                        'edgeRequest',
                        'elasticConcurrencyBuildSlots',
                        'fastDataTransfer',
                        'fastOriginTransfer',
                        'fluidCpuDuration',
                        'fluidDuration',
                        'functionDuration',
                        'functionInvocation',
                        'imageOptimizationCacheRead',
                        'imageOptimizationCacheWrite',
                        'imageOptimizationTransformation',
                        'logDrainsVolume',
                        'monitoringMetric',
                        'blobDataTransfer',
                        'observabilityEvent',
                        'onDemandConcurrencyMinutes',
                        'runtimeCacheRead',
                        'runtimeCacheWrite',
                        'serverlessFunctionExecution',
                        'sourceImages',
                        'wafOwaspExcessBytes',
                        'wafOwaspRequests',
                        'wafRateLimitRequest',
                        'webAnalyticsEvent'
                      ])
                    })
                    .optional(),
                  redis: z
                    .object({
                      updatedAt: z.number().optional(),
                      blockedFrom: z.number().optional(),
                      blockedUntil: z.number().optional(),
                      blockReason: z.enum(['admin_override', 'limits_exceeded']).optional(),
                      overageReason: z.enum([
                        'analyticsUsage',
                        'artifacts',
                        'bandwidth',
                        'blobTotalAdvancedRequests',
                        'blobTotalAvgSizeInBytes',
                        'blobTotalGetResponseObjectSizeInBytes',
                        'blobTotalSimpleRequests',
                        'connectDataTransfer',
                        'dataCacheRead',
                        'dataCacheWrite',
                        'edgeConfigRead',
                        'edgeConfigWrite',
                        'edgeFunctionExecutionUnits',
                        'edgeMiddlewareInvocations',
                        'edgeRequestAdditionalCpuDuration',
                        'edgeRequest',
                        'elasticConcurrencyBuildSlots',
                        'fastDataTransfer',
                        'fastOriginTransfer',
                        'fluidCpuDuration',
                        'fluidDuration',
                        'functionDuration',
                        'functionInvocation',
                        'imageOptimizationCacheRead',
                        'imageOptimizationCacheWrite',
                        'imageOptimizationTransformation',
                        'logDrainsVolume',
                        'monitoringMetric',
                        'blobDataTransfer',
                        'observabilityEvent',
                        'onDemandConcurrencyMinutes',
                        'runtimeCacheRead',
                        'runtimeCacheWrite',
                        'serverlessFunctionExecution',
                        'sourceImages',
                        'wafOwaspExcessBytes',
                        'wafOwaspRequests',
                        'wafRateLimitRequest',
                        'webAnalyticsEvent'
                      ])
                    })
                    .optional()
                })
                .describe(
                  'Information about which features are blocked for a user. Blocks can be either soft (the user can still access the feature, but with a warning, e.g. prompting an upgrade) or hard (the user cannot access the feature at all).'
                )
                .optional(),
              defaultTeamId: z.string().optional(),
              version: z.enum(['northstar']),
              northstarMigration: z
                .object({
                  teamId: z.string().describe('The ID of the team we created for this user.'),
                  projects: z.number().describe('The number of projects migrated for this user.'),
                  stores: z.number().describe('The number of stores migrated for this user.'),
                  integrationConfigurations: z
                    .number()
                    .describe('The number of integration configurations migrated for this user.'),
                  integrationClients: z.number().describe('The number of integration clients migrated for this user.'),
                  startTime: z.number().describe('The migration start time timestamp for this user.'),
                  endTime: z.number().describe('The migration end time timestamp for this user.')
                })
                .describe(
                  'An archive of information about the Northstar migration, derived from the old (deprecated) property, `northstarMigrationEvents`.'
                )
                .optional(),
              opportunityId: z
                .string()
                .describe(
                  "The salesforce opportunity ID that this user is linked to. This is used to automatically associate a team of the user's choosing with the opportunity."
                )
                .optional(),
              mfaConfiguration: z
                .object({
                  enabled: z.boolean(),
                  enabledAt: z.number().optional(),
                  recoveryCodes: z.array(z.string()),
                  totp: z
                    .object({
                      secret: z.string(),
                      createdAt: z.number()
                    })
                    .optional()
                })
                .describe(
                  'MFA configuration. When enabled, the user will be required to provide a second factor of authentication when logging in.'
                )
                .optional()
            })
            .nullable()
        }),
        z.object({
          configurations: z.array(
            z.object({
              integrationId: z.string(),
              configurationId: z.string(),
              integrationSlug: z.string(),
              integrationName: z.string().optional()
            })
          ),
          ownerId: z.string()
        }),
        z.object({
          integrationId: z.string(),
          configurationId: z.string(),
          integrationSlug: z.string(),
          integrationName: z.string(),
          ownerId: z.string(),
          billingPlanId: z.string(),
          billingPlanName: z.string().optional()
        }),
        z.object({
          integrationId: z.string(),
          configurationId: z.string(),
          integrationSlug: z.string(),
          integrationName: z.string(),
          ownerId: z.string(),
          projectIds: z.array(z.string()).optional()
        }),
        z.object({
          projectId: z.string(),
          fromDeploymentId: z.string(),
          toDeploymentId: z.string(),
          projectName: z.string(),
          reason: z.string().optional()
        }),
        z.object({
          integrationId: z.string(),
          configurationId: z.string(),
          integrationSlug: z.string(),
          integrationName: z.string(),
          ownerId: z.string(),
          projectIds: z.array(z.string()).optional(),
          confirmedScopes: z.array(z.string())
        }),
        z.object({
          userAgent: z
            .object({
              browser: z.object({
                name: z.enum(['iphone', 'ipad', 'ipod', 'chrome', 'firefox', 'mozilla', 'unknown'])
              }),
              ua: z.string(),
              program: z.string(),
              os: z.object({
                name: z.enum([
                  'unknown',
                  'darwin',
                  'win32',
                  'win',
                  'windows',
                  'linux',
                  'freebsd',
                  'sunos',
                  'mac',
                  'ios',
                  'android',
                  'Mac OS',
                  'OS X'
                ])
              })
            })
            .optional(),
          geolocation: z
            .object({
              city: z
                .object({
                  names: z.object({
                    en: z.string()
                  })
                })
                .optional(),
              country: z.object({
                names: z.object({
                  en: z.string()
                })
              }),
              mostSpecificSubdivision: z
                .object({
                  names: z.object({
                    en: z.string()
                  })
                })
                .optional(),
              regionName: z.string().optional()
            })
            .nullable()
            .nullish(),
          viaGithub: z.boolean(),
          viaGitlab: z.boolean(),
          viaBitbucket: z.boolean(),
          viaGoogle: z.boolean(),
          viaSamlSso: z.boolean(),
          viaPasskey: z.boolean(),
          ssoType: z.string().optional(),
          env: z.string().optional(),
          os: z.string().optional(),
          username: z.string().optional()
        }),
        z.object({
          logDrainUrl: z.string().nullable(),
          integrationName: z.string().optional()
        }),
        z.object({
          logDrainUrl: z.string(),
          integrationName: z.string().optional()
        }),
        z.object({
          drainUrl: z.string().nullable(),
          integrationName: z.string().optional()
        }),
        z.object({
          projectId: z.string(),
          toDeploymentId: z.string(),
          projectName: z.string()
        }),
        z.object({
          projectName: z.string()
        }),
        z.object({
          plan: z.string(),
          removedUsers: z
            .object({})
            .catchall(
              z.object({
                role: z.enum(['OWNER', 'MEMBER', 'DEVELOPER', 'SECURITY', 'BILLING', 'VIEWER', 'CONTRIBUTOR']),
                confirmed: z.boolean(),
                confirmedAt: z.number().optional(),
                joinedFrom: z
                  .object({
                    origin: z.enum([
                      'teams',
                      'saml',
                      'link',
                      'github',
                      'gitlab',
                      'bitbucket',
                      'mail',
                      'import',
                      'dsync',
                      'feedback',
                      'organization-teams'
                    ]),
                    commitId: z.string().optional(),
                    repoId: z.string().optional(),
                    repoPath: z.string().optional(),
                    gitUserId: z.union([z.string(), z.number()]).optional(),
                    gitUserLogin: z.string().optional(),
                    ssoUserId: z.string().optional(),
                    ssoConnectedAt: z.number().optional(),
                    idpUserId: z.string().optional(),
                    dsyncUserId: z.string().optional(),
                    dsyncConnectedAt: z.number().optional()
                  })
                  .optional()
              })
            )
            .optional(),
          priorPlan: z.string().optional(),
          isDowngrade: z.boolean().optional(),
          userAgent: z.string().optional(),
          isReactivate: z.boolean().optional(),
          isTrialUpgrade: z.boolean().optional()
        }),
        z.object({
          projectName: z.string().optional(),
          projectId: z.string(),
          projectAnalytics: z
            .object({
              id: z.string(),
              canceledAt: z.number().nullable().nullish(),
              disabledAt: z.number(),
              enabledAt: z.number(),
              paidAt: z.number().optional(),
              sampleRatePercent: z.number().nullable().nullish(),
              spendLimitInDollars: z.number().nullable().nullish()
            })
            .nullable(),
          prevProjectAnalytics: z
            .object({
              id: z.string(),
              canceledAt: z.number().nullable().nullish(),
              disabledAt: z.number(),
              enabledAt: z.number(),
              paidAt: z.number().optional(),
              sampleRatePercent: z.number().nullable().nullish(),
              spendLimitInDollars: z.number().nullable().nullish()
            })
            .nullable()
        }),
        z.object({
          projectName: z.string().optional(),
          projectId: z.string(),
          projectAnalytics: z.object({}).catchall(z.unknown()).optional(),
          prevProjectAnalytics: z.object({}).catchall(z.unknown()).nullable().nullish()
        }),
        z.object({
          projectName: z.string().optional(),
          projectId: z.string()
        }),
        z.object({
          projectName: z.string(),
          ssoProtection: z
            .union([
              z.object({
                deploymentType: z.enum([
                  'all',
                  'preview',
                  'prod_deployment_urls_and_all_previews',
                  'all_except_custom_domains'
                ])
              }),
              z.enum(['all', 'preview', 'prod_deployment_urls_and_all_previews', 'all_except_custom_domains'])
            ])
            .nullable(),
          oldSsoProtection: z
            .union([
              z.object({
                deploymentType: z.enum([
                  'all',
                  'preview',
                  'prod_deployment_urls_and_all_previews',
                  'all_except_custom_domains'
                ])
              }),
              z.enum(['all', 'preview', 'prod_deployment_urls_and_all_previews', 'all_except_custom_domains'])
            ])
            .nullable()
        }),
        z.object({
          projectName: z.string(),
          passwordProtection: z
            .union([
              z.object({
                deploymentType: z.enum([
                  'all',
                  'preview',
                  'prod_deployment_urls_and_all_previews',
                  'all_except_custom_domains'
                ])
              }),
              z.enum(['all', 'preview', 'prod_deployment_urls_and_all_previews', 'all_except_custom_domains'])
            ])
            .nullable(),
          oldPasswordProtection: z
            .union([
              z.object({
                deploymentType: z.enum([
                  'all',
                  'preview',
                  'prod_deployment_urls_and_all_previews',
                  'all_except_custom_domains'
                ])
              }),
              z.enum(['all', 'preview', 'prod_deployment_urls_and_all_previews', 'all_except_custom_domains'])
            ])
            .nullable()
        }),
        z.object({
          projectName: z.string(),
          trustedIps: z
            .enum([
              'all',
              'preview',
              'prod_deployment_urls_and_all_previews',
              'all_except_custom_domains',
              'production'
            ])
            .nullable()
            .nullish(),
          oldTrustedIps: z
            .enum([
              'all',
              'preview',
              'prod_deployment_urls_and_all_previews',
              'all_except_custom_domains',
              'production'
            ])
            .nullable()
            .nullish(),
          addedAddresses: z.array(z.string()).nullable().nullish(),
          removedAddresses: z.array(z.string()).nullable().nullish()
        }),
        z.object({
          projectName: z.string(),
          optionsAllowlist: z
            .object({
              paths: z.array(
                z.object({
                  value: z.string()
                })
              )
            })
            .nullable()
            .nullish(),
          oldOptionsAllowlist: z
            .object({
              paths: z.array(
                z.object({
                  value: z.string()
                })
              )
            })
            .nullable()
            .nullish()
        }),
        z.object({
          projectName: z.string(),
          action: z.enum(['enabled', 'disabled', 'regenerated'])
        }),
        z.object({
          name: z.string(),
          ownerId: z.string()
        }),
        z.object({
          team: z.object({
            id: z.string(),
            name: z.string()
          }),
          project: z.object({
            id: z.string(),
            name: z.string().optional(),
            oldConnectConfigurations: z
              .array(
                z.object({
                  envId: z.union([z.string(), z.enum(['preview', 'production'])]),
                  connectConfigurationId: z.string(),
                  dc: z.string().optional(),
                  passive: z.boolean(),
                  buildsEnabled: z.boolean(),
                  aws: z
                    .object({
                      subnetIds: z.array(z.string()),
                      securityGroupId: z.string()
                    })
                    .optional(),
                  createdAt: z.number(),
                  updatedAt: z.number()
                })
              )
              .nullable(),
            newConnectConfigurations: z
              .array(
                z.object({
                  envId: z.union([z.string(), z.enum(['preview', 'production'])]),
                  connectConfigurationId: z.string(),
                  dc: z.string().optional(),
                  passive: z.boolean(),
                  buildsEnabled: z.boolean(),
                  aws: z
                    .object({
                      subnetIds: z.array(z.string()),
                      securityGroupId: z.string()
                    })
                    .optional(),
                  createdAt: z.number(),
                  updatedAt: z.number()
                })
              )
              .nullable()
          })
        }),
        z.object({
          projectId: z.string()
        }),
        z.object({
          projectId: z.string(),
          projectName: z.string()
        }),
        z.object({
          projectId: z.string().optional(),
          projectName: z.string().optional(),
          newTargetPercentage: z.number().optional()
        }),
        z.object({
          gitProvider: z.string(),
          gitProviderGroupDescriptor: z.string(),
          gitScope: z.string()
        }),
        z.object({
          instances: z.number(),
          url: z.string()
        }),
        z.object({
          email: z.string(),
          verified: z.boolean()
        }),
        z.object({
          email: z.string()
        }),
        z.object({
          team: z.object({
            id: z.string(),
            name: z.string().optional()
          }),
          previousRule: z
            .object({
              email: z.string()
            })
            .optional(),
          nextRule: z
            .object({
              email: z.string()
            })
            .optional()
        }),
        z.object({
          team: z.object({
            id: z.string(),
            name: z.string().optional()
          }),
          previousRule: z.object({
            email: z.string()
          })
        }),
        z.object({
          uid: z.string(),
          name: z.union([
            z.string(),
            z.object({
              name: z.string()
            })
          ])
        }),
        z.object({
          oldName: z.string(),
          newName: z.string(),
          uid: z.string().optional()
        }),
        z.object({
          bio: z.string()
        }),
        z.object({
          scalingRules: z.object({}).catchall(
            z.object({
              min: z.number(),
              max: z.number()
            })
          ),
          min: z.number(),
          max: z.number(),
          url: z.string()
        }),
        z.object({
          webhookUrl: z.string().optional()
        }),
        z.object({
          budget: z
            .object({
              type: z.enum(['fixed']).describe('The budget type'),
              fixedBudget: z.number().describe('Budget amount'),
              previousSpend: z.array(z.number()).describe('Array of the last 3 months of spend data'),
              notifiedAt: z.array(z.number()).describe('Array of 50, 75, 100 to keep track of notifications sent out'),
              webhookId: z
                .string()
                .describe('Webhook id that corresponds to a webhook in Cosmos webhook collection')
                .optional(),
              webhookNotified: z
                .boolean()
                .describe('Keep track if the webhook has been called for the month')
                .optional(),
              createdAt: z.number().describe('Date time when budget is created'),
              updatedAt: z.number().describe('Date time when budget is updated last').optional(),
              isActive: z.boolean().describe('Is the budget currently active for a customer'),
              pauseProjects: z.boolean().describe('Should all projects be paused if budget is exceeded').optional(),
              pricingPlan: z
                .enum(['legacy', 'unbundled'])
                .describe('The acive pricing plan the team is billed with')
                .optional(),
              teamId: z.string().describe('Partition key'),
              id: z.string().describe('Sort key that needs to be unique per teamId')
            })
            .describe('Represents a budget for tracking and notifying teams on their spending.')
        }),
        z.object({
          budget: z.object({
            budgetItem: z
              .object({
                type: z.enum(['fixed']).describe('The budget type'),
                fixedBudget: z.number().describe('Budget amount'),
                previousSpend: z.array(z.number()).describe('Array of the last 3 months of spend data'),
                notifiedAt: z
                  .array(z.number())
                  .describe('Array of 50, 75, 100 to keep track of notifications sent out'),
                webhookId: z
                  .string()
                  .describe('Webhook id that corresponds to a webhook in Cosmos webhook collection')
                  .optional(),
                webhookNotified: z
                  .boolean()
                  .describe('Keep track if the webhook has been called for the month')
                  .optional(),
                createdAt: z.number().describe('Date time when budget is created'),
                updatedAt: z.number().describe('Date time when budget is updated last').optional(),
                isActive: z.boolean().describe('Is the budget currently active for a customer'),
                pauseProjects: z.boolean().describe('Should all projects be paused if budget is exceeded').optional(),
                pricingPlan: z
                  .enum(['legacy', 'unbundled'])
                  .describe('The acive pricing plan the team is billed with')
                  .optional(),
                teamId: z.string().describe('Partition key'),
                id: z.string().describe('Sort key that needs to be unique per teamId')
              })
              .describe('Represents a budget for tracking and notifying teams on their spending.')
          })
        }),
        z.object({
          id: z.string(),
          name: z.string().optional(),
          computeUnitsMax: z.number().optional(),
          computeUnitsMin: z.number().optional(),
          suspendTimeoutSeconds: z.number().optional(),
          type: z.enum(['redis', 'postgres', 'edge-config', 'blob', 'integration'])
        }),
        z.object({
          storeType: z.enum(['redis', 'postgres'])
        }),
        z.object({
          store: z.object({
            name: z.string(),
            id: z.string()
          }),
          ownerId: z.string().optional()
        }),
        z.object({
          slug: z.string()
        }),
        z.object({
          slug: z.string(),
          teamId: z.string(),
          by: z.string(),
          reasons: z
            .array(
              z.object({
                slug: z.string(),
                description: z.string()
              })
            )
            .optional()
        }),
        z.object({
          directoryType: z.string().optional(),
          ssoType: z.string().optional(),
          invitedUser: z
            .object({
              username: z.string(),
              email: z.string()
            })
            .optional(),
          invitedEmail: z.string().optional(),
          invitationRole: z.string().optional(),
          entitlements: z.array(z.string()).optional(),
          invitedUid: z.string().optional()
        }),
        z.object({
          deletedUser: z
            .object({
              username: z.string(),
              email: z.string()
            })
            .optional(),
          deletedUid: z.string().optional(),
          githubUsername: z.string().nullable().nullish(),
          gitlabUsername: z.string().nullable().nullish(),
          bitbucketUsername: z.string().nullable().nullish(),
          directoryType: z.string().optional()
        }),
        z.object({
          role: z.string().optional(),
          uid: z.string(),
          origin: z.string().optional()
        }),
        z.object({
          directoryType: z.string().optional(),
          updatedUser: z
            .object({
              username: z.string(),
              email: z.string()
            })
            .optional(),
          role: z.string().optional(),
          previousRole: z.string(),
          updatedUid: z.string().optional()
        }),
        z.object({
          entitlement: z.string(),
          user: z.object({
            id: z.string(),
            username: z.string()
          })
        }),
        z.object({
          entitlement: z.string(),
          user: z.object({
            id: z.string(),
            username: z.string()
          }),
          previousCanceledAt: z.string().optional()
        }),
        z.object({
          enforced: z.boolean()
        }),
        z.object({
          name: z.string().optional()
        }),
        z.object({
          slug: z.string().optional()
        }),
        z.object({
          remoteCaching: z
            .object({
              enabled: z.boolean().optional()
            })
            .describe('Represents configuration for remote caching')
            .optional()
        }),
        z.object({
          previous: z.object({
            enabled: z.boolean(),
            totpVerified: z.boolean()
          }),
          next: z.object({
            enabled: z.boolean(),
            totpVerified: z.boolean()
          })
        }),
        z.object({
          enabled: z.boolean(),
          totpVerified: z.boolean()
        }),
        z.object({
          mfaEnabled: z.boolean()
        }),
        z.object({
          email: z.string(),
          prevEmail: z.string()
        }),
        z.object({
          username: z.string()
        }),
        z.object({
          price: z.number().optional(),
          currency: z.string().optional(),
          enabled: z.boolean().optional()
        }),
        z.object({
          previewDeploymentSuffix: z.string().nullable().nullish(),
          previousPreviewDeploymentSuffix: z.string().nullable().nullish()
        }),
        z.object({
          price: z.number().optional(),
          currency: z.string().optional()
        }),
        z.object({
          teamName: z.string(),
          username: z.string().optional(),
          gitUsername: z.string().optional(),
          githubUsername: z.string().nullable().nullish(),
          gitlabUsername: z.string().nullable().nullish(),
          bitbucketUsername: z.string().nullable().nullish(),
          updatedUid: z.string().optional(),
          teamId: z.string().optional()
        }),
        z.object({
          teamName: z.string(),
          username: z.string().optional(),
          gitUsername: z.string().nullable().nullish(),
          githubUsername: z.string().nullable().nullish(),
          gitlabUsername: z.string().nullable().nullish(),
          bitbucketUsername: z.string().nullable().nullish()
        }),
        z.object({
          requestedTeamName: z.string(),
          requestedUserName: z.string().optional(),
          gitUsername: z.string().optional(),
          githubUsername: z.string().optional(),
          gitlabUsername: z.string().optional(),
          bitbucketUsername: z.string().optional()
        }),
        z.object({
          projectId: z.string(),
          projectName: z.string(),
          originAccountName: z.string(),
          destinationAccountName: z.string(),
          destinationAccountId: z.string(),
          transferId: z.string().optional()
        }),
        z.object({
          projectName: z.string(),
          destinationAccountName: z.string().nullable(),
          transferId: z.string().optional()
        }),
        z.object({
          previousProjectName: z.string(),
          newProjectName: z.string(),
          destinationAccountName: z.string(),
          transferId: z.string().optional()
        }),
        z.object({
          previousProjectName: z.string(),
          newProjectName: z.string(),
          originAccountName: z.string(),
          transferId: z.string().optional()
        }),
        z.object({
          project: z.object({
            name: z.string(),
            id: z.string().optional()
          }),
          projectMembership: z
            .object({
              role: z.enum(['ADMIN', 'PROJECT_DEVELOPER', 'PROJECT_VIEWER']).optional(),
              uid: z.string().optional(),
              createdAt: z.number().optional(),
              username: z.string().optional()
            })
            .nullable()
        }),
        z.object({
          project: z.object({
            name: z.string(),
            id: z.string().optional()
          }),
          removedMembership: z.object({
            role: z.enum(['ADMIN', 'PROJECT_DEVELOPER', 'PROJECT_VIEWER']).optional(),
            uid: z.string().optional(),
            createdAt: z.number().optional(),
            username: z.string().optional()
          })
        }),
        z.object({
          project: z.object({
            id: z.string(),
            name: z.string()
          }),
          projectMembership: z.object({
            role: z.enum(['ADMIN', 'PROJECT_DEVELOPER', 'PROJECT_VIEWER']).optional(),
            uid: z.string().optional(),
            createdAt: z.number().optional(),
            username: z.string().optional(),
            previousRole: z.enum(['ADMIN', 'PROJECT_DEVELOPER', 'PROJECT_VIEWER']).optional()
          })
        }),
        z.object({
          project: z.object({
            name: z.string(),
            role: z.enum(['ADMIN', 'PROJECT_DEVELOPER', 'PROJECT_VIEWER']),
            invitedUserName: z.string(),
            id: z.string().optional(),
            invitedUserId: z.string().optional()
          })
        }),
        z.object({
          edgeConfigId: z.string(),
          edgeConfigSlug: z.string(),
          edgeConfigDigest: z.string()
        }),
        z.object({
          edgeConfigId: z.string(),
          edgeConfigSlug: z.string(),
          edgeConfigTokenId: z.string(),
          label: z.string()
        }),
        z.object({
          edgeConfigId: z.string(),
          edgeConfigSlug: z.string(),
          edgeConfigTokenIds: z.array(z.string()).describe('ids of deleted tokens')
        }),
        z.object({
          action: z.enum(['enable', 'disable'])
        }),
        z.object({
          id: z.string(),
          slug: z.string(),
          name: z.string()
        }),
        z.object({
          id: z.string(),
          slug: z.string().optional(),
          name: z.string().optional(),
          fallbackEnvironment: z.string().optional(),
          prev: z.object({
            name: z.string(),
            slug: z.string(),
            fallbackEnvironment: z.string().optional()
          })
        }),
        z.object({
          project: z.object({
            id: z.string(),
            name: z.string()
          }),
          group: z.object({
            id: z.string(),
            slug: z.string(),
            name: z.string()
          })
        }),
        z.object({
          project: z.object({
            id: z.string(),
            name: z.string(),
            microfrontends: z
              .union([
                z.object({
                  updatedAt: z.number().describe('Timestamp when the microfrontends settings were last updated.'),
                  groupIds: z
                    .array(z.union([z.string(), z.string()]))
                    .min(2)
                    .max(2)
                    .describe(
                      'The group IDs of microfrontends that this project belongs to. Each microfrontend project must belong to a microfrontends group that is the set of microfrontends that are used together.'
                    ),
                  enabled: z.boolean().describe('Whether microfrontends are enabled for this project.'),
                  isDefaultApp: z
                    .boolean()
                    .describe(
                      'Whether this project is the default application for the microfrontends group. The default application is the one that is used as the top level shell for the microfrontends group and hosts the other microfrontends.'
                    )
                    .optional(),
                  defaultRoute: z
                    .string()
                    .describe(
                      'A path that is used to take screenshots and as the default path in preview links when a domain for this microfrontend is shown in the UI. Includes the leading slash, e.g. `/docs`'
                    )
                    .optional(),
                  routeObservabilityToThisProject: z
                    .boolean()
                    .describe(
                      'Whether observability data should be routed to this microfrontend project or a root project.'
                    )
                    .optional()
                }),
                z.object({
                  updatedAt: z.number(),
                  groupIds: z
                    .array(z.union([z.string(), z.string()]))
                    .min(2)
                    .max(2),
                  enabled: z.boolean()
                })
              ])
              .optional()
          }),
          prev: z.object({
            project: z.object({
              microfrontends: z
                .union([
                  z.object({
                    updatedAt: z.number().describe('Timestamp when the microfrontends settings were last updated.'),
                    groupIds: z
                      .array(z.union([z.string(), z.string()]))
                      .min(2)
                      .max(2)
                      .describe(
                        'The group IDs of microfrontends that this project belongs to. Each microfrontend project must belong to a microfrontends group that is the set of microfrontends that are used together.'
                      ),
                    enabled: z.boolean().describe('Whether microfrontends are enabled for this project.'),
                    isDefaultApp: z
                      .boolean()
                      .describe(
                        'Whether this project is the default application for the microfrontends group. The default application is the one that is used as the top level shell for the microfrontends group and hosts the other microfrontends.'
                      )
                      .optional(),
                    defaultRoute: z
                      .string()
                      .describe(
                        'A path that is used to take screenshots and as the default path in preview links when a domain for this microfrontend is shown in the UI. Includes the leading slash, e.g. `/docs`'
                      )
                      .optional(),
                    routeObservabilityToThisProject: z
                      .boolean()
                      .describe(
                        'Whether observability data should be routed to this microfrontend project or a root project.'
                      )
                      .optional()
                  }),
                  z.object({
                    updatedAt: z.number(),
                    groupIds: z
                      .array(z.union([z.string(), z.string()]))
                      .min(2)
                      .max(2),
                    enabled: z.boolean()
                  })
                ])
                .optional()
            })
          }),
          group: z.object({
            id: z.string(),
            slug: z.string(),
            name: z.string()
          })
        }),
        z.object({
          projectId: z.string(),
          projectName: z.string(),
          projectWebAnalytics: z
            .object({
              id: z.string(),
              disabledAt: z.number().optional(),
              canceledAt: z.number().optional(),
              enabledAt: z.number().optional(),
              hasData: z.boolean().optional()
            })
            .optional(),
          prevProjectWebAnalytics: z
            .object({
              id: z.string(),
              disabledAt: z.number().optional(),
              canceledAt: z.number().optional(),
              enabledAt: z.number().optional(),
              hasData: z.boolean().optional()
            })
            .nullable()
            .nullish()
        }),
        z.object({
          tier: z.enum(['pro', 'plus'])
        }),
        z.object({
          oldName: z.string(),
          newName: z.string()
        }),
        z.object({
          appName: z.string(),
          scopes: z.array(z.string())
        }),
        z.object({
          appName: z.string(),
          nextScopes: z.array(z.string())
        }),
        z.object({
          appName: z.string()
        }),
        z.object({
          team: z.object({
            id: z.string(),
            name: z.string()
          }),
          configuration: z.object({
            id: z.string(),
            name: z.string().optional()
          }),
          peering: z.object({
            id: z.string(),
            accountId: z.string(),
            region: z.string(),
            vpcId: z.string()
          })
        }),
        z.object({
          team: z.object({
            id: z.string(),
            name: z.string()
          }),
          configuration: z.object({
            id: z.string(),
            name: z.string().optional()
          }),
          peering: z.object({
            id: z.string(),
            name: z.string().optional()
          })
        }),
        z.object({
          team: z.object({
            id: z.string(),
            name: z.string()
          }),
          configuration: z.object({
            id: z.string(),
            name: z.string().optional()
          }),
          peering: z.object({
            id: z.string(),
            name: z.string().optional()
          }),
          newName: z.string().optional()
        }),
        z.object({
          grantType: z.enum([
            'authorization_code',
            'refresh_token',
            'urn:ietf:params:oauth:grant-type:device_code',
            'client_credentials'
          ]),
          appName: z.string(),
          atTTL: z.number().describe('access_token TTL'),
          rtTTL: z.number().describe('refresh_token TTL').optional(),
          scope: z.string(),
          authMethod: z.enum([
            'email',
            'saml',
            'github',
            'gitlab',
            'bitbucket',
            'manual',
            'passkey',
            'otp',
            'sms',
            'invite',
            'google'
          ])
        })
      ])
      .optional()
  })
  .describe('Array of events generated by the User.');

/**
 * @description Data representing a Team.
 */
export const teamSchema = z
  .object({
    connect: z
      .object({
        enabled: z.boolean().optional()
      })
      .optional(),
    creatorId: z.string().describe('The ID of the user who created the Team.'),
    updatedAt: z.number().describe('Timestamp (in milliseconds) of when the Team was last updated.'),
    emailDomain: z
      .string()
      .describe("Hostname that'll be matched with emails on sign-up to automatically join the Team.")
      .nullable()
      .nullish(),
    saml: z
      .object({
        connection: z
          .object({
            type: z.string().describe('The Identity Provider "type", for example Okta.'),
            status: z.string().describe('Current status of the connection.'),
            state: z.string().describe('Current state of the connection.'),
            connectedAt: z.number().describe('Timestamp (in milliseconds) of when the configuration was connected.'),
            lastReceivedWebhookEvent: z
              .number()
              .describe('Timestamp (in milliseconds) of when the last webhook event was received from WorkOS.')
              .optional()
          })
          .describe('Information for the SAML Single Sign-On configuration.')
          .optional(),
        directory: z
          .object({
            type: z.string().describe('The Identity Provider "type", for example Okta.'),
            state: z.string().describe('Current state of the connection.'),
            connectedAt: z.number().describe('Timestamp (in milliseconds) of when the configuration was connected.'),
            lastReceivedWebhookEvent: z
              .number()
              .describe('Timestamp (in milliseconds) of when the last webhook event was received from WorkOS.')
              .optional()
          })
          .describe('Information for the Directory Sync configuration.')
          .optional(),
        enforced: z
          .boolean()
          .describe(
            "When `true`, interactions with the Team **must** be done with an authentication token that has been authenticated with the Team's SAML Single Sign-On provider."
          ),
        roles: z
          .object({})
          .catchall(
            z.union([
              z.object({
                accessGroupId: z.string()
              }),
              z.enum(['OWNER', 'MEMBER', 'DEVELOPER', 'SECURITY', 'BILLING', 'VIEWER', 'CONTRIBUTOR'])
            ])
          )
          .describe(
            'When "Directory Sync" is configured, this object contains a mapping of which Directory Group (by ID) should be assigned to which Vercel Team "role".'
          )
          .optional()
      })
      .describe(
        'When "Single Sign-On (SAML)" is configured, this object contains information regarding the configuration of the Identity Provider (IdP).'
      )
      .optional(),
    inviteCode: z.string().describe('Code that can be used to join this Team. Only visible to Team owners.').optional(),
    description: z.string().describe('A short description of the Team.').nullable(),
    stagingPrefix: z.string().describe('The prefix that is prepended to automatic aliases.'),
    resourceConfig: z
      .object({
        concurrentBuilds: z.number().describe('The total amount of concurrent builds that can be used.').optional(),
        elasticConcurrencyEnabled: z
          .boolean()
          .describe('Whether every build for this team / user has elastic concurrency enabled automatically.')
          .optional(),
        edgeConfigSize: z
          .number()
          .describe('The maximum size in kilobytes of an Edge Config. Only specified if a custom limit is set.')
          .optional(),
        edgeConfigs: z.number().describe('The maximum number of edge configs an account can create.').optional(),
        kvDatabases: z.number().describe('The maximum number of kv databases an account can create.').optional(),
        blobStores: z.number().describe('The maximum number of blob stores an account can create.').optional(),
        postgresDatabases: z
          .number()
          .describe('The maximum number of postgres databases an account can create.')
          .optional(),
        buildEntitlements: z
          .object({
            enhancedBuilds: z.boolean().optional()
          })
          .optional()
      })
      .optional(),
    previewDeploymentSuffix: z
      .string()
      .describe('The hostname that is current set as preview deployment suffix.')
      .nullable()
      .nullish(),
    remoteCaching: z
      .object({
        enabled: z.boolean().optional()
      })
      .describe('Is remote caching enabled for this team')
      .optional(),
    defaultDeploymentProtection: z
      .object({
        passwordProtection: z
          .object({
            deploymentType: z.string()
          })
          .optional(),
        ssoProtection: z
          .object({
            deploymentType: z.string()
          })
          .optional()
      })
      .describe('Default deployment protection for this team')
      .optional(),
    enablePreviewFeedback: z
      .enum(['default', 'default-force', 'off', 'off-force', 'on', 'on-force'])
      .describe('Whether toolbar is enabled on preview deployments')
      .nullable()
      .nullish(),
    enableProductionFeedback: z
      .enum(['default', 'default-force', 'off', 'off-force', 'on', 'on-force'])
      .describe('Whether toolbar is enabled on production deployments')
      .nullable()
      .nullish(),
    sensitiveEnvironmentVariablePolicy: z
      .enum(['default', 'off', 'on'])
      .describe('Sensitive environment variable policy for this team')
      .nullable()
      .nullish(),
    hideIpAddresses: z
      .boolean()
      .describe('Indicates if IP addresses should be accessible in observability (o11y) tooling')
      .nullable()
      .nullish(),
    hideIpAddressesInLogDrains: z
      .boolean()
      .describe('Indicates if IP addresses should be accessible in log drains')
      .nullable()
      .nullish(),
    ipBuckets: z
      .array(
        z.object({
          bucket: z.string(),
          supportUntil: z.number().optional()
        })
      )
      .optional(),
    id: z.string().describe("The Team's unique identifier."),
    slug: z.string().describe("The Team's slug, which is unique across the Vercel platform."),
    name: z.string().describe('Name associated with the Team account, or `null` if none has been provided.').nullable(),
    avatar: z.string().describe('The ID of the file used as avatar for this Team.').nullable(),
    membership: z
      .object({
        uid: z.string().optional(),
        entitlements: z
          .array(
            z.object({
              entitlement: z.string()
            })
          )
          .optional(),
        teamId: z.string().optional(),
        confirmed: z.boolean(),
        confirmedAt: z.number(),
        accessRequestedAt: z.number().optional(),
        role: z.enum(['BILLING', 'CONTRIBUTOR', 'DEVELOPER', 'MEMBER', 'OWNER', 'SECURITY', 'VIEWER']),
        teamRoles: z
          .array(z.enum(['BILLING', 'CONTRIBUTOR', 'DEVELOPER', 'MEMBER', 'OWNER', 'SECURITY', 'VIEWER']))
          .optional(),
        teamPermissions: z
          .array(
            z.enum([
              'CreateProject',
              'EnvVariableManager',
              'EnvironmentManager',
              'FullProductionDeployment',
              'UsageViewer'
            ])
          )
          .optional(),
        createdAt: z.number(),
        created: z.number(),
        joinedFrom: z
          .object({
            origin: z.enum([
              'bitbucket',
              'dsync',
              'feedback',
              'github',
              'gitlab',
              'import',
              'link',
              'mail',
              'organization-teams',
              'saml',
              'teams'
            ]),
            commitId: z.string().optional(),
            repoId: z.string().optional(),
            repoPath: z.string().optional(),
            gitUserId: z.union([z.string(), z.number()]).optional(),
            gitUserLogin: z.string().optional(),
            ssoUserId: z.string().optional(),
            ssoConnectedAt: z.number().optional(),
            idpUserId: z.string().optional(),
            dsyncUserId: z.string().optional(),
            dsyncConnectedAt: z.number().optional()
          })
          .optional()
      })
      .describe('The membership of the authenticated User in relation to the Team.'),
    createdAt: z.number().describe('UNIX timestamp (in milliseconds) when the Team was created.')
  })
  .describe('Data representing a Team.');

/**
 * @description A limited form of data representing a Team, due to the authentication token missing privileges to read the full Team data.
 */
export const teamLimitedSchema = z
  .object({
    limited: z
      .boolean()
      .describe(
        "Property indicating that this Team data contains only limited information, due to the authentication token missing privileges to read the full Team data or due to team having MFA enforced and the user not having MFA enabled. Re-login with the Team's configured SAML Single Sign-On provider in order to upgrade the authentication token with the necessary privileges."
      ),
    limitedBy: z.array(z.enum(['mfa', 'scope'])),
    saml: z
      .object({
        connection: z
          .object({
            type: z.string().describe('The Identity Provider "type", for example Okta.'),
            status: z.string().describe('Current status of the connection.'),
            state: z.string().describe('Current state of the connection.'),
            connectedAt: z.number().describe('Timestamp (in milliseconds) of when the configuration was connected.'),
            lastReceivedWebhookEvent: z
              .number()
              .describe('Timestamp (in milliseconds) of when the last webhook event was received from WorkOS.')
              .optional()
          })
          .describe('Information for the SAML Single Sign-On configuration.')
          .optional(),
        directory: z
          .object({
            type: z.string().describe('The Identity Provider "type", for example Okta.'),
            state: z.string().describe('Current state of the connection.'),
            connectedAt: z.number().describe('Timestamp (in milliseconds) of when the configuration was connected.'),
            lastReceivedWebhookEvent: z
              .number()
              .describe('Timestamp (in milliseconds) of when the last webhook event was received from WorkOS.')
              .optional()
          })
          .describe('Information for the Directory Sync configuration.')
          .optional(),
        enforced: z
          .boolean()
          .describe(
            "When `true`, interactions with the Team **must** be done with an authentication token that has been authenticated with the Team's SAML Single Sign-On provider."
          )
      })
      .describe(
        'When "Single Sign-On (SAML)" is configured, this object contains information that allows the client-side to identify whether or not this Team has SAML enforced.'
      )
      .optional(),
    id: z.string().describe("The Team's unique identifier."),
    slug: z.string().describe("The Team's slug, which is unique across the Vercel platform."),
    name: z.string().describe('Name associated with the Team account, or `null` if none has been provided.').nullable(),
    avatar: z.string().describe('The ID of the file used as avatar for this Team.').nullable(),
    membership: z
      .object({
        uid: z.string().optional(),
        entitlements: z
          .array(
            z.object({
              entitlement: z.string()
            })
          )
          .optional(),
        teamId: z.string().optional(),
        confirmed: z.boolean(),
        confirmedAt: z.number(),
        accessRequestedAt: z.number().optional(),
        role: z.enum(['BILLING', 'CONTRIBUTOR', 'DEVELOPER', 'MEMBER', 'OWNER', 'SECURITY', 'VIEWER']),
        teamRoles: z
          .array(z.enum(['BILLING', 'CONTRIBUTOR', 'DEVELOPER', 'MEMBER', 'OWNER', 'SECURITY', 'VIEWER']))
          .optional(),
        teamPermissions: z
          .array(
            z.enum([
              'CreateProject',
              'EnvVariableManager',
              'EnvironmentManager',
              'FullProductionDeployment',
              'UsageViewer'
            ])
          )
          .optional(),
        createdAt: z.number(),
        created: z.number(),
        joinedFrom: z
          .object({
            origin: z.enum([
              'bitbucket',
              'dsync',
              'feedback',
              'github',
              'gitlab',
              'import',
              'link',
              'mail',
              'organization-teams',
              'saml',
              'teams'
            ]),
            commitId: z.string().optional(),
            repoId: z.string().optional(),
            repoPath: z.string().optional(),
            gitUserId: z.union([z.string(), z.number()]).optional(),
            gitUserLogin: z.string().optional(),
            ssoUserId: z.string().optional(),
            ssoConnectedAt: z.number().optional(),
            idpUserId: z.string().optional(),
            dsyncUserId: z.string().optional(),
            dsyncConnectedAt: z.number().optional()
          })
          .optional()
      })
      .describe('The membership of the authenticated User in relation to the Team.'),
    createdAt: z.number().describe('UNIX timestamp (in milliseconds) when the Team was created.')
  })
  .describe(
    'A limited form of data representing a Team, due to the authentication token missing privileges to read the full Team data.'
  );

/**
 * @description Authentication token metadata.
 */
export const authTokenSchema = z
  .object({
    id: z.string().describe('The unique identifier of the token.'),
    name: z.string().describe('The human-readable name of the token.'),
    type: z.string().describe('The type of the token.'),
    origin: z.string().describe('The origin of how the token was created.').optional(),
    scopes: z
      .array(
        z.union([
          z.object({
            type: z.enum(['user']),
            sudo: z
              .object({
                origin: z.enum(['totp', 'webauthn', 'recovery-code']).describe('Possible multi-factor origins'),
                expiresAt: z.number()
              })
              .optional(),
            origin: z.enum([
              'saml',
              'github',
              'gitlab',
              'bitbucket',
              'email',
              'manual',
              'passkey',
              'otp',
              'sms',
              'invite',
              'google'
            ]),
            createdAt: z.number(),
            expiresAt: z.number().optional()
          }),
          z.object({
            type: z.enum(['team']),
            teamId: z.string(),
            origin: z.enum([
              'saml',
              'github',
              'gitlab',
              'bitbucket',
              'email',
              'manual',
              'passkey',
              'otp',
              'sms',
              'invite',
              'google'
            ]),
            createdAt: z.number(),
            expiresAt: z.number().optional()
          })
        ])
      )
      .describe('The access scopes granted to the token.')
      .optional(),
    expiresAt: z.number().describe('Timestamp (in milliseconds) of when the token expires.').optional(),
    activeAt: z.number().describe('Timestamp (in milliseconds) of when the token was most recently used.'),
    createdAt: z.number().describe('Timestamp (in milliseconds) of when the token was created.')
  })
  .describe('Authentication token metadata.');

/**
 * @description Data for the currently authenticated User.
 */
export const authUserSchema = z
  .object({
    createdAt: z.number().describe('UNIX timestamp (in milliseconds) when the User account was created.'),
    softBlock: z
      .object({
        blockedAt: z.number(),
        reason: z.enum([
          'BLOCKED_FOR_PLATFORM_ABUSE',
          'ENTERPRISE_TRIAL_ENDED',
          'FAIR_USE_LIMITS_EXCEEDED',
          'SUBSCRIPTION_CANCELED',
          'SUBSCRIPTION_EXPIRED',
          'UNPAID_INVOICE'
        ]),
        blockedDueToOverageType: z
          .enum([
            'analyticsUsage',
            'artifacts',
            'bandwidth',
            'blobDataTransfer',
            'blobTotalAdvancedRequests',
            'blobTotalAvgSizeInBytes',
            'blobTotalGetResponseObjectSizeInBytes',
            'blobTotalSimpleRequests',
            'connectDataTransfer',
            'dataCacheRead',
            'dataCacheWrite',
            'edgeConfigRead',
            'edgeConfigWrite',
            'edgeFunctionExecutionUnits',
            'edgeMiddlewareInvocations',
            'edgeRequest',
            'edgeRequestAdditionalCpuDuration',
            'elasticConcurrencyBuildSlots',
            'fastDataTransfer',
            'fastOriginTransfer',
            'fluidCpuDuration',
            'fluidDuration',
            'functionDuration',
            'functionInvocation',
            'imageOptimizationCacheRead',
            'imageOptimizationCacheWrite',
            'imageOptimizationTransformation',
            'logDrainsVolume',
            'monitoringMetric',
            'observabilityEvent',
            'onDemandConcurrencyMinutes',
            'runtimeCacheRead',
            'runtimeCacheWrite',
            'serverlessFunctionExecution',
            'sourceImages',
            'wafOwaspExcessBytes',
            'wafOwaspRequests',
            'wafRateLimitRequest',
            'webAnalyticsEvent'
          ])
          .optional()
      })
      .describe(
        'When the User account has been "soft blocked", this property will contain the date when the restriction was enacted, and the identifier for why.'
      )
      .nullable(),
    billing: z
      .object({})
      .describe('An object containing billing infomation associated with the User account.')
      .nullable(),
    resourceConfig: z
      .object({
        nodeType: z
          .string()
          .describe(
            'An object containing infomation related to the amount of platform resources may be allocated to the User account.'
          )
          .optional(),
        concurrentBuilds: z
          .number()
          .describe(
            'An object containing infomation related to the amount of platform resources may be allocated to the User account.'
          )
          .optional(),
        elasticConcurrencyEnabled: z
          .boolean()
          .describe(
            'An object containing infomation related to the amount of platform resources may be allocated to the User account.'
          )
          .optional(),
        buildEntitlements: z
          .object({
            enhancedBuilds: z
              .boolean()
              .describe(
                'An object containing infomation related to the amount of platform resources may be allocated to the User account.'
              )
              .optional()
          })
          .describe(
            'An object containing infomation related to the amount of platform resources may be allocated to the User account.'
          )
          .optional(),
        awsAccountType: z
          .string()
          .describe(
            'An object containing infomation related to the amount of platform resources may be allocated to the User account.'
          )
          .optional(),
        awsAccountIds: z
          .array(z.string())
          .describe(
            'An object containing infomation related to the amount of platform resources may be allocated to the User account.'
          )
          .optional(),
        cfZoneName: z
          .string()
          .describe(
            'An object containing infomation related to the amount of platform resources may be allocated to the User account.'
          )
          .optional(),
        imageOptimizationType: z
          .string()
          .describe(
            'An object containing infomation related to the amount of platform resources may be allocated to the User account.'
          )
          .optional(),
        edgeConfigs: z
          .number()
          .describe(
            'An object containing infomation related to the amount of platform resources may be allocated to the User account.'
          )
          .optional(),
        edgeConfigSize: z
          .number()
          .describe(
            'An object containing infomation related to the amount of platform resources may be allocated to the User account.'
          )
          .optional(),
        edgeFunctionMaxSizeBytes: z
          .number()
          .describe(
            'An object containing infomation related to the amount of platform resources may be allocated to the User account.'
          )
          .optional(),
        edgeFunctionExecutionTimeoutMs: z
          .number()
          .describe(
            'An object containing infomation related to the amount of platform resources may be allocated to the User account.'
          )
          .optional(),
        serverlessFunctionMaxMemorySize: z
          .number()
          .describe(
            'An object containing infomation related to the amount of platform resources may be allocated to the User account.'
          )
          .optional(),
        kvDatabases: z
          .number()
          .describe(
            'An object containing infomation related to the amount of platform resources may be allocated to the User account.'
          )
          .optional(),
        postgresDatabases: z
          .number()
          .describe(
            'An object containing infomation related to the amount of platform resources may be allocated to the User account.'
          )
          .optional(),
        blobStores: z
          .number()
          .describe(
            'An object containing infomation related to the amount of platform resources may be allocated to the User account.'
          )
          .optional(),
        integrationStores: z
          .number()
          .describe(
            'An object containing infomation related to the amount of platform resources may be allocated to the User account.'
          )
          .optional(),
        cronJobs: z
          .number()
          .describe(
            'An object containing infomation related to the amount of platform resources may be allocated to the User account.'
          )
          .optional(),
        cronJobsPerProject: z
          .number()
          .describe(
            'An object containing infomation related to the amount of platform resources may be allocated to the User account.'
          )
          .optional(),
        microfrontendGroupsPerTeam: z
          .number()
          .describe(
            'An object containing infomation related to the amount of platform resources may be allocated to the User account.'
          )
          .optional(),
        microfrontendProjectsPerGroup: z
          .number()
          .describe(
            'An object containing infomation related to the amount of platform resources may be allocated to the User account.'
          )
          .optional(),
        flagsExplorerOverridesThreshold: z
          .number()
          .describe(
            'An object containing infomation related to the amount of platform resources may be allocated to the User account.'
          )
          .optional(),
        flagsExplorerUnlimitedOverrides: z
          .boolean()
          .describe(
            'An object containing infomation related to the amount of platform resources may be allocated to the User account.'
          )
          .optional(),
        customEnvironmentsPerProject: z
          .number()
          .describe(
            'An object containing infomation related to the amount of platform resources may be allocated to the User account.'
          )
          .optional(),
        buildMachine: z
          .object({
            purchaseType: z
              .enum(['enhanced', 'turbo'])
              .describe(
                'An object containing infomation related to the amount of platform resources may be allocated to the User account.'
              )
              .optional(),
            isDefaultBuildMachine: z
              .boolean()
              .describe(
                'An object containing infomation related to the amount of platform resources may be allocated to the User account.'
              )
              .optional(),
            cores: z
              .number()
              .describe(
                'An object containing infomation related to the amount of platform resources may be allocated to the User account.'
              )
              .optional(),
            memory: z
              .number()
              .describe(
                'An object containing infomation related to the amount of platform resources may be allocated to the User account.'
              )
              .optional()
          })
          .describe(
            'An object containing infomation related to the amount of platform resources may be allocated to the User account.'
          )
          .optional()
      })
      .describe(
        'An object containing infomation related to the amount of platform resources may be allocated to the User account.'
      ),
    stagingPrefix: z
      .string()
      .describe('Prefix that will be used in the URL of "Preview" deployments created by the User account.'),
    activeDashboardViews: z
      .array(
        z
          .object({
            scopeId: z.string(),
            viewPreference: z.enum(['cards', 'list']).nullable().nullish(),
            favoritesViewPreference: z.enum(['closed', 'open']).nullable().nullish(),
            recentsViewPreference: z.enum(['closed', 'open']).nullable().nullish()
          })
          .describe('set of dashboard view preferences (cards or list) per scopeId')
      )
      .describe('set of dashboard view preferences (cards or list) per scopeId')
      .optional(),
    importFlowGitNamespace: z.union([z.string(), z.number()]).nullable().nullish(),
    importFlowGitNamespaceId: z.union([z.string(), z.number()]).nullable().nullish(),
    importFlowGitProvider: z
      .enum(['bitbucket', 'github', 'github-custom-host', 'github-limited', 'gitlab'])
      .nullable()
      .nullish(),
    preferredScopesAndGitNamespaces: z
      .array(
        z.object({
          scopeId: z.string(),
          gitNamespaceId: z.union([z.string(), z.number()]).nullable()
        })
      )
      .optional(),
    dismissedToasts: z
      .array(
        z
          .object({
            name: z.string(),
            dismissals: z.array(
              z.object({
                scopeId: z.string(),
                createdAt: z.number()
              })
            )
          })
          .describe('A record of when, under a certain scopeId, a toast was dismissed')
      )
      .describe('A record of when, under a certain scopeId, a toast was dismissed')
      .optional(),
    favoriteProjectsAndSpaces: z
      .array(
        z
          .object({
            teamId: z.string(),
            projectId: z.string()
          })
          .describe('A list of projects and spaces across teams that a user has marked as a favorite.')
      )
      .describe('A list of projects and spaces across teams that a user has marked as a favorite.')
      .optional(),
    hasTrialAvailable: z.boolean().describe('Whether the user has a trial available for a paid plan subscription.'),
    remoteCaching: z
      .object({
        enabled: z.boolean().optional()
      })
      .describe('remote caching settings')
      .optional(),
    dataCache: z
      .object({
        excessBillingEnabled: z.boolean().optional()
      })
      .describe('data cache settings')
      .optional(),
    featureBlocks: z
      .object({
        webAnalytics: z
          .object({
            blockedFrom: z.number().optional(),
            blockedUntil: z.number().optional(),
            isCurrentlyBlocked: z.boolean()
          })
          .optional()
      })
      .describe('Feature blocks for the user')
      .optional(),
    id: z.string().describe("The User's unique identifier."),
    email: z.string().describe('Email address associated with the User account.'),
    name: z.string().describe('Name associated with the User account, or `null` if none has been provided.').nullable(),
    username: z.string().describe('Unique username associated with the User account.'),
    avatar: z
      .string()
      .describe(
        'SHA1 hash of the avatar for the User account. Can be used in conjuction with the ... endpoint to retrieve the avatar image.'
      )
      .nullable(),
    defaultTeamId: z.string().describe("The user's default team.").nullable()
  })
  .describe('Data for the currently authenticated User.');

/**
 * @description A limited form of data for the currently authenticated User, due to the authentication token missing privileges to read the full User data.
 */
export const authUserLimitedSchema = z
  .object({
    limited: z
      .boolean()
      .describe(
        'Property indicating that this User data contains only limited information, due to the authentication token missing privileges to read the full User data. Re-login with email, GitHub, GitLab or Bitbucket in order to upgrade the authentication token with the necessary privileges.'
      ),
    id: z.string().describe("The User's unique identifier."),
    email: z.string().describe('Email address associated with the User account.'),
    name: z.string().describe('Name associated with the User account, or `null` if none has been provided.').nullable(),
    username: z.string().describe('Unique username associated with the User account.'),
    avatar: z
      .string()
      .describe(
        'SHA1 hash of the avatar for the User account. Can be used in conjuction with the ... endpoint to retrieve the avatar image.'
      )
      .nullable(),
    defaultTeamId: z.string().describe("The user's default team.").nullable()
  })
  .describe(
    'A limited form of data for the currently authenticated User, due to the authentication token missing privileges to read the full User data.'
  );

/**
 * @description A deployment file tree entry
 */
export const fileTreeSchema = z
  .object({
    name: z.string().describe('The name of the file tree entry'),
    type: z
      .enum(['directory', 'file', 'invalid', 'lambda', 'middleware', 'symlink'])
      .describe('String indicating the type of file tree entry.'),
    uid: z.string().describe('The unique identifier of the file (only valid for the `file` type)').optional(),
    children: z
      .array(z.unknown())
      .describe('The list of children files of the directory (only valid for the `directory` type)')
      .optional(),
    contentType: z.string().describe('The content-type of the file (only valid for the `file` type)').optional(),
    mode: z.number().describe('The file "mode" indicating file type and permissions.'),
    symlink: z.string().describe('Not currently used. See `file-list-to-tree.ts`.').optional()
  })
  .describe('A deployment file tree entry');

export const readAccessGroupPathParamsSchema = z.object({
  idOrName: z.string()
});

export const readAccessGroupQueryParamsSchema = z
  .object({
    teamId: z.string().describe('The Team identifier to perform the request on behalf of.').optional(),
    slug: z.string().describe('The Team slug to perform the request on behalf of.').optional()
  })
  .optional();

export const readAccessGroup200Schema = z.unknown();

/**
 * @description One of the provided values in the request query is invalid.
 */
export const readAccessGroup400Schema = z.unknown();

export const readAccessGroup401Schema = z.unknown();

/**
 * @description You do not have permission to access this resource.
 */
export const readAccessGroup403Schema = z.unknown();

export const readAccessGroupQueryResponseSchema = z.lazy(() => readAccessGroup200Schema);

export const updateAccessGroupPathParamsSchema = z.object({
  idOrName: z.string()
});

export const updateAccessGroupQueryParamsSchema = z
  .object({
    teamId: z.string().describe('The Team identifier to perform the request on behalf of.').optional(),
    slug: z.string().describe('The Team slug to perform the request on behalf of.').optional()
  })
  .optional();

export const updateAccessGroup200Schema = z.unknown();

/**
 * @description One of the provided values in the request body is invalid.\nOne of the provided values in the request query is invalid.
 */
export const updateAccessGroup400Schema = z.unknown();

export const updateAccessGroup401Schema = z.unknown();

/**
 * @description You do not have permission to access this resource.
 */
export const updateAccessGroup403Schema = z.unknown();

export const updateAccessGroupMutationResponseSchema = z.lazy(() => updateAccessGroup200Schema);

export const deleteAccessGroupPathParamsSchema = z.object({
  idOrName: z.string()
});

export const deleteAccessGroupQueryParamsSchema = z
  .object({
    teamId: z.string().describe('The Team identifier to perform the request on behalf of.').optional(),
    slug: z.string().describe('The Team slug to perform the request on behalf of.').optional()
  })
  .optional();

export const deleteAccessGroup200Schema = z.unknown();

/**
 * @description One of the provided values in the request query is invalid.
 */
export const deleteAccessGroup400Schema = z.unknown();

export const deleteAccessGroup401Schema = z.unknown();

/**
 * @description You do not have permission to access this resource.
 */
export const deleteAccessGroup403Schema = z.unknown();

export const deleteAccessGroupMutationResponseSchema = z.lazy(() => deleteAccessGroup200Schema);

export const listAccessGroupMembersPathParamsSchema = z.object({
  idOrName: z.string().describe('The ID or name of the Access Group.')
});

export const listAccessGroupMembersQueryParamsSchema = z
  .object({
    limit: z.coerce
      .number()
      .int()
      .min(1)
      .max(100)
      .describe('Limit how many access group members should be returned.')
      .optional(),
    next: z.string().describe('Continuation cursor to retrieve the next page of results.').optional(),
    search: z.string().describe('Search project members by their name, username, and email.').optional(),
    teamId: z.string().describe('The Team identifier to perform the request on behalf of.').optional(),
    slug: z.string().describe('The Team slug to perform the request on behalf of.').optional()
  })
  .optional();

export const listAccessGroupMembers200Schema = z.unknown();

/**
 * @description One of the provided values in the request query is invalid.
 */
export const listAccessGroupMembers400Schema = z.unknown();

export const listAccessGroupMembers401Schema = z.unknown();

/**
 * @description You do not have permission to access this resource.
 */
export const listAccessGroupMembers403Schema = z.unknown();

export const listAccessGroupMembersQueryResponseSchema = z.lazy(() => listAccessGroupMembers200Schema);

export const listAccessGroupsQueryParamsSchema = z
  .object({
    projectId: z.string().describe('Filter access groups by project.').optional(),
    search: z.string().describe('Search for access groups by name.').optional(),
    membersLimit: z.coerce
      .number()
      .int()
      .min(1)
      .max(100)
      .describe('Number of members to include in the response.')
      .optional(),
    projectsLimit: z.coerce
      .number()
      .int()
      .min(1)
      .max(100)
      .describe('Number of projects to include in the response.')
      .optional(),
    limit: z.coerce
      .number()
      .int()
      .min(1)
      .max(100)
      .describe('Limit how many access group should be returned.')
      .optional(),
    next: z.string().describe('Continuation cursor to retrieve the next page of results.').optional(),
    teamId: z.string().describe('The Team identifier to perform the request on behalf of.').optional(),
    slug: z.string().describe('The Team slug to perform the request on behalf of.').optional()
  })
  .optional();

export const listAccessGroups200Schema = z.unknown();

/**
 * @description One of the provided values in the request query is invalid.
 */
export const listAccessGroups400Schema = z.unknown();

export const listAccessGroups401Schema = z.unknown();

/**
 * @description You do not have permission to access this resource.
 */
export const listAccessGroups403Schema = z.unknown();

export const listAccessGroupsQueryResponseSchema = z.lazy(() => listAccessGroups200Schema);

export const createAccessGroupQueryParamsSchema = z
  .object({
    teamId: z.string().describe('The Team identifier to perform the request on behalf of.').optional(),
    slug: z.string().describe('The Team slug to perform the request on behalf of.').optional()
  })
  .optional();

export const createAccessGroup200Schema = z.unknown();

/**
 * @description One of the provided values in the request body is invalid.
 */
export const createAccessGroup400Schema = z.unknown();

export const createAccessGroup401Schema = z.unknown();

/**
 * @description You do not have permission to access this resource.
 */
export const createAccessGroup403Schema = z.unknown();

export const createAccessGroupMutationResponseSchema = z.lazy(() => createAccessGroup200Schema);

export const listAccessGroupProjectsPathParamsSchema = z.object({
  idOrName: z.string().describe('The ID or name of the Access Group.')
});

export const listAccessGroupProjectsQueryParamsSchema = z
  .object({
    limit: z.coerce
      .number()
      .int()
      .min(1)
      .max(100)
      .describe('Limit how many access group projects should be returned.')
      .optional(),
    next: z.string().describe('Continuation cursor to retrieve the next page of results.').optional(),
    teamId: z.string().describe('The Team identifier to perform the request on behalf of.').optional(),
    slug: z.string().describe('The Team slug to perform the request on behalf of.').optional()
  })
  .optional();

export const listAccessGroupProjects200Schema = z.unknown();

/**
 * @description One of the provided values in the request query is invalid.
 */
export const listAccessGroupProjects400Schema = z.unknown();

export const listAccessGroupProjects401Schema = z.unknown();

/**
 * @description You do not have permission to access this resource.
 */
export const listAccessGroupProjects403Schema = z.unknown();

export const listAccessGroupProjectsQueryResponseSchema = z.lazy(() => listAccessGroupProjects200Schema);

export const createAccessGroupProjectPathParamsSchema = z.object({
  accessGroupIdOrName: z.string()
});

export const createAccessGroupProjectQueryParamsSchema = z
  .object({
    teamId: z.string().describe('The Team identifier to perform the request on behalf of.').optional(),
    slug: z.string().describe('The Team slug to perform the request on behalf of.').optional()
  })
  .optional();

export const createAccessGroupProject200Schema = z.unknown();

/**
 * @description One of the provided values in the request body is invalid.\nOne of the provided values in the request query is invalid.
 */
export const createAccessGroupProject400Schema = z.unknown();

export const createAccessGroupProject401Schema = z.unknown();

/**
 * @description You do not have permission to access this resource.
 */
export const createAccessGroupProject403Schema = z.unknown();

export const createAccessGroupProjectMutationResponseSchema = z.lazy(() => createAccessGroupProject200Schema);

export const readAccessGroupProjectPathParamsSchema = z.object({
  accessGroupIdOrName: z.string(),
  projectId: z.string()
});

export const readAccessGroupProjectQueryParamsSchema = z
  .object({
    teamId: z.string().describe('The Team identifier to perform the request on behalf of.').optional(),
    slug: z.string().describe('The Team slug to perform the request on behalf of.').optional()
  })
  .optional();

export const readAccessGroupProject200Schema = z.unknown();

/**
 * @description One of the provided values in the request query is invalid.
 */
export const readAccessGroupProject400Schema = z.unknown();

export const readAccessGroupProject401Schema = z.unknown();

/**
 * @description You do not have permission to access this resource.
 */
export const readAccessGroupProject403Schema = z.unknown();

export const readAccessGroupProjectQueryResponseSchema = z.lazy(() => readAccessGroupProject200Schema);

export const updateAccessGroupProjectPathParamsSchema = z.object({
  accessGroupIdOrName: z.string(),
  projectId: z.string()
});

export const updateAccessGroupProjectQueryParamsSchema = z
  .object({
    teamId: z.string().describe('The Team identifier to perform the request on behalf of.').optional(),
    slug: z.string().describe('The Team slug to perform the request on behalf of.').optional()
  })
  .optional();

export const updateAccessGroupProject200Schema = z.unknown();

/**
 * @description One of the provided values in the request body is invalid.\nOne of the provided values in the request query is invalid.
 */
export const updateAccessGroupProject400Schema = z.unknown();

export const updateAccessGroupProject401Schema = z.unknown();

/**
 * @description You do not have permission to access this resource.
 */
export const updateAccessGroupProject403Schema = z.unknown();

export const updateAccessGroupProjectMutationResponseSchema = z.lazy(() => updateAccessGroupProject200Schema);

export const deleteAccessGroupProjectPathParamsSchema = z.object({
  accessGroupIdOrName: z.string(),
  projectId: z.string()
});

export const deleteAccessGroupProjectQueryParamsSchema = z
  .object({
    teamId: z.string().describe('The Team identifier to perform the request on behalf of.').optional(),
    slug: z.string().describe('The Team slug to perform the request on behalf of.').optional()
  })
  .optional();

export const deleteAccessGroupProject200Schema = z.unknown();

/**
 * @description One of the provided values in the request query is invalid.
 */
export const deleteAccessGroupProject400Schema = z.unknown();

export const deleteAccessGroupProject401Schema = z.unknown();

/**
 * @description You do not have permission to access this resource.
 */
export const deleteAccessGroupProject403Schema = z.unknown();

export const deleteAccessGroupProjectMutationResponseSchema = z.lazy(() => deleteAccessGroupProject200Schema);

export const recordEventsQueryParamsSchema = z
  .object({
    teamId: z.string().describe('The Team identifier to perform the request on behalf of.').optional(),
    slug: z.string().describe('The Team slug to perform the request on behalf of.').optional()
  })
  .optional();

export const recordEventsHeaderParamsSchema = z
  .object({
    'x-artifact-client-ci': z
      .string()
      .max(50)
      .describe('The continuous integration or delivery environment where this artifact is downloaded.')
      .optional(),
    'x-artifact-client-interactive': z.coerce
      .number()
      .int()
      .min(0)
      .max(1)
      .describe('1 if the client is an interactive shell. Otherwise 0')
      .optional()
  })
  .optional();

/**
 * @description Success. Event recorded.
 */
export const recordEvents200Schema = z.unknown();

/**
 * @description One of the provided values in the request body is invalid.\nOne of the provided values in the headers is invalid
 */
export const recordEvents400Schema = z.unknown();

export const recordEvents401Schema = z.unknown();

/**
 * @description The account was soft-blocked for an unhandled reason.\nThe account is missing a payment so payment method must be updated
 */
export const recordEvents402Schema = z.unknown();

/**
 * @description The customer has reached their spend cap limit and has been paused. An owner can disable the cap or raise the limit in settings.\nThe Remote Caching usage limit has been reached for this account for this billing cycle.\nRemote Caching has been disabled for this team or user. An owner can enable it in the billing settings.\nYou do not have permission to access this resource.
 */
export const recordEvents403Schema = z.unknown();

export const recordEventsMutationResponseSchema = z.lazy(() => recordEvents200Schema);

export const statusQueryParamsSchema = z
  .object({
    teamId: z.string().describe('The Team identifier to perform the request on behalf of.').optional(),
    slug: z.string().describe('The Team slug to perform the request on behalf of.').optional()
  })
  .optional();

export const status200Schema = z.unknown();

export const status400Schema = z.unknown();

export const status401Schema = z.unknown();

/**
 * @description The account was soft-blocked for an unhandled reason.\nThe account is missing a payment so payment method must be updated
 */
export const status402Schema = z.unknown();

/**
 * @description You do not have permission to access this resource.
 */
export const status403Schema = z.unknown();

export const statusQueryResponseSchema = z.lazy(() => status200Schema);

export const uploadArtifactPathParamsSchema = z.object({
  hash: z.string().describe('The artifact hash')
});

export const uploadArtifactQueryParamsSchema = z
  .object({
    teamId: z.string().describe('The Team identifier to perform the request on behalf of.').optional(),
    slug: z.string().describe('The Team slug to perform the request on behalf of.').optional()
  })
  .optional();

export const uploadArtifactHeaderParamsSchema = z.object({
  'Content-Length': z.coerce.number().describe('The artifact size in bytes'),
  'x-artifact-duration': z.coerce
    .number()
    .describe('The time taken to generate the uploaded artifact in milliseconds.')
    .optional(),
  'x-artifact-client-ci': z
    .string()
    .max(50)
    .describe('The continuous integration or delivery environment where this artifact was generated.')
    .optional(),
  'x-artifact-client-interactive': z.coerce
    .number()
    .int()
    .min(0)
    .max(1)
    .describe('1 if the client is an interactive shell. Otherwise 0')
    .optional(),
  'x-artifact-tag': z
    .string()
    .max(600)
    .describe(
      'The base64 encoded tag for this artifact. The value is sent back to clients when the artifact is downloaded as the header `x-artifact-tag`'
    )
    .optional()
});

/**
 * @description File successfully uploaded
 */
export const uploadArtifact202Schema = z.unknown();

/**
 * @description One of the provided values in the request query is invalid.\nOne of the provided values in the headers is invalid\nFile size is not valid
 */
export const uploadArtifact400Schema = z.unknown();

export const uploadArtifact401Schema = z.unknown();

/**
 * @description The account was soft-blocked for an unhandled reason.\nThe account is missing a payment so payment method must be updated
 */
export const uploadArtifact402Schema = z.unknown();

/**
 * @description The customer has reached their spend cap limit and has been paused. An owner can disable the cap or raise the limit in settings.\nThe Remote Caching usage limit has been reached for this account for this billing cycle.\nRemote Caching has been disabled for this team or user. An owner can enable it in the billing settings.\nYou do not have permission to access this resource.
 */
export const uploadArtifact403Schema = z.unknown();

export const uploadArtifactMutationResponseSchema = z.lazy(() => uploadArtifact202Schema);

export const downloadArtifactPathParamsSchema = z.object({
  hash: z.string().describe('The artifact hash')
});

export const downloadArtifactQueryParamsSchema = z
  .object({
    teamId: z.string().describe('The Team identifier to perform the request on behalf of.').optional(),
    slug: z.string().describe('The Team slug to perform the request on behalf of.').optional()
  })
  .optional();

export const downloadArtifactHeaderParamsSchema = z
  .object({
    'x-artifact-client-ci': z
      .string()
      .max(50)
      .describe('The continuous integration or delivery environment where this artifact is downloaded.')
      .optional(),
    'x-artifact-client-interactive': z.coerce
      .number()
      .int()
      .min(0)
      .max(1)
      .describe('1 if the client is an interactive shell. Otherwise 0')
      .optional()
  })
  .optional();

/**
 * @description The artifact was found and is downloaded as a stream. Content-Length should be verified.
 */
export const downloadArtifact200Schema = z.unknown();

/**
 * @description One of the provided values in the request query is invalid.\nOne of the provided values in the headers is invalid
 */
export const downloadArtifact400Schema = z.unknown();

export const downloadArtifact401Schema = z.unknown();

/**
 * @description The account was soft-blocked for an unhandled reason.\nThe account is missing a payment so payment method must be updated
 */
export const downloadArtifact402Schema = z.unknown();

/**
 * @description The customer has reached their spend cap limit and has been paused. An owner can disable the cap or raise the limit in settings.\nThe Remote Caching usage limit has been reached for this account for this billing cycle.\nRemote Caching has been disabled for this team or user. An owner can enable it in the billing settings.\nYou do not have permission to access this resource.
 */
export const downloadArtifact403Schema = z.unknown();

/**
 * @description The artifact was not found
 */
export const downloadArtifact404Schema = z.unknown();

export const downloadArtifactQueryResponseSchema = z.lazy(() => downloadArtifact200Schema);

export const artifactQueryQueryParamsSchema = z
  .object({
    teamId: z.string().describe('The Team identifier to perform the request on behalf of.').optional(),
    slug: z.string().describe('The Team slug to perform the request on behalf of.').optional()
  })
  .optional();

export const artifactQuery200Schema = z.unknown();

/**
 * @description One of the provided values in the request body is invalid.
 */
export const artifactQuery400Schema = z.unknown();

export const artifactQuery401Schema = z.unknown();

/**
 * @description The account was soft-blocked for an unhandled reason.\nThe account is missing a payment so payment method must be updated
 */
export const artifactQuery402Schema = z.unknown();

/**
 * @description The customer has reached their spend cap limit and has been paused. An owner can disable the cap or raise the limit in settings.\nThe Remote Caching usage limit has been reached for this account for this billing cycle.\nRemote Caching has been disabled for this team or user. An owner can enable it in the billing settings.\nYou do not have permission to access this resource.
 */
export const artifactQuery403Schema = z.unknown();

export const artifactQueryMutationResponseSchema = z.lazy(() => artifactQuery200Schema);

export const createCheckPathParamsSchema = z.object({
  deploymentId: z.string().describe('The deployment to create the check for.')
});

export const createCheckQueryParamsSchema = z
  .object({
    teamId: z.string().describe('The Team identifier to perform the request on behalf of.').optional(),
    slug: z.string().describe('The Team slug to perform the request on behalf of.').optional()
  })
  .optional();

export const createCheck200Schema = z.unknown();

/**
 * @description One of the provided values in the request body is invalid.\nOne of the provided values in the request query is invalid.\nCannot create check for finished deployment\nThe provided token is not from an OAuth2 Client
 */
export const createCheck400Schema = z.unknown();

export const createCheck401Schema = z.unknown();

/**
 * @description You do not have permission to access this resource.
 */
export const createCheck403Schema = z.unknown();

/**
 * @description The deployment was not found
 */
export const createCheck404Schema = z.unknown();

export const createCheckMutationResponseSchema = z.lazy(() => createCheck200Schema);

export const getAllChecksPathParamsSchema = z.object({
  deploymentId: z.string().describe('The deployment to get all checks for')
});

export const getAllChecksQueryParamsSchema = z
  .object({
    teamId: z.string().describe('The Team identifier to perform the request on behalf of.').optional(),
    slug: z.string().describe('The Team slug to perform the request on behalf of.').optional()
  })
  .optional();

export const getAllChecks200Schema = z.unknown();

/**
 * @description One of the provided values in the request query is invalid.
 */
export const getAllChecks400Schema = z.unknown();

export const getAllChecks401Schema = z.unknown();

/**
 * @description You do not have permission to access this resource.
 */
export const getAllChecks403Schema = z.unknown();

/**
 * @description The deployment was not found
 */
export const getAllChecks404Schema = z.unknown();

export const getAllChecksQueryResponseSchema = z.lazy(() => getAllChecks200Schema);

export const getCheckPathParamsSchema = z.object({
  deploymentId: z.string().describe('The deployment to get the check for.'),
  checkId: z.string().describe('The check to fetch')
});

export const getCheckQueryParamsSchema = z
  .object({
    teamId: z.string().describe('The Team identifier to perform the request on behalf of.').optional(),
    slug: z.string().describe('The Team slug to perform the request on behalf of.').optional()
  })
  .optional();

export const getCheck200Schema = z.unknown();

/**
 * @description One of the provided values in the request query is invalid.
 */
export const getCheck400Schema = z.unknown();

export const getCheck401Schema = z.unknown();

/**
 * @description You do not have permission to access this resource.\nThe provided token is not from an OAuth2 Client that created the Check
 */
export const getCheck403Schema = z.unknown();

/**
 * @description Check was not found\nThe deployment was not found
 */
export const getCheck404Schema = z.unknown();

export const getCheckQueryResponseSchema = z.lazy(() => getCheck200Schema);

export const updateCheckPathParamsSchema = z.object({
  deploymentId: z.string().describe('The deployment to update the check for.'),
  checkId: z.string().describe('The check being updated')
});

export const updateCheckQueryParamsSchema = z
  .object({
    teamId: z.string().describe('The Team identifier to perform the request on behalf of.').optional(),
    slug: z.string().describe('The Team slug to perform the request on behalf of.').optional()
  })
  .optional();

export const updateCheck200Schema = z.unknown();

/**
 * @description One of the provided values in the request body is invalid.\nOne of the provided values in the request query is invalid.\nThe provided token is not from an OAuth2 Client
 */
export const updateCheck400Schema = z.unknown();

export const updateCheck401Schema = z.unknown();

/**
 * @description You do not have permission to access this resource.
 */
export const updateCheck403Schema = z.unknown();

/**
 * @description Check was not found\nThe deployment was not found
 */
export const updateCheck404Schema = z.unknown();

/**
 * @description The output provided is too large
 */
export const updateCheck413Schema = z.unknown();

export const updateCheckMutationResponseSchema = z.lazy(() => updateCheck200Schema);

export const rerequestCheckPathParamsSchema = z.object({
  deploymentId: z.string().describe('The deployment to rerun the check for.'),
  checkId: z.string().describe('The check to rerun')
});

export const rerequestCheckQueryParamsSchema = z
  .object({
    teamId: z.string().describe('The Team identifier to perform the request on behalf of.').optional(),
    slug: z.string().describe('The Team slug to perform the request on behalf of.').optional()
  })
  .optional();

export const rerequestCheck200Schema = z.unknown();

/**
 * @description One of the provided values in the request query is invalid.
 */
export const rerequestCheck400Schema = z.unknown();

export const rerequestCheck401Schema = z.unknown();

/**
 * @description You do not have permission to access this resource.
 */
export const rerequestCheck403Schema = z.unknown();

/**
 * @description The deployment was not found\nCheck was not found
 */
export const rerequestCheck404Schema = z.unknown();

export const rerequestCheckMutationResponseSchema = z.lazy(() => rerequestCheck200Schema);

export const purgeAllDataCacheQueryParamsSchema = z.object({
  projectIdOrName: z.string()
});

export const purgeAllDataCache200Schema = z.unknown();

/**
 * @description One of the provided values in the request query is invalid.
 */
export const purgeAllDataCache400Schema = z.unknown();

export const purgeAllDataCache401Schema = z.unknown();

/**
 * @description You do not have permission to access this resource.
 */
export const purgeAllDataCache403Schema = z.unknown();

export const purgeAllDataCache404Schema = z.unknown();

export const purgeAllDataCacheMutationResponseSchema = z.lazy(() => purgeAllDataCache200Schema);

export const updateDataCacheBillingSettings200Schema = z.unknown();

/**
 * @description One of the provided values in the request body is invalid.
 */
export const updateDataCacheBillingSettings400Schema = z.unknown();

export const updateDataCacheBillingSettings401Schema = z.unknown();

/**
 * @description You do not have permission to access this resource.
 */
export const updateDataCacheBillingSettings403Schema = z.unknown();

export const updateDataCacheBillingSettings404Schema = z.unknown();

export const updateDataCacheBillingSettingsMutationResponseSchema = z.lazy(
  () => updateDataCacheBillingSettings200Schema
);

export const updateProjectDataCachePathParamsSchema = z.object({
  projectId: z.string().describe('The unique project identifier')
});

export const updateProjectDataCacheQueryParamsSchema = z
  .object({
    teamId: z.string().describe('The Team identifier to perform the request on behalf of.').optional(),
    slug: z.string().describe('The Team slug to perform the request on behalf of.').optional()
  })
  .optional();

export const updateProjectDataCache200Schema = z.unknown();

/**
 * @description One of the provided values in the request body is invalid.\nOne of the provided values in the request query is invalid.
 */
export const updateProjectDataCache400Schema = z.unknown();

export const updateProjectDataCache401Schema = z.unknown();

/**
 * @description You do not have permission to access this resource.
 */
export const updateProjectDataCache403Schema = z.unknown();

export const updateProjectDataCache404Schema = z.unknown();

export const updateProjectDataCacheMutationResponseSchema = z.lazy(() => updateProjectDataCache200Schema);

export const getDeploymentEventsPathParamsSchema = z.object({
  idOrUrl: z.string().describe('The unique identifier or hostname of the deployment.')
});

export const getDeploymentEventsQueryParamsSchema = z.object({
  direction: z
    .enum(['backward', 'forward'])
    .default('forward')
    .describe('Order of the returned events based on the timestamp.'),
  follow: z
    .union([z.literal(0), z.literal(1)])
    .describe('When enabled, this endpoint will return live events as they happen.')
    .optional(),
  limit: z.coerce
    .number()
    .describe('Maximum number of events to return. Provide `-1` to return all available logs.')
    .optional(),
  name: z.string().describe('Deployment build ID.').optional(),
  since: z.coerce.number().describe('Timestamp for when build logs should be pulled from.').optional(),
  until: z.coerce.number().describe('Timestamp for when the build logs should be pulled up until.').optional(),
  statusCode: z
    .union([z.string(), z.coerce.number()])
    .describe('HTTP status code range to filter events by.')
    .optional(),
  delimiter: z.union([z.literal(0), z.literal(1)]).optional(),
  builds: z.union([z.literal(0), z.literal(1)]).optional(),
  teamId: z.string().describe('The Team identifier to perform the request on behalf of.').optional(),
  slug: z.string().describe('The Team slug to perform the request on behalf of.').optional()
});

export const getDeploymentEvents200Schema = z.unknown();

/**
 * @description One of the provided values in the request query is invalid.
 */
export const getDeploymentEvents400Schema = z.unknown();

export const getDeploymentEvents401Schema = z.unknown();

/**
 * @description You do not have permission to access this resource.
 */
export const getDeploymentEvents403Schema = z.unknown();

export const getDeploymentEvents500Schema = z.unknown();

export const getDeploymentEventsQueryResponseSchema = z.lazy(() => getDeploymentEvents200Schema);

export const updateIntegrationDeploymentActionPathParamsSchema = z.object({
  deploymentId: z.string(),
  integrationConfigurationId: z.string(),
  resourceId: z.string(),
  action: z.string()
});

export const updateIntegrationDeploymentAction202Schema = z.unknown();

/**
 * @description One of the provided values in the request body is invalid.\nOne of the provided values in the request query is invalid.
 */
export const updateIntegrationDeploymentAction400Schema = z.unknown();

export const updateIntegrationDeploymentAction401Schema = z.unknown();

/**
 * @description You do not have permission to access this resource.
 */
export const updateIntegrationDeploymentAction403Schema = z.unknown();

export const updateIntegrationDeploymentActionMutationResponseSchema = z.lazy(
  () => updateIntegrationDeploymentAction202Schema
);

export const getDeploymentPathParamsSchema = z.object({
  idOrUrl: z.string().describe('The unique identifier or hostname of the deployment.')
});

export const getDeploymentQueryParamsSchema = z
  .object({
    withGitRepoInfo: z.string().describe('Whether to add in gitRepo information.').optional(),
    teamId: z.string().describe('The Team identifier to perform the request on behalf of.').optional(),
    slug: z.string().describe('The Team slug to perform the request on behalf of.').optional()
  })
  .optional();

/**
 * @description The deployment including only public information\nThe deployment including both public and private information
 */
export const getDeployment200Schema = z.unknown();

/**
 * @description One of the provided values in the request query is invalid.
 */
export const getDeployment400Schema = z.unknown();

/**
 * @description You do not have permission to access this resource.
 */
export const getDeployment403Schema = z.unknown();

/**
 * @description The deployment was not found
 */
export const getDeployment404Schema = z.unknown();

export const getDeploymentQueryResponseSchema = z.lazy(() => getDeployment200Schema);

export const createDeploymentQueryParamsSchema = z
  .object({
    forceNew: z
      .enum(['0', '1'])
      .describe('Forces a new deployment even if there is a previous similar deployment')
      .optional(),
    skipAutoDetectionConfirmation: z
      .enum(['0', '1'])
      .describe('Allows to skip framework detection so the API would not fail to ask for confirmation')
      .optional(),
    teamId: z.string().describe('The Team identifier to perform the request on behalf of.').optional(),
    slug: z.string().describe('The Team slug to perform the request on behalf of.').optional()
  })
  .optional();

/**
 * @description The successfully created deployment
 */
export const createDeployment200Schema = z.unknown();

/**
 * @description One of the provided values in the request body is invalid.\nOne of the provided values in the request query is invalid.
 */
export const createDeployment400Schema = z.unknown();

export const createDeployment401Schema = z.unknown();

/**
 * @description The account was soft-blocked for an unhandled reason.\nThe account is missing a payment so payment method must be updated\nPro customers are allowed to deploy Serverless Functions to up to `proMaxRegions` regions, or if the project was created before the limit was introduced.\nDeploying to Serverless Functions to multiple regions requires a plan update
 */
export const createDeployment402Schema = z.unknown();

/**
 * @description You do not have permission to access this resource.
 */
export const createDeployment403Schema = z.unknown();

export const createDeployment404Schema = z.unknown();

/**
 * @description The deployment project is being transferred
 */
export const createDeployment409Schema = z.unknown();

export const createDeployment500Schema = z.unknown();

export const createDeploymentMutationResponseSchema = z.lazy(() => createDeployment200Schema);

export const cancelDeploymentPathParamsSchema = z.object({
  id: z.string().describe('The unique identifier of the deployment.')
});

export const cancelDeploymentQueryParamsSchema = z
  .object({
    teamId: z.string().describe('The Team identifier to perform the request on behalf of.').optional(),
    slug: z.string().describe('The Team slug to perform the request on behalf of.').optional()
  })
  .optional();

export const cancelDeployment200Schema = z.unknown();

/**
 * @description One of the provided values in the request query is invalid.
 */
export const cancelDeployment400Schema = z.unknown();

export const cancelDeployment401Schema = z.unknown();

/**
 * @description You do not have permission to access this resource.
 */
export const cancelDeployment403Schema = z.unknown();

export const cancelDeployment404Schema = z.unknown();

export const cancelDeploymentMutationResponseSchema = z.lazy(() => cancelDeployment200Schema);

export const buyDomainQueryParamsSchema = z
  .object({
    teamId: z.string().describe('The Team identifier to perform the request on behalf of.').optional(),
    slug: z.string().describe('The Team slug to perform the request on behalf of.').optional()
  })
  .optional();

export const buyDomain201Schema = z.unknown();

export const buyDomain202Schema = z.unknown();

/**
 * @description One of the provided values in the request body is invalid.
 */
export const buyDomain400Schema = z.unknown();

export const buyDomain401Schema = z.unknown();

/**
 * @description You do not have permission to access this resource.
 */
export const buyDomain403Schema = z.unknown();

export const buyDomain409Schema = z.unknown();

export const buyDomain429Schema = z.unknown();

export const buyDomainMutationResponseSchema = z.union([
  z.lazy(() => buyDomain201Schema),
  z.lazy(() => buyDomain202Schema)
]);

export const checkDomainPriceQueryParamsSchema = z.object({
  name: z.string().describe('The name of the domain for which the price needs to be checked.'),
  type: z
    .enum(['new', 'renewal', 'transfer', 'redemption'])
    .describe('In which status of the domain the price needs to be checked.')
    .optional(),
  teamId: z.string().describe('The Team identifier to perform the request on behalf of.').optional(),
  slug: z.string().describe('The Team slug to perform the request on behalf of.').optional()
});

/**
 * @description Successful response which returns the price of the domain and the period.
 */
export const checkDomainPrice200Schema = z.unknown();

/**
 * @description One of the provided values in the request query is invalid.
 */
export const checkDomainPrice400Schema = z.unknown();

export const checkDomainPrice401Schema = z.unknown();

/**
 * @description You do not have permission to access this resource.
 */
export const checkDomainPrice403Schema = z.unknown();

export const checkDomainPriceQueryResponseSchema = z.lazy(() => checkDomainPrice200Schema);

export const checkDomainStatusQueryParamsSchema = z.object({
  name: z.string().describe('The name of the domain for which we would like to check the status.'),
  teamId: z.string().describe('The Team identifier to perform the request on behalf of.').optional(),
  slug: z.string().describe('The Team slug to perform the request on behalf of.').optional()
});

/**
 * @description Successful response checking if a Domain\'s name is available.
 */
export const checkDomainStatus200Schema = z.unknown();

/**
 * @description One of the provided values in the request query is invalid.
 */
export const checkDomainStatus400Schema = z.unknown();

export const checkDomainStatus401Schema = z.unknown();

/**
 * @description You do not have permission to access this resource.
 */
export const checkDomainStatus403Schema = z.unknown();

export const checkDomainStatus408Schema = z.unknown();

export const checkDomainStatus500Schema = z.unknown();

export const checkDomainStatusQueryResponseSchema = z.lazy(() => checkDomainStatus200Schema);

export const getRecordsPathParamsSchema = z.object({
  domain: z.string()
});

export const getRecordsQueryParamsSchema = z
  .object({
    limit: z.string().describe('Maximum number of records to list from a request.').optional(),
    since: z.string().describe('Get records created after this JavaScript timestamp.').optional(),
    until: z.string().describe('Get records created before this JavaScript timestamp.').optional(),
    teamId: z.string().describe('The Team identifier to perform the request on behalf of.').optional(),
    slug: z.string().describe('The Team slug to perform the request on behalf of.').optional()
  })
  .optional();

/**
 * @description Successful response retrieving a list of paginated DNS records.
 */
export const getRecords200Schema = z.unknown();

/**
 * @description One of the provided values in the request query is invalid.
 */
export const getRecords400Schema = z.unknown();

export const getRecords401Schema = z.unknown();

/**
 * @description You do not have permission to access this resource.
 */
export const getRecords403Schema = z.unknown();

export const getRecords404Schema = z.unknown();

export const getRecordsQueryResponseSchema = z.lazy(() => getRecords200Schema);

export const createRecordPathParamsSchema = z.object({
  domain: z.string().describe('The domain used to create the DNS record.')
});

export const createRecordQueryParamsSchema = z
  .object({
    teamId: z.string().describe('The Team identifier to perform the request on behalf of.').optional(),
    slug: z.string().describe('The Team slug to perform the request on behalf of.').optional()
  })
  .optional();

/**
 * @description Successful response showing the uid of the newly created DNS record.
 */
export const createRecord200Schema = z.unknown();

/**
 * @description One of the provided values in the request body is invalid.\nOne of the provided values in the request query is invalid.
 */
export const createRecord400Schema = z.unknown();

export const createRecord401Schema = z.unknown();

/**
 * @description The account was soft-blocked for an unhandled reason.\nThe account is missing a payment so payment method must be updated
 */
export const createRecord402Schema = z.unknown();

/**
 * @description You do not have permission to access this resource.
 */
export const createRecord403Schema = z.unknown();

export const createRecord404Schema = z.unknown();

export const createRecord409Schema = z.unknown();

export const createRecordMutationResponseSchema = z.lazy(() => createRecord200Schema);

export const updateRecordPathParamsSchema = z.object({
  recordId: z.string().describe('The id of the DNS record')
});

export const updateRecordQueryParamsSchema = z
  .object({
    teamId: z.string().describe('The Team identifier to perform the request on behalf of.').optional(),
    slug: z.string().describe('The Team slug to perform the request on behalf of.').optional()
  })
  .optional();

export const updateRecord200Schema = z.unknown();

/**
 * @description One of the provided values in the request body is invalid.\nOne of the provided values in the request query is invalid.
 */
export const updateRecord400Schema = z.unknown();

export const updateRecord401Schema = z.unknown();

/**
 * @description The account was soft-blocked for an unhandled reason.\nThe account is missing a payment so payment method must be updated
 */
export const updateRecord402Schema = z.unknown();

/**
 * @description You do not have permission to access this resource.
 */
export const updateRecord403Schema = z.unknown();

export const updateRecord404Schema = z.unknown();

export const updateRecord409Schema = z.unknown();

export const updateRecordMutationResponseSchema = z.lazy(() => updateRecord200Schema);

export const removeRecordPathParamsSchema = z.object({
  domain: z.string(),
  recordId: z.string()
});

export const removeRecordQueryParamsSchema = z
  .object({
    teamId: z.string().describe('The Team identifier to perform the request on behalf of.').optional(),
    slug: z.string().describe('The Team slug to perform the request on behalf of.').optional()
  })
  .optional();

/**
 * @description Successful response by removing the specified DNS record.
 */
export const removeRecord200Schema = z.unknown();

/**
 * @description One of the provided values in the request query is invalid.
 */
export const removeRecord400Schema = z.unknown();

export const removeRecord401Schema = z.unknown();

/**
 * @description You do not have permission to access this resource.
 */
export const removeRecord403Schema = z.unknown();

export const removeRecord404Schema = z.unknown();

export const removeRecordMutationResponseSchema = z.lazy(() => removeRecord200Schema);

export const getDomainTransferPathParamsSchema = z.object({
  domain: z.string()
});

export const getDomainTransferQueryParamsSchema = z
  .object({
    teamId: z.string().describe('The Team identifier to perform the request on behalf of.').optional(),
    slug: z.string().describe('The Team slug to perform the request on behalf of.').optional()
  })
  .optional();

export const getDomainTransfer200Schema = z.unknown();

export const getDomainTransfer400Schema = z.unknown();

export const getDomainTransfer401Schema = z.unknown();

/**
 * @description You do not have permission to access this resource.
 */
export const getDomainTransfer403Schema = z.unknown();

export const getDomainTransferQueryResponseSchema = z.lazy(() => getDomainTransfer200Schema);

export const getDomainConfigPathParamsSchema = z.object({
  domain: z.string().describe('The name of the domain.')
});

export const getDomainConfigQueryParamsSchema = z
  .object({
    strict: z
      .enum(['true', 'false'])
      .describe(
        "When true, the response will only include the nameservers assigned directly to the specified domain. When false and there are no nameservers assigned directly to the specified domain, the response will include the nameservers of the domain's parent zone."
      )
      .optional(),
    teamId: z.string().describe('The Team identifier to perform the request on behalf of.').optional(),
    slug: z.string().describe('The Team slug to perform the request on behalf of.').optional()
  })
  .optional();

export const getDomainConfig200Schema = z.unknown();

/**
 * @description One of the provided values in the request query is invalid.
 */
export const getDomainConfig400Schema = z.unknown();

export const getDomainConfig401Schema = z.unknown();

/**
 * @description You do not have permission to access this resource.
 */
export const getDomainConfig403Schema = z.unknown();

export const getDomainConfig500Schema = z.unknown();

export const getDomainConfigQueryResponseSchema = z.lazy(() => getDomainConfig200Schema);

export const getDomainPathParamsSchema = z.object({
  domain: z.string().describe('The name of the domain.')
});

export const getDomainQueryParamsSchema = z
  .object({
    teamId: z.string().describe('The Team identifier to perform the request on behalf of.').optional(),
    slug: z.string().describe('The Team slug to perform the request on behalf of.').optional()
  })
  .optional();

/**
 * @description Successful response retrieving an information for a specific domains.
 */
export const getDomain200Schema = z.unknown();

/**
 * @description One of the provided values in the request query is invalid.
 */
export const getDomain400Schema = z.unknown();

export const getDomain401Schema = z.unknown();

/**
 * @description You do not have permission to access this resource.
 */
export const getDomain403Schema = z.unknown();

export const getDomain404Schema = z.unknown();

export const getDomainQueryResponseSchema = z.lazy(() => getDomain200Schema);

export const getDomainsQueryParamsSchema = z
  .object({
    limit: z.coerce.number().describe('Maximum number of domains to list from a request.').optional(),
    since: z.coerce.number().describe('Get domains created after this JavaScript timestamp.').optional(),
    until: z.coerce.number().describe('Get domains created before this JavaScript timestamp.').optional(),
    teamId: z.string().describe('The Team identifier to perform the request on behalf of.').optional(),
    slug: z.string().describe('The Team slug to perform the request on behalf of.').optional()
  })
  .optional();

/**
 * @description Successful response retrieving a list of domains.
 */
export const getDomains200Schema = z.unknown();

/**
 * @description One of the provided values in the request query is invalid.
 */
export const getDomains400Schema = z.unknown();

export const getDomains401Schema = z.unknown();

/**
 * @description You do not have permission to access this resource.
 */
export const getDomains403Schema = z.unknown();

export const getDomains409Schema = z.unknown();

export const getDomainsQueryResponseSchema = z.lazy(() => getDomains200Schema);

export const createOrTransferDomainQueryParamsSchema = z
  .object({
    teamId: z.string().describe('The Team identifier to perform the request on behalf of.').optional(),
    slug: z.string().describe('The Team slug to perform the request on behalf of.').optional()
  })
  .optional();

export const createOrTransferDomain200Schema = z.unknown();

/**
 * @description One of the provided values in the request body is invalid.
 */
export const createOrTransferDomain400Schema = z.unknown();

export const createOrTransferDomain401Schema = z.unknown();

/**
 * @description The account was soft-blocked for an unhandled reason.\nThe account is missing a payment so payment method must be updated
 */
export const createOrTransferDomain402Schema = z.unknown();

/**
 * @description You do not have permission to access this resource.
 */
export const createOrTransferDomain403Schema = z.unknown();

export const createOrTransferDomain404Schema = z.unknown();

/**
 * @description The domain is not allowed to be used
 */
export const createOrTransferDomain409Schema = z.unknown();

export const createOrTransferDomain500Schema = z.unknown();

export const createOrTransferDomainMutationResponseSchema = z.lazy(() => createOrTransferDomain200Schema);

export const patchDomainPathParamsSchema = z.object({
  domain: z.string()
});

export const patchDomainQueryParamsSchema = z
  .object({
    teamId: z.string().describe('The Team identifier to perform the request on behalf of.').optional(),
    slug: z.string().describe('The Team slug to perform the request on behalf of.').optional()
  })
  .optional();

export const patchDomain200Schema = z.unknown();

/**
 * @description One of the provided values in the request body is invalid.\nOne of the provided values in the request query is invalid.
 */
export const patchDomain400Schema = z.unknown();

export const patchDomain401Schema = z.unknown();

/**
 * @description You do not have permission to access this resource.
 */
export const patchDomain403Schema = z.unknown();

export const patchDomain404Schema = z.unknown();

export const patchDomain409Schema = z.unknown();

export const patchDomainMutationResponseSchema = z.lazy(() => patchDomain200Schema);

export const deleteDomainPathParamsSchema = z.object({
  domain: z.string().describe('The name of the domain.')
});

export const deleteDomainQueryParamsSchema = z
  .object({
    teamId: z.string().describe('The Team identifier to perform the request on behalf of.').optional(),
    slug: z.string().describe('The Team slug to perform the request on behalf of.').optional()
  })
  .optional();

/**
 * @description Successful response removing a domain.
 */
export const deleteDomain200Schema = z.unknown();

/**
 * @description One of the provided values in the request query is invalid.
 */
export const deleteDomain400Schema = z.unknown();

export const deleteDomain401Schema = z.unknown();

/**
 * @description You do not have permission to access this resource.
 */
export const deleteDomain403Schema = z.unknown();

export const deleteDomain404Schema = z.unknown();

export const deleteDomain409Schema = z.unknown();

export const deleteDomainMutationResponseSchema = z.lazy(() => deleteDomain200Schema);

export const getEdgeConfigsQueryParamsSchema = z
  .object({
    teamId: z.string().describe('The Team identifier to perform the request on behalf of.').optional(),
    slug: z.string().describe('The Team slug to perform the request on behalf of.').optional()
  })
  .optional();

/**
 * @description List of all edge configs.
 */
export const getEdgeConfigs200Schema = z.unknown();

/**
 * @description One of the provided values in the request query is invalid.
 */
export const getEdgeConfigs400Schema = z.unknown();

export const getEdgeConfigs401Schema = z.unknown();

/**
 * @description You do not have permission to access this resource.
 */
export const getEdgeConfigs403Schema = z.unknown();

export const getEdgeConfigsQueryResponseSchema = z.lazy(() => getEdgeConfigs200Schema);

export const createEdgeConfigQueryParamsSchema = z
  .object({
    teamId: z.string().describe('The Team identifier to perform the request on behalf of.').optional(),
    slug: z.string().describe('The Team slug to perform the request on behalf of.').optional()
  })
  .optional();

export const createEdgeConfig201Schema = z.unknown();

/**
 * @description One of the provided values in the request body is invalid.
 */
export const createEdgeConfig400Schema = z.unknown();

export const createEdgeConfig401Schema = z.unknown();

/**
 * @description The account was soft-blocked for an unhandled reason.\nThe account is missing a payment so payment method must be updated
 */
export const createEdgeConfig402Schema = z.unknown();

/**
 * @description You do not have permission to access this resource.
 */
export const createEdgeConfig403Schema = z.unknown();

export const createEdgeConfigMutationResponseSchema = z.lazy(() => createEdgeConfig201Schema);

export const getEdgeConfigPathParamsSchema = z.object({
  edgeConfigId: z.string()
});

export const getEdgeConfigQueryParamsSchema = z
  .object({
    teamId: z.string().describe('The Team identifier to perform the request on behalf of.').optional(),
    slug: z.string().describe('The Team slug to perform the request on behalf of.').optional()
  })
  .optional();

/**
 * @description The EdgeConfig.
 */
export const getEdgeConfig200Schema = z.unknown();

/**
 * @description One of the provided values in the request query is invalid.
 */
export const getEdgeConfig400Schema = z.unknown();

export const getEdgeConfig401Schema = z.unknown();

/**
 * @description You do not have permission to access this resource.
 */
export const getEdgeConfig403Schema = z.unknown();

export const getEdgeConfig404Schema = z.unknown();

export const getEdgeConfigQueryResponseSchema = z.lazy(() => getEdgeConfig200Schema);

export const updateEdgeConfigPathParamsSchema = z.object({
  edgeConfigId: z.string()
});

export const updateEdgeConfigQueryParamsSchema = z
  .object({
    teamId: z.string().describe('The Team identifier to perform the request on behalf of.').optional(),
    slug: z.string().describe('The Team slug to perform the request on behalf of.').optional()
  })
  .optional();

export const updateEdgeConfig200Schema = z.unknown();

/**
 * @description One of the provided values in the request body is invalid.\nOne of the provided values in the request query is invalid.
 */
export const updateEdgeConfig400Schema = z.unknown();

export const updateEdgeConfig401Schema = z.unknown();

/**
 * @description The account was soft-blocked for an unhandled reason.\nThe account is missing a payment so payment method must be updated
 */
export const updateEdgeConfig402Schema = z.unknown();

/**
 * @description You do not have permission to access this resource.
 */
export const updateEdgeConfig403Schema = z.unknown();

export const updateEdgeConfig404Schema = z.unknown();

export const updateEdgeConfigMutationResponseSchema = z.lazy(() => updateEdgeConfig200Schema);

export const deleteEdgeConfigPathParamsSchema = z.object({
  edgeConfigId: z.string()
});

export const deleteEdgeConfigQueryParamsSchema = z
  .object({
    teamId: z.string().describe('The Team identifier to perform the request on behalf of.').optional(),
    slug: z.string().describe('The Team slug to perform the request on behalf of.').optional()
  })
  .optional();

export const deleteEdgeConfig204Schema = z.unknown();

/**
 * @description One of the provided values in the request query is invalid.
 */
export const deleteEdgeConfig400Schema = z.unknown();

export const deleteEdgeConfig401Schema = z.unknown();

/**
 * @description You do not have permission to access this resource.
 */
export const deleteEdgeConfig403Schema = z.unknown();

export const deleteEdgeConfig404Schema = z.unknown();

export const deleteEdgeConfigMutationResponseSchema = z.lazy(() => deleteEdgeConfig204Schema);

export const getEdgeConfigItemsPathParamsSchema = z.object({
  edgeConfigId: z.string().regex(/^ecfg_/)
});

export const getEdgeConfigItemsQueryParamsSchema = z
  .object({
    teamId: z.string().describe('The Team identifier to perform the request on behalf of.').optional(),
    slug: z.string().describe('The Team slug to perform the request on behalf of.').optional()
  })
  .optional();

/**
 * @description List of all Edge Config items.
 */
export const getEdgeConfigItems200Schema = z.unknown();

/**
 * @description One of the provided values in the request query is invalid.
 */
export const getEdgeConfigItems400Schema = z.unknown();

export const getEdgeConfigItems401Schema = z.unknown();

/**
 * @description You do not have permission to access this resource.
 */
export const getEdgeConfigItems403Schema = z.unknown();

export const getEdgeConfigItems404Schema = z.unknown();

export const getEdgeConfigItemsQueryResponseSchema = z.lazy(() => getEdgeConfigItems200Schema);

export const patchEdgeConfigItemsPathParamsSchema = z.object({
  edgeConfigId: z.string().regex(/^ecfg_/)
});

export const patchEdgeConfigItemsQueryParamsSchema = z
  .object({
    dryRun: z.string().optional(),
    teamId: z.string().describe('The Team identifier to perform the request on behalf of.').optional(),
    slug: z.string().describe('The Team slug to perform the request on behalf of.').optional()
  })
  .optional();

export const patchEdgeConfigItems200Schema = z.unknown();

/**
 * @description One of the provided values in the request body is invalid.\nOne of the provided values in the request query is invalid.
 */
export const patchEdgeConfigItems400Schema = z.unknown();

export const patchEdgeConfigItems401Schema = z.unknown();

/**
 * @description The account was soft-blocked for an unhandled reason.\nThe account is missing a payment so payment method must be updated
 */
export const patchEdgeConfigItems402Schema = z.unknown();

/**
 * @description You do not have permission to access this resource.
 */
export const patchEdgeConfigItems403Schema = z.unknown();

export const patchEdgeConfigItems404Schema = z.unknown();

export const patchEdgeConfigItems409Schema = z.unknown();

export const patchEdgeConfigItemsMutationResponseSchema = z.lazy(() => patchEdgeConfigItems200Schema);

export const getEdgeConfigSchemaPathParamsSchema = z.object({
  edgeConfigId: z.string()
});

export const getEdgeConfigSchemaQueryParamsSchema = z
  .object({
    teamId: z.string().describe('The Team identifier to perform the request on behalf of.').optional(),
    slug: z.string().describe('The Team slug to perform the request on behalf of.').optional()
  })
  .optional();

/**
 * @description The EdgeConfig.
 */
export const getEdgeConfigSchema200Schema = z.unknown();

/**
 * @description One of the provided values in the request query is invalid.
 */
export const getEdgeConfigSchema400Schema = z.unknown();

export const getEdgeConfigSchema401Schema = z.unknown();

/**
 * @description You do not have permission to access this resource.
 */
export const getEdgeConfigSchema403Schema = z.unknown();

export const getEdgeConfigSchema404Schema = z.unknown();

export const getEdgeConfigSchemaQueryResponseSchema = z.lazy(() => getEdgeConfigSchema200Schema);

export const patchEdgeConfigSchemaPathParamsSchema = z.object({
  edgeConfigId: z.string()
});

export const patchEdgeConfigSchemaQueryParamsSchema = z
  .object({
    dryRun: z.string().optional(),
    teamId: z.string().describe('The Team identifier to perform the request on behalf of.').optional(),
    slug: z.string().describe('The Team slug to perform the request on behalf of.').optional()
  })
  .optional();

export const patchEdgeConfigSchema200Schema = z.unknown();

/**
 * @description One of the provided values in the request body is invalid.\nOne of the provided values in the request query is invalid.
 */
export const patchEdgeConfigSchema400Schema = z.unknown();

export const patchEdgeConfigSchema401Schema = z.unknown();

/**
 * @description The account was soft-blocked for an unhandled reason.\nThe account is missing a payment so payment method must be updated
 */
export const patchEdgeConfigSchema402Schema = z.unknown();

/**
 * @description You do not have permission to access this resource.
 */
export const patchEdgeConfigSchema403Schema = z.unknown();

export const patchEdgeConfigSchema404Schema = z.unknown();

export const patchEdgeConfigSchemaMutationResponseSchema = z.lazy(() => patchEdgeConfigSchema200Schema);

export const deleteEdgeConfigSchemaPathParamsSchema = z.object({
  edgeConfigId: z.string()
});

export const deleteEdgeConfigSchemaQueryParamsSchema = z
  .object({
    teamId: z.string().describe('The Team identifier to perform the request on behalf of.').optional(),
    slug: z.string().describe('The Team slug to perform the request on behalf of.').optional()
  })
  .optional();

export const deleteEdgeConfigSchema204Schema = z.unknown();

/**
 * @description One of the provided values in the request query is invalid.
 */
export const deleteEdgeConfigSchema400Schema = z.unknown();

export const deleteEdgeConfigSchema401Schema = z.unknown();

/**
 * @description The account was soft-blocked for an unhandled reason.\nThe account is missing a payment so payment method must be updated
 */
export const deleteEdgeConfigSchema402Schema = z.unknown();

/**
 * @description You do not have permission to access this resource.
 */
export const deleteEdgeConfigSchema403Schema = z.unknown();

export const deleteEdgeConfigSchema404Schema = z.unknown();

export const deleteEdgeConfigSchemaMutationResponseSchema = z.lazy(() => deleteEdgeConfigSchema204Schema);

export const getEdgeConfigItemPathParamsSchema = z.object({
  edgeConfigId: z.string().regex(/^ecfg_/),
  edgeConfigItemKey: z.string()
});

export const getEdgeConfigItemQueryParamsSchema = z
  .object({
    teamId: z.string().describe('The Team identifier to perform the request on behalf of.').optional(),
    slug: z.string().describe('The Team slug to perform the request on behalf of.').optional()
  })
  .optional();

/**
 * @description The EdgeConfig.
 */
export const getEdgeConfigItem200Schema = z.unknown();

/**
 * @description One of the provided values in the request query is invalid.
 */
export const getEdgeConfigItem400Schema = z.unknown();

export const getEdgeConfigItem401Schema = z.unknown();

/**
 * @description You do not have permission to access this resource.
 */
export const getEdgeConfigItem403Schema = z.unknown();

export const getEdgeConfigItem404Schema = z.unknown();

export const getEdgeConfigItemQueryResponseSchema = z.lazy(() => getEdgeConfigItem200Schema);

export const getEdgeConfigTokensPathParamsSchema = z.object({
  edgeConfigId: z.string()
});

export const getEdgeConfigTokensQueryParamsSchema = z
  .object({
    teamId: z.string().describe('The Team identifier to perform the request on behalf of.').optional(),
    slug: z.string().describe('The Team slug to perform the request on behalf of.').optional()
  })
  .optional();

/**
 * @description The EdgeConfig.
 */
export const getEdgeConfigTokens200Schema = z.unknown();

/**
 * @description One of the provided values in the request query is invalid.
 */
export const getEdgeConfigTokens400Schema = z.unknown();

export const getEdgeConfigTokens401Schema = z.unknown();

/**
 * @description You do not have permission to access this resource.
 */
export const getEdgeConfigTokens403Schema = z.unknown();

export const getEdgeConfigTokens404Schema = z.unknown();

export const getEdgeConfigTokensQueryResponseSchema = z.lazy(() => getEdgeConfigTokens200Schema);

export const deleteEdgeConfigTokensPathParamsSchema = z.object({
  edgeConfigId: z.string()
});

export const deleteEdgeConfigTokensQueryParamsSchema = z
  .object({
    teamId: z.string().describe('The Team identifier to perform the request on behalf of.').optional(),
    slug: z.string().describe('The Team slug to perform the request on behalf of.').optional()
  })
  .optional();

export const deleteEdgeConfigTokens204Schema = z.unknown();

/**
 * @description One of the provided values in the request body is invalid.\nOne of the provided values in the request query is invalid.
 */
export const deleteEdgeConfigTokens400Schema = z.unknown();

export const deleteEdgeConfigTokens401Schema = z.unknown();

/**
 * @description The account was soft-blocked for an unhandled reason.\nThe account is missing a payment so payment method must be updated
 */
export const deleteEdgeConfigTokens402Schema = z.unknown();

/**
 * @description You do not have permission to access this resource.
 */
export const deleteEdgeConfigTokens403Schema = z.unknown();

export const deleteEdgeConfigTokens404Schema = z.unknown();

export const deleteEdgeConfigTokensMutationResponseSchema = z.lazy(() => deleteEdgeConfigTokens204Schema);

export const getEdgeConfigTokenPathParamsSchema = z.object({
  edgeConfigId: z.string(),
  token: z.string()
});

export const getEdgeConfigTokenQueryParamsSchema = z
  .object({
    teamId: z.string().describe('The Team identifier to perform the request on behalf of.').optional(),
    slug: z.string().describe('The Team slug to perform the request on behalf of.').optional()
  })
  .optional();

/**
 * @description The EdgeConfig.
 */
export const getEdgeConfigToken200Schema = z.unknown();

/**
 * @description One of the provided values in the request query is invalid.
 */
export const getEdgeConfigToken400Schema = z.unknown();

export const getEdgeConfigToken401Schema = z.unknown();

/**
 * @description You do not have permission to access this resource.
 */
export const getEdgeConfigToken403Schema = z.unknown();

export const getEdgeConfigToken404Schema = z.unknown();

export const getEdgeConfigTokenQueryResponseSchema = z.lazy(() => getEdgeConfigToken200Schema);

export const createEdgeConfigTokenPathParamsSchema = z.object({
  edgeConfigId: z.string()
});

export const createEdgeConfigTokenQueryParamsSchema = z
  .object({
    teamId: z.string().describe('The Team identifier to perform the request on behalf of.').optional(),
    slug: z.string().describe('The Team slug to perform the request on behalf of.').optional()
  })
  .optional();

export const createEdgeConfigToken201Schema = z.unknown();

/**
 * @description One of the provided values in the request body is invalid.\nOne of the provided values in the request query is invalid.
 */
export const createEdgeConfigToken400Schema = z.unknown();

export const createEdgeConfigToken401Schema = z.unknown();

/**
 * @description The account was soft-blocked for an unhandled reason.\nThe account is missing a payment so payment method must be updated
 */
export const createEdgeConfigToken402Schema = z.unknown();

/**
 * @description You do not have permission to access this resource.
 */
export const createEdgeConfigToken403Schema = z.unknown();

export const createEdgeConfigToken404Schema = z.unknown();

export const createEdgeConfigTokenMutationResponseSchema = z.lazy(() => createEdgeConfigToken201Schema);

export const getEdgeConfigBackupPathParamsSchema = z.object({
  edgeConfigId: z.string(),
  edgeConfigBackupVersionId: z.string()
});

export const getEdgeConfigBackupQueryParamsSchema = z
  .object({
    teamId: z.string().describe('The Team identifier to perform the request on behalf of.').optional(),
    slug: z.string().describe('The Team slug to perform the request on behalf of.').optional()
  })
  .optional();

export const getEdgeConfigBackup200Schema = z.unknown();

/**
 * @description One of the provided values in the request query is invalid.
 */
export const getEdgeConfigBackup400Schema = z.unknown();

export const getEdgeConfigBackup401Schema = z.unknown();

/**
 * @description You do not have permission to access this resource.
 */
export const getEdgeConfigBackup403Schema = z.unknown();

export const getEdgeConfigBackup404Schema = z.unknown();

export const getEdgeConfigBackupQueryResponseSchema = z.lazy(() => getEdgeConfigBackup200Schema);

export const getEdgeConfigBackupsPathParamsSchema = z.object({
  edgeConfigId: z.string()
});

export const getEdgeConfigBackupsQueryParamsSchema = z
  .object({
    next: z.string().optional(),
    limit: z.coerce.number().min(0).max(50).optional(),
    metadata: z.string().optional(),
    teamId: z.string().describe('The Team identifier to perform the request on behalf of.').optional(),
    slug: z.string().describe('The Team slug to perform the request on behalf of.').optional()
  })
  .optional();

export const getEdgeConfigBackups200Schema = z.unknown();

/**
 * @description One of the provided values in the request query is invalid.
 */
export const getEdgeConfigBackups400Schema = z.unknown();

export const getEdgeConfigBackups401Schema = z.unknown();

/**
 * @description You do not have permission to access this resource.
 */
export const getEdgeConfigBackups403Schema = z.unknown();

export const getEdgeConfigBackups404Schema = z.unknown();

export const getEdgeConfigBackupsQueryResponseSchema = z.lazy(() => getEdgeConfigBackups200Schema);

export const listUserEventsQueryParamsSchema = z
  .object({
    limit: z.coerce.number().describe('Maximum number of items which may be returned.').optional(),
    since: z.string().describe('Timestamp to only include items created since then.').optional(),
    until: z.string().describe('Timestamp to only include items created until then.').optional(),
    types: z.string().describe('Comma-delimited list of event \\"types\\" to filter the results by.').optional(),
    userId: z
      .string()
      .describe(
        'Deprecated. Use `principalId` instead. If `principalId` and `userId` both exist, `principalId` will be used.'
      )
      .optional(),
    principalId: z
      .string()
      .describe(
        'When retrieving events for a Team, the `principalId` parameter may be specified to filter events generated by a specific principal.'
      )
      .optional(),
    projectIds: z.string().describe('Comma-delimited list of project IDs to filter the results by.').optional(),
    withPayload: z
      .string()
      .describe('When set to `true`, the response will include the `payload` field for each event.')
      .optional(),
    teamId: z.string().describe('The Team identifier to perform the request on behalf of.').optional(),
    slug: z.string().describe('The Team slug to perform the request on behalf of.').optional()
  })
  .optional();

/**
 * @description Successful response.
 */
export const listUserEvents200Schema = z.unknown();

/**
 * @description One of the provided values in the request query is invalid.
 */
export const listUserEvents400Schema = z.unknown();

export const listUserEvents401Schema = z.unknown();

/**
 * @description You do not have permission to access this resource.
 */
export const listUserEvents403Schema = z.unknown();

export const listUserEventsQueryResponseSchema = z.lazy(() => listUserEvents200Schema);

export const getAccountInfoPathParamsSchema = z.object({
  integrationConfigurationId: z.string()
});

export const getAccountInfo200Schema = z.unknown();

/**
 * @description One of the provided values in the request query is invalid.
 */
export const getAccountInfo400Schema = z.unknown();

export const getAccountInfo401Schema = z.unknown();

/**
 * @description You do not have permission to access this resource.
 */
export const getAccountInfo403Schema = z.unknown();

export const getAccountInfo404Schema = z.unknown();

export const getAccountInfoQueryResponseSchema = z.lazy(() => getAccountInfo200Schema);

export const getMemberPathParamsSchema = z.object({
  integrationConfigurationId: z.string(),
  memberId: z.string()
});

export const getMember200Schema = z.unknown();

/**
 * @description One of the provided values in the request query is invalid.
 */
export const getMember400Schema = z.unknown();

export const getMember401Schema = z.unknown();

/**
 * @description You do not have permission to access this resource.
 */
export const getMember403Schema = z.unknown();

export const getMember404Schema = z.unknown();

export const getMemberQueryResponseSchema = z.lazy(() => getMember200Schema);

export const createEventPathParamsSchema = z.object({
  integrationConfigurationId: z.string()
});

export const createEvent201Schema = z.unknown();

/**
 * @description One of the provided values in the request body is invalid.\nOne of the provided values in the request query is invalid.
 */
export const createEvent400Schema = z.unknown();

export const createEvent401Schema = z.unknown();

/**
 * @description You do not have permission to access this resource.
 */
export const createEvent403Schema = z.unknown();

export const createEvent404Schema = z.unknown();

export const createEventMutationResponseSchema = z.lazy(() => createEvent201Schema);

export const getIntegrationResourcesPathParamsSchema = z.object({
  integrationConfigurationId: z.string()
});

export const getIntegrationResources200Schema = z.unknown();

/**
 * @description One of the provided values in the request query is invalid.
 */
export const getIntegrationResources400Schema = z.unknown();

export const getIntegrationResources401Schema = z.unknown();

/**
 * @description You do not have permission to access this resource.
 */
export const getIntegrationResources403Schema = z.unknown();

export const getIntegrationResources404Schema = z.unknown();

export const getIntegrationResourcesQueryResponseSchema = z.lazy(() => getIntegrationResources200Schema);

export const getIntegrationResourcePathParamsSchema = z.object({
  integrationConfigurationId: z
    .string()
    .describe('The ID of the integration configuration (installation) the resource belongs to'),
  resourceId: z.string().describe('The ID provided by the 3rd party provider for the given resource')
});

export const getIntegrationResource200Schema = z.unknown();

/**
 * @description One of the provided values in the request query is invalid.
 */
export const getIntegrationResource400Schema = z.unknown();

export const getIntegrationResource401Schema = z.unknown();

/**
 * @description You do not have permission to access this resource.
 */
export const getIntegrationResource403Schema = z.unknown();

export const getIntegrationResource404Schema = z.unknown();

export const getIntegrationResourceQueryResponseSchema = z.lazy(() => getIntegrationResource200Schema);

export const deleteIntegrationResourcePathParamsSchema = z.object({
  integrationConfigurationId: z.string(),
  resourceId: z.string()
});

export const deleteIntegrationResource204Schema = z.unknown();

/**
 * @description One of the provided values in the request query is invalid.
 */
export const deleteIntegrationResource400Schema = z.unknown();

export const deleteIntegrationResource401Schema = z.unknown();

/**
 * @description You do not have permission to access this resource.
 */
export const deleteIntegrationResource403Schema = z.unknown();

export const deleteIntegrationResource404Schema = z.unknown();

export const deleteIntegrationResourceMutationResponseSchema = z.lazy(() => deleteIntegrationResource204Schema);

export const importResourcePathParamsSchema = z.object({
  integrationConfigurationId: z.string(),
  resourceId: z.string()
});

export const importResource200Schema = z.unknown();

/**
 * @description One of the provided values in the request body is invalid.\nOne of the provided values in the request query is invalid.
 */
export const importResource400Schema = z.unknown();

export const importResource401Schema = z.unknown();

/**
 * @description You do not have permission to access this resource.
 */
export const importResource403Schema = z.unknown();

export const importResource404Schema = z.unknown();

export const importResourceMutationResponseSchema = z.lazy(() => importResource200Schema);

export const submitBillingDataPathParamsSchema = z.object({
  integrationConfigurationId: z.string()
});

export const submitBillingData201Schema = z.unknown();

/**
 * @description One of the provided values in the request body is invalid.\nOne of the provided values in the request query is invalid.
 */
export const submitBillingData400Schema = z.unknown();

export const submitBillingData401Schema = z.unknown();

/**
 * @description You do not have permission to access this resource.
 */
export const submitBillingData403Schema = z.unknown();

export const submitBillingData404Schema = z.unknown();

export const submitBillingDataMutationResponseSchema = z.lazy(() => submitBillingData201Schema);

export const submitInvoicePathParamsSchema = z.object({
  integrationConfigurationId: z.string()
});

export const submitInvoice200Schema = z.unknown();

/**
 * @description One of the provided values in the request body is invalid.\nOne of the provided values in the request query is invalid.
 */
export const submitInvoice400Schema = z.unknown();

export const submitInvoice401Schema = z.unknown();

/**
 * @description You do not have permission to access this resource.
 */
export const submitInvoice403Schema = z.unknown();

export const submitInvoice404Schema = z.unknown();

export const submitInvoiceMutationResponseSchema = z.lazy(() => submitInvoice200Schema);

export const getInvoicePathParamsSchema = z.object({
  integrationConfigurationId: z.string(),
  invoiceId: z.string()
});

export const getInvoice200Schema = z.unknown();

/**
 * @description One of the provided values in the request query is invalid.
 */
export const getInvoice400Schema = z.unknown();

export const getInvoice401Schema = z.unknown();

/**
 * @description You do not have permission to access this resource.
 */
export const getInvoice403Schema = z.unknown();

export const getInvoice404Schema = z.unknown();

export const getInvoiceQueryResponseSchema = z.lazy(() => getInvoice200Schema);

export const updateInvoicePathParamsSchema = z.object({
  integrationConfigurationId: z.string(),
  invoiceId: z.string()
});

export const updateInvoice204Schema = z.unknown();

/**
 * @description One of the provided values in the request body is invalid.\nOne of the provided values in the request query is invalid.
 */
export const updateInvoice400Schema = z.unknown();

export const updateInvoice401Schema = z.unknown();

/**
 * @description You do not have permission to access this resource.
 */
export const updateInvoice403Schema = z.unknown();

export const updateInvoice404Schema = z.unknown();

export const updateInvoiceMutationResponseSchema = z.lazy(() => updateInvoice204Schema);

export const submitPrepaymentBalancesPathParamsSchema = z.object({
  integrationConfigurationId: z.string()
});

export const submitPrepaymentBalances201Schema = z.unknown();

/**
 * @description One of the provided values in the request body is invalid.\nOne of the provided values in the request query is invalid.
 */
export const submitPrepaymentBalances400Schema = z.unknown();

export const submitPrepaymentBalances401Schema = z.unknown();

/**
 * @description You do not have permission to access this resource.
 */
export const submitPrepaymentBalances403Schema = z.unknown();

export const submitPrepaymentBalances404Schema = z.unknown();

export const submitPrepaymentBalancesMutationResponseSchema = z.lazy(() => submitPrepaymentBalances201Schema);

export const updateResourceSecretsPathParamsSchema = z.object({
  integrationConfigurationId: z.string(),
  integrationProductIdOrSlug: z.string(),
  resourceId: z.string()
});

export const updateResourceSecrets201Schema = z.unknown();

/**
 * @description One of the provided values in the request body is invalid.\nOne of the provided values in the request query is invalid.
 */
export const updateResourceSecrets400Schema = z.unknown();

export const updateResourceSecrets401Schema = z.unknown();

/**
 * @description You do not have permission to access this resource.
 */
export const updateResourceSecrets403Schema = z.unknown();

export const updateResourceSecrets404Schema = z.unknown();

export const updateResourceSecretsMutationResponseSchema = z.lazy(() => updateResourceSecrets201Schema);

export const updateResourceSecretsByIdPathParamsSchema = z.object({
  integrationConfigurationId: z.string(),
  resourceId: z.string()
});

export const updateResourceSecretsById201Schema = z.unknown();

/**
 * @description One of the provided values in the request body is invalid.\nOne of the provided values in the request query is invalid.
 */
export const updateResourceSecretsById400Schema = z.unknown();

export const updateResourceSecretsById401Schema = z.unknown();

/**
 * @description You do not have permission to access this resource.
 */
export const updateResourceSecretsById403Schema = z.unknown();

export const updateResourceSecretsById404Schema = z.unknown();

export const updateResourceSecretsById422Schema = z.unknown();

export const updateResourceSecretsByIdMutationResponseSchema = z.lazy(() => updateResourceSecretsById201Schema);

export const getConfigurationsQueryParamsSchema = z.object({
  view: z.enum(['account', 'project']),
  installationType: z.enum(['marketplace', 'external']).optional(),
  integrationIdOrSlug: z.string().describe('ID of the integration').optional(),
  teamId: z.string().describe('The Team identifier to perform the request on behalf of.').optional(),
  slug: z.string().describe('The Team slug to perform the request on behalf of.').optional()
});

/**
 * @description The list of configurations for the authenticated user
 */
export const getConfigurations200Schema = z.unknown();

/**
 * @description One of the provided values in the request query is invalid.
 */
export const getConfigurations400Schema = z.unknown();

export const getConfigurations401Schema = z.unknown();

/**
 * @description You do not have permission to access this resource.
 */
export const getConfigurations403Schema = z.unknown();

export const getConfigurationsQueryResponseSchema = z.lazy(() => getConfigurations200Schema);

export const getConfigurationPathParamsSchema = z.object({
  id: z.string().describe('ID of the configuration to check')
});

export const getConfigurationQueryParamsSchema = z
  .object({
    teamId: z.string().describe('The Team identifier to perform the request on behalf of.').optional(),
    slug: z.string().describe('The Team slug to perform the request on behalf of.').optional()
  })
  .optional();

/**
 * @description The configuration with the provided id
 */
export const getConfiguration200Schema = z.unknown();

/**
 * @description One of the provided values in the request query is invalid.
 */
export const getConfiguration400Schema = z.unknown();

export const getConfiguration401Schema = z.unknown();

/**
 * @description You do not have permission to access this resource.
 */
export const getConfiguration403Schema = z.unknown();

/**
 * @description The configuration was not found
 */
export const getConfiguration404Schema = z.unknown();

export const getConfigurationQueryResponseSchema = z.lazy(() => getConfiguration200Schema);

export const deleteConfigurationPathParamsSchema = z.object({
  id: z.string()
});

export const deleteConfigurationQueryParamsSchema = z
  .object({
    teamId: z.string().describe('The Team identifier to perform the request on behalf of.').optional(),
    slug: z.string().describe('The Team slug to perform the request on behalf of.').optional()
  })
  .optional();

/**
 * @description The configuration was successfully removed
 */
export const deleteConfiguration204Schema = z.unknown();

/**
 * @description One of the provided values in the request query is invalid.
 */
export const deleteConfiguration400Schema = z.unknown();

export const deleteConfiguration401Schema = z.unknown();

/**
 * @description You do not have permission to access this resource.
 */
export const deleteConfiguration403Schema = z.unknown();

/**
 * @description The configuration was not found
 */
export const deleteConfiguration404Schema = z.unknown();

export const deleteConfigurationMutationResponseSchema = z.lazy(() => deleteConfiguration204Schema);

export const exchangeSsoToken200Schema = z.unknown();

/**
 * @description One of the provided values in the request body is invalid.
 */
export const exchangeSsoToken400Schema = z.unknown();

export const exchangeSsoToken404Schema = z.unknown();

export const exchangeSsoToken500Schema = z.unknown();

export const exchangeSsoTokenMutationResponseSchema = z.lazy(() => exchangeSsoToken200Schema);

export const getIntegrationLogDrainsQueryParamsSchema = z
  .object({
    teamId: z.string().describe('The Team identifier to perform the request on behalf of.').optional(),
    slug: z.string().describe('The Team slug to perform the request on behalf of.').optional()
  })
  .optional();

/**
 * @description A list of log drains
 */
export const getIntegrationLogDrains200Schema = z.unknown();

export const getIntegrationLogDrains400Schema = z.unknown();

export const getIntegrationLogDrains401Schema = z.unknown();

/**
 * @description You do not have permission to access this resource.
 */
export const getIntegrationLogDrains403Schema = z.unknown();

export const getIntegrationLogDrainsQueryResponseSchema = z.lazy(() => getIntegrationLogDrains200Schema);

export const createLogDrainQueryParamsSchema = z
  .object({
    teamId: z.string().describe('The Team identifier to perform the request on behalf of.').optional(),
    slug: z.string().describe('The Team slug to perform the request on behalf of.').optional()
  })
  .optional();

/**
 * @description The log drain was successfully created
 */
export const createLogDrain200Schema = z.unknown();

/**
 * @description One of the provided values in the request body is invalid.\nThe provided token is not from an OAuth2 Client
 */
export const createLogDrain400Schema = z.unknown();

export const createLogDrain401Schema = z.unknown();

/**
 * @description You do not have permission to access this resource.
 */
export const createLogDrain403Schema = z.unknown();

export const createLogDrainMutationResponseSchema = z.lazy(() => createLogDrain200Schema);

export const deleteIntegrationLogDrainPathParamsSchema = z.object({
  id: z.string().describe('ID of the log drain to be deleted')
});

export const deleteIntegrationLogDrainQueryParamsSchema = z
  .object({
    teamId: z.string().describe('The Team identifier to perform the request on behalf of.').optional(),
    slug: z.string().describe('The Team slug to perform the request on behalf of.').optional()
  })
  .optional();

/**
 * @description The log drain was successfully deleted
 */
export const deleteIntegrationLogDrain204Schema = z.unknown();

/**
 * @description One of the provided values in the request query is invalid.
 */
export const deleteIntegrationLogDrain400Schema = z.unknown();

export const deleteIntegrationLogDrain401Schema = z.unknown();

/**
 * @description You do not have permission to access this resource.
 */
export const deleteIntegrationLogDrain403Schema = z.unknown();

/**
 * @description The log drain was not found
 */
export const deleteIntegrationLogDrain404Schema = z.unknown();

export const deleteIntegrationLogDrainMutationResponseSchema = z.lazy(() => deleteIntegrationLogDrain204Schema);

export const getRuntimeLogsPathParamsSchema = z.object({
  projectId: z.string(),
  deploymentId: z.string()
});

export const getRuntimeLogsQueryParamsSchema = z
  .object({
    teamId: z.string().describe('The Team identifier to perform the request on behalf of.').optional(),
    slug: z.string().describe('The Team slug to perform the request on behalf of.').optional()
  })
  .optional();

export const getRuntimeLogs200Schema = z.unknown();

/**
 * @description One of the provided values in the request query is invalid.
 */
export const getRuntimeLogs400Schema = z.unknown();

export const getRuntimeLogs401Schema = z.unknown();

/**
 * @description You do not have permission to access this resource.
 */
export const getRuntimeLogs403Schema = z.unknown();

export const getRuntimeLogsQueryResponseSchema = z.lazy(() => getRuntimeLogs200Schema);

export const createExperimentationItemPathParamsSchema = z.object({
  integrationConfigurationId: z.string(),
  resourceId: z.string()
});

/**
 * @description The items were created
 */
export const createExperimentationItem204Schema = z.unknown();

/**
 * @description One of the provided values in the request body is invalid.\nOne of the provided values in the request query is invalid.
 */
export const createExperimentationItem400Schema = z.unknown();

export const createExperimentationItem401Schema = z.unknown();

/**
 * @description You do not have permission to access this resource.
 */
export const createExperimentationItem403Schema = z.unknown();

export const createExperimentationItem404Schema = z.unknown();

export const createExperimentationItemMutationResponseSchema = z.lazy(() => createExperimentationItem204Schema);

export const updateExperimentationItemPathParamsSchema = z.object({
  integrationConfigurationId: z.string(),
  resourceId: z.string(),
  itemId: z.string()
});

/**
 * @description The item was updated
 */
export const updateExperimentationItem204Schema = z.unknown();

/**
 * @description One of the provided values in the request body is invalid.\nOne of the provided values in the request query is invalid.
 */
export const updateExperimentationItem400Schema = z.unknown();

export const updateExperimentationItem401Schema = z.unknown();

/**
 * @description You do not have permission to access this resource.
 */
export const updateExperimentationItem403Schema = z.unknown();

export const updateExperimentationItem404Schema = z.unknown();

export const updateExperimentationItemMutationResponseSchema = z.lazy(() => updateExperimentationItem204Schema);

export const deleteExperimentationItemPathParamsSchema = z.object({
  integrationConfigurationId: z.string(),
  resourceId: z.string(),
  itemId: z.string()
});

/**
 * @description The item was deleted
 */
export const deleteExperimentationItem204Schema = z.unknown();

/**
 * @description One of the provided values in the request query is invalid.
 */
export const deleteExperimentationItem400Schema = z.unknown();

export const deleteExperimentationItem401Schema = z.unknown();

/**
 * @description You do not have permission to access this resource.
 */
export const deleteExperimentationItem403Schema = z.unknown();

export const deleteExperimentationItem404Schema = z.unknown();

export const deleteExperimentationItemMutationResponseSchema = z.lazy(() => deleteExperimentationItem204Schema);

export const updateExperimentationEdgeConfigPathParamsSchema = z.object({
  integrationConfigurationId: z.string(),
  resourceId: z.string()
});

/**
 * @description The Edge Config was updated
 */
export const updateExperimentationEdgeConfig200Schema = z.unknown();

/**
 * @description One of the provided values in the request body is invalid.\nOne of the provided values in the request query is invalid.
 */
export const updateExperimentationEdgeConfig400Schema = z.unknown();

export const updateExperimentationEdgeConfig401Schema = z.unknown();

/**
 * @description You do not have permission to access this resource.
 */
export const updateExperimentationEdgeConfig403Schema = z.unknown();

export const updateExperimentationEdgeConfig404Schema = z.unknown();

export const updateExperimentationEdgeConfig412Schema = z.unknown();

export const updateExperimentationEdgeConfigMutationResponseSchema = z.lazy(
  () => updateExperimentationEdgeConfig200Schema
);

export const getProjectMembersPathParamsSchema = z.object({
  idOrName: z.string().describe('The ID or name of the Project.')
});

export const getProjectMembersQueryParamsSchema = z
  .object({
    limit: z.coerce
      .number()
      .int()
      .min(1)
      .max(100)
      .describe('Limit how many project members should be returned')
      .optional(),
    since: z.coerce
      .number()
      .int()
      .describe('Timestamp in milliseconds to only include members added since then.')
      .optional(),
    until: z.coerce
      .number()
      .int()
      .describe('Timestamp in milliseconds to only include members added until then.')
      .optional(),
    search: z.string().describe('Search project members by their name, username, and email.').optional(),
    teamId: z.string().describe('The Team identifier to perform the request on behalf of.').optional(),
    slug: z.string().describe('The Team slug to perform the request on behalf of.').optional()
  })
  .optional();

/**
 * @description Paginated list of members for the project.
 */
export const getProjectMembers200Schema = z.unknown();

/**
 * @description One of the provided values in the request query is invalid.
 */
export const getProjectMembers400Schema = z.unknown();

export const getProjectMembers401Schema = z.unknown();

/**
 * @description You do not have permission to access this resource.
 */
export const getProjectMembers403Schema = z.unknown();

export const getProjectMembersQueryResponseSchema = z.lazy(() => getProjectMembers200Schema);

export const addProjectMemberPathParamsSchema = z.object({
  idOrName: z.string().describe('The ID or name of the Project.')
});

export const addProjectMemberQueryParamsSchema = z
  .object({
    teamId: z.string().describe('The Team identifier to perform the request on behalf of.').optional(),
    slug: z.string().describe('The Team slug to perform the request on behalf of.').optional()
  })
  .optional();

/**
 * @description Responds with the project ID on success.
 */
export const addProjectMember200Schema = z.unknown();

/**
 * @description One of the provided values in the request body is invalid.\nOne of the provided values in the request query is invalid.
 */
export const addProjectMember400Schema = z.unknown();

export const addProjectMember401Schema = z.unknown();

/**
 * @description You do not have permission to access this resource.
 */
export const addProjectMember403Schema = z.unknown();

export const addProjectMember500Schema = z.unknown();

export const addProjectMemberMutationResponseSchema = z.lazy(() => addProjectMember200Schema);

export const removeProjectMemberPathParamsSchema = z.object({
  idOrName: z.string().describe('The ID or name of the Project.'),
  uid: z.string().describe('The user ID of the member.')
});

export const removeProjectMemberQueryParamsSchema = z
  .object({
    teamId: z.string().describe('The Team identifier to perform the request on behalf of.').optional(),
    slug: z.string().describe('The Team slug to perform the request on behalf of.').optional()
  })
  .optional();

export const removeProjectMember200Schema = z.unknown();

/**
 * @description One of the provided values in the request query is invalid.
 */
export const removeProjectMember400Schema = z.unknown();

export const removeProjectMember401Schema = z.unknown();

/**
 * @description You do not have permission to access this resource.
 */
export const removeProjectMember403Schema = z.unknown();

export const removeProjectMemberMutationResponseSchema = z.lazy(() => removeProjectMember200Schema);

export const getProjectsQueryParamsSchema = z
  .object({
    from: z.string().describe('Query only projects updated after the given timestamp').optional(),
    gitForkProtection: z
      .enum(['1', '0'])
      .describe(
        "Specifies whether PRs from Git forks should require a team member's authorization before it can be deployed"
      )
      .optional(),
    limit: z.string().describe('Limit the number of projects returned').optional(),
    search: z.string().max(100).describe('Search projects by the name field').optional(),
    repo: z.string().describe('Filter results by repo. Also used for project count').optional(),
    repoId: z.string().describe('Filter results by Repository ID.').optional(),
    repoUrl: z.string().describe('Filter results by Repository URL.').optional(),
    excludeRepos: z.string().describe('Filter results by excluding those projects that belong to a repo').optional(),
    edgeConfigId: z.string().describe('Filter results by connected Edge Config ID').optional(),
    edgeConfigTokenId: z.string().describe('Filter results by connected Edge Config Token ID').optional(),
    deprecated: z.boolean().optional(),
    teamId: z.string().describe('The Team identifier to perform the request on behalf of.').optional(),
    slug: z.string().describe('The Team slug to perform the request on behalf of.').optional()
  })
  .optional();

/**
 * @description The paginated list of projects
 */
export const getProjects200Schema = z.unknown();

/**
 * @description One of the provided values in the request query is invalid.
 */
export const getProjects400Schema = z.unknown();

export const getProjects401Schema = z.unknown();

/**
 * @description You do not have permission to access this resource.
 */
export const getProjects403Schema = z.unknown();

export const getProjectsQueryResponseSchema = z.lazy(() => getProjects200Schema);

export const createProjectQueryParamsSchema = z
  .object({
    teamId: z.string().describe('The Team identifier to perform the request on behalf of.').optional(),
    slug: z.string().describe('The Team slug to perform the request on behalf of.').optional()
  })
  .optional();

/**
 * @description The project was successfuly created
 */
export const createProject200Schema = z.unknown();

/**
 * @description One of the provided values in the request body is invalid.\nOne of the provided values in the request query is invalid.\nAt least one environment variable failed validation\nThe Bitbucket Webhook for the project link could not be created\nThe Gitlab Webhook for the project link could not be created
 */
export const createProject400Schema = z.unknown();

export const createProject401Schema = z.unknown();

/**
 * @description The account was soft-blocked for an unhandled reason.\nThe account is missing a payment so payment method must be updated\nPro customers are allowed to deploy Serverless Functions to up to `proMaxRegions` regions, or if the project was created before the limit was introduced.\nDeploying to Serverless Functions to multiple regions requires a plan update
 */
export const createProject402Schema = z.unknown();

/**
 * @description You do not have permission to access this resource.
 */
export const createProject403Schema = z.unknown();

/**
 * @description A project with the provided name already exists.
 */
export const createProject409Schema = z.unknown();

export const createProjectMutationResponseSchema = z.lazy(() => createProject200Schema);

export const getProjectPathParamsSchema = z.object({
  idOrName: z.union([z.boolean(), z.string()]).describe('The unique project identifier or the project name')
});

export const getProjectQueryParamsSchema = z
  .object({
    teamId: z.string().describe('The Team identifier to perform the request on behalf of.').optional(),
    slug: z.string().describe('The Team slug to perform the request on behalf of.').optional()
  })
  .optional();

/**
 * @description The project information
 */
export const getProject200Schema = z.unknown();

/**
 * @description One of the provided values in the request query is invalid.
 */
export const getProject400Schema = z.unknown();

export const getProject401Schema = z.unknown();

/**
 * @description You do not have permission to access this resource.
 */
export const getProject403Schema = z.unknown();

export const getProjectQueryResponseSchema = z.lazy(() => getProject200Schema);

export const updateProjectPathParamsSchema = z.object({
  idOrName: z.string().describe('The unique project identifier or the project name')
});

export const updateProjectQueryParamsSchema = z
  .object({
    teamId: z.string().describe('The Team identifier to perform the request on behalf of.').optional(),
    slug: z.string().describe('The Team slug to perform the request on behalf of.').optional()
  })
  .optional();

/**
 * @description The project was successfully updated
 */
export const updateProject200Schema = z.unknown();

/**
 * @description One of the provided values in the request body is invalid.\nOne of the provided values in the request query is invalid.\nTrusted IPs is only accessible for enterprise customers
 */
export const updateProject400Schema = z.unknown();

export const updateProject401Schema = z.unknown();

/**
 * @description The account was soft-blocked for an unhandled reason.\nThe account is missing a payment so payment method must be updated\nPro customers are allowed to deploy Serverless Functions to up to `proMaxRegions` regions, or if the project was created before the limit was introduced.\nDeploying to Serverless Functions to multiple regions requires a plan update
 */
export const updateProject402Schema = z.unknown();

/**
 * @description You do not have permission to access this resource.
 */
export const updateProject403Schema = z.unknown();

export const updateProject404Schema = z.unknown();

/**
 * @description The provided name for the project is already being used\nThe project is currently being transferred.
 */
export const updateProject409Schema = z.unknown();

/**
 * @description Owner does not have protection add-on\nAdvanced Deployment Protection is not available for the user plan
 */
export const updateProject428Schema = z.unknown();

export const updateProjectMutationResponseSchema = z.lazy(() => updateProject200Schema);

export const deleteProjectPathParamsSchema = z.object({
  idOrName: z.string().describe('The unique project identifier or the project name')
});

export const deleteProjectQueryParamsSchema = z
  .object({
    teamId: z.string().describe('The Team identifier to perform the request on behalf of.').optional(),
    slug: z.string().describe('The Team slug to perform the request on behalf of.').optional()
  })
  .optional();

/**
 * @description The project was successfuly removed
 */
export const deleteProject204Schema = z.unknown();

/**
 * @description One of the provided values in the request query is invalid.
 */
export const deleteProject400Schema = z.unknown();

export const deleteProject401Schema = z.unknown();

/**
 * @description You do not have permission to access this resource.
 */
export const deleteProject403Schema = z.unknown();

export const deleteProject409Schema = z.unknown();

export const deleteProjectMutationResponseSchema = z.lazy(() => deleteProject204Schema);

export const createCustomEnvironmentPathParamsSchema = z.object({
  idOrName: z.string().describe('The unique project identifier or the project name')
});

export const createCustomEnvironmentQueryParamsSchema = z
  .object({
    teamId: z.string().describe('The Team identifier to perform the request on behalf of.').optional(),
    slug: z.string().describe('The Team slug to perform the request on behalf of.').optional()
  })
  .optional();

export const createCustomEnvironment201Schema = z.unknown();

/**
 * @description One of the provided values in the request body is invalid.\nOne of the provided values in the request query is invalid.
 */
export const createCustomEnvironment400Schema = z.unknown();

export const createCustomEnvironment401Schema = z.unknown();

/**
 * @description The account was soft-blocked for an unhandled reason.\nThe account is missing a payment so payment method must be updated
 */
export const createCustomEnvironment402Schema = z.unknown();

/**
 * @description You do not have permission to access this resource.
 */
export const createCustomEnvironment403Schema = z.unknown();

export const createCustomEnvironment500Schema = z.unknown();

export const createCustomEnvironmentMutationResponseSchema = z.lazy(() => createCustomEnvironment201Schema);

export const listCustomEnvironmentsPathParamsSchema = z.object({
  idOrName: z.string().describe('The unique project identifier or the project name')
});

export const listCustomEnvironmentsQueryParamsSchema = z
  .object({
    gitBranch: z.string().describe('Fetch custom environments for a specific git branch').optional(),
    teamId: z.string().describe('The Team identifier to perform the request on behalf of.').optional(),
    slug: z.string().describe('The Team slug to perform the request on behalf of.').optional()
  })
  .optional();

export const listCustomEnvironments200Schema = z.unknown();

/**
 * @description One of the provided values in the request query is invalid.
 */
export const listCustomEnvironments400Schema = z.unknown();

export const listCustomEnvironments401Schema = z.unknown();

/**
 * @description You do not have permission to access this resource.
 */
export const listCustomEnvironments403Schema = z.unknown();

export const listCustomEnvironmentsQueryResponseSchema = z.lazy(() => listCustomEnvironments200Schema);

export const getCustomEnvironmentPathParamsSchema = z.object({
  idOrName: z.string().describe('The unique project identifier or the project name'),
  environmentSlugOrId: z.string().describe('The unique custom environment identifier within the project')
});

export const getCustomEnvironmentQueryParamsSchema = z
  .object({
    teamId: z.string().describe('The Team identifier to perform the request on behalf of.').optional(),
    slug: z.string().describe('The Team slug to perform the request on behalf of.').optional()
  })
  .optional();

export const getCustomEnvironment200Schema = z.unknown();

/**
 * @description One of the provided values in the request query is invalid.
 */
export const getCustomEnvironment400Schema = z.unknown();

export const getCustomEnvironment401Schema = z.unknown();

/**
 * @description You do not have permission to access this resource.
 */
export const getCustomEnvironment403Schema = z.unknown();

export const getCustomEnvironment404Schema = z.unknown();

export const getCustomEnvironmentQueryResponseSchema = z.lazy(() => getCustomEnvironment200Schema);

export const updateCustomEnvironmentPathParamsSchema = z.object({
  idOrName: z.string().describe('The unique project identifier or the project name'),
  environmentSlugOrId: z.string().describe('The unique custom environment identifier within the project')
});

export const updateCustomEnvironmentQueryParamsSchema = z
  .object({
    teamId: z.string().describe('The Team identifier to perform the request on behalf of.').optional(),
    slug: z.string().describe('The Team slug to perform the request on behalf of.').optional()
  })
  .optional();

export const updateCustomEnvironment200Schema = z.unknown();

/**
 * @description One of the provided values in the request body is invalid.\nOne of the provided values in the request query is invalid.
 */
export const updateCustomEnvironment400Schema = z.unknown();

export const updateCustomEnvironment401Schema = z.unknown();

/**
 * @description The account was soft-blocked for an unhandled reason.\nThe account is missing a payment so payment method must be updated
 */
export const updateCustomEnvironment402Schema = z.unknown();

/**
 * @description You do not have permission to access this resource.
 */
export const updateCustomEnvironment403Schema = z.unknown();

export const updateCustomEnvironment500Schema = z.unknown();

export const updateCustomEnvironmentMutationResponseSchema = z.lazy(() => updateCustomEnvironment200Schema);

export const removeCustomEnvironmentPathParamsSchema = z.object({
  idOrName: z.string().describe('The unique project identifier or the project name'),
  environmentSlugOrId: z.string().describe('The unique custom environment identifier within the project')
});

export const removeCustomEnvironmentQueryParamsSchema = z
  .object({
    teamId: z.string().describe('The Team identifier to perform the request on behalf of.').optional(),
    slug: z.string().describe('The Team slug to perform the request on behalf of.').optional()
  })
  .optional();

export const removeCustomEnvironment200Schema = z.unknown();

/**
 * @description One of the provided values in the request body is invalid.\nOne of the provided values in the request query is invalid.
 */
export const removeCustomEnvironment400Schema = z.unknown();

export const removeCustomEnvironment401Schema = z.unknown();

/**
 * @description You do not have permission to access this resource.
 */
export const removeCustomEnvironment403Schema = z.unknown();

export const removeCustomEnvironmentMutationResponseSchema = z.lazy(() => removeCustomEnvironment200Schema);

export const getProjectDomainsPathParamsSchema = z.object({
  idOrName: z.union([z.coerce.number().int(), z.string()]).describe('The unique project identifier or the project name')
});

export const getProjectDomainsQueryParamsSchema = z.object({
  production: z
    .enum(['true', 'false'])
    .default('false')
    .describe('Filters only production domains when set to `true`.'),
  target: z
    .enum(['production', 'preview'])
    .describe('Filters on the target of the domain. Can be either \\"production\\", \\"preview\\"')
    .optional(),
  customEnvironmentId: z.string().describe('The unique custom environment identifier within the project').optional(),
  gitBranch: z.string().describe('Filters domains based on specific branch.').optional(),
  redirects: z
    .enum(['true', 'false'])
    .default('true')
    .describe(
      'Excludes redirect project domains when \\"false\\". Includes redirect project domains when \\"true\\" (default).'
    ),
  redirect: z.string().describe('Filters domains based on their redirect target.').optional(),
  verified: z.enum(['true', 'false']).describe('Filters domains based on their verification status.').optional(),
  limit: z.coerce.number().describe('Maximum number of domains to list from a request (max 100).').optional(),
  since: z.coerce.number().describe('Get domains created after this JavaScript timestamp.').optional(),
  until: z.coerce.number().describe('Get domains created before this JavaScript timestamp.').optional(),
  order: z.enum(['ASC', 'DESC']).default('DESC').describe('Domains sort order by createdAt'),
  teamId: z.string().describe('The Team identifier to perform the request on behalf of.').optional(),
  slug: z.string().describe('The Team slug to perform the request on behalf of.').optional()
});

/**
 * @description Successful response retrieving a list of domains
 */
export const getProjectDomains200Schema = z.unknown();

/**
 * @description One of the provided values in the request query is invalid.
 */
export const getProjectDomains400Schema = z.unknown();

export const getProjectDomains401Schema = z.unknown();

/**
 * @description You do not have permission to access this resource.
 */
export const getProjectDomains403Schema = z.unknown();

export const getProjectDomainsQueryResponseSchema = z.lazy(() => getProjectDomains200Schema);

export const getProjectDomainPathParamsSchema = z.object({
  idOrName: z.string().describe('The unique project identifier or the project name'),
  domain: z.string().describe('The project domain name')
});

export const getProjectDomainQueryParamsSchema = z
  .object({
    teamId: z.string().describe('The Team identifier to perform the request on behalf of.').optional(),
    slug: z.string().describe('The Team slug to perform the request on behalf of.').optional()
  })
  .optional();

export const getProjectDomain200Schema = z.unknown();

/**
 * @description One of the provided values in the request query is invalid.
 */
export const getProjectDomain400Schema = z.unknown();

export const getProjectDomain401Schema = z.unknown();

/**
 * @description You do not have permission to access this resource.
 */
export const getProjectDomain403Schema = z.unknown();

export const getProjectDomainQueryResponseSchema = z.lazy(() => getProjectDomain200Schema);

export const updateProjectDomainPathParamsSchema = z.object({
  idOrName: z.string().describe('The unique project identifier or the project name'),
  domain: z.string().describe('The project domain name')
});

export const updateProjectDomainQueryParamsSchema = z
  .object({
    teamId: z.string().describe('The Team identifier to perform the request on behalf of.').optional(),
    slug: z.string().describe('The Team slug to perform the request on behalf of.').optional()
  })
  .optional();

/**
 * @description The domain was updated successfuly
 */
export const updateProjectDomain200Schema = z.unknown();

/**
 * @description One of the provided values in the request body is invalid.\nOne of the provided values in the request query is invalid.\nThe domain redirect is not valid
 */
export const updateProjectDomain400Schema = z.unknown();

export const updateProjectDomain401Schema = z.unknown();

/**
 * @description You do not have permission to access this resource.
 */
export const updateProjectDomain403Schema = z.unknown();

/**
 * @description The project is currently being transferred
 */
export const updateProjectDomain409Schema = z.unknown();

export const updateProjectDomainMutationResponseSchema = z.lazy(() => updateProjectDomain200Schema);

export const removeProjectDomainPathParamsSchema = z.object({
  idOrName: z.string().describe('The unique project identifier or the project name'),
  domain: z.string().describe('The project domain name')
});

export const removeProjectDomainQueryParamsSchema = z
  .object({
    teamId: z.string().describe('The Team identifier to perform the request on behalf of.').optional(),
    slug: z.string().describe('The Team slug to perform the request on behalf of.').optional()
  })
  .optional();

/**
 * @description The domain was succesfully removed from the project
 */
export const removeProjectDomain200Schema = z.unknown();

/**
 * @description One of the provided values in the request body is invalid.\nOne of the provided values in the request query is invalid.
 */
export const removeProjectDomain400Schema = z.unknown();

export const removeProjectDomain401Schema = z.unknown();

/**
 * @description You do not have permission to access this resource.
 */
export const removeProjectDomain403Schema = z.unknown();

export const removeProjectDomain404Schema = z.unknown();

/**
 * @description The project is currently being transferred
 */
export const removeProjectDomain409Schema = z.unknown();

export const removeProjectDomainMutationResponseSchema = z.lazy(() => removeProjectDomain200Schema);

export const addProjectDomainPathParamsSchema = z.object({
  idOrName: z.string().describe('The unique project identifier or the project name')
});

export const addProjectDomainQueryParamsSchema = z
  .object({
    teamId: z.string().describe('The Team identifier to perform the request on behalf of.').optional(),
    slug: z.string().describe('The Team slug to perform the request on behalf of.').optional()
  })
  .optional();

/**
 * @description The domain was successfully added to the project
 */
export const addProjectDomain200Schema = z.unknown();

/**
 * @description One of the provided values in the request body is invalid.\nOne of the provided values in the request query is invalid.\nThe domain is not valid\nYou can\'t set both a git branch and a redirect for the domain\nThe domain can not be added because the latest production deployment for the project was not successful\nThe domain redirect is not valid\nA domain cannot redirect to itself\nYou can not set the production branch as a branch for your domain
 */
export const addProjectDomain400Schema = z.unknown();

export const addProjectDomain401Schema = z.unknown();

/**
 * @description The account was soft-blocked for an unhandled reason.\nThe account is missing a payment so payment method must be updated
 */
export const addProjectDomain402Schema = z.unknown();

/**
 * @description You do not have permission to access this resource.\nYou don\'t have access to the domain you are adding
 */
export const addProjectDomain403Schema = z.unknown();

/**
 * @description The domain is already assigned to another Vercel project\nCannot create project domain since owner already has `domain` on their account, but it\'s not verified yet.\nCannot create project domain since owner already has `domain` on their account, and it\'s verified.\nThe domain is not allowed to be used\nThe project is currently being transferred
 */
export const addProjectDomain409Schema = z.unknown();

export const addProjectDomainMutationResponseSchema = z.lazy(() => addProjectDomain200Schema);

export const moveProjectDomainPathParamsSchema = z.object({
  idOrName: z.string().describe('The unique project identifier or the project name'),
  domain: z.string().describe('The project domain name')
});

export const moveProjectDomainQueryParamsSchema = z
  .object({
    teamId: z.string().describe('The Team identifier to perform the request on behalf of.').optional(),
    slug: z.string().describe('The Team slug to perform the request on behalf of.').optional()
  })
  .optional();

/**
 * @description The domain was updated successfuly
 */
export const moveProjectDomain200Schema = z.unknown();

/**
 * @description One of the provided values in the request body is invalid.\nOne of the provided values in the request query is invalid.
 */
export const moveProjectDomain400Schema = z.unknown();

export const moveProjectDomain401Schema = z.unknown();

/**
 * @description You do not have permission to access this resource.
 */
export const moveProjectDomain403Schema = z.unknown();

/**
 * @description The project is currently being transferred
 */
export const moveProjectDomain409Schema = z.unknown();

export const moveProjectDomainMutationResponseSchema = z.lazy(() => moveProjectDomain200Schema);

export const verifyProjectDomainPathParamsSchema = z.object({
  idOrName: z.string().describe('The unique project identifier or the project name'),
  domain: z.string().describe('The domain name you want to verify')
});

export const verifyProjectDomainQueryParamsSchema = z
  .object({
    teamId: z.string().describe('The Team identifier to perform the request on behalf of.').optional(),
    slug: z.string().describe('The Team slug to perform the request on behalf of.').optional()
  })
  .optional();

/**
 * @description The project domain was verified successfully\nDomain is already verified
 */
export const verifyProjectDomain200Schema = z.unknown();

/**
 * @description One of the provided values in the request query is invalid.\nThere is an existing TXT record on the domain verifying it for another project\nThe domain does not have a TXT record that attempts to verify the project domain\nThe TXT record on the domain does not match the expected challenge for the project domain\nProject domain is not assigned to project
 */
export const verifyProjectDomain400Schema = z.unknown();

export const verifyProjectDomain401Schema = z.unknown();

/**
 * @description You do not have permission to access this resource.
 */
export const verifyProjectDomain403Schema = z.unknown();

export const verifyProjectDomainMutationResponseSchema = z.lazy(() => verifyProjectDomain200Schema);

export const filterProjectEnvsPathParamsSchema = z.object({
  idOrName: z.string().describe('The unique project identifier or the project name')
});

export const filterProjectEnvsQueryParamsSchema = z
  .object({
    gitBranch: z
      .string()
      .max(250)
      .describe(
        'If defined, the git branch of the environment variable to filter the results (must have target=preview)'
      )
      .optional(),
    decrypt: z.enum(['true', 'false']).describe('If true, the environment variable value will be decrypted').optional(),
    source: z.string().describe('The source that is calling the endpoint.').optional(),
    customEnvironmentId: z.string().describe('The unique custom environment identifier within the project').optional(),
    customEnvironmentSlug: z.string().describe('The custom environment slug (name) within the project').optional(),
    teamId: z.string().describe('The Team identifier to perform the request on behalf of.').optional(),
    slug: z.string().describe('The Team slug to perform the request on behalf of.').optional()
  })
  .optional();

/**
 * @description The list of environment variables for the given project
 */
export const filterProjectEnvs200Schema = z.unknown();

/**
 * @description One of the provided values in the request query is invalid.
 */
export const filterProjectEnvs400Schema = z.unknown();

export const filterProjectEnvs401Schema = z.unknown();

/**
 * @description You do not have permission to access this resource.
 */
export const filterProjectEnvs403Schema = z.unknown();

export const filterProjectEnvsQueryResponseSchema = z.lazy(() => filterProjectEnvs200Schema);

export const createProjectEnvPathParamsSchema = z.object({
  idOrName: z.string().describe('The unique project identifier or the project name')
});

export const createProjectEnvQueryParamsSchema = z
  .object({
    upsert: z.string().describe('Allow override of environment variable if it already exists').optional(),
    teamId: z.string().describe('The Team identifier to perform the request on behalf of.').optional(),
    slug: z.string().describe('The Team slug to perform the request on behalf of.').optional()
  })
  .optional();

/**
 * @description The environment variable was created successfully
 */
export const createProjectEnv201Schema = z.unknown();

/**
 * @description One of the provided values in the request body is invalid.\nOne of the provided values in the request query is invalid.\nThe environment variable coudn\'t be created because an ongoing update env update is already happening\nThe environment variable coudn\'t be created because project document is too large
 */
export const createProjectEnv400Schema = z.unknown();

export const createProjectEnv401Schema = z.unknown();

/**
 * @description The account was soft-blocked for an unhandled reason.\nThe account is missing a payment so payment method must be updated
 */
export const createProjectEnv402Schema = z.unknown();

/**
 * @description You do not have permission to access this resource.\nThe environment variable cannot be created because it already exists\nAdditional permissions are required to create production environment variables
 */
export const createProjectEnv403Schema = z.unknown();

/**
 * @description The project is being transfered and creating an environment variable is not possible
 */
export const createProjectEnv409Schema = z.unknown();

export const createProjectEnvMutationResponseSchema = z.lazy(() => createProjectEnv201Schema);

export const getProjectEnvPathParamsSchema = z.object({
  idOrName: z.string().describe('The unique project identifier or the project name'),
  id: z.string().describe('The unique ID for the environment variable to get the decrypted value.')
});

export const getProjectEnvQueryParamsSchema = z
  .object({
    teamId: z.string().describe('The Team identifier to perform the request on behalf of.').optional(),
    slug: z.string().describe('The Team slug to perform the request on behalf of.').optional()
  })
  .optional();

export const getProjectEnv200Schema = z.unknown();

/**
 * @description One of the provided values in the request query is invalid.
 */
export const getProjectEnv400Schema = z.unknown();

export const getProjectEnv401Schema = z.unknown();

/**
 * @description You do not have permission to access this resource.
 */
export const getProjectEnv403Schema = z.unknown();

export const getProjectEnvQueryResponseSchema = z.lazy(() => getProjectEnv200Schema);

export const removeProjectEnvPathParamsSchema = z.object({
  idOrName: z.string().describe('The unique project identifier or the project name'),
  id: z.string().describe('The unique environment variable identifier')
});

export const removeProjectEnvQueryParamsSchema = z
  .object({
    customEnvironmentId: z.string().describe('The unique custom environment identifier within the project').optional(),
    teamId: z.string().describe('The Team identifier to perform the request on behalf of.').optional(),
    slug: z.string().describe('The Team slug to perform the request on behalf of.').optional()
  })
  .optional();

/**
 * @description The environment variable was successfully removed
 */
export const removeProjectEnv200Schema = z.unknown();

/**
 * @description One of the provided values in the request query is invalid.
 */
export const removeProjectEnv400Schema = z.unknown();

export const removeProjectEnv401Schema = z.unknown();

/**
 * @description You do not have permission to access this resource.
 */
export const removeProjectEnv403Schema = z.unknown();

export const removeProjectEnv404Schema = z.unknown();

/**
 * @description The project is being transfered and removing an environment variable is not possible
 */
export const removeProjectEnv409Schema = z.unknown();

export const removeProjectEnvMutationResponseSchema = z.lazy(() => removeProjectEnv200Schema);

export const editProjectEnvPathParamsSchema = z.object({
  idOrName: z.string().describe('The unique project identifier or the project name'),
  id: z.string().describe('The unique environment variable identifier')
});

export const editProjectEnvQueryParamsSchema = z
  .object({
    teamId: z.string().describe('The Team identifier to perform the request on behalf of.').optional(),
    slug: z.string().describe('The Team slug to perform the request on behalf of.').optional()
  })
  .optional();

/**
 * @description The environment variable was successfully edited
 */
export const editProjectEnv200Schema = z.unknown();

/**
 * @description One of the provided values in the request body is invalid.\nOne of the provided values in the request query is invalid.\nAt least one environment variable failed validation
 */
export const editProjectEnv400Schema = z.unknown();

export const editProjectEnv401Schema = z.unknown();

/**
 * @description You do not have permission to access this resource.
 */
export const editProjectEnv403Schema = z.unknown();

/**
 * @description The project is being transfered and removing an environment variable is not possible
 */
export const editProjectEnv409Schema = z.unknown();

export const editProjectEnvMutationResponseSchema = z.lazy(() => editProjectEnv200Schema);

export const getRollingReleaseBillingStatusPathParamsSchema = z.object({
  idOrName: z.string().describe('Project ID or project name (URL-encoded)')
});

export const getRollingReleaseBillingStatusQueryParamsSchema = z
  .object({
    teamId: z.string().describe('The Team identifier to perform the request on behalf of.').optional(),
    slug: z.string().describe('The Team slug to perform the request on behalf of.').optional()
  })
  .optional();

export const getRollingReleaseBillingStatus200Schema = z.unknown();

/**
 * @description One of the provided values in the request query is invalid.
 */
export const getRollingReleaseBillingStatus400Schema = z.unknown();

export const getRollingReleaseBillingStatus401Schema = z.unknown();

/**
 * @description You do not have permission to access this resource.
 */
export const getRollingReleaseBillingStatus403Schema = z.unknown();

export const getRollingReleaseBillingStatus404Schema = z.unknown();

export const getRollingReleaseBillingStatusQueryResponseSchema = z.lazy(() => getRollingReleaseBillingStatus200Schema);

export const getRollingReleaseConfigPathParamsSchema = z.object({
  idOrName: z.string().describe('Project ID or project name (URL-encoded)')
});

export const getRollingReleaseConfigQueryParamsSchema = z
  .object({
    teamId: z.string().describe('The Team identifier to perform the request on behalf of.').optional(),
    slug: z.string().describe('The Team slug to perform the request on behalf of.').optional()
  })
  .optional();

export const getRollingReleaseConfig200Schema = z.unknown();

/**
 * @description One of the provided values in the request query is invalid.
 */
export const getRollingReleaseConfig400Schema = z.unknown();

export const getRollingReleaseConfig401Schema = z.unknown();

/**
 * @description You do not have permission to access this resource.
 */
export const getRollingReleaseConfig403Schema = z.unknown();

export const getRollingReleaseConfig404Schema = z.unknown();

export const getRollingReleaseConfigQueryResponseSchema = z.lazy(() => getRollingReleaseConfig200Schema);

export const deleteRollingReleaseConfigPathParamsSchema = z.object({
  idOrName: z.string().describe('Project ID or project name (URL-encoded)')
});

export const deleteRollingReleaseConfigQueryParamsSchema = z
  .object({
    teamId: z.string().describe('The Team identifier to perform the request on behalf of.').optional(),
    slug: z.string().describe('The Team slug to perform the request on behalf of.').optional()
  })
  .optional();

export const deleteRollingReleaseConfig200Schema = z.unknown();

/**
 * @description One of the provided values in the request query is invalid.
 */
export const deleteRollingReleaseConfig400Schema = z.unknown();

export const deleteRollingReleaseConfig401Schema = z.unknown();

/**
 * @description You do not have permission to access this resource.
 */
export const deleteRollingReleaseConfig403Schema = z.unknown();

export const deleteRollingReleaseConfig404Schema = z.unknown();

export const deleteRollingReleaseConfigMutationResponseSchema = z.lazy(() => deleteRollingReleaseConfig200Schema);

export const updateRollingReleaseConfigPathParamsSchema = z.object({
  idOrName: z.string().describe('Project ID or project name (URL-encoded)')
});

export const updateRollingReleaseConfigQueryParamsSchema = z
  .object({
    teamId: z.string().describe('The Team identifier to perform the request on behalf of.').optional(),
    slug: z.string().describe('The Team slug to perform the request on behalf of.').optional()
  })
  .optional();

export const updateRollingReleaseConfig200Schema = z.unknown();

/**
 * @description One of the provided values in the request query is invalid.
 */
export const updateRollingReleaseConfig400Schema = z.unknown();

export const updateRollingReleaseConfig401Schema = z.unknown();

/**
 * @description You do not have permission to access this resource.
 */
export const updateRollingReleaseConfig403Schema = z.unknown();

export const updateRollingReleaseConfig404Schema = z.unknown();

export const updateRollingReleaseConfigMutationResponseSchema = z.lazy(() => updateRollingReleaseConfig200Schema);

export const getRollingReleasePathParamsSchema = z.object({
  idOrName: z.string().describe('Project ID or project name (URL-encoded)')
});

export const getRollingReleaseQueryParamsSchema = z
  .object({
    state: z.enum(['ACTIVE', 'COMPLETE', 'ABORTED']).describe('Filter by rolling release state').optional(),
    teamId: z.string().describe('The Team identifier to perform the request on behalf of.').optional(),
    slug: z.string().describe('The Team slug to perform the request on behalf of.').optional()
  })
  .optional();

export const getRollingRelease200Schema = z.unknown();

/**
 * @description One of the provided values in the request query is invalid.
 */
export const getRollingRelease400Schema = z.unknown();

export const getRollingRelease401Schema = z.unknown();

/**
 * @description You do not have permission to access this resource.
 */
export const getRollingRelease403Schema = z.unknown();

export const getRollingRelease404Schema = z.unknown();

export const getRollingReleaseQueryResponseSchema = z.lazy(() => getRollingRelease200Schema);

export const approveRollingReleaseStagePathParamsSchema = z.object({
  idOrName: z.string().describe('Project ID or project name (URL-encoded)')
});

export const approveRollingReleaseStageQueryParamsSchema = z
  .object({
    teamId: z.string().describe('The Team identifier to perform the request on behalf of.').optional(),
    slug: z.string().describe('The Team slug to perform the request on behalf of.').optional()
  })
  .optional();

export const approveRollingReleaseStage200Schema = z.unknown();

/**
 * @description One of the provided values in the request body is invalid.\nOne of the provided values in the request query is invalid.
 */
export const approveRollingReleaseStage400Schema = z.unknown();

export const approveRollingReleaseStage401Schema = z.unknown();

/**
 * @description You do not have permission to access this resource.
 */
export const approveRollingReleaseStage403Schema = z.unknown();

export const approveRollingReleaseStage404Schema = z.unknown();

export const approveRollingReleaseStage500Schema = z.unknown();

export const approveRollingReleaseStageMutationResponseSchema = z.lazy(() => approveRollingReleaseStage200Schema);

export const completeRollingReleasePathParamsSchema = z.object({
  idOrName: z.string().describe('Project ID or project name (URL-encoded)')
});

export const completeRollingReleaseQueryParamsSchema = z
  .object({
    teamId: z.string().describe('The Team identifier to perform the request on behalf of.').optional(),
    slug: z.string().describe('The Team slug to perform the request on behalf of.').optional()
  })
  .optional();

export const completeRollingRelease200Schema = z.unknown();

/**
 * @description One of the provided values in the request body is invalid.\nOne of the provided values in the request query is invalid.
 */
export const completeRollingRelease400Schema = z.unknown();

export const completeRollingRelease401Schema = z.unknown();

/**
 * @description You do not have permission to access this resource.
 */
export const completeRollingRelease403Schema = z.unknown();

export const completeRollingRelease404Schema = z.unknown();

export const completeRollingReleaseMutationResponseSchema = z.lazy(() => completeRollingRelease200Schema);

export const createProjectTransferRequestPathParamsSchema = z.object({
  idOrName: z.string().describe('The ID or name of the project to transfer.')
});

export const createProjectTransferRequestQueryParamsSchema = z
  .object({
    teamId: z.string().describe('The Team identifier to perform the request on behalf of.').optional(),
    slug: z.string().describe('The Team slug to perform the request on behalf of.').optional()
  })
  .optional();

/**
 * @description The project transfer request has been initiated successfully.
 */
export const createProjectTransferRequest200Schema = z.unknown();

/**
 * @description One of the provided values in the request body is invalid.\nOne of the provided values in the request query is invalid.
 */
export const createProjectTransferRequest400Schema = z.unknown();

export const createProjectTransferRequest401Schema = z.unknown();

/**
 * @description You do not have permission to access this resource.
 */
export const createProjectTransferRequest403Schema = z.unknown();

export const createProjectTransferRequestMutationResponseSchema = z.lazy(() => createProjectTransferRequest200Schema);

export const acceptProjectTransferRequestPathParamsSchema = z.object({
  code: z.string().describe('The code of the project transfer request.')
});

export const acceptProjectTransferRequestQueryParamsSchema = z
  .object({
    teamId: z.string().describe('The Team identifier to perform the request on behalf of.').optional(),
    slug: z.string().describe('The Team slug to perform the request on behalf of.').optional()
  })
  .optional();

/**
 * @description The project has been transferred successfully.
 */
export const acceptProjectTransferRequest202Schema = z.unknown();

/**
 * @description One of the provided values in the request body is invalid.\nOne of the provided values in the request query is invalid.
 */
export const acceptProjectTransferRequest400Schema = z.unknown();

export const acceptProjectTransferRequest401Schema = z.unknown();

/**
 * @description You do not have permission to access this resource.
 */
export const acceptProjectTransferRequest403Schema = z.unknown();

export const acceptProjectTransferRequest404Schema = z.unknown();

export const acceptProjectTransferRequest422Schema = z.unknown();

export const acceptProjectTransferRequestMutationResponseSchema = z.lazy(() => acceptProjectTransferRequest202Schema);

export const updateProjectProtectionBypassPathParamsSchema = z.object({
  idOrName: z.string().describe('The unique project identifier or the project name')
});

export const updateProjectProtectionBypassQueryParamsSchema = z
  .object({
    teamId: z.string().describe('The Team identifier to perform the request on behalf of.').optional(),
    slug: z.string().describe('The Team slug to perform the request on behalf of.').optional()
  })
  .optional();

export const updateProjectProtectionBypass200Schema = z.unknown();

/**
 * @description One of the provided values in the request body is invalid.\nOne of the provided values in the request query is invalid.
 */
export const updateProjectProtectionBypass400Schema = z.unknown();

export const updateProjectProtectionBypass401Schema = z.unknown();

/**
 * @description You do not have permission to access this resource.
 */
export const updateProjectProtectionBypass403Schema = z.unknown();

export const updateProjectProtectionBypass404Schema = z.unknown();

export const updateProjectProtectionBypass409Schema = z.unknown();

export const updateProjectProtectionBypassMutationResponseSchema = z.lazy(() => updateProjectProtectionBypass200Schema);

export const requestPromotePathParamsSchema = z.object({
  projectId: z.string(),
  deploymentId: z.string()
});

export const requestPromoteQueryParamsSchema = z
  .object({
    teamId: z.string().describe('The Team identifier to perform the request on behalf of.').optional(),
    slug: z.string().describe('The Team slug to perform the request on behalf of.').optional()
  })
  .optional();

export const requestPromote201Schema = z.unknown();

export const requestPromote202Schema = z.unknown();

/**
 * @description One of the provided values in the request query is invalid.
 */
export const requestPromote400Schema = z.unknown();

export const requestPromote401Schema = z.unknown();

/**
 * @description You do not have permission to access this resource.
 */
export const requestPromote403Schema = z.unknown();

export const requestPromote409Schema = z.unknown();

export const requestPromoteMutationResponseSchema = z.union([
  z.lazy(() => requestPromote201Schema),
  z.lazy(() => requestPromote202Schema)
]);

export const listPromoteAliasesPathParamsSchema = z.object({
  projectId: z.string()
});

export const listPromoteAliasesQueryParamsSchema = z
  .object({
    limit: z.coerce
      .number()
      .max(100)
      .describe('Maximum number of aliases to list from a request (max 100).')
      .optional(),
    since: z.coerce.number().describe('Get aliases created after this epoch timestamp.').optional(),
    until: z.coerce.number().describe('Get aliases created before this epoch timestamp.').optional(),
    failedOnly: z
      .boolean()
      .describe('Filter results down to aliases that failed to map to the requested deployment')
      .optional(),
    teamId: z.string().describe('The Team identifier to perform the request on behalf of.').optional(),
    slug: z.string().describe('The Team slug to perform the request on behalf of.').optional()
  })
  .optional();

export const listPromoteAliases200Schema = z.unknown();

/**
 * @description One of the provided values in the request query is invalid.
 */
export const listPromoteAliases400Schema = z.unknown();

export const listPromoteAliases401Schema = z.unknown();

/**
 * @description You do not have permission to access this resource.
 */
export const listPromoteAliases403Schema = z.unknown();

export const listPromoteAliases404Schema = z.unknown();

export const listPromoteAliasesQueryResponseSchema = z.lazy(() => listPromoteAliases200Schema);

export const pauseProjectPathParamsSchema = z.object({
  projectId: z.string().describe('The unique project identifier')
});

export const pauseProjectQueryParamsSchema = z
  .object({
    teamId: z.string().describe('The Team identifier to perform the request on behalf of.').optional(),
    slug: z.string().describe('The Team slug to perform the request on behalf of.').optional()
  })
  .optional();

export const pauseProject200Schema = z.unknown();

/**
 * @description One of the provided values in the request query is invalid.
 */
export const pauseProject400Schema = z.unknown();

export const pauseProject401Schema = z.unknown();

/**
 * @description The account was soft-blocked for an unhandled reason.\nThe account is missing a payment so payment method must be updated
 */
export const pauseProject402Schema = z.unknown();

/**
 * @description You do not have permission to access this resource.
 */
export const pauseProject403Schema = z.unknown();

export const pauseProject500Schema = z.unknown();

export const pauseProjectMutationResponseSchema = z.lazy(() => pauseProject200Schema);

export const unpauseProjectPathParamsSchema = z.object({
  projectId: z.string().describe('The unique project identifier')
});

export const unpauseProjectQueryParamsSchema = z
  .object({
    teamId: z.string().describe('The Team identifier to perform the request on behalf of.').optional(),
    slug: z.string().describe('The Team slug to perform the request on behalf of.').optional()
  })
  .optional();

export const unpauseProject200Schema = z.unknown();

/**
 * @description One of the provided values in the request query is invalid.
 */
export const unpauseProject400Schema = z.unknown();

export const unpauseProject401Schema = z.unknown();

/**
 * @description You do not have permission to access this resource.
 */
export const unpauseProject403Schema = z.unknown();

export const unpauseProject500Schema = z.unknown();

export const unpauseProjectMutationResponseSchema = z.lazy(() => unpauseProject200Schema);

export const updateAttackChallengeModeQueryParamsSchema = z
  .object({
    teamId: z.string().describe('The Team identifier to perform the request on behalf of.').optional(),
    slug: z.string().describe('The Team slug to perform the request on behalf of.').optional()
  })
  .optional();

export const updateAttackChallengeMode200Schema = z.unknown();

/**
 * @description One of the provided values in the request body is invalid.
 */
export const updateAttackChallengeMode400Schema = z.unknown();

export const updateAttackChallengeMode401Schema = z.unknown();

/**
 * @description You do not have permission to access this resource.
 */
export const updateAttackChallengeMode403Schema = z.unknown();

export const updateAttackChallengeMode404Schema = z.unknown();

export const updateAttackChallengeModeMutationResponseSchema = z.lazy(() => updateAttackChallengeMode200Schema);

export const putFirewallConfigQueryParamsSchema = z.object({
  projectId: z.string(),
  teamId: z.string().describe('The Team identifier to perform the request on behalf of.').optional(),
  slug: z.string().describe('The Team slug to perform the request on behalf of.').optional()
});

export const putFirewallConfig200Schema = z.unknown();

/**
 * @description One of the provided values in the request body is invalid.\nOne of the provided values in the request query is invalid.
 */
export const putFirewallConfig400Schema = z.unknown();

export const putFirewallConfig401Schema = z.unknown();

export const putFirewallConfig402Schema = z.unknown();

/**
 * @description You do not have permission to access this resource.
 */
export const putFirewallConfig403Schema = z.unknown();

export const putFirewallConfig404Schema = z.unknown();

export const putFirewallConfig500Schema = z.unknown();

export const putFirewallConfigMutationResponseSchema = z.lazy(() => putFirewallConfig200Schema);

export const updateFirewallConfigQueryParamsSchema = z.object({
  projectId: z.string(),
  teamId: z.string().describe('The Team identifier to perform the request on behalf of.').optional(),
  slug: z.string().describe('The Team slug to perform the request on behalf of.').optional()
});

export const updateFirewallConfig200Schema = z.unknown();

/**
 * @description One of the provided values in the request body is invalid.\nOne of the provided values in the request query is invalid.
 */
export const updateFirewallConfig400Schema = z.unknown();

export const updateFirewallConfig401Schema = z.unknown();

export const updateFirewallConfig402Schema = z.unknown();

/**
 * @description You do not have permission to access this resource.
 */
export const updateFirewallConfig403Schema = z.unknown();

export const updateFirewallConfig404Schema = z.unknown();

export const updateFirewallConfig500Schema = z.unknown();

export const updateFirewallConfigMutationResponseSchema = z.lazy(() => updateFirewallConfig200Schema);

export const getFirewallConfigPathParamsSchema = z.object({
  configVersion: z.string()
});

export const getFirewallConfigQueryParamsSchema = z.object({
  projectId: z.string(),
  teamId: z.string().describe('The Team identifier to perform the request on behalf of.').optional(),
  slug: z.string().describe('The Team slug to perform the request on behalf of.').optional()
});

/**
 * @description If the firewall configuration includes a [custom managed ruleset](https://vercel.com/docs/security/vercel-waf/managed-rulesets), it will include a `crs` item that has the following values: sd: Scanner Detection ma: Multipart Attack lfi: Local File Inclusion Attack rfi: Remote File Inclusion Attack rce: Remote Execution Attack php: PHP Attack gen: Generic Attack xss: XSS Attack sqli: SQL Injection Attack sf: Session Fixation Attack java: Java Attack
 */
export const getFirewallConfig200Schema = z.unknown();

/**
 * @description One of the provided values in the request query is invalid.
 */
export const getFirewallConfig400Schema = z.unknown();

export const getFirewallConfig401Schema = z.unknown();

/**
 * @description You do not have permission to access this resource.
 */
export const getFirewallConfig403Schema = z.unknown();

export const getFirewallConfig404Schema = z.unknown();

export const getFirewallConfigQueryResponseSchema = z.lazy(() => getFirewallConfig200Schema);

export const getActiveAttackStatusQueryParamsSchema = z.object({
  projectId: z.string(),
  teamId: z.string().describe('The Team identifier to perform the request on behalf of.').optional(),
  slug: z.string().describe('The Team slug to perform the request on behalf of.').optional()
});

export const getActiveAttackStatus200Schema = z.unknown();

/**
 * @description One of the provided values in the request query is invalid.
 */
export const getActiveAttackStatus400Schema = z.unknown();

export const getActiveAttackStatus401Schema = z.unknown();

/**
 * @description You do not have permission to access this resource.
 */
export const getActiveAttackStatus403Schema = z.unknown();

export const getActiveAttackStatus404Schema = z.unknown();

export const getActiveAttackStatusQueryResponseSchema = z.lazy(() => getActiveAttackStatus200Schema);

export const getBypassIpQueryParamsSchema = z.object({
  projectId: z.string(),
  limit: z.coerce.number().max(128).optional(),
  sourceIp: z.string().max(49).describe('Filter by source IP').optional(),
  domain: z
    .string()
    .regex(/([a-z]+[a-z.]+)$/)
    .max(2544)
    .describe('Filter by domain')
    .optional(),
  projectScope: z.boolean().describe('Filter by project scoped rules').optional(),
  offset: z.string().max(2560).describe('Used for pagination. Retrieves results after the provided id').optional(),
  teamId: z.string().describe('The Team identifier to perform the request on behalf of.').optional(),
  slug: z.string().describe('The Team slug to perform the request on behalf of.').optional()
});

export const getBypassIp200Schema = z.unknown();

/**
 * @description One of the provided values in the request query is invalid.
 */
export const getBypassIp400Schema = z.unknown();

export const getBypassIp401Schema = z.unknown();

/**
 * @description You do not have permission to access this resource.
 */
export const getBypassIp403Schema = z.unknown();

export const getBypassIp404Schema = z.unknown();

export const getBypassIp500Schema = z.unknown();

export const getBypassIpQueryResponseSchema = z.lazy(() => getBypassIp200Schema);

export const addBypassIpQueryParamsSchema = z.object({
  projectId: z.string(),
  teamId: z.string().describe('The Team identifier to perform the request on behalf of.').optional(),
  slug: z.string().describe('The Team slug to perform the request on behalf of.').optional()
});

export const addBypassIp200Schema = z.unknown();

/**
 * @description One of the provided values in the request body is invalid.\nOne of the provided values in the request query is invalid.
 */
export const addBypassIp400Schema = z.unknown();

export const addBypassIp401Schema = z.unknown();

/**
 * @description You do not have permission to access this resource.
 */
export const addBypassIp403Schema = z.unknown();

export const addBypassIp404Schema = z.unknown();

export const addBypassIp500Schema = z.unknown();

export const addBypassIpMutationResponseSchema = z.lazy(() => addBypassIp200Schema);

export const removeBypassIpQueryParamsSchema = z.object({
  projectId: z.string(),
  teamId: z.string().describe('The Team identifier to perform the request on behalf of.').optional(),
  slug: z.string().describe('The Team slug to perform the request on behalf of.').optional()
});

export const removeBypassIp200Schema = z.unknown();

/**
 * @description One of the provided values in the request body is invalid.\nOne of the provided values in the request query is invalid.
 */
export const removeBypassIp400Schema = z.unknown();

export const removeBypassIp401Schema = z.unknown();

/**
 * @description You do not have permission to access this resource.
 */
export const removeBypassIp403Schema = z.unknown();

export const removeBypassIp404Schema = z.unknown();

export const removeBypassIp500Schema = z.unknown();

export const removeBypassIpMutationResponseSchema = z.lazy(() => removeBypassIp200Schema);

export const getTeamMembersPathParamsSchema = z.object({
  teamId: z.string()
});

export const getTeamMembersQueryParamsSchema = z
  .object({
    limit: z.coerce.number().min(1).describe('Limit how many teams should be returned').optional(),
    since: z.coerce.number().describe('Timestamp in milliseconds to only include members added since then.').optional(),
    until: z.coerce.number().describe('Timestamp in milliseconds to only include members added until then.').optional(),
    search: z.string().describe('Search team members by their name, username, and email.').optional(),
    role: z
      .enum(['OWNER', 'MEMBER', 'DEVELOPER', 'VIEWER', 'BILLING', 'CONTRIBUTOR'])
      .describe('Only return members with the specified team role.')
      .optional(),
    excludeProject: z.string().describe('Exclude members who belong to the specified project.').optional(),
    eligibleMembersForProjectId: z
      .string()
      .describe('Include team members who are eligible to be members of the specified project.')
      .optional()
  })
  .optional();

export const getTeamMembers200Schema = z.unknown();

/**
 * @description One of the provided values in the request query is invalid.
 */
export const getTeamMembers400Schema = z.unknown();

export const getTeamMembers401Schema = z.unknown();

/**
 * @description You do not have permission to access this resource.
 */
export const getTeamMembers403Schema = z.unknown();

export const getTeamMembers404Schema = z.unknown();

export const getTeamMembersQueryResponseSchema = z.lazy(() => getTeamMembers200Schema);

export const inviteUserToTeamPathParamsSchema = z.object({
  teamId: z.string()
});

/**
 * @description The member was successfully added to the team
 */
export const inviteUserToTeam200Schema = z.unknown();

/**
 * @description One of the provided values in the request body is invalid.\nOne of the provided values in the request query is invalid.\nThe user already requested access to the team\nThe team reached the maximum allowed amount of members
 */
export const inviteUserToTeam400Schema = z.unknown();

export const inviteUserToTeam401Schema = z.unknown();

/**
 * @description The authenticated user must be a team owner to perform the action\nYou do not have permission to access this resource.
 */
export const inviteUserToTeam403Schema = z.unknown();

export const inviteUserToTeam503Schema = z.unknown();

export const inviteUserToTeamMutationResponseSchema = z.lazy(() => inviteUserToTeam200Schema);

export const requestAccessToTeamPathParamsSchema = z.object({
  teamId: z.string()
});

/**
 * @description Successfuly requested access to the team.
 */
export const requestAccessToTeam200Schema = z.unknown();

/**
 * @description One of the provided values in the request body is invalid.\nOne of the provided values in the request query is invalid.
 */
export const requestAccessToTeam400Schema = z.unknown();

export const requestAccessToTeam401Schema = z.unknown();

/**
 * @description You do not have permission to access this resource.
 */
export const requestAccessToTeam403Schema = z.unknown();

/**
 * @description The team was not found.
 */
export const requestAccessToTeam404Schema = z.unknown();

export const requestAccessToTeam503Schema = z.unknown();

export const requestAccessToTeamMutationResponseSchema = z.lazy(() => requestAccessToTeam200Schema);

export const getTeamAccessRequestPathParamsSchema = z.object({
  userId: z.string(),
  teamId: z.string()
});

/**
 * @description Successfully
 */
export const getTeamAccessRequest200Schema = z.unknown();

/**
 * @description One of the provided values in the request query is invalid.\nUser is already a confirmed member of the team and did not request access. Only visible when the authenticated user does have access to the team.
 */
export const getTeamAccessRequest400Schema = z.unknown();

export const getTeamAccessRequest401Schema = z.unknown();

/**
 * @description You do not have permission to access this resource.
 */
export const getTeamAccessRequest403Schema = z.unknown();

/**
 * @description The provided user doesn\'t have a membership.\nTeam was not found.
 */
export const getTeamAccessRequest404Schema = z.unknown();

export const getTeamAccessRequestQueryResponseSchema = z.lazy(() => getTeamAccessRequest200Schema);

export const joinTeamPathParamsSchema = z.object({
  teamId: z.string()
});

/**
 * @description Successfully joined a team.
 */
export const joinTeam200Schema = z.unknown();

/**
 * @description One of the provided values in the request body is invalid.
 */
export const joinTeam400Schema = z.unknown();

export const joinTeam401Schema = z.unknown();

export const joinTeam402Schema = z.unknown();

/**
 * @description You do not have permission to access this resource.
 */
export const joinTeam403Schema = z.unknown();

export const joinTeam404Schema = z.unknown();

export const joinTeamMutationResponseSchema = z.lazy(() => joinTeam200Schema);

export const updateTeamMemberPathParamsSchema = z.object({
  uid: z.string().describe('The ID of the member.'),
  teamId: z.string()
});

/**
 * @description Successfully updated the membership.
 */
export const updateTeamMember200Schema = z.unknown();

/**
 * @description One of the provided values in the request body is invalid.\nOne of the provided values in the request query is invalid.\nCannot disconnect SSO from a Team member that does not have a SSO connection.\nCannot confirm a member that is already confirmed.\nCannot confirm a member that did not request access.
 */
export const updateTeamMember400Schema = z.unknown();

/**
 * @description Team members can only be updated by an owner, or by the authenticated user if they are only disconnecting their SAML connection to the Team.
 */
export const updateTeamMember401Schema = z.unknown();

export const updateTeamMember402Schema = z.unknown();

/**
 * @description You do not have permission to access this resource.
 */
export const updateTeamMember403Schema = z.unknown();

/**
 * @description The provided user is not part of this team.\nA user with the specified ID does not exist.
 */
export const updateTeamMember404Schema = z.unknown();

export const updateTeamMember500Schema = z.unknown();

export const updateTeamMemberMutationResponseSchema = z.lazy(() => updateTeamMember200Schema);

export const removeTeamMemberPathParamsSchema = z.object({
  uid: z.string().describe('The user ID of the member.'),
  teamId: z.string()
});

export const removeTeamMemberQueryParamsSchema = z
  .object({
    newDefaultTeamId: z
      .string()
      .describe('The ID of the team to set as the new default team for the Northstar user.')
      .optional()
  })
  .optional();

/**
 * @description Successfully removed a member of the team.
 */
export const removeTeamMember200Schema = z.unknown();

/**
 * @description One of the provided values in the request query is invalid.
 */
export const removeTeamMember400Schema = z.unknown();

export const removeTeamMember401Schema = z.unknown();

/**
 * @description You do not have permission to access this resource.\nNot authorized to update the team.
 */
export const removeTeamMember403Schema = z.unknown();

export const removeTeamMember404Schema = z.unknown();

export const removeTeamMember503Schema = z.unknown();

export const removeTeamMemberMutationResponseSchema = z.lazy(() => removeTeamMember200Schema);

export const getTeamPathParamsSchema = z.object({
  teamId: z.string().describe('The Team identifier to perform the request on behalf of.')
});

export const getTeamQueryParamsSchema = z
  .object({
    slug: z.string().optional()
  })
  .optional();

/**
 * @description The requested team
 */
export const getTeam200Schema = z.unknown();

/**
 * @description One of the provided values in the request query is invalid.
 */
export const getTeam400Schema = z.unknown();

export const getTeam401Schema = z.unknown();

/**
 * @description You do not have permission to access this resource.\nNot authorized to access the team.
 */
export const getTeam403Schema = z.unknown();

/**
 * @description Team was not found.
 */
export const getTeam404Schema = z.unknown();

export const getTeamQueryResponseSchema = z.lazy(() => getTeam200Schema);

export const patchTeamPathParamsSchema = z.object({
  teamId: z.string().describe('The Team identifier to perform the request on behalf of.')
});

export const patchTeamQueryParamsSchema = z
  .object({
    slug: z.string().describe('The Team slug to perform the request on behalf of.').optional()
  })
  .optional();

export const patchTeam200Schema = z.unknown();

/**
 * @description One of the provided values in the request body is invalid.
 */
export const patchTeam400Schema = z.unknown();

export const patchTeam401Schema = z.unknown();

/**
 * @description The account was soft-blocked for an unhandled reason.\nThe account is missing a payment so payment method must be updated
 */
export const patchTeam402Schema = z.unknown();

/**
 * @description You do not have permission to access this resource.\nNot authorized to update the team. Must be an OWNER.
 */
export const patchTeam403Schema = z.unknown();

/**
 * @description Owner does not have protection add-on\nAdvanced Deployment Protection is not available for the user plan
 */
export const patchTeam428Schema = z.unknown();

export const patchTeamMutationResponseSchema = z.lazy(() => patchTeam200Schema);

export const getTeamsQueryParamsSchema = z
  .object({
    limit: z.coerce.number().describe('Maximum number of Teams which may be returned.').optional(),
    since: z.coerce
      .number()
      .describe('Timestamp (in milliseconds) to only include Teams created since then.')
      .optional(),
    until: z.coerce
      .number()
      .describe('Timestamp (in milliseconds) to only include Teams created until then.')
      .optional()
  })
  .optional();

/**
 * @description A paginated list of teams.
 */
export const getTeams200Schema = z.unknown();

/**
 * @description One of the provided values in the request query is invalid.
 */
export const getTeams400Schema = z.unknown();

export const getTeams401Schema = z.unknown();

/**
 * @description You do not have permission to access this resource.
 */
export const getTeams403Schema = z.unknown();

export const getTeamsQueryResponseSchema = z.lazy(() => getTeams200Schema);

/**
 * @description The team was created successfully
 */
export const createTeam200Schema = z.unknown();

/**
 * @description One of the provided values in the request body is invalid.\nThe slug is already in use
 */
export const createTeam400Schema = z.unknown();

export const createTeam401Schema = z.unknown();

/**
 * @description You do not have permission to access this resource.
 */
export const createTeam403Schema = z.unknown();

export const createTeamMutationResponseSchema = z.lazy(() => createTeam200Schema);

export const deleteTeamPathParamsSchema = z.object({
  teamId: z.string().describe('The Team identifier to perform the request on behalf of.')
});

export const deleteTeamQueryParamsSchema = z
  .object({
    newDefaultTeamId: z.string().describe('Id of the team to be set as the new default team').optional(),
    slug: z.string().describe('The Team slug to perform the request on behalf of.').optional()
  })
  .optional();

/**
 * @description The Team was successfully deleted
 */
export const deleteTeam200Schema = z.unknown();

/**
 * @description One of the provided values in the request body is invalid.\nOne of the provided values in the request query is invalid.
 */
export const deleteTeam400Schema = z.unknown();

export const deleteTeam401Schema = z.unknown();

export const deleteTeam402Schema = z.unknown();

/**
 * @description You do not have permission to access this resource.\nThe authenticated user can\'t access the team
 */
export const deleteTeam403Schema = z.unknown();

export const deleteTeam409Schema = z.unknown();

export const deleteTeamMutationResponseSchema = z.lazy(() => deleteTeam200Schema);

export const deleteTeamInviteCodePathParamsSchema = z.object({
  inviteId: z.string().describe('The Team invite code ID.'),
  teamId: z.string()
});

/**
 * @description Successfully deleted Team invite code.
 */
export const deleteTeamInviteCode200Schema = z.unknown();

/**
 * @description One of the provided values in the request query is invalid.
 */
export const deleteTeamInviteCode400Schema = z.unknown();

export const deleteTeamInviteCode401Schema = z.unknown();

/**
 * @description You do not have permission to access this resource.\nInvite managed by directory sync\nNot authorized to access this team.
 */
export const deleteTeamInviteCode403Schema = z.unknown();

/**
 * @description Team invite code not found.
 */
export const deleteTeamInviteCode404Schema = z.unknown();

export const deleteTeamInviteCodeMutationResponseSchema = z.lazy(() => deleteTeamInviteCode200Schema);

export const uploadFileQueryParamsSchema = z
  .object({
    teamId: z.string().describe('The Team identifier to perform the request on behalf of.').optional(),
    slug: z.string().describe('The Team slug to perform the request on behalf of.').optional()
  })
  .optional();

export const uploadFileHeaderParamsSchema = z
  .object({
    'Content-Length': z.coerce.number().describe('The file size in bytes').optional(),
    'x-vercel-digest': z.string().max(40).describe('The file SHA1 used to check the integrity').optional(),
    'x-now-digest': z.string().max(40).describe('The file SHA1 used to check the integrity').optional(),
    'x-now-size': z.coerce.number().describe('The file size as an alternative to `Content-Length`').optional(),
    'x-internal-v0-token': z
      .string()
      .describe(
        'Shared secret token set by v0 deployments. When present and valid, the API applies an extended rate limit.'
      )
      .optional()
  })
  .optional();

/**
 * @description File already uploaded\nFile successfully uploaded
 */
export const uploadFile200Schema = z.unknown();

/**
 * @description One of the provided values in the headers is invalid\nDigest is not valid\nFile size is not valid
 */
export const uploadFile400Schema = z.unknown();

export const uploadFile401Schema = z.unknown();

/**
 * @description You do not have permission to access this resource.
 */
export const uploadFile403Schema = z.unknown();

export const uploadFileMutationResponseSchema = z.lazy(() => uploadFile200Schema);

export const listAuthTokens200Schema = z.unknown();

export const listAuthTokens400Schema = z.unknown();

export const listAuthTokens401Schema = z.unknown();

/**
 * @description You do not have permission to access this resource.
 */
export const listAuthTokens403Schema = z.unknown();

export const listAuthTokensQueryResponseSchema = z.lazy(() => listAuthTokens200Schema);

export const createAuthTokenQueryParamsSchema = z
  .object({
    teamId: z.string().describe('The Team identifier to perform the request on behalf of.').optional(),
    slug: z.string().describe('The Team slug to perform the request on behalf of.').optional()
  })
  .optional();

/**
 * @description Successful response.
 */
export const createAuthToken200Schema = z.unknown();

/**
 * @description One of the provided values in the request body is invalid.
 */
export const createAuthToken400Schema = z.unknown();

export const createAuthToken401Schema = z.unknown();

/**
 * @description You do not have permission to access this resource.
 */
export const createAuthToken403Schema = z.unknown();

export const createAuthTokenMutationResponseSchema = z.lazy(() => createAuthToken200Schema);

export const getAuthTokenPathParamsSchema = z.object({
  tokenId: z
    .string()
    .describe(
      'The identifier of the token to retrieve. The special value \\"current\\" may be supplied, which returns the metadata for the token that the current HTTP request is authenticated with.'
    )
});

/**
 * @description Successful response.
 */
export const getAuthToken200Schema = z.unknown();

/**
 * @description One of the provided values in the request query is invalid.
 */
export const getAuthToken400Schema = z.unknown();

export const getAuthToken401Schema = z.unknown();

/**
 * @description You do not have permission to access this resource.
 */
export const getAuthToken403Schema = z.unknown();

/**
 * @description Token not found with the requested `tokenId`.
 */
export const getAuthToken404Schema = z.unknown();

export const getAuthTokenQueryResponseSchema = z.lazy(() => getAuthToken200Schema);

export const deleteAuthTokenPathParamsSchema = z.object({
  tokenId: z
    .string()
    .describe(
      'The identifier of the token to invalidate. The special value \\"current\\" may be supplied, which invalidates the token that the HTTP request was authenticated with.'
    )
});

/**
 * @description Authentication token successfully deleted.
 */
export const deleteAuthToken200Schema = z.unknown();

/**
 * @description One of the provided values in the request query is invalid.
 */
export const deleteAuthToken400Schema = z.unknown();

export const deleteAuthToken401Schema = z.unknown();

/**
 * @description You do not have permission to access this resource.
 */
export const deleteAuthToken403Schema = z.unknown();

/**
 * @description Token not found with the requested `tokenId`.
 */
export const deleteAuthToken404Schema = z.unknown();

export const deleteAuthTokenMutationResponseSchema = z.lazy(() => deleteAuthToken200Schema);

/**
 * @description Successful response.
 */
export const getAuthUser200Schema = z.unknown();

export const getAuthUser400Schema = z.unknown();

export const getAuthUser401Schema = z.unknown();

/**
 * @description You do not have permission to access this resource.
 */
export const getAuthUser403Schema = z.unknown();

export const getAuthUser409Schema = z.unknown();

export const getAuthUserQueryResponseSchema = z.lazy(() => getAuthUser200Schema);

/**
 * @description Response indicating that the User deletion process has been initiated, and a confirmation email has been sent.
 */
export const requestDelete202Schema = z.unknown();

/**
 * @description One of the provided values in the request body is invalid.
 */
export const requestDelete400Schema = z.unknown();

export const requestDelete401Schema = z.unknown();

export const requestDelete402Schema = z.unknown();

/**
 * @description You do not have permission to access this resource.
 */
export const requestDelete403Schema = z.unknown();

export const requestDeleteMutationResponseSchema = z.lazy(() => requestDelete202Schema);

export const createWebhookQueryParamsSchema = z
  .object({
    teamId: z.string().describe('The Team identifier to perform the request on behalf of.').optional(),
    slug: z.string().describe('The Team slug to perform the request on behalf of.').optional()
  })
  .optional();

export const createWebhook200Schema = z.unknown();

/**
 * @description One of the provided values in the request body is invalid.
 */
export const createWebhook400Schema = z.unknown();

export const createWebhook401Schema = z.unknown();

/**
 * @description You do not have permission to access this resource.
 */
export const createWebhook403Schema = z.unknown();

export const createWebhookMutationResponseSchema = z.lazy(() => createWebhook200Schema);

export const getWebhooksQueryParamsSchema = z
  .object({
    projectId: z
      .string()
      .regex(/^[a-zA-z0-9_]+$/)
      .optional(),
    teamId: z.string().describe('The Team identifier to perform the request on behalf of.').optional(),
    slug: z.string().describe('The Team slug to perform the request on behalf of.').optional()
  })
  .optional();

export const getWebhooks200Schema = z.unknown();

/**
 * @description One of the provided values in the request query is invalid.
 */
export const getWebhooks400Schema = z.unknown();

export const getWebhooks401Schema = z.unknown();

/**
 * @description You do not have permission to access this resource.
 */
export const getWebhooks403Schema = z.unknown();

export const getWebhooksQueryResponseSchema = z.lazy(() => getWebhooks200Schema);

export const getWebhookPathParamsSchema = z.object({
  id: z.string()
});

export const getWebhookQueryParamsSchema = z
  .object({
    teamId: z.string().describe('The Team identifier to perform the request on behalf of.').optional(),
    slug: z.string().describe('The Team slug to perform the request on behalf of.').optional()
  })
  .optional();

export const getWebhook200Schema = z.unknown();

/**
 * @description One of the provided values in the request query is invalid.
 */
export const getWebhook400Schema = z.unknown();

export const getWebhook401Schema = z.unknown();

/**
 * @description You do not have permission to access this resource.
 */
export const getWebhook403Schema = z.unknown();

export const getWebhookQueryResponseSchema = z.lazy(() => getWebhook200Schema);

export const deleteWebhookPathParamsSchema = z.object({
  id: z.string()
});

export const deleteWebhookQueryParamsSchema = z
  .object({
    teamId: z.string().describe('The Team identifier to perform the request on behalf of.').optional(),
    slug: z.string().describe('The Team slug to perform the request on behalf of.').optional()
  })
  .optional();

export const deleteWebhook204Schema = z.unknown();

/**
 * @description One of the provided values in the request query is invalid.
 */
export const deleteWebhook400Schema = z.unknown();

export const deleteWebhook401Schema = z.unknown();

/**
 * @description You do not have permission to access this resource.
 */
export const deleteWebhook403Schema = z.unknown();

export const deleteWebhookMutationResponseSchema = z.lazy(() => deleteWebhook204Schema);

export const listDeploymentAliasesPathParamsSchema = z.object({
  id: z.string().describe('The ID of the deployment the aliases should be listed for')
});

export const listDeploymentAliasesQueryParamsSchema = z
  .object({
    teamId: z.string().describe('The Team identifier to perform the request on behalf of.').optional(),
    slug: z.string().describe('The Team slug to perform the request on behalf of.').optional()
  })
  .optional();

/**
 * @description The list of aliases assigned to the deployment
 */
export const listDeploymentAliases200Schema = z.unknown();

/**
 * @description One of the provided values in the request query is invalid.
 */
export const listDeploymentAliases400Schema = z.unknown();

export const listDeploymentAliases401Schema = z.unknown();

/**
 * @description You do not have permission to access this resource.
 */
export const listDeploymentAliases403Schema = z.unknown();

/**
 * @description The deployment was not found
 */
export const listDeploymentAliases404Schema = z.unknown();

export const listDeploymentAliasesQueryResponseSchema = z.lazy(() => listDeploymentAliases200Schema);

export const assignAliasPathParamsSchema = z.object({
  id: z.string().describe('The ID of the deployment the aliases should be listed for')
});

export const assignAliasQueryParamsSchema = z
  .object({
    teamId: z.string().describe('The Team identifier to perform the request on behalf of.').optional(),
    slug: z.string().describe('The Team slug to perform the request on behalf of.').optional()
  })
  .optional();

/**
 * @description The alias was successfully assigned to the deployment
 */
export const assignAlias200Schema = z.unknown();

/**
 * @description One of the provided values in the request body is invalid.\nOne of the provided values in the request query is invalid.\nThe cert for the provided alias is not ready\nThe deployment is not READY and can not be aliased\nThe supplied alias is invalid
 */
export const assignAlias400Schema = z.unknown();

export const assignAlias401Schema = z.unknown();

/**
 * @description The account was soft-blocked for an unhandled reason.\nThe account is missing a payment so payment method must be updated
 */
export const assignAlias402Schema = z.unknown();

/**
 * @description You do not have permission to access this resource.\nIf no .vercel.app alias exists then we fail (nothing to mirror)
 */
export const assignAlias403Schema = z.unknown();

/**
 * @description The domain used for the alias was not found\nThe deployment was not found
 */
export const assignAlias404Schema = z.unknown();

/**
 * @description The provided alias is already assigned to the given deployment\nThe domain is not allowed to be used
 */
export const assignAlias409Schema = z.unknown();

export const assignAliasMutationResponseSchema = z.lazy(() => assignAlias200Schema);

export const listAliasesQueryParamsSchema = z
  .object({
    domain: z
      .union([z.array(z.string()).max(20), z.string()])
      .describe('Get only aliases of the given domain name')
      .optional(),
    from: z.coerce.number().describe('Get only aliases created after the provided timestamp').optional(),
    limit: z.coerce.number().describe('Maximum number of aliases to list from a request').optional(),
    projectId: z.string().describe('Filter aliases from the given `projectId`').optional(),
    since: z.coerce.number().describe('Get aliases created after this JavaScript timestamp').optional(),
    until: z.coerce.number().describe('Get aliases created before this JavaScript timestamp').optional(),
    rollbackDeploymentId: z
      .string()
      .describe('Get aliases that would be rolled back for the given deployment')
      .optional(),
    teamId: z.string().describe('The Team identifier to perform the request on behalf of.').optional(),
    slug: z.string().describe('The Team slug to perform the request on behalf of.').optional()
  })
  .optional();

/**
 * @description The paginated list of aliases
 */
export const listAliases200Schema = z.unknown();

/**
 * @description One of the provided values in the request query is invalid.
 */
export const listAliases400Schema = z.unknown();

export const listAliases401Schema = z.unknown();

/**
 * @description You do not have permission to access this resource.
 */
export const listAliases403Schema = z.unknown();

export const listAliases404Schema = z.unknown();

export const listAliasesQueryResponseSchema = z.lazy(() => listAliases200Schema);

export const getAliasPathParamsSchema = z.object({
  idOrAlias: z.string().describe('The alias or alias ID to be retrieved')
});

export const getAliasQueryParamsSchema = z
  .object({
    from: z.coerce.number().describe('Get the alias only if it was created after the provided timestamp').optional(),
    projectId: z.string().describe('Get the alias only if it is assigned to the provided project ID').optional(),
    since: z.coerce
      .number()
      .describe('Get the alias only if it was created after this JavaScript timestamp')
      .optional(),
    until: z.coerce
      .number()
      .describe('Get the alias only if it was created before this JavaScript timestamp')
      .optional(),
    teamId: z.string().describe('The Team identifier to perform the request on behalf of.').optional(),
    slug: z.string().describe('The Team slug to perform the request on behalf of.').optional()
  })
  .optional();

/**
 * @description The alias information
 */
export const getAlias200Schema = z.unknown();

/**
 * @description One of the provided values in the request query is invalid.
 */
export const getAlias400Schema = z.unknown();

export const getAlias401Schema = z.unknown();

/**
 * @description You do not have permission to access this resource.
 */
export const getAlias403Schema = z.unknown();

/**
 * @description The alias was not found
 */
export const getAlias404Schema = z.unknown();

export const getAliasQueryResponseSchema = z.lazy(() => getAlias200Schema);

export const deleteAliasPathParamsSchema = z.object({
  aliasId: z.string().describe('The ID or alias that will be removed')
});

export const deleteAliasQueryParamsSchema = z
  .object({
    teamId: z.string().describe('The Team identifier to perform the request on behalf of.').optional(),
    slug: z.string().describe('The Team slug to perform the request on behalf of.').optional()
  })
  .optional();

/**
 * @description The alias was successfully removed
 */
export const deleteAlias200Schema = z.unknown();

/**
 * @description One of the provided values in the request query is invalid.
 */
export const deleteAlias400Schema = z.unknown();

export const deleteAlias401Schema = z.unknown();

/**
 * @description You do not have permission to access this resource.
 */
export const deleteAlias403Schema = z.unknown();

/**
 * @description The alias was not found
 */
export const deleteAlias404Schema = z.unknown();

export const deleteAliasMutationResponseSchema = z.lazy(() => deleteAlias200Schema);

export const patchUrlProtectionBypassPathParamsSchema = z.object({
  id: z.string().describe('The alias or deployment ID')
});

export const patchUrlProtectionBypassQueryParamsSchema = z
  .object({
    teamId: z.string().describe('The Team identifier to perform the request on behalf of.').optional(),
    slug: z.string().describe('The Team slug to perform the request on behalf of.').optional()
  })
  .optional();

export const patchUrlProtectionBypass200Schema = z.unknown();

/**
 * @description One of the provided values in the request body is invalid.\nOne of the provided values in the request query is invalid.
 */
export const patchUrlProtectionBypass400Schema = z.unknown();

export const patchUrlProtectionBypass401Schema = z.unknown();

/**
 * @description You do not have permission to access this resource.
 */
export const patchUrlProtectionBypass403Schema = z.unknown();

export const patchUrlProtectionBypass404Schema = z.unknown();

export const patchUrlProtectionBypass409Schema = z.unknown();

export const patchUrlProtectionBypass428Schema = z.unknown();

export const patchUrlProtectionBypass500Schema = z.unknown();

export const patchUrlProtectionBypassMutationResponseSchema = z.lazy(() => patchUrlProtectionBypass200Schema);

export const listCerts200Schema = z.unknown();

export const listCerts400Schema = z.unknown();

export const listCerts401Schema = z.unknown();

/**
 * @description You do not have permission to access this resource.
 */
export const listCerts403Schema = z.unknown();

export const listCertsQueryResponseSchema = z.lazy(() => listCerts200Schema);

export const getCertByIdPathParamsSchema = z.object({
  id: z.string().describe('The cert id')
});

export const getCertByIdQueryParamsSchema = z
  .object({
    teamId: z.string().describe('The Team identifier to perform the request on behalf of.').optional(),
    slug: z.string().describe('The Team slug to perform the request on behalf of.').optional()
  })
  .optional();

export const getCertById200Schema = z.unknown();

/**
 * @description One of the provided values in the request query is invalid.
 */
export const getCertById400Schema = z.unknown();

export const getCertById401Schema = z.unknown();

/**
 * @description You do not have permission to access this resource.
 */
export const getCertById403Schema = z.unknown();

export const getCertById404Schema = z.unknown();

export const getCertByIdQueryResponseSchema = z.lazy(() => getCertById200Schema);

export const removeCertPathParamsSchema = z.object({
  id: z.string().describe('The cert id to remove')
});

export const removeCertQueryParamsSchema = z
  .object({
    teamId: z.string().describe('The Team identifier to perform the request on behalf of.').optional(),
    slug: z.string().describe('The Team slug to perform the request on behalf of.').optional()
  })
  .optional();

export const removeCert200Schema = z.unknown();

/**
 * @description One of the provided values in the request query is invalid.
 */
export const removeCert400Schema = z.unknown();

export const removeCert401Schema = z.unknown();

/**
 * @description You do not have permission to access this resource.
 */
export const removeCert403Schema = z.unknown();

export const removeCert404Schema = z.unknown();

export const removeCertMutationResponseSchema = z.lazy(() => removeCert200Schema);

export const issueCertQueryParamsSchema = z
  .object({
    teamId: z.string().describe('The Team identifier to perform the request on behalf of.').optional(),
    slug: z.string().describe('The Team slug to perform the request on behalf of.').optional()
  })
  .optional();

export const issueCert200Schema = z.unknown();

/**
 * @description One of the provided values in the request body is invalid.
 */
export const issueCert400Schema = z.unknown();

export const issueCert401Schema = z.unknown();

/**
 * @description The account was soft-blocked for an unhandled reason.\nThe account is missing a payment so payment method must be updated
 */
export const issueCert402Schema = z.unknown();

/**
 * @description You do not have permission to access this resource.
 */
export const issueCert403Schema = z.unknown();

export const issueCert404Schema = z.unknown();

export const issueCert449Schema = z.unknown();

export const issueCert500Schema = z.unknown();

export const issueCertMutationResponseSchema = z.lazy(() => issueCert200Schema);

export const uploadCertQueryParamsSchema = z
  .object({
    teamId: z.string().describe('The Team identifier to perform the request on behalf of.').optional(),
    slug: z.string().describe('The Team slug to perform the request on behalf of.').optional()
  })
  .optional();

export const uploadCert200Schema = z.unknown();

/**
 * @description One of the provided values in the request body is invalid.
 */
export const uploadCert400Schema = z.unknown();

export const uploadCert401Schema = z.unknown();

/**
 * @description This feature is only available for Enterprise customers.
 */
export const uploadCert402Schema = z.unknown();

/**
 * @description You do not have permission to access this resource.
 */
export const uploadCert403Schema = z.unknown();

export const uploadCertMutationResponseSchema = z.lazy(() => uploadCert200Schema);

export const listDeploymentFilesPathParamsSchema = z.object({
  id: z.string().describe('The unique deployment identifier')
});

export const listDeploymentFilesQueryParamsSchema = z
  .object({
    teamId: z.string().describe('The Team identifier to perform the request on behalf of.').optional(),
    slug: z.string().describe('The Team slug to perform the request on behalf of.').optional()
  })
  .optional();

/**
 * @description Retrieved the file tree successfully
 */
export const listDeploymentFiles200Schema = z.unknown();

/**
 * @description One of the provided values in the request query is invalid.
 */
export const listDeploymentFiles400Schema = z.unknown();

export const listDeploymentFiles401Schema = z.unknown();

/**
 * @description You do not have permission to access this resource.
 */
export const listDeploymentFiles403Schema = z.unknown();

/**
 * @description File tree not found\nDeployment not found
 */
export const listDeploymentFiles404Schema = z.unknown();

export const listDeploymentFilesQueryResponseSchema = z.lazy(() => listDeploymentFiles200Schema);

export const getDeploymentFileContentsPathParamsSchema = z.object({
  id: z.string().describe('The unique deployment identifier'),
  fileId: z.string().describe('The unique file identifier')
});

export const getDeploymentFileContentsQueryParamsSchema = z
  .object({
    path: z.string().describe('Path to the file to fetch (only for Git deployments)').optional(),
    teamId: z.string().describe('The Team identifier to perform the request on behalf of.').optional(),
    slug: z.string().describe('The Team slug to perform the request on behalf of.').optional()
  })
  .optional();

/**
 * @description One of the provided values in the request query is invalid.
 */
export const getDeploymentFileContents400Schema = z.unknown();

export const getDeploymentFileContents401Schema = z.unknown();

/**
 * @description You do not have permission to access this resource.
 */
export const getDeploymentFileContents403Schema = z.unknown();

/**
 * @description File not found\nDeployment not found
 */
export const getDeploymentFileContents404Schema = z.unknown();

/**
 * @description Invalid API version.
 */
export const getDeploymentFileContents410Schema = z.unknown();

export const getDeploymentFileContentsQueryResponseSchema = z.unknown();

export const getDeploymentsQueryParamsSchema = z
  .object({
    app: z.string().describe('Name of the deployment.').optional(),
    from: z.coerce
      .number()
      .describe('Gets the deployment created after this Date timestamp. (default: current time)')
      .optional(),
    limit: z.coerce.number().describe('Maximum number of deployments to list from a request.').optional(),
    projectId: z.string().describe('Filter deployments from the given ID or name.').optional(),
    target: z.string().describe('Filter deployments based on the environment.').optional(),
    to: z.coerce
      .number()
      .describe('Gets the deployment created before this Date timestamp. (default: current time)')
      .optional(),
    users: z.string().describe('Filter out deployments based on users who have created the deployment.').optional(),
    since: z.coerce.number().describe('Get Deployments created after this JavaScript timestamp.').optional(),
    until: z.coerce.number().describe('Get Deployments created before this JavaScript timestamp.').optional(),
    state: z
      .string()
      .describe(
        'Filter deployments based on their state (`BUILDING`, `ERROR`, `INITIALIZING`, `QUEUED`, `READY`, `CANCELED`)'
      )
      .optional(),
    rollbackCandidate: z.boolean().describe('Filter deployments based on their rollback candidacy').optional(),
    branch: z.string().describe('Filter deployments based on the branch name').optional(),
    sha: z.string().describe('Filter deployments based on the SHA').optional(),
    teamId: z.string().describe('The Team identifier to perform the request on behalf of.').optional(),
    slug: z.string().describe('The Team slug to perform the request on behalf of.').optional()
  })
  .optional();

export const getDeployments200Schema = z.unknown();

/**
 * @description One of the provided values in the request query is invalid.
 */
export const getDeployments400Schema = z.unknown();

export const getDeployments401Schema = z.unknown();

/**
 * @description You do not have permission to access this resource.
 */
export const getDeployments403Schema = z.unknown();

export const getDeployments404Schema = z.unknown();

export const getDeployments422Schema = z.unknown();

export const getDeploymentsQueryResponseSchema = z.lazy(() => getDeployments200Schema);

export const deleteDeploymentPathParamsSchema = z.object({
  id: z.string().describe('The ID of the deployment to be deleted')
});

export const deleteDeploymentQueryParamsSchema = z
  .object({
    url: z.string().describe('A Deployment or Alias URL. In case it is passed, the ID will be ignored').optional(),
    teamId: z.string().describe('The Team identifier to perform the request on behalf of.').optional(),
    slug: z.string().describe('The Team slug to perform the request on behalf of.').optional()
  })
  .optional();

/**
 * @description The deployment was successfully deleted
 */
export const deleteDeployment200Schema = z.unknown();

/**
 * @description One of the provided values in the request query is invalid.
 */
export const deleteDeployment400Schema = z.unknown();

export const deleteDeployment401Schema = z.unknown();

/**
 * @description You do not have permission to access this resource.
 */
export const deleteDeployment403Schema = z.unknown();

/**
 * @description The deployment was not found
 */
export const deleteDeployment404Schema = z.unknown();

export const deleteDeploymentMutationResponseSchema = z.lazy(() => deleteDeployment200Schema);

export const getSecretsQueryParamsSchema = z
  .object({
    id: z.string().describe('Filter out secrets based on comma separated secret ids.').optional(),
    projectId: z.string().describe('Filter out secrets that belong to a project.').optional(),
    teamId: z.string().describe('The Team identifier to perform the request on behalf of.').optional(),
    slug: z.string().describe('The Team slug to perform the request on behalf of.').optional()
  })
  .optional();

/**
 * @description Successful response retrieving a list of secrets.
 */
export const getSecrets200Schema = z.unknown();

/**
 * @description One of the provided values in the request query is invalid.
 */
export const getSecrets400Schema = z.unknown();

export const getSecrets401Schema = z.unknown();

/**
 * @description You do not have permission to access this resource.
 */
export const getSecrets403Schema = z.unknown();

export const getSecrets410Schema = z.unknown();

export const getSecretsQueryResponseSchema = z.lazy(() => getSecrets200Schema);

export const createSecretPathParamsSchema = z.object({
  name: z.string()
});

export const createSecretQueryParamsSchema = z
  .object({
    teamId: z.string().describe('The Team identifier to perform the request on behalf of.').optional(),
    slug: z.string().describe('The Team slug to perform the request on behalf of.').optional()
  })
  .optional();

/**
 * @description Successful response showing the created secret.
 */
export const createSecret200Schema = z.unknown();

/**
 * @description One of the provided values in the request body is invalid.
 */
export const createSecret400Schema = z.unknown();

export const createSecret401Schema = z.unknown();

/**
 * @description The account was soft-blocked for an unhandled reason.\nThe account is missing a payment so payment method must be updated
 */
export const createSecret402Schema = z.unknown();

/**
 * @description You do not have permission to access this resource.
 */
export const createSecret403Schema = z.unknown();

export const createSecret410Schema = z.unknown();

export const createSecretMutationResponseSchema = z.lazy(() => createSecret200Schema);

export const renameSecretPathParamsSchema = z.object({
  name: z.string().describe('The name of the secret.')
});

export const renameSecretQueryParamsSchema = z
  .object({
    teamId: z.string().describe('The Team identifier to perform the request on behalf of.').optional(),
    slug: z.string().describe('The Team slug to perform the request on behalf of.').optional()
  })
  .optional();

export const renameSecret200Schema = z.unknown();

/**
 * @description One of the provided values in the request body is invalid.\nOne of the provided values in the request query is invalid.
 */
export const renameSecret400Schema = z.unknown();

export const renameSecret401Schema = z.unknown();

/**
 * @description You do not have permission to access this resource.
 */
export const renameSecret403Schema = z.unknown();

export const renameSecret410Schema = z.unknown();

export const renameSecretMutationResponseSchema = z.lazy(() => renameSecret200Schema);

export const getSecretPathParamsSchema = z.object({
  idOrName: z.string().describe('The name or the unique identifier to which the secret belongs to.')
});

export const getSecretQueryParamsSchema = z
  .object({
    decrypt: z
      .enum(['true', 'false'])
      .describe(
        'Whether to try to decrypt the value of the secret. Only works if `decryptable` has been set to `true` when the secret was created.'
      )
      .optional(),
    teamId: z.string().describe('The Team identifier to perform the request on behalf of.').optional(),
    slug: z.string().describe('The Team slug to perform the request on behalf of.').optional()
  })
  .optional();

/**
 * @description Successful response retrieving a secret.
 */
export const getSecret200Schema = z.unknown();

/**
 * @description One of the provided values in the request query is invalid.
 */
export const getSecret400Schema = z.unknown();

export const getSecret401Schema = z.unknown();

/**
 * @description You do not have permission to access this resource.
 */
export const getSecret403Schema = z.unknown();

export const getSecret404Schema = z.unknown();

export const getSecret410Schema = z.unknown();

export const getSecretQueryResponseSchema = z.lazy(() => getSecret200Schema);

export const deleteSecretPathParamsSchema = z.object({
  idOrName: z.string().describe('The name or the unique identifier to which the secret belongs to.')
});

export const deleteSecretQueryParamsSchema = z
  .object({
    teamId: z.string().describe('The Team identifier to perform the request on behalf of.').optional(),
    slug: z.string().describe('The Team slug to perform the request on behalf of.').optional()
  })
  .optional();

export const deleteSecret200Schema = z.unknown();

/**
 * @description One of the provided values in the request query is invalid.
 */
export const deleteSecret400Schema = z.unknown();

export const deleteSecret401Schema = z.unknown();

/**
 * @description You do not have permission to access this resource.
 */
export const deleteSecret403Schema = z.unknown();

export const deleteSecret410Schema = z.unknown();

export const deleteSecretMutationResponseSchema = z.lazy(() => deleteSecret200Schema);
