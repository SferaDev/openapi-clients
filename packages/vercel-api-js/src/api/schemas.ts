/**
 * Generated by @openapi-codegen
 *
 * @version 0.0.1
 */
/**
 * Enum containing the actions that can be performed against a resource. Group operations are included.
 */
export type ACLAction = 'create' | 'delete' | 'list' | 'read' | 'update';

export type FlagJSONValue =
  | string
  | number
  | boolean
  | FlagJSONValue[]
  | {
      [key: string]: FlagJSONValue;
    }
  | null;

/**
 * This object contains information related to the pagination of the current request, including the necessary parameters to get the next or previous page of data.
 */
export type Pagination = {
  /**
   * Amount of items in the current page.
   *
   * @example 20
   */
  count: number;
  /**
   * Timestamp that must be used to request the next page.
   *
   * @example 1540095775951
   */
  next: number | null;
  /**
   * Timestamp that must be used to request the previous page.
   *
   * @example 1540095775951
   */
  prev: number | null;
};

export type EdgeConfigItemValue =
  | string
  | number
  | boolean
  | {
      [key: string]: EdgeConfigItemValue;
    }
  | EdgeConfigItemValue[]
  | null;

/**
 * The EdgeConfig.
 */
export type EdgeConfigItem = {
  key: string;
  value: EdgeConfigItemValue;
  description?: string;
  edgeConfigId: string;
  createdAt: number;
  updatedAt: number;
};

/**
 * The EdgeConfig.
 */
export type EdgeConfigToken = {
  token: string;
  label: string;
  /**
   * This is not the token itself, but rather an id to identify the token by
   */
  id: string;
  edgeConfigId: string;
  createdAt: number;
};

/**
 * Array of events generated by the User.
 */
export type UserEvent = {
  /**
   * The unique identifier of the Event.
   *
   * @example uev_bfmMjiMnXfnPbT97dGdpJbCN
   */
  id: string;
  /**
   * The human-readable text of the Event.
   *
   * @example You logged in via GitHub
   */
  text: string;
  /**
   * A list of "entities" within the event `text`. Useful for enhancing the displayed text with additional styling and links.
   */
  entities: {
    /**
     * The type of entity.
     *
     * @example author
     */
    type:
      | 'author'
      | 'bitbucket_login'
      | 'bold'
      | 'deployment_host'
      | 'dns_record'
      | 'edge-config'
      | 'env_var_name'
      | 'flag'
      | 'flags-segment'
      | 'flags-settings'
      | 'git_link'
      | 'github_login'
      | 'gitlab_login'
      | 'hook_name'
      | 'integration'
      | 'link'
      | 'project_name'
      | 'scaling_rules'
      | 'store'
      | 'system'
      | 'target';
    /**
     * The index of where the entity begins within the `text` (inclusive).
     *
     * @example 0
     */
    start: number;
    /**
     * The index of where the entity ends within the `text` (non-inclusive).
     *
     * @example 3
     */
    end: number;
  }[];
  /**
   * Timestamp (in milliseconds) of when the event was generated.
   *
   * @example 1632859321020
   */
  createdAt: number;
  /**
   * Metadata for {@link userId}.
   */
  user?: {
    avatar: string;
    email: string;
    username: string;
    slug?: string;
    uid: string;
  };
  principal?:
    | {
        type?: 'user';
        avatar: string;
        email: string;
        slug?: string;
        uid: string;
        username: string;
      }
    | {
        type: 'app';
        clientId: string;
        name: string;
      };
  /**
   * Metadata for {@link viaIds}.
   */
  via?: (
    | {
        type?: 'user';
        avatar: string;
        email: string;
        slug?: string;
        uid: string;
        username: string;
      }
    | {
        type: 'app';
        clientId: string;
        name: string;
      }
  )[];
  /**
   * When the principal who generated the event is a user, this is their ID; otherwise, it is empty.
   *
   * @example zTuNVUXEAvvnNN3IaqinkyMw
   */
  userId: string;
  /**
   * The ID of the principal who generated the event. The principal is typically a user, but it could also be an app, an integration, etc. The principal may have delegated its authority to an acting party, and so {@link viaIds} should be checked as well.
   */
  principalId: string;
  /**
   * If the principal delegated its authority (for example, a user delegating to an app), then this array contains the ID of the current actor. For example, if `principalId` is "user123" and `viaIds` is `["app456"]`, we can say the event was triggered by - "app456 on behalf of user123", or - "user123 via app4556". Both are equivalent. Arbitrarily long chains of delegation can be represented. For example, if `principalId` is "user123" and `viaIds` is `["service1", "service2"]`, we can say the event was triggered by "user123 via service1 via service2".
   */
  viaIds?: string[];
  payload?:
    | Record<string, any>
    | {
        action: 'created' | 'updated' | 'deleted' | 'archived' | 'unarchived';
        id: string;
        slug: string;
        projectId: string;
      }
    | {
        accessGroup: {
          id: string;
          name: string;
        };
      }
    | {
        author: string;
        accessGroup: {
          id: string;
          name: string;
        };
      }
    | {
        accessGroup: {
          id: string;
          name?: string;
        };
        user: {
          id: string;
          username?: string;
        };
        directoryType?: string;
      }
    | {
        accessGroup: {
          id: string;
          name: string;
        };
        project: {
          id: string;
          name?: string;
        };
        next_role?: string | null;
        previous_role?: string;
      }
    | {
        alias?: string;
        deployment?: {
          id: string;
          name: string;
          url: string;
          meta: {
            [key: string]: string;
          };
        } | null;
        ruleCount?: number;
        deploymentUrl?: string;
        aliasId?: string;
        deploymentId?: string | null;
        oldDeploymentId?: string | null;
        redirect?: string;
        redirectStatusCode?: number | null;
        target?: string | null;
        system?: boolean;
        aliasUpdatedAt?: number;
      }
    | {
        aliasId?: string;
        alias?: string;
        projectName?: string;
      }
    | {
        alias?: string;
      }
    | {
        alias?: string;
        userId?: string;
        username?: string;
      }
    | {
        alias?: string;
        aliasId?: string;
        userId?: string;
        username?: string;
      }
    | {
        projectName: string;
        alias: string;
        action: 'created' | 'removed';
      }
    | {
        alias?: string;
        email?: string;
        username?: string;
      }
    | {
        alias?: string;
        email?: string;
      }
    | {
        name?: string;
        alias: string;
        oldTeam?: {
          name: string;
        };
        newTeam?: {
          name: string;
        };
      }
    | {
        name?: string;
        alias: string;
        aliasId: string;
        deploymentId: string | null;
      }
    | {
        alias: string;
        deploymentUrl: string;
      }
    | {
        projectName: string;
        autoExposeSystemEnvs: boolean;
      }
    | {
        avatar?: string;
      }
    | {
        cn?: string;
        cns?: string[];
        custom: boolean;
        id?: string;
      }
    | {
        cn?: string;
        cns?: string[];
        id?: string;
      }
    | {
        id: string;
        oldTeam?: {
          name: string;
        };
        newTeam?: {
          name: string;
        };
      }
    | {
        src: string;
        dst: string;
      }
    | {
        id: string;
        cn?: string;
        cns?: string[];
      }
    | {
        cn?: string;
        cns?: string[];
      }
    | {
        reason?: string;
        suffix: string;
      }
    | {
        status: string;
        suffix: string;
      }
    | {
        suffix: string;
      }
    | {
        team: {
          id: string;
          name: string;
        };
        configuration: {
          id: string;
          name?: string;
        };
        project: {
          id: string;
          name?: string;
        };
        buildsEnabled?: boolean;
      }
    | {
        team: {
          id: string;
          name: string;
        };
        configuration: {
          id: string;
          name?: string;
        };
        project: {
          id: string;
          name?: string;
        };
        buildsEnabled?: boolean;
        passive?: boolean;
      }
    | {
        team: {
          id: string;
          name: string;
        };
        configuration: {
          id: string;
          name?: string;
        };
        project: {
          id: string;
          name?: string;
        };
      }
    | {
        team: {
          id: string;
          name: string;
        };
        configuration: {
          id: string;
          name?: string;
        };
        newName: string;
      }
    | {
        githubLogin: string;
      }
    | {
        gitlabLogin: string;
        gitlabEmail: string;
        gitlabName?: string;
      }
    | {
        bitbucketEmail: string;
        bitbucketLogin: string;
        bitbucketName?: string;
      }
    | {
        project: {
          name: string;
        };
        job: {
          deployHook: {
            createdAt: number;
            id: string;
            name: string;
            ref: string;
          };
          state: string;
        };
      }
    | {
        name?: string;
        alias?: string[];
        target?: string | null;
        deployment?: {
          id: string;
          name: string;
          url: string;
          meta: {
            [key: string]: string;
          };
        } | null;
        url: string;
        forced?: boolean;
        deploymentId?: string;
        plan?: string;
        project?: string;
        projectId?: string;
        regions?: string[];
        type?: string;
      }
    | {
        url: string;
        oldTeam?: {
          name: string;
        };
        newTeam?: {
          name: string;
        };
      }
    | {
        deployment: {
          id: string;
          name: string;
          url: string;
          meta: {
            [key: string]: string;
          };
        };
        deploymentId: string;
        url: string;
      }
    | {
        id: string;
        value: string;
        name: string;
        domain: string;
        type: string;
        mxPriority?: number;
      }
    | {
        id: string;
        domain: string;
      }
    | {
        id: string;
        value: string;
        name: string;
        domain: string;
        type: string;
      }
    | {
        name: string;
      }
    | {
        name: string;
        price: number;
        currency?: string;
      }
    | {
        name: string;
        cdnEnabled: boolean;
      }
    | {
        name: string;
        userId: string;
        teamId: string;
        ownerName: string;
      }
    | {
        name: string;
        oldTeam?: {
          name: string;
        };
        newTeam?: {
          name: string;
        };
      }
    | {
        domainId: string;
        name: string;
      }
    | {
        name: string;
        fromId: string | null;
        fromName: string | null;
      }
    | {
        name: string;
        destinationId: string | null;
        destinationName: string | null;
      }
    | {
        name: string;
        destinationId: string;
        destinationName: string;
      }
    | {
        renew?: boolean;
        domain: string;
      }
    | {
        name: string;
        price?: number;
        currency?: string;
      }
    | {
        sha: string;
        gitUserPlatform: string;
        projectName: string;
      }
    | {
        email: string;
        name: string;
      }
    | {
        key?: string;
        projectId?: string;
        projectName?: string;
        target?: string | string[];
        id?: string;
        gitBranch?: string;
        edgeConfigId?: string | null;
        edgeConfigTokenId?: string | null;
        source?: string;
      }
    | {
        /**
         * The date when the Shared Env Var was created.
         *
         * @format date-time
         * @example 2021-02-10T13:11:49.180Z
         */
        created?: string;
        /**
         * The name of the Shared Env Var.
         *
         * @example my-api-key
         */
        key?: string;
        /**
         * The unique identifier of the owner (team) the Shared Env Var was created for.
         *
         * @example team_LLHUOMOoDlqOp8wPE4kFo9pE
         */
        ownerId?: string | null;
        /**
         * The unique identifier of the Shared Env Var.
         *
         * @example env_XCG7t7AIHuO2SBA8667zNUiM
         */
        id?: string;
        /**
         * The unique identifier of the user who created the Shared Env Var.
         *
         * @example 2qDDuGFTWXBLDNnqZfWPDp1A
         */
        createdBy?: string | null;
        /**
         * The unique identifier of the user who deleted the Shared Env Var.
         *
         * @example 2qDDuGFTWXBLDNnqZfWPDp1A
         */
        deletedBy?: string | null;
        /**
         * The unique identifier of the user who last updated the Shared Env Var.
         *
         * @example 2qDDuGFTWXBLDNnqZfWPDp1A
         */
        updatedBy?: string | null;
        /**
         * Timestamp for when the Shared Env Var was created.
         *
         * @example 1609492210000
         */
        createdAt?: number;
        /**
         * Timestamp for when the Shared Env Var was (soft) deleted.
         *
         * @example 1609492210000
         */
        deletedAt?: number;
        /**
         * Timestamp for when the Shared Env Var was last updated.
         *
         * @example 1609492210000
         */
        updatedAt?: number;
        /**
         * The value of the Shared Env Var.
         */
        value?: string;
        /**
         * The unique identifiers of the projects which the Shared Env Var is linked to.
         *
         * @example prj_2WjyKQmM8ZnGcJsPWMrHRHrE
         * @example prj_2WjyKQmM8ZnGcJsPWMrasEFg
         */
        projectId?: string[];
        /**
         * The type of this cosmos doc instance, if blank, assume secret.
         *
         * @example encrypted
         */
        type?: 'system' | 'encrypted' | 'plain' | 'sensitive';
        /**
         * environments this env variable targets
         *
         * @example production
         */
        target?: ('production' | 'preview' | 'development')[];
        /**
         * whether or not this env varible applies to custom environments
         */
        applyToAllCustomEnvironments?: boolean;
        /**
         * whether or not this env variable is decrypted
         */
        decrypted?: boolean;
        /**
         * A user provided comment that describes what this Shared Env Var is for.
         */
        comment?: string;
        /**
         * The last editor full name or username.
         */
        lastEditedByDisplayName?: string;
        projectNames?: string[];
      }
    | {
        oldEnvVar?: {
          /**
           * The date when the Shared Env Var was created.
           *
           * @format date-time
           * @example 2021-02-10T13:11:49.180Z
           */
          created?: string;
          /**
           * The name of the Shared Env Var.
           *
           * @example my-api-key
           */
          key?: string;
          /**
           * The unique identifier of the owner (team) the Shared Env Var was created for.
           *
           * @example team_LLHUOMOoDlqOp8wPE4kFo9pE
           */
          ownerId?: string | null;
          /**
           * The unique identifier of the Shared Env Var.
           *
           * @example env_XCG7t7AIHuO2SBA8667zNUiM
           */
          id?: string;
          /**
           * The unique identifier of the user who created the Shared Env Var.
           *
           * @example 2qDDuGFTWXBLDNnqZfWPDp1A
           */
          createdBy?: string | null;
          /**
           * The unique identifier of the user who deleted the Shared Env Var.
           *
           * @example 2qDDuGFTWXBLDNnqZfWPDp1A
           */
          deletedBy?: string | null;
          /**
           * The unique identifier of the user who last updated the Shared Env Var.
           *
           * @example 2qDDuGFTWXBLDNnqZfWPDp1A
           */
          updatedBy?: string | null;
          /**
           * Timestamp for when the Shared Env Var was created.
           *
           * @example 1609492210000
           */
          createdAt?: number;
          /**
           * Timestamp for when the Shared Env Var was (soft) deleted.
           *
           * @example 1609492210000
           */
          deletedAt?: number;
          /**
           * Timestamp for when the Shared Env Var was last updated.
           *
           * @example 1609492210000
           */
          updatedAt?: number;
          /**
           * The value of the Shared Env Var.
           */
          value?: string;
          /**
           * The unique identifiers of the projects which the Shared Env Var is linked to.
           *
           * @example prj_2WjyKQmM8ZnGcJsPWMrHRHrE
           * @example prj_2WjyKQmM8ZnGcJsPWMrasEFg
           */
          projectId?: string[];
          /**
           * The type of this cosmos doc instance, if blank, assume secret.
           *
           * @example encrypted
           */
          type?: 'system' | 'encrypted' | 'plain' | 'sensitive';
          /**
           * environments this env variable targets
           *
           * @example production
           */
          target?: ('production' | 'preview' | 'development')[];
          /**
           * whether or not this env varible applies to custom environments
           */
          applyToAllCustomEnvironments?: boolean;
          /**
           * whether or not this env variable is decrypted
           */
          decrypted?: boolean;
          /**
           * A user provided comment that describes what this Shared Env Var is for.
           */
          comment?: string;
          /**
           * The last editor full name or username.
           */
          lastEditedByDisplayName?: string;
        };
        newEnvVar?: {
          /**
           * The date when the Shared Env Var was created.
           *
           * @format date-time
           * @example 2021-02-10T13:11:49.180Z
           */
          created?: string;
          /**
           * The name of the Shared Env Var.
           *
           * @example my-api-key
           */
          key?: string;
          /**
           * The unique identifier of the owner (team) the Shared Env Var was created for.
           *
           * @example team_LLHUOMOoDlqOp8wPE4kFo9pE
           */
          ownerId?: string | null;
          /**
           * The unique identifier of the Shared Env Var.
           *
           * @example env_XCG7t7AIHuO2SBA8667zNUiM
           */
          id?: string;
          /**
           * The unique identifier of the user who created the Shared Env Var.
           *
           * @example 2qDDuGFTWXBLDNnqZfWPDp1A
           */
          createdBy?: string | null;
          /**
           * The unique identifier of the user who deleted the Shared Env Var.
           *
           * @example 2qDDuGFTWXBLDNnqZfWPDp1A
           */
          deletedBy?: string | null;
          /**
           * The unique identifier of the user who last updated the Shared Env Var.
           *
           * @example 2qDDuGFTWXBLDNnqZfWPDp1A
           */
          updatedBy?: string | null;
          /**
           * Timestamp for when the Shared Env Var was created.
           *
           * @example 1609492210000
           */
          createdAt?: number;
          /**
           * Timestamp for when the Shared Env Var was (soft) deleted.
           *
           * @example 1609492210000
           */
          deletedAt?: number;
          /**
           * Timestamp for when the Shared Env Var was last updated.
           *
           * @example 1609492210000
           */
          updatedAt?: number;
          /**
           * The value of the Shared Env Var.
           */
          value?: string;
          /**
           * The unique identifiers of the projects which the Shared Env Var is linked to.
           *
           * @example prj_2WjyKQmM8ZnGcJsPWMrHRHrE
           * @example prj_2WjyKQmM8ZnGcJsPWMrasEFg
           */
          projectId?: string[];
          /**
           * The type of this cosmos doc instance, if blank, assume secret.
           *
           * @example encrypted
           */
          type?: 'system' | 'encrypted' | 'plain' | 'sensitive';
          /**
           * environments this env variable targets
           *
           * @example production
           */
          target?: ('production' | 'preview' | 'development')[];
          /**
           * whether or not this env varible applies to custom environments
           */
          applyToAllCustomEnvironments?: boolean;
          /**
           * whether or not this env variable is decrypted
           */
          decrypted?: boolean;
          /**
           * A user provided comment that describes what this Shared Env Var is for.
           */
          comment?: string;
          /**
           * The last editor full name or username.
           */
          lastEditedByDisplayName?: string;
        };
        updateDiff?: {
          id: string;
          key?: string;
          newKey?: string;
          oldTarget?: ('production' | 'preview' | 'development')[];
          newTarget?: ('production' | 'preview' | 'development')[];
          oldType?: string;
          newType?: string;
          oldProjects?: {
            projectName?: string;
            projectId: string;
          }[];
          newProjects?: {
            projectName?: string;
            projectId: string;
          }[];
          changedValue: boolean;
        };
      }
    | {
        projectId: string;
        restore: boolean;
        configVersion: number;
        configChangeCount: number;
        configChanges: Record<string, any>[];
      }
    | {
        projectId: string;
        scope: string;
        source: string;
      }
    | {
        integrationId: string;
        integrationSlug: string;
        integrationName: string;
      }
    | {
        userId: string;
        integrationId: string;
        configurationId: string;
        integrationSlug: string;
        integrationName?: string;
        newOwner: {
          abuse?: {
            /**
             * Since June 2023
             */
            blockHistory?: {
              action: 'hard-blocked' | 'soft-blocked' | 'unblocked';
              createdAt: number;
              caseId?: string;
              reason: string;
              actor?: string;
              statusCode?: number;
              comment?: string;
            }[];
            /**
             * Since March 2022. Helps abuse checks by tracking git auths. Format: `<platform>:<detail>:<value>`
             */
            gitAuthHistory?: string[];
            /**
             * (scanner history). Since November 2021. First element is newest.
             */
            history?: {
              scanner: string;
              reason: string;
              by: string;
              byId: string;
              at: number;
            }[];
            /**
             * Since September 2023. How often did this owner trigger an actual git lineage deploy block?
             */
            gitLineageBlocks?: number;
            /**
             * Since September 2023. How often did this owner trigger a git lineage deploy block dry run?
             */
            gitLineageBlocksDry?: number;
            /**
             * Since November 2021. Guides the abuse scanner in build container.
             */
            scanner?: string;
            /**
             * Since November 2021
             */
            updatedAt?: number;
            creationUserAgent?: string;
            creationIp?: string;
            removedPhoneNumbers?: string;
          };
          acceptanceState?: string;
          acceptedAt?: number;
          avatar?: string;
          billing: {
            plan: 'pro' | 'enterprise' | 'hobby';
          };
          blocked: number | null;
          blockReason?: string;
          created?: number;
          createdAt: number;
          credentials?: (
            | {
                type: 'gitlab' | 'bitbucket' | 'google' | 'github-oauth' | 'github-app';
                id: string;
              }
            | {
                type: 'github-oauth-custom-host' | 'github-app-custom-host';
                host: string;
                id: string;
              }
          )[];
          customerId?: string | null;
          orbCustomerId?: string | null;
          dataCache?: {
            excessBillingEnabled?: boolean;
          };
          deletedAt?: number | null;
          deploymentSecret: string;
          dismissedTeams?: string[];
          dismissedToasts?: {
            name: string;
            dismissals: {
              scopeId: string;
              createdAt: number;
            }[];
          }[];
          favoriteProjectsAndSpaces?: {
            teamId: string;
            projectId: string;
          }[];
          email: string;
          id: string;
          importFlowGitNamespace?: string | number | null;
          importFlowGitNamespaceId?: string | number | null;
          importFlowGitProvider?: 'github' | 'gitlab' | 'bitbucket' | 'github-custom-host' | null;
          preferredScopesAndGitNamespaces?: {
            scopeId: string;
            gitNamespaceId: string | number | null;
          }[];
          isDomainReseller?: boolean;
          isZeitPub?: boolean;
          maxActiveSlots?: number;
          name?: string;
          phoneNumber?: string;
          platformVersion: number | null;
          preventAutoBlocking?: number | boolean;
          /**
           * Overrides our DEFAULT project domains limit per account or per project.
           */
          projectDomainsLimit?: number;
          /**
           * Represents configuration for remote caching
           */
          remoteCaching?: {
            enabled?: boolean;
          };
          removedAliasesAt?: number;
          removedBillingSubscriptionAt?: number;
          removedConfigurationsAt?: number;
          removedDeploymentsAt?: number;
          removedDomiansAt?: number;
          removedEventsAt?: number;
          removedProjectsAt?: number;
          removedSecretsAt?: number;
          removedSharedEnvVarsAt?: number;
          removedEdgeConfigsAt?: number;
          resourceConfig?: {
            nodeType?: string;
            concurrentBuilds?: number;
            buildEntitlements?: {
              enhancedBuilds?: boolean;
            };
            awsAccountType?: string;
            awsAccountIds?: string[];
            cfZoneName?: string;
            imageOptimizationType?: string;
            edgeConfigs?: number;
            edgeConfigSize?: number;
            edgeFunctionMaxSizeBytes?: number;
            edgeFunctionExecutionTimeoutMs?: number;
            serverlessFunctionDefaultMaxExecutionTime?: number;
            serverlessFunctionMaxMemorySize?: number;
            kvDatabases?: number;
            postgresDatabases?: number;
            blobStores?: number;
            integrationStores?: number;
            cronJobs?: number;
            cronJobsPerProject?: number;
            microfrontendGroupsPerTeam?: number;
            microfrontendProjectsPerGroup?: number;
            flagsExplorerOverridesThreshold?: number;
            flagsExplorerUnlimitedOverrides?: boolean;
            customEnvironmentsPerProject?: number;
            buildMachine?: {
              purchaseType?: 'enhanced' | 'ultra';
              isDefaultBuildMachine?: boolean;
              cores?: number;
              memory?: number;
            };
          };
          /**
           * User | Team resource limits
           */
          resourceLimits?: {
            [key: string]: {
              max: number;
              duration: number;
            };
          };
          activeDashboardViews?: {
            scopeId: string;
            viewPreference?: 'cards' | 'list' | null;
            favoritesViewPreference?: 'open' | 'closed' | null;
            recentsViewPreference?: 'open' | 'closed' | null;
          }[];
          secondaryEmails?: {
            email: string;
            verified: boolean;
          }[];
          emailNotifications?: {
            rules?: {
              [key: string]: {
                email: string;
              };
            };
          };
          siftScore?: number;
          siftScores?: {
            [key: string]: {
              score: number;
              reasons: {
                name: string;
                value: string;
              }[];
            };
          };
          siftRoute?: {
            name: 'string';
          };
          sfdcId?: string;
          softBlock?: {
            blockedAt: number;
            reason:
              | 'SUBSCRIPTION_CANCELED'
              | 'SUBSCRIPTION_EXPIRED'
              | 'UNPAID_INVOICE'
              | 'ENTERPRISE_TRIAL_ENDED'
              | 'FAIR_USE_LIMITS_EXCEEDED'
              | 'BLOCKED_FOR_PLATFORM_ABUSE';
            blockedDueToOverageType?:
              | 'analyticsUsage'
              | 'artifacts'
              | 'bandwidth'
              | 'blobTotalAdvancedRequests'
              | 'blobTotalAvgSizeInBytes'
              | 'blobTotalGetResponseObjectSizeInBytes'
              | 'blobTotalSimpleRequests'
              | 'dataCacheRead'
              | 'dataCacheWrite'
              | 'edgeConfigRead'
              | 'edgeConfigWrite'
              | 'edgeFunctionExecutionUnits'
              | 'edgeMiddlewareInvocations'
              | 'edgeRequestAdditionalCpuDuration'
              | 'edgeRequest'
              | 'elasticConcurrencyBuildSlots'
              | 'fastDataTransfer'
              | 'fastOriginTransfer'
              | 'functionDuration'
              | 'functionInvocation'
              | 'imageOptimizationCacheRead'
              | 'imageOptimizationCacheWrite'
              | 'imageOptimizationTransformation'
              | 'logDrainsVolume'
              | 'monitoringMetric'
              | 'blobDataTransfer'
              | 'observabilityEvent'
              | 'postgresComputeTime'
              | 'postgresDataStorage'
              | 'postgresDataTransfer'
              | 'postgresDatabase'
              | 'postgresWrittenData'
              | 'serverlessFunctionExecution'
              | 'sourceImages'
              | 'storageRedisTotalBandwidthInBytes'
              | 'storageRedisTotalCommands'
              | 'storageRedisTotalDailyAvgStorageInBytes'
              | 'storageRedisTotalDatabases'
              | 'wafOwaspExcessBytes'
              | 'wafOwaspRequests'
              | 'wafRateLimitRequest'
              | 'webAnalyticsEvent';
          } | null;
          stagingPrefix: string;
          sysToken: string;
          /**
           * A helper that allows to describe a relationship attribute. It receives the shape of a relationship plus the foreignKey name to make it mandatory in the resulting type.
           */
          teams?: {
            created?: number;
            createdAt?: number;
            teamId: string;
            role?: 'OWNER' | 'MEMBER' | 'DEVELOPER' | 'SECURITY' | 'BILLING' | 'VIEWER' | 'CONTRIBUTOR';
            confirmed?: boolean;
            confirmedAt?: number;
            accessRequestedAt?: number;
            teamRoles?: ('OWNER' | 'MEMBER' | 'DEVELOPER' | 'SECURITY' | 'BILLING' | 'VIEWER' | 'CONTRIBUTOR')[];
            teamPermissions?: (
              | 'CreateProject'
              | 'FullProductionDeployment'
              | 'UsageViewer'
              | 'EnvVariableManager'
              | 'EnvironmentManager'
            )[];
            joinedFrom?: {
              origin:
                | 'teams'
                | 'saml'
                | 'github'
                | 'gitlab'
                | 'bitbucket'
                | 'mail'
                | 'link'
                | 'import'
                | 'dsync'
                | 'feedback'
                | 'organization-teams';
              commitId?: string;
              repoId?: string;
              repoPath?: string;
              gitUserId?: string | number;
              gitUserLogin?: string;
              ssoUserId?: string;
              ssoConnectedAt?: number;
              idpUserId?: string;
              dsyncUserId?: string;
              dsyncConnectedAt?: number;
            };
          }[];
          /**
           * Introduced 2022-04-12 An array of teamIds (for trial teams created after 2022-04-01), created by the user in question. Used in determining whether the team has a trial available in utils/api-teams/user-has-trial-available.ts.
           */
          trialTeamIds?: string[];
          /**
           * Introduced 2022-04-19 Number of maximum trials to allocate to a user. When undefined, defaults to MAX_TRIALS in utils/api-teams/user-has-trial-available.ts. This is set to trialTeamIds + 1 by services/api-backoffice/src/handlers/add-additional-trial.ts.
           */
          maxTrials?: number;
          /**
           * Deprecated on 2022-04-12 in favor of trialTeamIds and using utils/api-teams/user-has-trial-available.ts.
           */
          trialTeamId?: string;
          type: 'user';
          /**
           * Contains the timestamps when a user was notified about their usage
           */
          usageAlerts?: {
            warningAt?: number | null;
            blockingAt?: number | null;
          } | null;
          overageUsageAlerts?: {
            analyticsUsage?: {
              currentThreshold: number;
              warningAt?: number | null;
              blockedAt?: number | null;
            };
            artifacts?: {
              currentThreshold: number;
              warningAt?: number | null;
              blockedAt?: number | null;
            };
            bandwidth?: {
              currentThreshold: number;
              warningAt?: number | null;
              blockedAt?: number | null;
            };
            blobTotalAdvancedRequests?: {
              currentThreshold: number;
              warningAt?: number | null;
              blockedAt?: number | null;
            };
            blobTotalAvgSizeInBytes?: {
              currentThreshold: number;
              warningAt?: number | null;
              blockedAt?: number | null;
            };
            blobTotalGetResponseObjectSizeInBytes?: {
              currentThreshold: number;
              warningAt?: number | null;
              blockedAt?: number | null;
            };
            blobTotalSimpleRequests?: {
              currentThreshold: number;
              warningAt?: number | null;
              blockedAt?: number | null;
            };
            dataCacheRead?: {
              currentThreshold: number;
              warningAt?: number | null;
              blockedAt?: number | null;
            };
            dataCacheWrite?: {
              currentThreshold: number;
              warningAt?: number | null;
              blockedAt?: number | null;
            };
            edgeConfigRead?: {
              currentThreshold: number;
              warningAt?: number | null;
              blockedAt?: number | null;
            };
            edgeConfigWrite?: {
              currentThreshold: number;
              warningAt?: number | null;
              blockedAt?: number | null;
            };
            edgeFunctionExecutionUnits?: {
              currentThreshold: number;
              warningAt?: number | null;
              blockedAt?: number | null;
            };
            edgeMiddlewareInvocations?: {
              currentThreshold: number;
              warningAt?: number | null;
              blockedAt?: number | null;
            };
            edgeRequestAdditionalCpuDuration?: {
              currentThreshold: number;
              warningAt?: number | null;
              blockedAt?: number | null;
            };
            edgeRequest?: {
              currentThreshold: number;
              warningAt?: number | null;
              blockedAt?: number | null;
            };
            elasticConcurrencyBuildSlots?: {
              currentThreshold: number;
              warningAt?: number | null;
              blockedAt?: number | null;
            };
            fastDataTransfer?: {
              currentThreshold: number;
              warningAt?: number | null;
              blockedAt?: number | null;
            };
            fastOriginTransfer?: {
              currentThreshold: number;
              warningAt?: number | null;
              blockedAt?: number | null;
            };
            functionDuration?: {
              currentThreshold: number;
              warningAt?: number | null;
              blockedAt?: number | null;
            };
            functionInvocation?: {
              currentThreshold: number;
              warningAt?: number | null;
              blockedAt?: number | null;
            };
            imageOptimizationCacheRead?: {
              currentThreshold: number;
              warningAt?: number | null;
              blockedAt?: number | null;
            };
            imageOptimizationCacheWrite?: {
              currentThreshold: number;
              warningAt?: number | null;
              blockedAt?: number | null;
            };
            imageOptimizationTransformation?: {
              currentThreshold: number;
              warningAt?: number | null;
              blockedAt?: number | null;
            };
            logDrainsVolume?: {
              currentThreshold: number;
              warningAt?: number | null;
              blockedAt?: number | null;
            };
            monitoringMetric?: {
              currentThreshold: number;
              warningAt?: number | null;
              blockedAt?: number | null;
            };
            blobDataTransfer?: {
              currentThreshold: number;
              warningAt?: number | null;
              blockedAt?: number | null;
            };
            observabilityEvent?: {
              currentThreshold: number;
              warningAt?: number | null;
              blockedAt?: number | null;
            };
            postgresComputeTime?: {
              currentThreshold: number;
              warningAt?: number | null;
              blockedAt?: number | null;
            };
            postgresDataStorage?: {
              currentThreshold: number;
              warningAt?: number | null;
              blockedAt?: number | null;
            };
            postgresDataTransfer?: {
              currentThreshold: number;
              warningAt?: number | null;
              blockedAt?: number | null;
            };
            postgresDatabase?: {
              currentThreshold: number;
              warningAt?: number | null;
              blockedAt?: number | null;
            };
            postgresWrittenData?: {
              currentThreshold: number;
              warningAt?: number | null;
              blockedAt?: number | null;
            };
            serverlessFunctionExecution?: {
              currentThreshold: number;
              warningAt?: number | null;
              blockedAt?: number | null;
            };
            sourceImages?: {
              currentThreshold: number;
              warningAt?: number | null;
              blockedAt?: number | null;
            };
            storageRedisTotalBandwidthInBytes?: {
              currentThreshold: number;
              warningAt?: number | null;
              blockedAt?: number | null;
            };
            storageRedisTotalCommands?: {
              currentThreshold: number;
              warningAt?: number | null;
              blockedAt?: number | null;
            };
            storageRedisTotalDailyAvgStorageInBytes?: {
              currentThreshold: number;
              warningAt?: number | null;
              blockedAt?: number | null;
            };
            storageRedisTotalDatabases?: {
              currentThreshold: number;
              warningAt?: number | null;
              blockedAt?: number | null;
            };
            wafOwaspExcessBytes?: {
              currentThreshold: number;
              warningAt?: number | null;
              blockedAt?: number | null;
            };
            wafOwaspRequests?: {
              currentThreshold: number;
              warningAt?: number | null;
              blockedAt?: number | null;
            };
            wafRateLimitRequest?: {
              currentThreshold: number;
              warningAt?: number | null;
              blockedAt?: number | null;
            };
            webAnalyticsEvent?: {
              currentThreshold: number;
              warningAt?: number | null;
              blockedAt?: number | null;
            };
          };
          /**
           * Contains the timestamps for usage summary emails.
           */
          overageMetadata?: {
            /**
             * Tracks if the first time on-demand overage email has been sent.
             */
            firstTimeOnDemandNotificationSentAt?: number;
            /**
             * Tracks the last time we sent a summary email.
             */
            overageSummaryEmailSentAt?: number;
          };
          username: string;
          updatedAt: number;
          /**
           * Whether the Vercel Toolbar is enabled for preview deployments.
           */
          enablePreviewFeedback?: 'default' | 'on' | 'off' | 'on-force' | 'off-force' | 'default-force';
          /**
           * Information about which features are blocked for a user. Blocks can be either soft (the user can still access the feature, but with a warning, e.g. prompting an upgrade) or hard (the user cannot access the feature at all).
           */
          featureBlocks?: {
            webAnalytics?: {
              updatedAt?: number;
              blockedFrom?: number;
              blockedUntil?: number;
              blockReason?: 'admin_override' | 'limits_exceeded';
              graceEmailSentAt?: number;
            };
            /**
             * A soft block indicates a temporary pause in data collection (ex limit exceeded for the current cycle) A hard block indicates a stoppage in data collection that requires manual intervention (ex upgrading a pro trial)
             */
            monitoring?: {
              updatedAt?: number;
              blockedFrom?: number;
              blockedUntil?: number;
              blockReason?: 'admin_override' | 'limits_exceeded';
              blockType: 'soft' | 'hard';
            };
            observabilityPlus?: {
              updatedAt?: number;
              blockedFrom?: number;
              blockedUntil?: number;
              blockReason?: 'admin_override' | 'limits_exceeded';
              blockType: 'soft' | 'hard';
            };
            dataCache?: {
              updatedAt: number;
              blockedFrom?: number;
              blockedUntil?: number;
              blockReason: 'admin_override' | 'limits_exceeded';
            };
            imageOptimizationTransformation?: {
              updatedAt: number;
              blockedFrom?: number;
              blockedUntil?: number;
              blockReason: 'admin_override' | 'limits_exceeded';
            };
            sourceImages?: {
              updatedAt: number;
              blockedFrom?: number;
              blockedUntil?: number;
              blockReason: 'admin_override' | 'limits_exceeded';
            };
            blob?: {
              updatedAt?: number;
              blockedFrom?: number;
              blockedUntil?: number;
              blockReason?: 'admin_override' | 'limits_exceeded';
              overageReason:
                | 'analyticsUsage'
                | 'artifacts'
                | 'bandwidth'
                | 'blobTotalAdvancedRequests'
                | 'blobTotalAvgSizeInBytes'
                | 'blobTotalGetResponseObjectSizeInBytes'
                | 'blobTotalSimpleRequests'
                | 'dataCacheRead'
                | 'dataCacheWrite'
                | 'edgeConfigRead'
                | 'edgeConfigWrite'
                | 'edgeFunctionExecutionUnits'
                | 'edgeMiddlewareInvocations'
                | 'edgeRequestAdditionalCpuDuration'
                | 'edgeRequest'
                | 'elasticConcurrencyBuildSlots'
                | 'fastDataTransfer'
                | 'fastOriginTransfer'
                | 'functionDuration'
                | 'functionInvocation'
                | 'imageOptimizationCacheRead'
                | 'imageOptimizationCacheWrite'
                | 'imageOptimizationTransformation'
                | 'logDrainsVolume'
                | 'monitoringMetric'
                | 'blobDataTransfer'
                | 'observabilityEvent'
                | 'postgresComputeTime'
                | 'postgresDataStorage'
                | 'postgresDataTransfer'
                | 'postgresDatabase'
                | 'postgresWrittenData'
                | 'serverlessFunctionExecution'
                | 'sourceImages'
                | 'storageRedisTotalBandwidthInBytes'
                | 'storageRedisTotalCommands'
                | 'storageRedisTotalDailyAvgStorageInBytes'
                | 'storageRedisTotalDatabases'
                | 'wafOwaspExcessBytes'
                | 'wafOwaspRequests'
                | 'wafRateLimitRequest'
                | 'webAnalyticsEvent';
            };
            postgres?: {
              updatedAt?: number;
              blockedFrom?: number;
              blockedUntil?: number;
              blockReason?: 'admin_override' | 'limits_exceeded';
              overageReason:
                | 'analyticsUsage'
                | 'artifacts'
                | 'bandwidth'
                | 'blobTotalAdvancedRequests'
                | 'blobTotalAvgSizeInBytes'
                | 'blobTotalGetResponseObjectSizeInBytes'
                | 'blobTotalSimpleRequests'
                | 'dataCacheRead'
                | 'dataCacheWrite'
                | 'edgeConfigRead'
                | 'edgeConfigWrite'
                | 'edgeFunctionExecutionUnits'
                | 'edgeMiddlewareInvocations'
                | 'edgeRequestAdditionalCpuDuration'
                | 'edgeRequest'
                | 'elasticConcurrencyBuildSlots'
                | 'fastDataTransfer'
                | 'fastOriginTransfer'
                | 'functionDuration'
                | 'functionInvocation'
                | 'imageOptimizationCacheRead'
                | 'imageOptimizationCacheWrite'
                | 'imageOptimizationTransformation'
                | 'logDrainsVolume'
                | 'monitoringMetric'
                | 'blobDataTransfer'
                | 'observabilityEvent'
                | 'postgresComputeTime'
                | 'postgresDataStorage'
                | 'postgresDataTransfer'
                | 'postgresDatabase'
                | 'postgresWrittenData'
                | 'serverlessFunctionExecution'
                | 'sourceImages'
                | 'storageRedisTotalBandwidthInBytes'
                | 'storageRedisTotalCommands'
                | 'storageRedisTotalDailyAvgStorageInBytes'
                | 'storageRedisTotalDatabases'
                | 'wafOwaspExcessBytes'
                | 'wafOwaspRequests'
                | 'wafRateLimitRequest'
                | 'webAnalyticsEvent';
            };
            redis?: {
              updatedAt?: number;
              blockedFrom?: number;
              blockedUntil?: number;
              blockReason?: 'admin_override' | 'limits_exceeded';
              overageReason:
                | 'analyticsUsage'
                | 'artifacts'
                | 'bandwidth'
                | 'blobTotalAdvancedRequests'
                | 'blobTotalAvgSizeInBytes'
                | 'blobTotalGetResponseObjectSizeInBytes'
                | 'blobTotalSimpleRequests'
                | 'dataCacheRead'
                | 'dataCacheWrite'
                | 'edgeConfigRead'
                | 'edgeConfigWrite'
                | 'edgeFunctionExecutionUnits'
                | 'edgeMiddlewareInvocations'
                | 'edgeRequestAdditionalCpuDuration'
                | 'edgeRequest'
                | 'elasticConcurrencyBuildSlots'
                | 'fastDataTransfer'
                | 'fastOriginTransfer'
                | 'functionDuration'
                | 'functionInvocation'
                | 'imageOptimizationCacheRead'
                | 'imageOptimizationCacheWrite'
                | 'imageOptimizationTransformation'
                | 'logDrainsVolume'
                | 'monitoringMetric'
                | 'blobDataTransfer'
                | 'observabilityEvent'
                | 'postgresComputeTime'
                | 'postgresDataStorage'
                | 'postgresDataTransfer'
                | 'postgresDatabase'
                | 'postgresWrittenData'
                | 'serverlessFunctionExecution'
                | 'sourceImages'
                | 'storageRedisTotalBandwidthInBytes'
                | 'storageRedisTotalCommands'
                | 'storageRedisTotalDailyAvgStorageInBytes'
                | 'storageRedisTotalDatabases'
                | 'wafOwaspExcessBytes'
                | 'wafOwaspRequests'
                | 'wafRateLimitRequest'
                | 'webAnalyticsEvent';
            };
          };
          defaultTeamId?: string;
          version: 'northstar';
          /**
           * An archive of information about the Northstar migration, derived from the old (deprecated) property, `northstarMigrationEvents`.
           */
          northstarMigration?: {
            /**
             * The ID of the team we created for this user.
             */
            teamId: string;
            /**
             * The number of projects migrated for this user.
             */
            projects: number;
            /**
             * The number of stores migrated for this user.
             */
            stores: number;
            /**
             * The number of integration configurations migrated for this user.
             */
            integrationConfigurations: number;
            /**
             * The number of integration clients migrated for this user.
             */
            integrationClients: number;
            /**
             * The migration start time timestamp for this user.
             */
            startTime: number;
            /**
             * The migration end time timestamp for this user.
             */
            endTime: number;
          };
          /**
           * The salesforce opportunity ID that this user is linked to. This is used to automatically associate a team of the user's choosing with the opportunity.
           */
          opportunityId?: string;
          /**
           * MFA configuration. When enabled, the user will be required to provide a second factor of authentication when logging in.
           */
          mfaConfiguration?: {
            enabled: boolean;
            enabledAt?: number;
            recoveryCodes: string[];
            totp?: {
              secret: string;
              createdAt: number;
            };
          };
        } | null;
      }
    | {
        configurations: {
          integrationId: string;
          configurationId: string;
          integrationSlug: string;
          integrationName?: string;
        }[];
        ownerId: string;
      }
    | {
        integrationId: string;
        configurationId: string;
        integrationSlug: string;
        integrationName: string;
        ownerId: string;
        billingPlanId: string;
        billingPlanName?: string;
      }
    | {
        integrationId: string;
        configurationId: string;
        integrationSlug: string;
        integrationName: string;
        ownerId: string;
        projectIds?: string[];
      }
    | {
        projectId: string;
        fromDeploymentId: string;
        toDeploymentId: string;
        projectName: string;
        reason?: string;
      }
    | {
        integrationId: string;
        configurationId: string;
        integrationSlug: string;
        integrationName: string;
        ownerId: string;
        projectIds?: string[];
        confirmedScopes: string[];
      }
    | {
        userAgent?: {
          browser: {
            name: 'iphone' | 'ipad' | 'ipod' | 'chrome' | 'firefox' | 'mozilla' | 'unknown';
          };
          ua: string;
          program: string;
          os: {
            name:
              | 'unknown'
              | 'darwin'
              | 'win32'
              | 'win'
              | 'windows'
              | 'linux'
              | 'freebsd'
              | 'sunos'
              | 'mac'
              | 'ios'
              | 'android'
              | 'Mac OS'
              | 'OS X';
          };
        };
        geolocation?: {
          city?: {
            names: {
              en: string;
            };
          };
          country: {
            names: {
              en: string;
            };
          };
          most_specific_subdivision?: {
            names: {
              en: string;
            };
          };
          regionName?: string;
        } | null;
        viaGithub: boolean;
        viaGitlab: boolean;
        viaBitbucket: boolean;
        viaGoogle: boolean;
        viaSamlSso: boolean;
        viaPasskey: boolean;
        ssoType?: string;
        env?: string;
        os?: string;
        username?: string;
      }
    | {
        logDrainUrl: string | null;
        integrationName?: string;
      }
    | {
        logDrainUrl: string;
        integrationName?: string;
      }
    | {
        drainUrl: string | null;
        integrationName?: string;
      }
    | {
        projectId: string;
        toDeploymentId: string;
        projectName: string;
      }
    | {
        plan: string;
        removedUsers?: {
          [key: string]: {
            role: 'OWNER' | 'MEMBER' | 'DEVELOPER' | 'SECURITY' | 'BILLING' | 'VIEWER' | 'CONTRIBUTOR';
            confirmed: boolean;
            confirmedAt?: number;
            joinedFrom?: {
              origin:
                | 'teams'
                | 'saml'
                | 'github'
                | 'gitlab'
                | 'bitbucket'
                | 'mail'
                | 'link'
                | 'import'
                | 'dsync'
                | 'feedback'
                | 'organization-teams';
              commitId?: string;
              repoId?: string;
              repoPath?: string;
              gitUserId?: string | number;
              gitUserLogin?: string;
              ssoUserId?: string;
              ssoConnectedAt?: number;
              idpUserId?: string;
              dsyncUserId?: string;
              dsyncConnectedAt?: number;
            };
          };
        };
        priorPlan?: string;
        isDowngrade?: boolean;
        userAgent?: string;
        isReactivate?: boolean;
        isTrialUpgrade?: boolean;
      }
    | {
        projectName?: string;
        projectId: string;
        projectAnalytics: {
          id: string;
          canceledAt?: number | null;
          disabledAt: number;
          enabledAt: number;
          paidAt?: number;
          sampleRatePercent?: number | null;
          spendLimitInDollars?: number | null;
        } | null;
        prevProjectAnalytics: {
          id: string;
          canceledAt?: number | null;
          disabledAt: number;
          enabledAt: number;
          paidAt?: number;
          sampleRatePercent?: number | null;
          spendLimitInDollars?: number | null;
        } | null;
      }
    | {
        projectName?: string;
        projectId: string;
        projectAnalytics?: {
          [key: string]: any;
        };
        prevProjectAnalytics?: {
          [key: string]: any;
        } | null;
      }
    | {
        projectName?: string;
        projectId: string;
      }
    | {
        projectName: string;
        ssoProtection:
          | {
              deploymentType: 'all' | 'preview' | 'prod_deployment_urls_and_all_previews';
            }
          | ('all' | 'preview' | 'prod_deployment_urls_and_all_previews')
          | null;
        oldSsoProtection:
          | {
              deploymentType: 'all' | 'preview' | 'prod_deployment_urls_and_all_previews';
            }
          | ('all' | 'preview' | 'prod_deployment_urls_and_all_previews')
          | null;
      }
    | {
        projectName: string;
        passwordProtection:
          | {
              deploymentType: 'all' | 'preview' | 'prod_deployment_urls_and_all_previews';
            }
          | ('all' | 'preview' | 'prod_deployment_urls_and_all_previews')
          | null;
        oldPasswordProtection:
          | {
              deploymentType: 'all' | 'preview' | 'prod_deployment_urls_and_all_previews';
            }
          | ('all' | 'preview' | 'prod_deployment_urls_and_all_previews')
          | null;
      }
    | {
        projectName: string;
        trustedIps?: 'all' | 'preview' | 'prod_deployment_urls_and_all_previews' | 'production' | null;
        oldTrustedIps?: 'all' | 'preview' | 'prod_deployment_urls_and_all_previews' | 'production' | null;
        addedAddresses?: string[] | null;
        removedAddresses?: string[] | null;
      }
    | {
        projectName: string;
        optionsAllowlist?: {
          paths: {
            value: string;
          }[];
        } | null;
        oldOptionsAllowlist?: {
          paths: {
            value: string;
          }[];
        } | null;
      }
    | {
        projectName: string;
        action: 'enabled' | 'disabled' | 'regenerated';
      }
    | {
        name: string;
        ownerId: string;
      }
    | {
        team: {
          id: string;
          name: string;
        };
        project: {
          id: string;
          name?: string;
          oldConnectConfigurations:
            | {
                envId: string | ('preview' | 'production');
                connectConfigurationId: string;
                passive: boolean;
                buildsEnabled: boolean;
                createdAt: number;
                updatedAt: number;
              }[]
            | null;
          newConnectConfigurations:
            | {
                envId: string | ('preview' | 'production');
                connectConfigurationId: string;
                passive: boolean;
                buildsEnabled: boolean;
                createdAt: number;
                updatedAt: number;
              }[]
            | null;
        };
      }
    | {
        projectId: string;
      }
    | {
        gitProvider: string;
        gitProviderGroupDescriptor: string;
        gitScope: string;
      }
    | {
        instances: number;
        url: string;
      }
    | {
        email: string;
        verified: boolean;
      }
    | {
        email: string;
      }
    | {
        team: {
          id: string;
          name?: string;
        };
        previousRule?: {
          email: string;
        };
        nextRule?: {
          email: string;
        };
      }
    | {
        team: {
          id: string;
          name?: string;
        };
        previousRule: {
          email: string;
        };
      }
    | {
        uid: string;
        name:
          | string
          | {
              name: string;
            };
      }
    | {
        oldName: string;
        newName: string;
        uid?: string;
      }
    | {
        bio: string;
      }
    | {
        scalingRules: {
          [key: string]: {
            min: number;
            max: number;
          };
        };
        min: number;
        max: number;
        url: string;
      }
    | {
        webhookUrl?: string;
      }
    | {
        /**
         * Represents a budget for tracking and notifying teams on their spending.
         */
        budget: {
          /**
           * The budget type
           */
          type: 'fixed';
          /**
           * Budget amount
           */
          fixedBudget: number;
          /**
           * Array of the last 3 months of spend data
           */
          previousSpend: number[];
          /**
           * Array of 50, 75, 100 to keep track of notifications sent out
           */
          notifiedAt: number[];
          /**
           * Webhook id that corresponds to a webhook in Cosmos webhook collection
           */
          webhookId?: string;
          /**
           * Keep track if the webhook has been called for the month
           */
          webhookNotified?: boolean;
          /**
           * Date time when budget is created
           */
          createdAt: number;
          /**
           * Date time when budget is updated last
           */
          updatedAt?: number;
          /**
           * Is the budget currently active for a customer
           */
          isActive: boolean;
          /**
           * Should all projects be paused if budget is exceeded
           */
          pauseProjects?: boolean;
          /**
           * The acive pricing plan the team is billed with
           */
          pricingPlan?: 'legacy' | 'unbundled';
          /**
           * Partition key
           */
          teamId: string;
          /**
           * Sort key that needs to be unique per teamId
           */
          id: string;
        };
      }
    | {
        budget: {
          /**
           * Represents a budget for tracking and notifying teams on their spending.
           */
          budgetItem: {
            /**
             * The budget type
             */
            type: 'fixed';
            /**
             * Budget amount
             */
            fixedBudget: number;
            /**
             * Array of the last 3 months of spend data
             */
            previousSpend: number[];
            /**
             * Array of 50, 75, 100 to keep track of notifications sent out
             */
            notifiedAt: number[];
            /**
             * Webhook id that corresponds to a webhook in Cosmos webhook collection
             */
            webhookId?: string;
            /**
             * Keep track if the webhook has been called for the month
             */
            webhookNotified?: boolean;
            /**
             * Date time when budget is created
             */
            createdAt: number;
            /**
             * Date time when budget is updated last
             */
            updatedAt?: number;
            /**
             * Is the budget currently active for a customer
             */
            isActive: boolean;
            /**
             * Should all projects be paused if budget is exceeded
             */
            pauseProjects?: boolean;
            /**
             * The acive pricing plan the team is billed with
             */
            pricingPlan?: 'legacy' | 'unbundled';
            /**
             * Partition key
             */
            teamId: string;
            /**
             * Sort key that needs to be unique per teamId
             */
            id: string;
          };
        };
      }
    | {
        id: string;
        name?: string;
        computeUnitsMax?: number;
        computeUnitsMin?: number;
        suspendTimeoutSeconds?: number;
        type: 'redis' | 'postgres' | 'edge-config' | 'blob' | 'integration';
      }
    | {
        storeType: 'redis' | 'postgres';
      }
    | {
        store: {
          name: string;
          id: string;
        };
        ownerId?: string;
      }
    | {
        slug: string;
      }
    | {
        slug: string;
        teamId: string;
        by: string;
        reasons?: {
          slug: string;
          description: string;
        }[];
      }
    | {
        directoryType?: string;
        ssoType?: string;
        invitedUser?: {
          username: string;
          email: string;
        };
        invitedEmail?: string;
        invitationRole?: string;
        entitlements?: string[];
        invitedUid?: string;
      }
    | {
        deletedUser?: {
          username: string;
          email: string;
        };
        deletedUid?: string;
        githubUsername?: string | null;
        gitlabUsername?: string | null;
        bitbucketUsername?: string | null;
        directoryType?: string;
      }
    | {
        role?: string;
        uid: string;
        origin?: string;
      }
    | {
        directoryType?: string;
        updatedUser?: {
          username: string;
          email: string;
        };
        role?: string;
        previousRole: string;
        updatedUid?: string;
      }
    | {
        entitlement: string;
        user: {
          id: string;
          username: string;
        };
      }
    | {
        entitlement: string;
        user: {
          id: string;
          username: string;
        };
        previousCanceledAt?: string;
      }
    | {
        enforced: boolean;
      }
    | {
        name?: string;
      }
    | {
        slug?: string;
      }
    | {
        /**
         * Represents configuration for remote caching
         */
        remoteCaching?: {
          enabled?: boolean;
        };
      }
    | {
        previous: {
          enabled: boolean;
          totpVerified: boolean;
        };
        next: {
          enabled: boolean;
          totpVerified: boolean;
        };
      }
    | {
        enabled: boolean;
        totpVerified: boolean;
      }
    | {
        mfaEnabled: boolean;
      }
    | {
        email: string;
        prevEmail: string;
      }
    | {
        username: string;
      }
    | {
        price?: number;
        currency?: string;
        enabled?: boolean;
      }
    | {
        previewDeploymentSuffix?: string | null;
        previousPreviewDeploymentSuffix?: string | null;
      }
    | {
        price?: number;
        currency?: string;
      }
    | {
        teamName: string;
        username?: string;
        gitUsername?: string;
        githubUsername?: string | null;
        gitlabUsername?: string | null;
        bitbucketUsername?: string | null;
        updatedUid?: string;
        teamId?: string;
      }
    | {
        teamName: string;
        username?: string;
        gitUsername?: string | null;
        githubUsername?: string | null;
        gitlabUsername?: string | null;
        bitbucketUsername?: string | null;
      }
    | {
        requestedTeamName: string;
        requestedUserName?: string;
        gitUsername?: string;
        githubUsername?: string;
        gitlabUsername?: string;
        bitbucketUsername?: string;
      }
    | {
        projectId: string;
        projectName: string;
        originAccountName: string;
        destinationAccountName: string;
        destinationAccountId: string;
        transferId?: string;
      }
    | {
        projectName: string;
        destinationAccountName: string | null;
        transferId?: string;
      }
    | {
        previousProjectName: string;
        newProjectName: string;
        destinationAccountName: string;
        transferId?: string;
      }
    | {
        previousProjectName: string;
        newProjectName: string;
        originAccountName: string;
        transferId?: string;
      }
    | {
        project: {
          name: string;
          id?: string;
        };
        projectMembership: {
          role?: 'ADMIN' | 'PROJECT_DEVELOPER' | 'PROJECT_VIEWER';
          uid?: string;
          createdAt?: number;
          username?: string;
        } | null;
      }
    | {
        project: {
          name: string;
          id?: string;
        };
        removedMembership: {
          role?: 'ADMIN' | 'PROJECT_DEVELOPER' | 'PROJECT_VIEWER';
          uid?: string;
          createdAt?: number;
          username?: string;
        };
      }
    | {
        project: {
          id: string;
          name: string;
        };
        projectMembership: {
          role?: 'ADMIN' | 'PROJECT_DEVELOPER' | 'PROJECT_VIEWER';
          uid?: string;
          createdAt?: number;
          username?: string;
          previousRole?: 'ADMIN' | 'PROJECT_DEVELOPER' | 'PROJECT_VIEWER';
        };
      }
    | {
        project: {
          name: string;
          role: 'ADMIN' | 'PROJECT_DEVELOPER' | 'PROJECT_VIEWER';
          invitedUserName: string;
          id?: string;
          invitedUserId?: string;
        };
      }
    | {
        edgeConfigId: string;
        edgeConfigSlug: string;
        edgeConfigDigest: string;
      }
    | {
        edgeConfigId: string;
        edgeConfigSlug: string;
        edgeConfigTokenId: string;
        label: string;
      }
    | {
        edgeConfigId: string;
        edgeConfigSlug: string;
        /**
         * ids of deleted tokens
         */
        edgeConfigTokenIds: string[];
      }
    | {
        id: string;
        slug: string;
        name: string;
      }
    | {
        id: string;
        slug: string;
        name: string;
        prev: {
          name: string;
          slug: string;
        };
      }
    | {
        project: {
          id: string;
          name: string;
        };
        group: {
          id: string;
          slug: string;
          name: string;
        };
      }
    | {
        project: {
          id: string;
          name: string;
          microfrontends?:
            | {
                /**
                 * Timestamp when the microfrontends settings were last updated.
                 */
                updatedAt: number;
                /**
                 * The group IDs of microfrontends that this project belongs to. Each microfrontend project must belong to a microfrontends group that is the set of microfrontends that are used together.
                 *
                 * @maxItems 2
                 * @minItems 2
                 */
                groupIds: (string | string)[];
                /**
                 * Whether microfrontends are enabled for this project.
                 */
                enabled: boolean;
                /**
                 * Whether this project is the default application for the microfrontends group. The default application is the one that is used as the top level shell for the microfrontends group and hosts the other microfrontends.
                 */
                isDefaultApp?: boolean;
                /**
                 * A path that is used to take screenshots and as the default path in preview links when a domain for this microfrontend is shown in the UI. Includes the leading slash, e.g. `/docs`
                 */
                defaultRoute?: string;
                /**
                 * Whether observability data should be routed to this microfrontend project or a root project.
                 */
                routeObservabilityToThisProject?: boolean;
              }
            | {
                updatedAt: number;
                /**
                 * @maxItems 2
                 * @minItems 2
                 */
                groupIds: (string | string)[];
                enabled: boolean;
              };
        };
        prev: {
          project: {
            microfrontends?:
              | {
                  /**
                   * Timestamp when the microfrontends settings were last updated.
                   */
                  updatedAt: number;
                  /**
                   * The group IDs of microfrontends that this project belongs to. Each microfrontend project must belong to a microfrontends group that is the set of microfrontends that are used together.
                   *
                   * @maxItems 2
                   * @minItems 2
                   */
                  groupIds: (string | string)[];
                  /**
                   * Whether microfrontends are enabled for this project.
                   */
                  enabled: boolean;
                  /**
                   * Whether this project is the default application for the microfrontends group. The default application is the one that is used as the top level shell for the microfrontends group and hosts the other microfrontends.
                   */
                  isDefaultApp?: boolean;
                  /**
                   * A path that is used to take screenshots and as the default path in preview links when a domain for this microfrontend is shown in the UI. Includes the leading slash, e.g. `/docs`
                   */
                  defaultRoute?: string;
                  /**
                   * Whether observability data should be routed to this microfrontend project or a root project.
                   */
                  routeObservabilityToThisProject?: boolean;
                }
              | {
                  updatedAt: number;
                  /**
                   * @maxItems 2
                   * @minItems 2
                   */
                  groupIds: (string | string)[];
                  enabled: boolean;
                };
          };
        };
        group: {
          id: string;
          slug: string;
          name: string;
        };
      }
    | {
        projectId: string;
        projectName: string;
        projectWebAnalytics?: {
          id: string;
          disabledAt?: number;
          canceledAt?: number;
          enabledAt?: number;
          hasData?: boolean;
        };
        prevProjectWebAnalytics?: {
          id: string;
          disabledAt?: number;
          canceledAt?: number;
          enabledAt?: number;
          hasData?: boolean;
        } | null;
      }
    | {
        tier: 'pro' | 'plus';
      }
    | {
        oldName: string;
        newName: string;
      }
    | {
        appName: string;
        scopes: string[];
      }
    | {
        appName: string;
        nextScopes: string[];
      }
    | {
        appName: string;
      }
    | {
        team: {
          id: string;
          name: string;
        };
        configuration: {
          id: string;
          name?: string;
        };
        peering: {
          id: string;
          accountId: string;
          region: string;
          vpcId: string;
        };
      }
    | {
        team: {
          id: string;
          name: string;
        };
        configuration: {
          id: string;
          name?: string;
        };
        peering: {
          id: string;
          name?: string;
        };
      }
    | {
        team: {
          id: string;
          name: string;
        };
        configuration: {
          id: string;
          name?: string;
        };
        peering: {
          id: string;
          name?: string;
        };
        newName?: string;
      }
    | {
        grantType:
          | 'authorization_code'
          | 'refresh_token'
          | 'urn:ietf:params:oauth:grant-type:device_code'
          | 'client_credentials';
        appName: string;
        /**
         * access_token TTL
         */
        atTTL: number;
        /**
         * refresh_token TTL
         */
        rtTTL?: number;
        scope: string;
        authMethod:
          | 'email'
          | 'saml'
          | 'github'
          | 'gitlab'
          | 'bitbucket'
          | 'manual'
          | 'passkey'
          | 'otp'
          | 'sms'
          | 'invite'
          | 'google';
      };
};

/**
 * Data representing a Team.
 */
export type Team = Record<string, any>;

/**
 * A limited form of data representing a Team, due to the authentication token missing privileges to read the full Team data.
 */
export type TeamLimited = {
  /**
   * Property indicating that this Team data contains only limited information, due to the authentication token missing privileges to read the full Team data or due to team having MFA enforced and the user not having MFA enabled. Re-login with the Team's configured SAML Single Sign-On provider in order to upgrade the authentication token with the necessary privileges.
   */
  limited: boolean;
  limitedBy: ('mfa' | 'scope')[];
  /**
   * When "Single Sign-On (SAML)" is configured, this object contains information that allows the client-side to identify whether or not this Team has SAML enforced.
   */
  saml?: {
    /**
     * Information for the SAML Single Sign-On configuration.
     */
    connection?: {
      /**
       * The Identity Provider "type", for example Okta.
       *
       * @example OktaSAML
       */
      type: string;
      /**
       * Current status of the connection.
       *
       * @example linked
       */
      status: string;
      /**
       * Current state of the connection.
       *
       * @example active
       */
      state: string;
      /**
       * Timestamp (in milliseconds) of when the configuration was connected.
       *
       * @example 1611796915677
       */
      connectedAt: number;
      /**
       * Timestamp (in milliseconds) of when the last webhook event was received from WorkOS.
       *
       * @example 1611796915677
       */
      lastReceivedWebhookEvent?: number;
    };
    /**
     * Information for the Directory Sync configuration.
     */
    directory?: {
      /**
       * The Identity Provider "type", for example Okta.
       *
       * @example OktaSAML
       */
      type: string;
      /**
       * Current state of the connection.
       *
       * @example active
       */
      state: string;
      /**
       * Timestamp (in milliseconds) of when the configuration was connected.
       *
       * @example 1611796915677
       */
      connectedAt: number;
      /**
       * Timestamp (in milliseconds) of when the last webhook event was received from WorkOS.
       *
       * @example 1611796915677
       */
      lastReceivedWebhookEvent?: number;
    };
    /**
     * When `true`, interactions with the Team **must** be done with an authentication token that has been authenticated with the Team's SAML Single Sign-On provider.
     */
    enforced: boolean;
  };
  mfaEnforced?: boolean;
  /**
   * The Team's unique identifier.
   *
   * @example team_nllPyCtREAqxxdyFKbbMDlxd
   */
  id: string;
  /**
   * The Team's slug, which is unique across the Vercel platform.
   *
   * @example my-team
   */
  slug: string;
  /**
   * Name associated with the Team account, or `null` if none has been provided.
   *
   * @example My Team
   */
  name: string | null;
  /**
   * The ID of the file used as avatar for this Team.
   *
   * @example 6eb07268bcfadd309905ffb1579354084c24655c
   */
  avatar: string | null;
  /**
   * The membership of the authenticated User in relation to the Team.
   */
  membership: {
    uid?: string;
    entitlements?: {
      entitlement: string;
    }[];
    confirmed: boolean;
    confirmedAt: number;
    accessRequestedAt?: number;
    role: 'BILLING' | 'CONTRIBUTOR' | 'DEVELOPER' | 'MEMBER' | 'OWNER' | 'SECURITY' | 'VIEWER';
    teamRoles?: ('BILLING' | 'CONTRIBUTOR' | 'DEVELOPER' | 'MEMBER' | 'OWNER' | 'SECURITY' | 'VIEWER')[];
    teamPermissions?: (
      | 'CreateProject'
      | 'EnvVariableManager'
      | 'EnvironmentManager'
      | 'FullProductionDeployment'
      | 'UsageViewer'
    )[];
    teamId?: string;
    createdAt: number;
    created: number;
    joinedFrom?: {
      origin:
        | 'bitbucket'
        | 'dsync'
        | 'feedback'
        | 'github'
        | 'gitlab'
        | 'import'
        | 'link'
        | 'mail'
        | 'organization-teams'
        | 'saml'
        | 'teams';
      commitId?: string;
      repoId?: string;
      repoPath?: string;
      gitUserId?: string | number;
      gitUserLogin?: string;
      ssoUserId?: string;
      ssoConnectedAt?: number;
      idpUserId?: string;
      dsyncUserId?: string;
      dsyncConnectedAt?: number;
    };
  };
  /**
   * Will remain undocumented. Remove in v3 API.
   */
  created: string;
  /**
   * UNIX timestamp (in milliseconds) when the Team was created.
   *
   * @example 1630748523395
   */
  createdAt: number;
};

/**
 * Authentication token metadata.
 */
export type AuthToken = {
  /**
   * The unique identifier of the token.
   *
   * @example 5d9f2ebd38ddca62e5d51e9c1704c72530bdc8bfdd41e782a6687c48399e8391
   */
  id: string;
  /**
   * The human-readable name of the token.
   */
  name: string;
  /**
   * The type of the token.
   *
   * @example oauth2-token
   */
  type: string;
  /**
   * The origin of how the token was created.
   *
   * @example github
   */
  origin?: string;
  /**
   * The access scopes granted to the token.
   */
  scopes?: (
    | {
        type: 'user';
        sudo?: {
          /**
           * Possible multi-factor origins
           */
          origin: 'totp' | 'webauthn' | 'recovery-code';
          expiresAt: number;
        };
        origin:
          | 'saml'
          | 'github'
          | 'gitlab'
          | 'bitbucket'
          | 'email'
          | 'manual'
          | 'passkey'
          | 'otp'
          | 'sms'
          | 'invite'
          | 'google';
        createdAt: number;
        expiresAt?: number;
      }
    | {
        type: 'team';
        teamId: string;
        origin:
          | 'saml'
          | 'github'
          | 'gitlab'
          | 'bitbucket'
          | 'email'
          | 'manual'
          | 'passkey'
          | 'otp'
          | 'sms'
          | 'invite'
          | 'google';
        createdAt: number;
        expiresAt?: number;
      }
  )[];
  /**
   * Timestamp (in milliseconds) of when the token expires.
   *
   * @example 1632816536002
   */
  expiresAt?: number;
  /**
   * Timestamp (in milliseconds) of when the token was most recently used.
   *
   * @example 1632816536002
   */
  activeAt: number;
  /**
   * Timestamp (in milliseconds) of when the token was created.
   *
   * @example 1632816536002
   */
  createdAt: number;
};

/**
 * Data for the currently authenticated User.
 */
export type AuthUser = {
  /**
   * UNIX timestamp (in milliseconds) when the User account was created.
   *
   * @example 1630748523395
   */
  createdAt: number;
  /**
   * When the User account has been "soft blocked", this property will contain the date when the restriction was enacted, and the identifier for why.
   */
  softBlock: {
    blockedAt: number;
    reason:
      | 'BLOCKED_FOR_PLATFORM_ABUSE'
      | 'ENTERPRISE_TRIAL_ENDED'
      | 'FAIR_USE_LIMITS_EXCEEDED'
      | 'SUBSCRIPTION_CANCELED'
      | 'SUBSCRIPTION_EXPIRED'
      | 'UNPAID_INVOICE';
    blockedDueToOverageType?:
      | 'analyticsUsage'
      | 'artifacts'
      | 'bandwidth'
      | 'blobDataTransfer'
      | 'blobTotalAdvancedRequests'
      | 'blobTotalAvgSizeInBytes'
      | 'blobTotalGetResponseObjectSizeInBytes'
      | 'blobTotalSimpleRequests'
      | 'dataCacheRead'
      | 'dataCacheWrite'
      | 'edgeConfigRead'
      | 'edgeConfigWrite'
      | 'edgeFunctionExecutionUnits'
      | 'edgeMiddlewareInvocations'
      | 'edgeRequest'
      | 'edgeRequestAdditionalCpuDuration'
      | 'elasticConcurrencyBuildSlots'
      | 'fastDataTransfer'
      | 'fastOriginTransfer'
      | 'functionDuration'
      | 'functionInvocation'
      | 'imageOptimizationCacheRead'
      | 'imageOptimizationCacheWrite'
      | 'imageOptimizationTransformation'
      | 'logDrainsVolume'
      | 'monitoringMetric'
      | 'observabilityEvent'
      | 'postgresComputeTime'
      | 'postgresDataStorage'
      | 'postgresDataTransfer'
      | 'postgresDatabase'
      | 'postgresWrittenData'
      | 'serverlessFunctionExecution'
      | 'sourceImages'
      | 'storageRedisTotalBandwidthInBytes'
      | 'storageRedisTotalCommands'
      | 'storageRedisTotalDailyAvgStorageInBytes'
      | 'storageRedisTotalDatabases'
      | 'wafOwaspExcessBytes'
      | 'wafOwaspRequests'
      | 'wafRateLimitRequest'
      | 'webAnalyticsEvent';
  } | null;
  /**
   * An object containing billing infomation associated with the User account.
   */
  billing: Record<string, any> | null;
  /**
   * An object containing infomation related to the amount of platform resources may be allocated to the User account.
   */
  resourceConfig: {
    /**
     * An object containing infomation related to the amount of platform resources may be allocated to the User account.
     */
    nodeType?: string;
    /**
     * An object containing infomation related to the amount of platform resources may be allocated to the User account.
     */
    concurrentBuilds?: number;
    /**
     * An object containing infomation related to the amount of platform resources may be allocated to the User account.
     */
    buildEntitlements?: {
      /**
       * An object containing infomation related to the amount of platform resources may be allocated to the User account.
       */
      enhancedBuilds?: boolean;
    };
    /**
     * An object containing infomation related to the amount of platform resources may be allocated to the User account.
     */
    awsAccountType?: string;
    /**
     * An object containing infomation related to the amount of platform resources may be allocated to the User account.
     */
    awsAccountIds?: string[];
    /**
     * An object containing infomation related to the amount of platform resources may be allocated to the User account.
     */
    cfZoneName?: string;
    /**
     * An object containing infomation related to the amount of platform resources may be allocated to the User account.
     */
    imageOptimizationType?: string;
    /**
     * An object containing infomation related to the amount of platform resources may be allocated to the User account.
     */
    edgeConfigs?: number;
    /**
     * An object containing infomation related to the amount of platform resources may be allocated to the User account.
     */
    edgeConfigSize?: number;
    /**
     * An object containing infomation related to the amount of platform resources may be allocated to the User account.
     */
    edgeFunctionMaxSizeBytes?: number;
    /**
     * An object containing infomation related to the amount of platform resources may be allocated to the User account.
     */
    edgeFunctionExecutionTimeoutMs?: number;
    /**
     * An object containing infomation related to the amount of platform resources may be allocated to the User account.
     */
    serverlessFunctionDefaultMaxExecutionTime?: number;
    /**
     * An object containing infomation related to the amount of platform resources may be allocated to the User account.
     */
    serverlessFunctionMaxMemorySize?: number;
    /**
     * An object containing infomation related to the amount of platform resources may be allocated to the User account.
     */
    kvDatabases?: number;
    /**
     * An object containing infomation related to the amount of platform resources may be allocated to the User account.
     */
    postgresDatabases?: number;
    /**
     * An object containing infomation related to the amount of platform resources may be allocated to the User account.
     */
    blobStores?: number;
    /**
     * An object containing infomation related to the amount of platform resources may be allocated to the User account.
     */
    integrationStores?: number;
    /**
     * An object containing infomation related to the amount of platform resources may be allocated to the User account.
     */
    cronJobs?: number;
    /**
     * An object containing infomation related to the amount of platform resources may be allocated to the User account.
     */
    cronJobsPerProject?: number;
    /**
     * An object containing infomation related to the amount of platform resources may be allocated to the User account.
     */
    microfrontendGroupsPerTeam?: number;
    /**
     * An object containing infomation related to the amount of platform resources may be allocated to the User account.
     */
    microfrontendProjectsPerGroup?: number;
    /**
     * An object containing infomation related to the amount of platform resources may be allocated to the User account.
     */
    flagsExplorerOverridesThreshold?: number;
    /**
     * An object containing infomation related to the amount of platform resources may be allocated to the User account.
     */
    flagsExplorerUnlimitedOverrides?: boolean;
    /**
     * An object containing infomation related to the amount of platform resources may be allocated to the User account.
     */
    customEnvironmentsPerProject?: number;
    /**
     * An object containing infomation related to the amount of platform resources may be allocated to the User account.
     */
    buildMachine?: {
      /**
       * An object containing infomation related to the amount of platform resources may be allocated to the User account.
       */
      purchaseType?: 'enhanced' | 'ultra';
      /**
       * An object containing infomation related to the amount of platform resources may be allocated to the User account.
       */
      isDefaultBuildMachine?: boolean;
      /**
       * An object containing infomation related to the amount of platform resources may be allocated to the User account.
       */
      cores?: number;
      /**
       * An object containing infomation related to the amount of platform resources may be allocated to the User account.
       */
      memory?: number;
    };
  };
  /**
   * Prefix that will be used in the URL of "Preview" deployments created by the User account.
   */
  stagingPrefix: string;
  /**
   * set of dashboard view preferences (cards or list) per scopeId
   */
  activeDashboardViews?: {
    scopeId: string;
    viewPreference?: 'cards' | 'list' | null;
    favoritesViewPreference?: 'closed' | 'open' | null;
    recentsViewPreference?: 'closed' | 'open' | null;
  }[];
  importFlowGitNamespace?: string | number | null;
  importFlowGitNamespaceId?: string | number | null;
  importFlowGitProvider?: 'bitbucket' | 'github' | 'github-custom-host' | 'gitlab' | null;
  preferredScopesAndGitNamespaces?: {
    scopeId: string;
    gitNamespaceId: string | number | null;
  }[];
  /**
   * A record of when, under a certain scopeId, a toast was dismissed
   */
  dismissedToasts?: {
    name: string;
    dismissals: {
      scopeId: string;
      createdAt: number;
    }[];
  }[];
  /**
   * A list of projects and spaces across teams that a user has marked as a favorite.
   */
  favoriteProjectsAndSpaces?: {
    teamId: string;
    projectId: string;
  }[];
  /**
   * Whether the user has a trial available for a paid plan subscription.
   */
  hasTrialAvailable: boolean;
  /**
   * remote caching settings
   */
  remoteCaching?: {
    enabled?: boolean;
  };
  /**
   * data cache settings
   */
  dataCache?: {
    excessBillingEnabled?: boolean;
  };
  /**
   * Feature blocks for the user
   */
  featureBlocks?: {
    webAnalytics?: {
      blockedFrom?: number;
      blockedUntil?: number;
      isCurrentlyBlocked: boolean;
    };
  };
  northstarMigration?: {
    /**
     * The ID of the team we created for this user.
     */
    teamId: string;
    /**
     * The number of projects migrated for this user.
     */
    projects: number;
    /**
     * The number of stores migrated for this user.
     */
    stores: number;
    /**
     * The number of integration configurations migrated for this user.
     */
    integrationConfigurations: number;
    /**
     * The number of integration clients migrated for this user.
     */
    integrationClients: number;
    /**
     * The migration start time timestamp for this user.
     */
    startTime: number;
    /**
     * The migration end time timestamp for this user.
     */
    endTime: number;
  };
  /**
   * The User's unique identifier.
   *
   * @example AEIIDYVk59zbFF2Sxfyxxmua
   */
  id: string;
  /**
   * Email address associated with the User account.
   *
   * @example me@example.com
   */
  email: string;
  /**
   * Name associated with the User account, or `null` if none has been provided.
   *
   * @example John Doe
   */
  name: string | null;
  /**
   * Unique username associated with the User account.
   *
   * @example jdoe
   */
  username: string;
  /**
   * SHA1 hash of the avatar for the User account. Can be used in conjuction with the ... endpoint to retrieve the avatar image.
   *
   * @example 22cb30c85ff45ac4c72de8981500006b28114aa1
   */
  avatar: string | null;
  /**
   * The user's default team.
   */
  defaultTeamId: string | null;
  /**
   * The user's version. Will always be `northstar`.
   */
  version: 'northstar';
};

/**
 * A limited form of data for the currently authenticated User, due to the authentication token missing privileges to read the full User data.
 */
export type AuthUserLimited = {
  /**
   * Property indicating that this User data contains only limited information, due to the authentication token missing privileges to read the full User data. Re-login with email, GitHub, GitLab or Bitbucket in order to upgrade the authentication token with the necessary privileges.
   */
  limited: boolean;
  /**
   * The User's unique identifier.
   *
   * @example AEIIDYVk59zbFF2Sxfyxxmua
   */
  id: string;
  /**
   * Email address associated with the User account.
   *
   * @example me@example.com
   */
  email: string;
  /**
   * Name associated with the User account, or `null` if none has been provided.
   *
   * @example John Doe
   */
  name: string | null;
  /**
   * Unique username associated with the User account.
   *
   * @example jdoe
   */
  username: string;
  /**
   * SHA1 hash of the avatar for the User account. Can be used in conjuction with the ... endpoint to retrieve the avatar image.
   *
   * @example 22cb30c85ff45ac4c72de8981500006b28114aa1
   */
  avatar: string | null;
  /**
   * The user's default team.
   */
  defaultTeamId: string | null;
  /**
   * The user's version. Will always be `northstar`.
   */
  version: 'northstar';
};

/**
 * A deployment file tree entry
 */
export type FileTree = {
  /**
   * The name of the file tree entry
   *
   * @example my-file.json
   */
  name: string;
  /**
   * String indicating the type of file tree entry.
   *
   * @example file
   */
  type: 'directory' | 'file' | 'invalid' | 'lambda' | 'middleware' | 'symlink';
  /**
   * The unique identifier of the file (only valid for the `file` type)
   *
   * @example 2d4aad419917f15b1146e9e03ddc9bb31747e4d0
   */
  uid?: string;
  /**
   * The list of children files of the directory (only valid for the `directory` type)
   */
  children?: FileTree[];
  /**
   * The content-type of the file (only valid for the `file` type)
   *
   * @example application/json
   */
  contentType?: string;
  /**
   * The file "mode" indicating file type and permissions.
   */
  mode: number;
  /**
   * Not currently used. See `file-list-to-tree.ts`.
   */
  symlink?: string;
};
