/**
 * Generated by @openapi-codegen
 *
 * @version 4.0.0
 */
import type * as Schemas from './schemas';

export type ApiShieldGenericFailure = Schemas.ApiShieldApiResponseCommonFailure;

export type ApiShieldGlobalSettingsEditSuccess = Schemas.ApiShieldApiResponseSingle & {
  result: Schemas.ApiShieldGlobalSettings;
};

export type ApiShieldGlobalSettingsGetSuccess = Schemas.ApiShieldApiResponseSingle & {
  result: Schemas.ApiShieldGlobalSettings;
};

export type ApiShieldGlobalSettingsUpdateSuccess = Schemas.ApiShieldApiResponseSingle & {
  result: Schemas.ApiShieldGlobalSettings;
};

export type ApiShieldPerOperationSettingGetSuccess = Schemas.ApiShieldApiResponseCommon & {
  result: Schemas.ApiShieldPerOperationSetting;
};

export type ApiShieldPerOperationSettingUpdateSuccess = Schemas.ApiShieldApiResponseCommon & {
  result: Schemas.ApiShieldPerOperationSetting;
};

export type ApiShieldPerOperationSettingsBulkEditSuccess = Schemas.ApiShieldApiResponseCommon & {
  result: Schemas.ApiShieldPerOperationBulkSettings;
};

export type ApiShieldPerOperationSettingsDeleteSuccess = Schemas.ApiShieldApiResponseCommon & {
  result: {
    operation_id?: Schemas.ApiShieldSchemasUuid;
  };
};

export type ApiShieldPerOperationSettingsListSuccess = Schemas.ApiShieldApiResponseCollection & {
  result: Schemas.ApiShieldPerOperationSetting[];
};

export type ApiShieldSchemaCreateFailure = {
  /**
   * Describes errors in the schema that prohibited accepting the schema.
   *
   * @example {"code":7003,"message":"No route for the URI"}
   * @minLength 1
   */
  errors: Schemas.ApiShieldMessages;
  /**
   * Describes issues in the schema and how they were resolved to accept the schema.
   */
  messages: Schemas.ApiShieldMessages;
  result: any | null;
  /**
   * Whether the API call was successful.
   *
   * @example false
   */
  success?: false;
};

export type ApiShieldSchemaCreateSuccess = Schemas.ApiShieldPublicSchemaSuccessResult & {
  /**
   * Describes errors in the schema that prohibited accepting the schema.
   */
  errors?: Schemas.ApiShieldSchemaIssueNotification[];
  /**
   * Describes issues in the schema and how they were resolved to accept the schema.
   */
  messages: Schemas.ApiShieldSchemaIssueNotification[];
};

export type ApiShieldSchemaDeleteSuccess = Schemas.ApiShieldApiResponseSingle & {
  result: {
    /**
     * The ID of the schema that was just deleted
     *
     * @format uuid
     * @x-auditable true
     */
    schema_id: string;
  };
};

export type ApiShieldSchemaEditSuccess = Schemas.ApiShieldPublicSchemaSuccessResult;

export type ApiShieldSchemaGetSuccess = Schemas.ApiShieldPublicSchemaSuccessResult;

export type ApiShieldSchemaHostsGetSuccess = Schemas.ApiShieldApiResponseCollection & {
  result: Schemas.ApiShieldSchemaHosts[];
};

export type ApiShieldSchemasExtractOperationsGetSuccess = Schemas.ApiShieldApiResponseCollection & {
  result: (Schemas.ApiShieldOperation | Schemas.ApiShieldBasicOperation)[];
};

export type ApiShieldSchemasListSuccess = Schemas.ApiShieldApiResponseCollection & {
  result: Schemas.ApiShieldSchemasPublicSchema[];
};

export type BrandProtectionApiDEFAULTERROR = Schemas.BrandProtectionApiError;

export type BrandProtectionApiUNPROCESSABLECONTENT = Schemas.BrandProtectionApiError;

export type EmailSecurityClientError = {
  /**
   * @example {"code":7003,"message":"No route for the URI"}
   */
  errors: Schemas.EmailSecurityMessage[];
  messages: Schemas.EmailSecurityMessage[];
  result: Record<string, any> | null;
  /**
   * @example false
   */
  success: boolean;
};

export type RulesetsEmpty = void;

/**
 * A response object.
 */
export type RulesetsFailure = {
  errors: Schemas.RulesetsErrors;
  messages: Schemas.RulesetsMessages;
  /**
   * A result.
   */
  result: any;
  /**
   * Whether the API call was successful.
   */
  success: false;
};

/**
 * A response object.
 */
export type RulesetsManagedTransforms = {
  errors: Schemas.RulesetsErrors;
  messages: Schemas.RulesetsMessages;
  /**
   * A result.
   */
  result: Schemas.RulesetsManagedTransforms;
  /**
   * Whether the API call was successful.
   */
  success: true;
};

/**
 * A response object.
 */
export type RulesetsRuleset = {
  errors: Schemas.RulesetsErrors;
  messages: Schemas.RulesetsMessages;
  /**
   * A ruleset object.
   */
  result: Schemas.RulesetsRuleset & {
    kind: Schemas.RulesetsRulesetKind;
    phase: Schemas.RulesetsRulesetPhase;
    rules: Schemas.RulesetsResponseRules;
  };
  /**
   * Whether the API call was successful.
   */
  success: true;
};

/**
 * A response object.
 */
export type RulesetsRulesets = {
  errors: Schemas.RulesetsErrors;
  messages: Schemas.RulesetsMessages;
  /**
   * A list of rulesets. The returned information will not include the rules in each ruleset.
   */
  result: (Schemas.RulesetsRuleset & {
    kind: Schemas.RulesetsRulesetKind;
    phase: Schemas.RulesetsRulesetPhase;
  })[];
  /**
   * Whether the API call was successful.
   */
  success: true;
  result_info?: Schemas.RulesetsResultInfo;
};

/**
 * A response object.
 */
export type RulesetsUrlNormalization = {
  errors: Schemas.RulesetsErrors;
  messages: Schemas.RulesetsMessages;
  /**
   * A result.
   */
  result: Schemas.RulesetsUrlNormalization;
  /**
   * Whether the API call was successful.
   */
  success: true;
};

/**
 * @example {"errors":[],"messages":[],"result":{"created_on":"2022-05-05T05:15:11.602148Z","etag":"777f24a43bef5f69174aa69ceaf1dea67968d510a31d1vw3e49d34a0187c06d1","handlers":["fetch"],"id":"this-is_my_script-01","logpush":false,"modified_on":"2022-05-20T19:02:56.446492Z","placement_mode":"smart","startup_time_ms":10,"tail_consumers":[{"environment":"production","service":"my-log-consumer"}],"usage_model":"standard"},"success":true}
 */
export type Workers200 = Schemas.WorkersScriptResponseUploadSingle & Record<string, any>;

export type Workers4XX = Schemas.WorkersApiResponseCommonFailure;
