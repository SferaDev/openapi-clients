/**
 * Generated by @openapi-codegen
 *
 * @version 4.0.0
 */
import type * as Schemas from "./schemas";

export type ApiShieldConfigGetSuccess =
  Schemas.ApiShieldConfigurationSingleResponse;

export type ApiShieldConfigUpdateSuccess =
  Schemas.ApiShieldConfigurationSingleResponse;

export type ApiShieldCreateConfigSuccess =
  Schemas.ApiShieldApiResponseCommon & {
    result: Schemas.ApiShieldTokenConfiguration;
  };

export type ApiShieldCreateRuleSuccess = Schemas.ApiShieldApiResponseSingle & {
  result: Schemas.ApiShieldRule;
};

export type ApiShieldDeleteConfigSuccess =
  Schemas.ApiShieldApiResponseCommon & {
    result: {
      config_id?: Schemas.ApiShieldSchemasUuid;
    };
  };

export type ApiShieldDeleteRuleSuccess = Schemas.ApiShieldApiResponseSingleObj;

export type ApiShieldEditConfigSuccess = Schemas.ApiShieldApiResponseCommon & {
  result: {
    description?: Schemas.ApiShieldDescription;
    title?: Schemas.ApiShieldTitle;
    token_sources?: Schemas.ApiShieldTokenSources;
  };
};

export type ApiShieldEditRuleSuccess = Schemas.ApiShieldApiResponseSingle & {
  result: Schemas.ApiShieldRule;
};

export type ApiShieldGenericFailure = Schemas.ApiShieldApiResponseCommonFailure;

export type ApiShieldGenericFailure = Schemas.ApiShieldApiResponseCommonFailure;

export type ApiShieldGetConfigSuccess = Schemas.ApiShieldApiResponseCommon & {
  result: Schemas.ApiShieldTokenConfiguration;
};

export type ApiShieldGetRuleSuccess = Schemas.ApiShieldApiResponseCommon & {
  result: Schemas.ApiShieldRule;
};

export type ApiShieldGlobalSettingsEditSuccess =
  Schemas.ApiShieldApiResponseSingle & {
    result: Schemas.ApiShieldGlobalSettings;
  };

export type ApiShieldGlobalSettingsGetSuccess =
  Schemas.ApiShieldApiResponseSingle & {
    result: Schemas.ApiShieldGlobalSettings;
  };

export type ApiShieldGlobalSettingsUpdateSuccess =
  Schemas.ApiShieldApiResponseSingle & {
    result: Schemas.ApiShieldGlobalSettings;
  };

export type ApiShieldListConfigsSuccess =
  Schemas.ApiShieldApiResponseCollection & {
    result: Schemas.ApiShieldTokenConfiguration[];
  };

export type ApiShieldListRulesSuccess =
  Schemas.ApiShieldApiResponseCollection & {
    result: Schemas.ApiShieldRule[];
  };

export type ApiShieldPerOperationSettingGetSuccess =
  Schemas.ApiShieldApiResponseCommon & {
    result: Schemas.ApiShieldPerOperationSetting;
  };

export type ApiShieldPerOperationSettingUpdateSuccess =
  Schemas.ApiShieldApiResponseCommon & {
    result: Schemas.ApiShieldPerOperationSetting;
  };

export type ApiShieldPerOperationSettingsBulkEditSuccess =
  Schemas.ApiShieldApiResponseCommon & {
    result: Schemas.ApiShieldPerOperationBulkSettings;
  };

export type ApiShieldPerOperationSettingsDeleteSuccess =
  Schemas.ApiShieldApiResponseCommon & {
    result: {
      operation_id?: Schemas.ApiShieldSchemasUuid;
    };
  };

export type ApiShieldPerOperationSettingsListSuccess =
  Schemas.ApiShieldApiResponseCollection & {
    result: Schemas.ApiShieldPerOperationSetting[];
  };

export type ApiShieldPreviewRulesSuccess =
  Schemas.ApiShieldApiResponseCollection & {
    result: {
      /**
       * All hostnames on zone used by operations
       *
       * @uniqueItems true
       */
      available_hosts?: Schemas.ApiShieldHost[];
      /**
       * Number of operations with `excluded` `state`
       *
       * @example 40
       * @x-auditable true
       */
      excluded?: number;
      /**
       * Number of operations with `ignored` `state`
       *
       * @example 10
       * @x-auditable true
       */
      ignored?: number;
      /**
       * Number of operations with `included` `state`
       *
       * @example 50
       * @x-auditable true
       */
      included?: number;
      operations?: {
        endpoint?: Schemas.ApiShieldEndpoint;
        host?: Schemas.ApiShieldHost;
        last_updated?: Schemas.ApiShieldSchemasTimestamp;
        method?: Schemas.ApiShieldMethod;
        operation_id?: Schemas.ApiShieldSchemasUuid;
        state?: Schemas.ApiShieldSelectorOperationState;
      }[];
      /**
       * Hostnames of `included` operations
       *
       * @uniqueItems true
       */
      selected_hosts?: Schemas.ApiShieldHost[];
      /**
       * Number of operations on zone
       *
       * @example 100
       * @x-auditable true
       */
      total?: number;
    };
  };

export type ApiShieldSchemaCreateFailure = {
  /**
   * Describes errors in the schema that prohibited accepting the schema.
   *
   * @example {"code":7003,"message":"No route for the URI"}
   * @minLength 1
   */
  errors: Schemas.ApiShieldMessages;
  /**
   * Describes issues in the schema and how they were resolved to accept the schema.
   */
  messages: Schemas.ApiShieldMessages;
  result: any | null;
  /**
   * Whether the API call was successful.
   *
   * @example false
   */
  success?: false;
};

export type ApiShieldSchemaCreateSuccess =
  Schemas.ApiShieldPublicSchemaSuccessResult & {
    /**
     * Describes errors in the schema that prohibited accepting the schema.
     */
    errors?: Schemas.ApiShieldSchemaIssueNotification[];
    /**
     * Describes issues in the schema and how they were resolved to accept the schema.
     */
    messages: Schemas.ApiShieldSchemaIssueNotification[];
  };

export type ApiShieldSchemaDeleteSuccess =
  Schemas.ApiShieldApiResponseSingle & {
    result: {
      /**
       * The ID of the schema that was just deleted
       *
       * @format uuid
       * @x-auditable true
       */
      schema_id: string;
    };
  };

export type ApiShieldSchemaEditSuccess =
  Schemas.ApiShieldPublicSchemaSuccessResult;

export type ApiShieldSchemaGetSuccess =
  Schemas.ApiShieldPublicSchemaSuccessResult;

export type ApiShieldSchemaHostsGetSuccess =
  Schemas.ApiShieldApiResponseCollection & {
    result: Schemas.ApiShieldSchemaHosts[];
  };

export type ApiShieldSchemasExtractOperationsGetSuccess =
  Schemas.ApiShieldApiResponseCollection & {
    result: (Schemas.ApiShieldOperation | Schemas.ApiShieldBasicOperation)[];
  };

export type ApiShieldSchemasListSuccess =
  Schemas.ApiShieldApiResponseCollection & {
    result: Schemas.ApiShieldSchemasPublicSchema[];
  };

export type ApiShieldUpdateConfigCredentialsSuccess =
  Schemas.ApiShieldApiResponseCommon & Schemas.ApiShieldCredentials;

export type BrandProtectionApiDEFAULTERROR = Schemas.BrandProtectionApiError;

export type BrandProtectionApiUNPROCESSABLECONTENT =
  Schemas.BrandProtectionApiError;

export type BuildsBadRequest = Schemas.BuildsErrorResponse;

export type BuildsNotFound = Schemas.BuildsErrorResponse;

export type BuildsSuccessEmpty = Schemas.BuildsAPIResponse;

export type BuildsUnauthorized = Schemas.BuildsErrorResponse;

export type EmailSecurityClientError = {
  /**
   * @example {"code":7003,"message":"No route for the URI"}
   */
  errors: Schemas.EmailSecurityMessage[];
  messages: Schemas.EmailSecurityMessage[];
  result: Record<string, any> | null;
  /**
   * @example false
   */
  success: boolean;
};

export type RealtimekitAddParticipant = {
  /**
   * Represents a participant.
   */
  data?: Schemas.RealtimekitParticipant & {
    /**
     * The participant's auth token that can be used for joining a meeting from the client side.
     */
    token: string;
  };
  /**
   * Success status of the operation
   *
   * @default true
   */
  success: boolean;
};

export type RealtimekitCreatePoll = {
  data?: {
    action?: string;
    poll?: Schemas.RealtimekitPoll;
  };
  success?: boolean;
};

export type RealtimekitDeleteParticipant = {
  /**
   * Data returned by the operation
   */
  data?: {
    /**
     * Timestamp this object was created at. The time is returned in ISO format.
     *
     * @format date-time
     */
    created_at: string;
    /**
     * A unique participant ID generated by the client.
     */
    custom_participant_id: string;
    /**
     * ID of the preset applied to this participant.
     *
     * @format uuid
     */
    preset_id: string;
    /**
     * Timestamp this object was updated at. The time is returned in ISO format.
     *
     * @format date-time
     */
    updated_at: string;
  };
  /**
   * Success status of the operation
   *
   * @default true
   */
  success: boolean;
};

export type RealtimekitGenericError = Schemas.RealtimekitGenericErrorResponse;

export type RealtimekitGetActiveRecording = {
  /**
   * Data returned by the operation
   */
  data: Schemas.RealtimekitRecording;
  /**
   * Success status of the operation
   *
   * @default true
   */
  success?: boolean;
};

export type RealtimekitGetActiveSession = {
  data?: Schemas.RealtimekitActiveSession;
  success?: boolean;
};

export type RealtimekitGetActiveSessionNotFound =
  Schemas.RealtimekitGenericErrorResponse;

export type RealtimekitGetAllMeetings = {
  data: Schemas.RealtimekitMeeting[];
  paging: {
    /**
     * @example 30
     */
    end_offset: number;
    /**
     * @example 1
     */
    start_offset: number;
    /**
     * @example 30
     * @minimum 0
     */
    total_count: number;
  };
  /**
   * @example true
   */
  success: boolean;
};

export type RealtimekitGetAllParticipants = {
  data: Schemas.RealtimekitParticipant[];
  paging: {
    /**
     * @example 30
     */
    end_offset: number;
    /**
     * @example 1
     */
    start_offset: number;
    /**
     * @example 30
     * @minimum 0
     */
    total_count: number;
  };
  /**
   * @example true
   */
  success: boolean;
};

export type RealtimekitGetAllPresets = {
  data: Schemas.RealtimekitPresetListItem[];
  paging: {
    /**
     * @example 30
     */
    end_offset: number;
    /**
     * @example 1
     */
    start_offset: number;
    /**
     * @example 30
     * @minimum 0
     */
    total_count: number;
  };
  /**
   * @example true
   */
  success: boolean;
};

export type RealtimekitGetDaywiseStats = {
  data?: Schemas.RealtimekitDaywiseStats[];
  succes?: boolean;
};

export type RealtimekitGetMeeting =
  Schemas.RealtimekitGenericSuccessResponse & {
    data?: Schemas.RealtimekitMeeting;
  } & Record<string, any>;

export type RealtimekitGetOverallStats = {
  data?: Schemas.RealtimekitOverallStats;
  success?: boolean;
};

export type RealtimekitGetParticipant = {
  /**
   * Data returned by the operation
   */
  data: Schemas.RealtimekitParticipant;
  /**
   * Success status of the operation
   *
   * @default true
   */
  success?: boolean;
};

export type RealtimekitGetParticipantDataFromPeerId = {
  data?: {
    participant?: {
      created_at?: string;
      custom_participant_id?: string;
      display_name?: string;
      duration?: number;
      id?: string;
      joined_at?: string;
      left_at?: string;
      peer_report?: {
        metadata?: {
          audio_devices_updates?: Record<string, any>[];
          browser_metadata?: {
            browser?: string;
            browser_version?: string;
            engine?: string;
            user_agent?: string;
            webgl_support?: string;
          };
          candidate_pairs?: {
            consuming_transport?: Record<string, any>[];
            producing_transport?: {
              available_outgoing_bitrate?: number;
              bytes_discarded_on_send?: number;
              bytes_received?: number;
              bytes_sent?: number;
              current_round_trip_time?: number;
              last_packet_received_timestamp?: number;
              last_packet_sent_timestamp?: number;
              local_candidate_address?: string;
              local_candidate_id?: string;
              local_candidate_network_type?: string;
              local_candidate_port?: number;
              local_candidate_protocol?: string;
              local_candidate_related_address?: string;
              local_candidate_related_port?: number;
              local_candidate_type?: string;
              nominated?: boolean;
              packets_discarded_on_send?: number;
              packets_received?: number;
              packets_sent?: number;
              remote_candidate_address?: string;
              remote_candidate_id?: string;
              remote_candidate_port?: number;
              remote_candidate_protocol?: string;
              remote_candidate_type?: string;
              total_round_trip_time?: number;
            }[];
          };
          device_info?: {
            cpus?: number;
            is_mobile?: boolean;
            os?: string;
            os_version?: string;
          };
          events?: {
            name?: string;
            timestamp?: string;
          }[];
          ip_information?: {
            asn?: {
              asn?: string;
            };
            city?: string;
            country?: string;
            ipv4?: string;
            region?: string;
            timezone?: string;
          };
          pc_metadata?: {
            effective_network_type?: string;
            reflexive_connectivity?: boolean;
            relay_connectivity?: boolean;
            timestamp?: string;
            turn_connectivity?: boolean;
          }[];
          room_view_type?: string;
          sdk_name?: string;
          sdk_version?: string;
          selected_device_updates?: Record<string, any>[];
          speaker_devices_updates?: Record<string, any>[];
          video_devices_updates?: Record<string, any>[];
        };
        quality?: {
          audio_consumer?: Record<string, any>[];
          audio_consumer_cumulative?: Record<string, any>;
          audio_producer?: {
            bytes_sent?: number;
            jitter?: number;
            mid?: string;
            mos_quality?: number;
            packets_lost?: number;
            packets_sent?: number;
            producer_id?: string;
            rtt?: number;
            ssrc?: number;
            timestamp?: string;
          }[];
          audio_producer_cumulative?: {
            packet_loss?: {
              ["10_or_greater_event_fraction"]?: number;
              ["25_or_greater_event_fraction"]?: number;
              ["50_or_greater_event_fraction"]?: number;
              ["5_or_greater_event_fraction"]?: number;
              avg?: number;
            };
            quality_mos?: {
              avg?: number;
              p50?: number;
              p75?: number;
              p90?: number;
            };
            rtt?: {
              ["100ms_or_greater_event_fraction"]?: number;
              ["250ms_or_greater_event_fraction"]?: number;
              ["500ms_or_greater_event_fraction"]?: number;
              avg?: number;
            };
          };
          screenshare_audio_consumer?: Record<string, any>[];
          screenshare_audio_consumer_cumulative?: Record<string, any>;
          screenshare_audio_producer?: Record<string, any>[];
          screenshare_audio_producer_cumulative?: Record<string, any>;
          screenshare_video_consumer?: Record<string, any>[];
          screenshare_video_consumer_cumulative?: Record<string, any>;
          screenshare_video_producer?: Record<string, any>[];
          screenshare_video_producer_cumulative?: Record<string, any>;
          video_consumer?: Record<string, any>[];
          video_consumer_cumulative?: Record<string, any>;
          video_producer?: Record<string, any>[];
          video_producer_cumulative?: Record<string, any>;
        };
      };
      peer_stats?: {
        device_info?: {
          browser?: string;
          browser_version?: string;
          cpus?: number;
          engine?: string;
          is_mobile?: boolean;
          os?: string;
          os_version?: string;
          sdk_name?: string;
          sdk_version?: string;
          user_agent?: string;
          webgl_support?: string;
        };
        events?: {
          metadata?: {
            connection_info?: {
              backend_r_t_t?: number;
              connectivity?: {
                host?: boolean;
                reflexive?: boolean;
                relay?: boolean;
              };
              effective_network_type?: string;
              fractional_loss?: number;
              ip_details?: {
                asn?: {
                  asn?: string;
                };
                city?: string;
                country?: string;
                ip?: string;
                loc?: string;
                postal?: string;
                region?: string;
                timezone?: string;
              };
              jitter?: number;
              location?: {
                coords?: {
                  latitude?: number;
                  longitude?: number;
                };
              };
              r_t_t?: number;
              throughput?: number;
              turn_connectivity?: boolean;
            };
          };
          timestamp?: string;
          type?: string;
        }[];
        ip_information?: {
          asn?: {
            asn?: string;
          };
          city?: string;
          country?: string;
          ip_location?: string;
          ipv4?: string;
          org?: string;
          region?: string;
          timezone?: string;
        };
        precall_network_information?: {
          backend_rtt?: number;
          effective_networktype?: string;
          fractional_loss?: number;
          jitter?: number;
          reflexive_connectivity?: boolean;
          relay_connectivity?: boolean;
          rtt?: number;
          throughput?: number;
          turn_connectivity?: boolean;
        };
      };
      quality_stats?: {
        audio_bandwidth?: number;
        audio_stats?: Record<string, any>[];
        average_quality?: number;
        end?: string | null;
        first_audio_packet_received?: string;
        first_video_packet_received?: string;
        last_audio_packet_received?: string;
        last_video_packet_received?: string;
        peer_ids?: string[];
        start?: string | null;
        total_audio_packets?: number;
        total_audio_packets_lost?: number;
        total_video_packets?: number;
        total_video_packets_lost?: number;
        video_bandwidth?: number;
        video_stats?: Record<string, any>[];
      };
      role?: string;
      updated_at?: string;
      user_id?: string;
    };
  };
  success?: boolean;
};

export type RealtimekitGetParticipantDetails = {
  data?: {
    participant?: Schemas.RealtimekitParticipantsList &
      Schemas.RealtimekitParticipantPeerStats &
      Schemas.RealtimekitParticipantQualityStats;
  };
  success?: boolean;
};

export type RealtimekitGetPresetBody = {
  /**
   * Data returned by the operation
   */
  data: {
    /**
     * ID of the preset
     *
     * @format uuid
     */
    id: string;
  } & Schemas.RealtimekitPreset;
  /**
   * Success status of the operation
   *
   * @default true
   */
  success?: boolean;
};

export type RealtimekitGetRecording = {
  /**
   * Data returned by the operation
   */
  data?: Schemas.RealtimekitRecording & {
    start_reason?: Schemas.RealtimekitStartReason;
    stop_reason?: Schemas.RealtimekitStopReason;
    storage_config?: Schemas.RealtimekitStorageConfig;
  };
  /**
   * Success status of the operation
   *
   * @default true
   */
  success: boolean;
};

export type RealtimekitGetRecordings = {
  data: (Schemas.RealtimekitRecording & {
    storage_config?: Schemas.RealtimekitStorageConfig;
  } & {
    meeting?: Schemas.RealtimekitMeeting;
  })[];
  paging: {
    /**
     * @example 30
     */
    end_offset: number;
    /**
     * @example 1
     */
    start_offset: number;
    /**
     * @example 30
     * @minimum 0
     */
    total_count: number;
  };
  /**
   * @example true
   */
  success: boolean;
};

export type RealtimekitGetSessionChat = {
  data?: Schemas.RealtimekitChatMessage;
  success?: boolean;
};

export type RealtimekitGetSessionDetails = {
  data?: {
    session?: Schemas.RealtimekitActiveSession;
  };
  success?: boolean;
};

export type RealtimekitGetSessionParticipants = {
  data?: {
    participants?: Schemas.RealtimekitParticipantsList[];
  };
  success?: boolean;
};

export type RealtimekitGetSessionTranscript = {
  data?: Schemas.RealtimekitTranscript;
  success?: boolean;
};

export type RealtimekitGetSessionTranscriptSummary = {
  data?: Schemas.RealtimekitTranscriptSummary;
  success?: boolean;
};

export type RealtimekitGetSessions = {
  data?: {
    sessions?: Schemas.RealtimekitActiveSession[];
  };
  success?: boolean;
};

export type RealtimekitKickAllParticipants = {
  data?: {
    action?: string;
    kicked_participants_count?: number;
  };
  success?: boolean;
};

export type RealtimekitKickParticipants = {
  data?: {
    action?: string;
    participants?: Schemas.RealtimekitSessionParticipant[];
  };
  success?: boolean;
};

export type RealtimekitMuteAllParticipants = {
  data?: {
    action?: string;
    muted_participants_count?: number;
  };
  success?: boolean;
};

export type RealtimekitMuteParticipants = {
  data?: {
    action?: string;
    participants?: Schemas.RealtimekitSessionParticipant[];
  };
  success?: boolean;
};

export type RealtimekitParticipantNotFound =
  Schemas.RealtimekitGenericErrorResponse;

export type RealtimekitRegenToken = {
  /**
   * Data returned by the operation
   */
  data: {
    /**
     * Regenerated participant's authentication token.
     */
    token: string;
  };
  /**
   * Success status of the operation
   *
   * @default true
   */
  success?: boolean;
};

export type RulesetsEmpty = void;

/**
 * A response object.
 */
export type RulesetsFailure = {
  errors: Schemas.RulesetsErrors;
  messages: Schemas.RulesetsMessages;
  /**
   * A result.
   */
  result: any;
  /**
   * Whether the API call was successful.
   */
  success: false;
};

/**
 * A response object.
 */
export type RulesetsManagedTransforms = {
  errors: Schemas.RulesetsErrors;
  messages: Schemas.RulesetsMessages;
  /**
   * A result.
   */
  result: Schemas.RulesetsManagedTransforms;
  /**
   * Whether the API call was successful.
   */
  success: true;
};

/**
 * A response object.
 */
export type RulesetsRuleset = {
  errors: Schemas.RulesetsErrors;
  messages: Schemas.RulesetsMessages;
  /**
   * A ruleset object.
   */
  result: Schemas.RulesetsRuleset & {
    kind: Schemas.RulesetsRulesetKind;
    phase: Schemas.RulesetsRulesetPhase;
    rules: Schemas.RulesetsResponseRules;
  };
  /**
   * Whether the API call was successful.
   */
  success: true;
};

/**
 * A response object.
 */
export type RulesetsRulesets = {
  errors: Schemas.RulesetsErrors;
  messages: Schemas.RulesetsMessages;
  /**
   * A list of rulesets. The returned information will not include the rules in each ruleset.
   */
  result: (Schemas.RulesetsRuleset & {
    kind: Schemas.RulesetsRulesetKind;
    phase: Schemas.RulesetsRulesetPhase;
  })[];
  /**
   * Whether the API call was successful.
   */
  success: true;
  result_info?: Schemas.RulesetsResultInfo;
};

/**
 * A response object.
 */
export type RulesetsUrlNormalization = {
  errors: Schemas.RulesetsErrors;
  messages: Schemas.RulesetsMessages;
  /**
   * A result.
   */
  result: Schemas.RulesetsUrlNormalization;
  /**
   * Whether the API call was successful.
   */
  success: true;
};

/**
 * A response object.
 */
export type SnippetsFailure = {
  errors: Schemas.SnippetsErrors;
  messages: Schemas.SnippetsMessages;
  /**
   * A result.
   *
   * @x-auditable true
   */
  result: any;
  /**
   * Whether the API call was successful.
   *
   * @x-auditable true
   */
  success: false;
};

/**
 * A response object.
 */
export type SnippetsNull = {
  errors: Schemas.SnippetsErrors;
  messages: Schemas.SnippetsMessages;
  /**
   * A result.
   *
   * @x-auditable true
   */
  result: any;
  /**
   * Whether the API call was successful.
   *
   * @x-auditable true
   */
  success: true;
};

/**
 * A response object.
 */
export type SnippetsSnippet = {
  errors: Schemas.SnippetsErrors;
  messages: Schemas.SnippetsMessages;
  /**
   * A result.
   */
  result: Schemas.SnippetsSnippet;
  /**
   * Whether the API call was successful.
   *
   * @x-auditable true
   */
  success: true;
};

/**
 * A snippet content response object.
 */
export type SnippetsSnippetContent = {
  [key: string]: Schemas.SnippetsSnippetFiles;
};

/**
 * A response object.
 */
export type SnippetsSnippetRules = {
  errors: Schemas.SnippetsErrors;
  messages: Schemas.SnippetsMessages;
  /**
   * A result.
   */
  result: Schemas.SnippetsSnippetRules;
  /**
   * Whether the API call was successful.
   *
   * @x-auditable true
   */
  success: true;
};

/**
 * A response object.
 */
export type SnippetsSnippets = {
  errors: Schemas.SnippetsErrors;
  messages: Schemas.SnippetsMessages;
  /**
   * A list of snippets.
   */
  result: Schemas.SnippetsSnippet[];
  /**
   * Whether the API call was successful.
   *
   * @x-auditable true
   */
  success: true;
  result_info?: Schemas.SnippetsResultInfo;
};

/**
 * @example {"errors":[],"messages":[],"result":{"created_on":"2022-05-05T05:15:11.602148Z","etag":"777f24a43bef5f69174aa69ceaf1dea67968d510a31d1vw3e49d34a0187c06d1","handlers":["fetch"],"id":"this-is_my_script-01","logpush":false,"modified_on":"2022-05-20T19:02:56.446492Z","placement_mode":"smart","startup_time_ms":10,"tail_consumers":[{"environment":"production","service":"my-log-consumer"}],"usage_model":"standard"},"success":true}
 */
export type Workers200 = Schemas.WorkersScriptResponseUploadSingle &
  Record<string, any>;

export type Workers4XX = Schemas.WorkersApiResponseCommonFailure;

export type WorkersErrorAuth = {
  /**
   * @example {"code":7003,"message":"No route for the URI"}
   * @minLength 1
   */
  errors: Schemas.WorkersMessages;
  messages: Schemas.WorkersMessages;
  result: any | null;
  /**
   * Whether the API call was successful.
   *
   * @example false
   */
  success?: false;
};

export type WorkersErrorInternalServer = {
  /**
   * @example {"code":7003,"message":"No route for the URI"}
   * @minLength 1
   */
  errors: Schemas.WorkersMessages;
  messages: Schemas.WorkersMessages;
  result: any | null;
  /**
   * Whether the API call was successful.
   *
   * @example false
   */
  success?: false;
};

export type WorkersErrorWorkerNotFound = {
  /**
   * @example {"code":7003,"message":"No route for the URI"}
   * @minLength 1
   */
  errors: Schemas.WorkersMessages;
  messages: Schemas.WorkersMessages;
  result: any | null;
  /**
   * Whether the API call was successful.
   *
   * @example false
   */
  success?: false;
};
