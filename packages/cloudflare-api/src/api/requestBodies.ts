/**
 * Generated by @openapi-codegen
 *
 * @version 4.0.0
 */
import type * as Schemas from './schemas';

/**
 * A ruleset object.
 */
export type RulesetsCreateRuleset = Schemas.RulesetsRuleset & {
  kind: Schemas.RulesetsRulesetKind;
  phase: Schemas.RulesetsRulesetPhase;
  rules: Schemas.RulesetsRequestRules;
};

export type RulesetsManagedTransforms = Schemas.RulesetsManagedTransforms;

export type RulesetsRule = Schemas.RulesetsRequestRule & {
  position?:
    | (Schemas.RulesetsRulePosition & {
        /**
         * The ID of another rule to place the rule before. An empty value causes the rule to be placed at the top.
         *
         * @example da5e8e506c8e7877fe06cdf4c41add54
         * @pattern ^(?:[0-9a-f]{32})?$
         */
        before?: string;
      })
    | (Schemas.RulesetsRulePosition & {
        /**
         * The ID of another rule to place the rule after. An empty value causes the rule to be placed at the bottom.
         *
         * @example 5bccdbb2a5142cd25cad8591255bd209
         * @pattern ^(?:[0-9a-f]{32})?$
         */
        after?: string;
      })
    | (Schemas.RulesetsRulePosition & {
        /**
         * An index at which to place the rule, where index 1 is the first rule.
         *
         * @example 1
         * @minimum 1
         */
        index?: number;
      });
};

/**
 * A ruleset object.
 */
export type RulesetsUpdateEntrypointRuleset = Schemas.RulesetsRuleset & {
  rules: Schemas.RulesetsRequestRules;
};

/**
 * A ruleset object.
 */
export type RulesetsUpdateRuleset = Schemas.RulesetsRuleset & {
  kind?: Schemas.RulesetsRulesetKind;
  phase?: Schemas.RulesetsRulesetPhase;
  rules: Schemas.RulesetsRequestRules;
};

export type RulesetsUrlNormalization = Schemas.RulesetsUrlNormalization;

export type WorkersScriptUpload =
  | ({
      /**
       * JSON encoded metadata about the uploaded parts and Worker configuration.
       */
      metadata: {
        /**
         * Configuration for assets within a Worker
         */
        assets?: {
          /**
           * Configuration for assets within a Worker.
           */
          config?: {
            /**
             * Determines the redirects and rewrites of requests for HTML content.
             *
             * @example auto-trailing-slash
             */
            html_handling?: 'auto-trailing-slash' | 'force-trailing-slash' | 'drop-trailing-slash' | 'none';
            /**
             * Determines the response when a request does not match a static asset, and there is no Worker script.
             *
             * @example 404-page
             */
            not_found_handling?: 'none' | '404-page' | 'single-page-application';
            /**
             * When true and the incoming request matches an asset, that will be served instead of invoking the Worker script. When false, requests will always invoke the Worker script.
             *
             * @default true
             * @example true
             */
            serve_directly?: boolean;
          };
          /**
           * Token provided upon successful upload of all files from a registered manifest.
           */
          jwt?: string;
        };
        /**
         * List of bindings available to the worker.
         *
         * @example {"name":"MY_ENV_VAR","text":"my_data","type":"plain_text"}
         */
        bindings?: ({
          /**
           * Name of the binding variable.
           */
          name?: string;
          /**
           * Type of binding. You can find more about bindings on our docs: https://developers.cloudflare.com/workers/configuration/multipart-upload-metadata/#bindings.
           */
          type?: string;
        } & {
          [key: string]: void;
        })[];
        /**
         * Name of the part in the multipart request that contains the script (e.g. the file adding a listener to the `fetch` event). Indicates a `service worker syntax` Worker.
         *
         * @example worker.js
         */
        body_part?: string;
        compatibility_date?: Schemas.WorkersCompatibilityDate;
        compatibility_flags?: Schemas.WorkersCompatibilityFlags;
        /**
         * Retain assets which exist for a previously uploaded Worker version; used in lieu of providing a completion token.
         *
         * @example false
         */
        keep_assets?: boolean;
        /**
         * List of binding types to keep from previous_upload.
         */
        keep_bindings?: string[];
        logpush?: Schemas.WorkersLogpush;
        /**
         * Name of the part in the multipart request that contains the main module (e.g. the file exporting a `fetch` handler). Indicates a `module syntax` Worker.
         *
         * @example worker.js
         */
        main_module?: string;
        /**
         * Migrations to apply for Durable Objects associated with this Worker.
         */
        migrations?: Schemas.WorkersSingleStepMigrations | Schemas.WorkersMultipleStepMigrations;
        observability?: Schemas.WorkersObservability;
        placement?: Schemas.WorkersPlacementConfig;
        /**
         * List of strings to use as tags for this Worker.
         */
        tags?: string[];
        tail_consumers?: Schemas.WorkersTailConsumers;
        usage_model?: Schemas.WorkersUsageModel;
        /**
         * Key-value pairs to use as tags for this version of this Worker.
         */
        version_tags?: {
          [key: string]: string;
        };
      };
    } & {
      [key: string]: Blob[];
    })
  | {
      /**
       * Rollback message to be associated with this deployment. Only parsed when query param `"rollback_to"` is present.
       *
       * @example Message about the rollback.
       */
      message?: string;
    };

export type WorkersVersionPost = {
  /**
   * JSON encoded metadata about the uploaded parts and Worker configuration.
   */
  metadata: {
    annotations?: {
      /**
       * Human-readable message about the version. Truncated to 100 bytes.
       *
       * @example Fixed worker code.
       * @maxLength 100
       */
      ['workers/message']?: string;
      /**
       * User-provided identifier for the version.
       *
       * @example any-identifier-from-external-system
       * @maxLength 25
       */
      ['workers/tag']?: string;
    };
    /**
     * List of bindings available to the worker.
     *
     * @example {"name":"MY_ENV_VAR","text":"my_data","type":"plain_text"}
     */
    bindings?: Record<string, any>[];
    /**
     * Date indicating targeted support in the Workers runtime. Backwards incompatible fixes to the runtime following this date will not affect this Worker.
     *
     * @example 2023-07-25
     */
    compatibility_date?: string;
    /**
     * Flags that enable or disable certain features in the Workers runtime. Used to enable upcoming features or opt in or out of specific changes not included in a `compatibility_date`.
     */
    compatibility_flags?: string[];
    /**
     * List of binding types to keep from previous_upload.
     */
    keep_bindings?: string[];
    /**
     * Name of the part in the multipart request that contains the main module (e.g. the file exporting a `fetch` handler). Indicates a `module syntax` Worker.
     *
     * @example worker.js
     */
    main_module?: string;
    /**
     * Usage model to apply to invocations.
     */
    usage_model?: 'standard';
  };
} & {
  [key: string]: Blob[];
};
